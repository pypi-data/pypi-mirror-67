# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBayesianClassifierInitializationImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBayesianClassifierInitializationImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBayesianClassifierInitializationImageFilterPython
            return _itkBayesianClassifierInitializationImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBayesianClassifierInitializationImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBayesianClassifierInitializationImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBayesianClassifierInitializationImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkBayesianClassifierInitializationImageFilterID3D_New():
  return itkBayesianClassifierInitializationImageFilterID3D.New()


def itkBayesianClassifierInitializationImageFilterID3F_New():
  return itkBayesianClassifierInitializationImageFilterID3F.New()


def itkBayesianClassifierInitializationImageFilterIF3D_New():
  return itkBayesianClassifierInitializationImageFilterIF3D.New()


def itkBayesianClassifierInitializationImageFilterIF3F_New():
  return itkBayesianClassifierInitializationImageFilterIF3F.New()


def itkBayesianClassifierInitializationImageFilterIUS3D_New():
  return itkBayesianClassifierInitializationImageFilterIUS3D.New()


def itkBayesianClassifierInitializationImageFilterIUS3F_New():
  return itkBayesianClassifierInitializationImageFilterIUS3F.New()


def itkBayesianClassifierInitializationImageFilterIUC3D_New():
  return itkBayesianClassifierInitializationImageFilterIUC3D.New()


def itkBayesianClassifierInitializationImageFilterIUC3F_New():
  return itkBayesianClassifierInitializationImageFilterIUC3F.New()


def itkBayesianClassifierInitializationImageFilterISS3D_New():
  return itkBayesianClassifierInitializationImageFilterISS3D.New()


def itkBayesianClassifierInitializationImageFilterISS3F_New():
  return itkBayesianClassifierInitializationImageFilterISS3F.New()


def itkBayesianClassifierInitializationImageFilterID2D_New():
  return itkBayesianClassifierInitializationImageFilterID2D.New()


def itkBayesianClassifierInitializationImageFilterID2F_New():
  return itkBayesianClassifierInitializationImageFilterID2F.New()


def itkBayesianClassifierInitializationImageFilterIF2D_New():
  return itkBayesianClassifierInitializationImageFilterIF2D.New()


def itkBayesianClassifierInitializationImageFilterIF2F_New():
  return itkBayesianClassifierInitializationImageFilterIF2F.New()


def itkBayesianClassifierInitializationImageFilterIUS2D_New():
  return itkBayesianClassifierInitializationImageFilterIUS2D.New()


def itkBayesianClassifierInitializationImageFilterIUS2F_New():
  return itkBayesianClassifierInitializationImageFilterIUS2F.New()


def itkBayesianClassifierInitializationImageFilterIUC2D_New():
  return itkBayesianClassifierInitializationImageFilterIUC2D.New()


def itkBayesianClassifierInitializationImageFilterIUC2F_New():
  return itkBayesianClassifierInitializationImageFilterIUC2F.New()


def itkBayesianClassifierInitializationImageFilterISS2D_New():
  return itkBayesianClassifierInitializationImageFilterISS2D.New()


def itkBayesianClassifierInitializationImageFilterISS2F_New():
  return itkBayesianClassifierInitializationImageFilterISS2F.New()

class itkBayesianClassifierInitializationImageFilterID2D(itkImageToImageFilterBPython.itkImageToImageFilterID2VID2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterID2D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterID2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterID2D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterID2D self) -> itkBayesianClassifierInitializationImageFilterID2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterID2D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID2D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID2D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterID2D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID2D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID2D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID2D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterID2D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_Clone, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_swigregister
itkBayesianClassifierInitializationImageFilterID2D_swigregister(itkBayesianClassifierInitializationImageFilterID2D)

def itkBayesianClassifierInitializationImageFilterID2D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterID2D_Pointer":
    """itkBayesianClassifierInitializationImageFilterID2D___New_orig__() -> itkBayesianClassifierInitializationImageFilterID2D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D___New_orig__()

def itkBayesianClassifierInitializationImageFilterID2D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID2D *":
    """itkBayesianClassifierInitializationImageFilterID2D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID2D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_cast(obj)

class itkBayesianClassifierInitializationImageFilterID2F(itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterID2F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterID2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterID2F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterID2F self) -> itkBayesianClassifierInitializationImageFilterID2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterID2F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID2F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID2F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterID2F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID2F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID2F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID2F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterID2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterID2F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_Clone, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_swigregister
itkBayesianClassifierInitializationImageFilterID2F_swigregister(itkBayesianClassifierInitializationImageFilterID2F)

def itkBayesianClassifierInitializationImageFilterID2F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterID2F_Pointer":
    """itkBayesianClassifierInitializationImageFilterID2F___New_orig__() -> itkBayesianClassifierInitializationImageFilterID2F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F___New_orig__()

def itkBayesianClassifierInitializationImageFilterID2F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID2F *":
    """itkBayesianClassifierInitializationImageFilterID2F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID2F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_cast(obj)

class itkBayesianClassifierInitializationImageFilterID3D(itkImageToImageFilterBPython.itkImageToImageFilterID3VID3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterID3D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterID3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterID3D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterID3D self) -> itkBayesianClassifierInitializationImageFilterID3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterID3D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID3D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID3D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterID3D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID3D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID3D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID3D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterID3D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_Clone, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_swigregister
itkBayesianClassifierInitializationImageFilterID3D_swigregister(itkBayesianClassifierInitializationImageFilterID3D)

def itkBayesianClassifierInitializationImageFilterID3D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterID3D_Pointer":
    """itkBayesianClassifierInitializationImageFilterID3D___New_orig__() -> itkBayesianClassifierInitializationImageFilterID3D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D___New_orig__()

def itkBayesianClassifierInitializationImageFilterID3D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID3D *":
    """itkBayesianClassifierInitializationImageFilterID3D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID3D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_cast(obj)

class itkBayesianClassifierInitializationImageFilterID3F(itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterID3F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterID3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterID3F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterID3F self) -> itkBayesianClassifierInitializationImageFilterID3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterID3F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterID3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< double,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID3F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterID3F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterID3F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID3F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID3F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID3F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterID3F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_Clone, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_swigregister
itkBayesianClassifierInitializationImageFilterID3F_swigregister(itkBayesianClassifierInitializationImageFilterID3F)

def itkBayesianClassifierInitializationImageFilterID3F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterID3F_Pointer":
    """itkBayesianClassifierInitializationImageFilterID3F___New_orig__() -> itkBayesianClassifierInitializationImageFilterID3F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F___New_orig__()

def itkBayesianClassifierInitializationImageFilterID3F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterID3F *":
    """itkBayesianClassifierInitializationImageFilterID3F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterID3F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIF2D(itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF2D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIF2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIF2D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIF2D self) -> itkBayesianClassifierInitializationImageFilterIF2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIF2D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF2D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF2D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIF2D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF2D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF2D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF2D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIF2D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_Clone, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_swigregister
itkBayesianClassifierInitializationImageFilterIF2D_swigregister(itkBayesianClassifierInitializationImageFilterIF2D)

def itkBayesianClassifierInitializationImageFilterIF2D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF2D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIF2D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIF2D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIF2D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF2D *":
    """itkBayesianClassifierInitializationImageFilterIF2D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF2D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIF2F(itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF2F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIF2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIF2F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIF2F self) -> itkBayesianClassifierInitializationImageFilterIF2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIF2F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF2F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF2F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIF2F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF2F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF2F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF2F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIF2F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_Clone, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_swigregister
itkBayesianClassifierInitializationImageFilterIF2F_swigregister(itkBayesianClassifierInitializationImageFilterIF2F)

def itkBayesianClassifierInitializationImageFilterIF2F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF2F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIF2F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIF2F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIF2F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF2F *":
    """itkBayesianClassifierInitializationImageFilterIF2F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF2F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIF3D(itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF3D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIF3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIF3D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIF3D self) -> itkBayesianClassifierInitializationImageFilterIF3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIF3D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF3D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF3D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIF3D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF3D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF3D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF3D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIF3D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_Clone, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_swigregister
itkBayesianClassifierInitializationImageFilterIF3D_swigregister(itkBayesianClassifierInitializationImageFilterIF3D)

def itkBayesianClassifierInitializationImageFilterIF3D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF3D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIF3D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIF3D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIF3D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF3D *":
    """itkBayesianClassifierInitializationImageFilterIF3D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF3D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIF3F(itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF3F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIF3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIF3F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIF3F self) -> itkBayesianClassifierInitializationImageFilterIF3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIF3F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIF3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF3F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIF3F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIF3F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF3F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF3F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF3F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIF3F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_Clone, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_swigregister
itkBayesianClassifierInitializationImageFilterIF3F_swigregister(itkBayesianClassifierInitializationImageFilterIF3F)

def itkBayesianClassifierInitializationImageFilterIF3F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIF3F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIF3F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIF3F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIF3F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIF3F *":
    """itkBayesianClassifierInitializationImageFilterIF3F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIF3F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_cast(obj)

class itkBayesianClassifierInitializationImageFilterISS2D(itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS2D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterISS2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterISS2D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterISS2D self) -> itkBayesianClassifierInitializationImageFilterISS2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterISS2D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS2D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS2D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterISS2D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS2D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS2D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS2D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterISS2D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_Clone, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_swigregister
itkBayesianClassifierInitializationImageFilterISS2D_swigregister(itkBayesianClassifierInitializationImageFilterISS2D)

def itkBayesianClassifierInitializationImageFilterISS2D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS2D_Pointer":
    """itkBayesianClassifierInitializationImageFilterISS2D___New_orig__() -> itkBayesianClassifierInitializationImageFilterISS2D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D___New_orig__()

def itkBayesianClassifierInitializationImageFilterISS2D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS2D *":
    """itkBayesianClassifierInitializationImageFilterISS2D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS2D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_cast(obj)

class itkBayesianClassifierInitializationImageFilterISS2F(itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS2F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterISS2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterISS2F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterISS2F self) -> itkBayesianClassifierInitializationImageFilterISS2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterISS2F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS2F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS2F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterISS2F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS2F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS2F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS2F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterISS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterISS2F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_Clone, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_swigregister
itkBayesianClassifierInitializationImageFilterISS2F_swigregister(itkBayesianClassifierInitializationImageFilterISS2F)

def itkBayesianClassifierInitializationImageFilterISS2F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS2F_Pointer":
    """itkBayesianClassifierInitializationImageFilterISS2F___New_orig__() -> itkBayesianClassifierInitializationImageFilterISS2F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F___New_orig__()

def itkBayesianClassifierInitializationImageFilterISS2F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS2F *":
    """itkBayesianClassifierInitializationImageFilterISS2F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS2F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_cast(obj)

class itkBayesianClassifierInitializationImageFilterISS3D(itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS3D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterISS3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterISS3D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterISS3D self) -> itkBayesianClassifierInitializationImageFilterISS3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterISS3D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS3D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS3D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterISS3D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS3D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS3D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS3D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterISS3D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_Clone, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_swigregister
itkBayesianClassifierInitializationImageFilterISS3D_swigregister(itkBayesianClassifierInitializationImageFilterISS3D)

def itkBayesianClassifierInitializationImageFilterISS3D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS3D_Pointer":
    """itkBayesianClassifierInitializationImageFilterISS3D___New_orig__() -> itkBayesianClassifierInitializationImageFilterISS3D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D___New_orig__()

def itkBayesianClassifierInitializationImageFilterISS3D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS3D *":
    """itkBayesianClassifierInitializationImageFilterISS3D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS3D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_cast(obj)

class itkBayesianClassifierInitializationImageFilterISS3F(itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS3F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterISS3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterISS3F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterISS3F self) -> itkBayesianClassifierInitializationImageFilterISS3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterISS3F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterISS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS3F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterISS3F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterISS3F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS3F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS3F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS3F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterISS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterISS3F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_Clone, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_swigregister
itkBayesianClassifierInitializationImageFilterISS3F_swigregister(itkBayesianClassifierInitializationImageFilterISS3F)

def itkBayesianClassifierInitializationImageFilterISS3F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterISS3F_Pointer":
    """itkBayesianClassifierInitializationImageFilterISS3F___New_orig__() -> itkBayesianClassifierInitializationImageFilterISS3F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F___New_orig__()

def itkBayesianClassifierInitializationImageFilterISS3F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterISS3F *":
    """itkBayesianClassifierInitializationImageFilterISS3F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterISS3F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUC2D(itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC2D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUC2D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUC2D self) -> itkBayesianClassifierInitializationImageFilterIUC2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUC2D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC2D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC2D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUC2D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC2D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC2D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC2D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUC2D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_Clone, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_swigregister
itkBayesianClassifierInitializationImageFilterIUC2D_swigregister(itkBayesianClassifierInitializationImageFilterIUC2D)

def itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC2D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC2D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUC2D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC2D *":
    """itkBayesianClassifierInitializationImageFilterIUC2D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC2D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUC2F(itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC2F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUC2F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUC2F self) -> itkBayesianClassifierInitializationImageFilterIUC2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUC2F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC2F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC2F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUC2F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC2F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC2F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC2F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUC2F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_Clone, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_swigregister
itkBayesianClassifierInitializationImageFilterIUC2F_swigregister(itkBayesianClassifierInitializationImageFilterIUC2F)

def itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC2F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC2F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUC2F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC2F *":
    """itkBayesianClassifierInitializationImageFilterIUC2F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC2F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUC3D(itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC3D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUC3D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUC3D self) -> itkBayesianClassifierInitializationImageFilterIUC3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUC3D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC3D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC3D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUC3D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC3D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC3D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC3D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUC3D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_Clone, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_swigregister
itkBayesianClassifierInitializationImageFilterIUC3D_swigregister(itkBayesianClassifierInitializationImageFilterIUC3D)

def itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC3D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC3D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUC3D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC3D *":
    """itkBayesianClassifierInitializationImageFilterIUC3D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC3D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUC3F(itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC3F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUC3F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUC3F self) -> itkBayesianClassifierInitializationImageFilterIUC3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUC3F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUC3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned char,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC3F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUC3F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUC3F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC3F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC3F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC3F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUC3F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_Clone, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_swigregister
itkBayesianClassifierInitializationImageFilterIUC3F_swigregister(itkBayesianClassifierInitializationImageFilterIUC3F)

def itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUC3F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUC3F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUC3F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUC3F *":
    """itkBayesianClassifierInitializationImageFilterIUC3F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUC3F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUS2D(itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS2D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUS2D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUS2D self) -> itkBayesianClassifierInitializationImageFilterIUS2D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUS2D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS2D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS2D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUS2D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS2D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS2D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS2D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUS2D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_Clone, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_swigregister
itkBayesianClassifierInitializationImageFilterIUS2D_swigregister(itkBayesianClassifierInitializationImageFilterIUS2D)

def itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS2D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS2D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUS2D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS2D *":
    """itkBayesianClassifierInitializationImageFilterIUS2D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS2D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUS2F(itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS2F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUS2F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUS2F self) -> itkBayesianClassifierInitializationImageFilterIUS2F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUS2F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS2F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS2F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS2F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUS2F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS2F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS2F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS2F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUS2F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_Clone, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_swigregister
itkBayesianClassifierInitializationImageFilterIUS2F_swigregister(itkBayesianClassifierInitializationImageFilterIUS2F)

def itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS2F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS2F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUS2F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS2F *":
    """itkBayesianClassifierInitializationImageFilterIUS2F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS2F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUS3D(itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS3D_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUS3D_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUS3D self) -> itkBayesianClassifierInitializationImageFilterIUS3D_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUS3D self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3D self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS3D self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS3D self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUS3D self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS3D

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS3D *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS3D"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUS3D.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_Clone, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_swigregister
itkBayesianClassifierInitializationImageFilterIUS3D_swigregister(itkBayesianClassifierInitializationImageFilterIUS3D)

def itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS3D_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS3D_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUS3D_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS3D *":
    """itkBayesianClassifierInitializationImageFilterIUS3D_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS3D"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_cast(obj)

class itkBayesianClassifierInitializationImageFilterIUS3F(itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3):
    """


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage

    C++ includes: itkBayesianClassifierInitializationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS3F_Pointer":
        """__New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierInitializationImageFilterIUS3F_Pointer":
        """Clone(itkBayesianClassifierInitializationImageFilterIUS3F self) -> itkBayesianClassifierInitializationImageFilterIUS3F_Pointer"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_Clone(self)


    def SetMembershipFunctions(self, densityFunctionContainer: 'itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *') -> "void":
        """
        SetMembershipFunctions(itkBayesianClassifierInitializationImageFilterIUS3F self, itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > * densityFunctionContainer)

        Method to
        set/get the density functions. Here you can set a vector container of
        density functions. If no density functions are specified, the filter
        will create ones for you. These default density functions are Gaussian
        density functions centered around the K-means of the input image. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetMembershipFunctions(self, densityFunctionContainer)


    def GetModifiableMembershipFunctionContainer(self) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """GetModifiableMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetModifiableMembershipFunctionContainer(self)


    def GetMembershipFunctionContainer(self, *args) -> "itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *":
        """
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > const
        GetMembershipFunctionContainer(itkBayesianClassifierInitializationImageFilterIUS3F self) -> itk::VectorContainer< unsigned int,itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< unsigned short,1 > > > > *
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetMembershipFunctionContainer(self, *args)


    def SetNumberOfClasses(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS3F self, unsigned int const _arg)

        Set/Get methods
        for the number of classes. The user must supply this. 
        """
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetNumberOfClasses(self, _arg)


    def GetNumberOfClasses(self) -> "unsigned int":
        """GetNumberOfClasses(itkBayesianClassifierInitializationImageFilterIUS3F self) -> unsigned int"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetNumberOfClasses(self)


    def GenerateOutputInformation(self) -> "void":
        """GenerateOutputInformation(itkBayesianClassifierInitializationImageFilterIUS3F self)"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GenerateOutputInformation(self)

    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_InputMultiplyOperatorCheck
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_DoubleConvertibleToProbabilityCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_InputHasNumericTraitsCheck
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_ProbabilityHasNumericTraitsCheck
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_DoublePlusInputCheck
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS3F

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS3F *":
        """cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS3F"""
        return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierInitializationImageFilterIUS3F.Clone = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_Clone, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.SetMembershipFunctions = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetMembershipFunctions, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.GetModifiableMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetModifiableMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.GetMembershipFunctionContainer = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetMembershipFunctionContainer, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.SetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.GetNumberOfClasses = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetNumberOfClasses, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F.GenerateOutputInformation = new_instancemethod(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GenerateOutputInformation, None, itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F_swigregister = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_swigregister
itkBayesianClassifierInitializationImageFilterIUS3F_swigregister(itkBayesianClassifierInitializationImageFilterIUS3F)

def itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__() -> "itkBayesianClassifierInitializationImageFilterIUS3F_Pointer":
    """itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__() -> itkBayesianClassifierInitializationImageFilterIUS3F_Pointer"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__()

def itkBayesianClassifierInitializationImageFilterIUS3F_cast(obj: 'itkLightObject') -> "itkBayesianClassifierInitializationImageFilterIUS3F *":
    """itkBayesianClassifierInitializationImageFilterIUS3F_cast(itkLightObject obj) -> itkBayesianClassifierInitializationImageFilterIUS3F"""
    return _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bayesian_classifier_initialization_image_filter(*args, **kwargs):
    """Procedural interface for BayesianClassifierInitializationImageFilter"""
    import itk
    instance = itk.BayesianClassifierInitializationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def bayesian_classifier_initialization_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BayesianClassifierInitializationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BayesianClassifierInitializationImageFilter.values()[0]
    else:
        filter_object = itk.BayesianClassifierInitializationImageFilter

    bayesian_classifier_initialization_image_filter.__doc__ = filter_object.__doc__
    bayesian_classifier_initialization_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    bayesian_classifier_initialization_image_filter.__doc__ += "Available Keyword Arguments:\n"
    bayesian_classifier_initialization_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



