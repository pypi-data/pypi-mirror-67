# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLabelVotingImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLabelVotingImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkLabelVotingImageFilterPython
            return _itkLabelVotingImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLabelVotingImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLabelVotingImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLabelVotingImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkLabelVotingImageFilterIUS3IUS3_New():
  return itkLabelVotingImageFilterIUS3IUS3.New()


def itkLabelVotingImageFilterIUS2IUS2_New():
  return itkLabelVotingImageFilterIUS2IUS2.New()


def itkLabelVotingImageFilterIUC3IUC3_New():
  return itkLabelVotingImageFilterIUC3IUC3.New()


def itkLabelVotingImageFilterIUC2IUC2_New():
  return itkLabelVotingImageFilterIUC2IUC2.New()

class itkLabelVotingImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program

    C++ includes: itkLabelVotingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelVotingImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkLabelVotingImageFilterIUC2IUC2_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelVotingImageFilterIUC2IUC2_Pointer":
        """Clone(itkLabelVotingImageFilterIUC2IUC2 self) -> itkLabelVotingImageFilterIUC2IUC2_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_Clone(self)


    def SetLabelForUndecidedPixels(self, l: 'unsigned char const') -> "void":
        """
        SetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC2IUC2 self, unsigned char const l)

        Set
        label value for undecided pixels. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_SetLabelForUndecidedPixels(self, l)


    def GetLabelForUndecidedPixels(self) -> "unsigned char":
        """
        GetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC2IUC2 self) -> unsigned char

        Get
        label value used for undecided pixels. After updating the filter, this
        function returns the actual label value used for undecided pixels in
        the current output. Note that this value is overwritten when
        SetLabelForUndecidedPixels is called and the new value only becomes
        effective upon the next filter update. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_GetLabelForUndecidedPixels(self)


    def UnsetLabelForUndecidedPixels(self) -> "void":
        """
        UnsetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC2IUC2 self)

        Unset
        label value for undecided pixels and turn on automatic selection. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_UnsetLabelForUndecidedPixels(self)

    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_IntConvertibleToInputCheck
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_SameDimensionCheck
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputUnsignedIntCheck
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_IntConvertibleToOutputPixelType
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputPlusIntCheck
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputIncrementDecrementOperatorsCheck
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkLabelVotingImageFilterIUC2IUC2"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUC2IUC2

        Create a new object of the class itkLabelVotingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelVotingImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelVotingImageFilterIUC2IUC2.Clone = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_Clone, None, itkLabelVotingImageFilterIUC2IUC2)
itkLabelVotingImageFilterIUC2IUC2.SetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_SetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC2IUC2)
itkLabelVotingImageFilterIUC2IUC2.GetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_GetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC2IUC2)
itkLabelVotingImageFilterIUC2IUC2.UnsetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_UnsetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC2IUC2)
itkLabelVotingImageFilterIUC2IUC2_swigregister = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_swigregister
itkLabelVotingImageFilterIUC2IUC2_swigregister(itkLabelVotingImageFilterIUC2IUC2)

def itkLabelVotingImageFilterIUC2IUC2___New_orig__() -> "itkLabelVotingImageFilterIUC2IUC2_Pointer":
    """itkLabelVotingImageFilterIUC2IUC2___New_orig__() -> itkLabelVotingImageFilterIUC2IUC2_Pointer"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2___New_orig__()

def itkLabelVotingImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUC2IUC2 *":
    """itkLabelVotingImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkLabelVotingImageFilterIUC2IUC2"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_cast(obj)

class itkLabelVotingImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program

    C++ includes: itkLabelVotingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelVotingImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkLabelVotingImageFilterIUC3IUC3_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelVotingImageFilterIUC3IUC3_Pointer":
        """Clone(itkLabelVotingImageFilterIUC3IUC3 self) -> itkLabelVotingImageFilterIUC3IUC3_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_Clone(self)


    def SetLabelForUndecidedPixels(self, l: 'unsigned char const') -> "void":
        """
        SetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC3IUC3 self, unsigned char const l)

        Set
        label value for undecided pixels. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_SetLabelForUndecidedPixels(self, l)


    def GetLabelForUndecidedPixels(self) -> "unsigned char":
        """
        GetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC3IUC3 self) -> unsigned char

        Get
        label value used for undecided pixels. After updating the filter, this
        function returns the actual label value used for undecided pixels in
        the current output. Note that this value is overwritten when
        SetLabelForUndecidedPixels is called and the new value only becomes
        effective upon the next filter update. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_GetLabelForUndecidedPixels(self)


    def UnsetLabelForUndecidedPixels(self) -> "void":
        """
        UnsetLabelForUndecidedPixels(itkLabelVotingImageFilterIUC3IUC3 self)

        Unset
        label value for undecided pixels and turn on automatic selection. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_UnsetLabelForUndecidedPixels(self)

    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_IntConvertibleToInputCheck
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_SameDimensionCheck
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputUnsignedIntCheck
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_IntConvertibleToOutputPixelType
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputPlusIntCheck
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputIncrementDecrementOperatorsCheck
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkLabelVotingImageFilterIUC3IUC3"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUC3IUC3

        Create a new object of the class itkLabelVotingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelVotingImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelVotingImageFilterIUC3IUC3.Clone = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_Clone, None, itkLabelVotingImageFilterIUC3IUC3)
itkLabelVotingImageFilterIUC3IUC3.SetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_SetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC3IUC3)
itkLabelVotingImageFilterIUC3IUC3.GetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_GetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC3IUC3)
itkLabelVotingImageFilterIUC3IUC3.UnsetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_UnsetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUC3IUC3)
itkLabelVotingImageFilterIUC3IUC3_swigregister = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_swigregister
itkLabelVotingImageFilterIUC3IUC3_swigregister(itkLabelVotingImageFilterIUC3IUC3)

def itkLabelVotingImageFilterIUC3IUC3___New_orig__() -> "itkLabelVotingImageFilterIUC3IUC3_Pointer":
    """itkLabelVotingImageFilterIUC3IUC3___New_orig__() -> itkLabelVotingImageFilterIUC3IUC3_Pointer"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3___New_orig__()

def itkLabelVotingImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUC3IUC3 *":
    """itkLabelVotingImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkLabelVotingImageFilterIUC3IUC3"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_cast(obj)

class itkLabelVotingImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program

    C++ includes: itkLabelVotingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelVotingImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkLabelVotingImageFilterIUS2IUS2_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelVotingImageFilterIUS2IUS2_Pointer":
        """Clone(itkLabelVotingImageFilterIUS2IUS2 self) -> itkLabelVotingImageFilterIUS2IUS2_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_Clone(self)


    def SetLabelForUndecidedPixels(self, l: 'unsigned short const') -> "void":
        """
        SetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS2IUS2 self, unsigned short const l)

        Set
        label value for undecided pixels. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_SetLabelForUndecidedPixels(self, l)


    def GetLabelForUndecidedPixels(self) -> "unsigned short":
        """
        GetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS2IUS2 self) -> unsigned short

        Get
        label value used for undecided pixels. After updating the filter, this
        function returns the actual label value used for undecided pixels in
        the current output. Note that this value is overwritten when
        SetLabelForUndecidedPixels is called and the new value only becomes
        effective upon the next filter update. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_GetLabelForUndecidedPixels(self)


    def UnsetLabelForUndecidedPixels(self) -> "void":
        """
        UnsetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS2IUS2 self)

        Unset
        label value for undecided pixels and turn on automatic selection. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_UnsetLabelForUndecidedPixels(self)

    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_IntConvertibleToInputCheck
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_SameDimensionCheck
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputUnsignedIntCheck
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_IntConvertibleToOutputPixelType
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputPlusIntCheck
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputIncrementDecrementOperatorsCheck
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkLabelVotingImageFilterIUS2IUS2"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUS2IUS2

        Create a new object of the class itkLabelVotingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelVotingImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelVotingImageFilterIUS2IUS2.Clone = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_Clone, None, itkLabelVotingImageFilterIUS2IUS2)
itkLabelVotingImageFilterIUS2IUS2.SetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_SetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS2IUS2)
itkLabelVotingImageFilterIUS2IUS2.GetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_GetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS2IUS2)
itkLabelVotingImageFilterIUS2IUS2.UnsetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_UnsetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS2IUS2)
itkLabelVotingImageFilterIUS2IUS2_swigregister = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_swigregister
itkLabelVotingImageFilterIUS2IUS2_swigregister(itkLabelVotingImageFilterIUS2IUS2)

def itkLabelVotingImageFilterIUS2IUS2___New_orig__() -> "itkLabelVotingImageFilterIUS2IUS2_Pointer":
    """itkLabelVotingImageFilterIUS2IUS2___New_orig__() -> itkLabelVotingImageFilterIUS2IUS2_Pointer"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2___New_orig__()

def itkLabelVotingImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUS2IUS2 *":
    """itkLabelVotingImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkLabelVotingImageFilterIUS2IUS2"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_cast(obj)

class itkLabelVotingImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program

    C++ includes: itkLabelVotingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelVotingImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkLabelVotingImageFilterIUS3IUS3_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelVotingImageFilterIUS3IUS3_Pointer":
        """Clone(itkLabelVotingImageFilterIUS3IUS3 self) -> itkLabelVotingImageFilterIUS3IUS3_Pointer"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_Clone(self)


    def SetLabelForUndecidedPixels(self, l: 'unsigned short const') -> "void":
        """
        SetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS3IUS3 self, unsigned short const l)

        Set
        label value for undecided pixels. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_SetLabelForUndecidedPixels(self, l)


    def GetLabelForUndecidedPixels(self) -> "unsigned short":
        """
        GetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS3IUS3 self) -> unsigned short

        Get
        label value used for undecided pixels. After updating the filter, this
        function returns the actual label value used for undecided pixels in
        the current output. Note that this value is overwritten when
        SetLabelForUndecidedPixels is called and the new value only becomes
        effective upon the next filter update. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_GetLabelForUndecidedPixels(self)


    def UnsetLabelForUndecidedPixels(self) -> "void":
        """
        UnsetLabelForUndecidedPixels(itkLabelVotingImageFilterIUS3IUS3 self)

        Unset
        label value for undecided pixels and turn on automatic selection. 
        """
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_UnsetLabelForUndecidedPixels(self)

    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_IntConvertibleToInputCheck
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_SameDimensionCheck
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputUnsignedIntCheck
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_IntConvertibleToOutputPixelType
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputPlusIntCheck
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputIncrementDecrementOperatorsCheck
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkLabelVotingImageFilterIUS3IUS3"""
        return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUS3IUS3

        Create a new object of the class itkLabelVotingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelVotingImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelVotingImageFilterIUS3IUS3.Clone = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_Clone, None, itkLabelVotingImageFilterIUS3IUS3)
itkLabelVotingImageFilterIUS3IUS3.SetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_SetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS3IUS3)
itkLabelVotingImageFilterIUS3IUS3.GetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_GetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS3IUS3)
itkLabelVotingImageFilterIUS3IUS3.UnsetLabelForUndecidedPixels = new_instancemethod(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_UnsetLabelForUndecidedPixels, None, itkLabelVotingImageFilterIUS3IUS3)
itkLabelVotingImageFilterIUS3IUS3_swigregister = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_swigregister
itkLabelVotingImageFilterIUS3IUS3_swigregister(itkLabelVotingImageFilterIUS3IUS3)

def itkLabelVotingImageFilterIUS3IUS3___New_orig__() -> "itkLabelVotingImageFilterIUS3IUS3_Pointer":
    """itkLabelVotingImageFilterIUS3IUS3___New_orig__() -> itkLabelVotingImageFilterIUS3IUS3_Pointer"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3___New_orig__()

def itkLabelVotingImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkLabelVotingImageFilterIUS3IUS3 *":
    """itkLabelVotingImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkLabelVotingImageFilterIUS3IUS3"""
    return _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_voting_image_filter(*args, **kwargs):
    """Procedural interface for LabelVotingImageFilter"""
    import itk
    instance = itk.LabelVotingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_voting_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelVotingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelVotingImageFilter.values()[0]
    else:
        filter_object = itk.LabelVotingImageFilter

    label_voting_image_filter.__doc__ = filter_object.__doc__
    label_voting_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_voting_image_filter.__doc__ += "Available Keyword Arguments:\n"
    label_voting_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



