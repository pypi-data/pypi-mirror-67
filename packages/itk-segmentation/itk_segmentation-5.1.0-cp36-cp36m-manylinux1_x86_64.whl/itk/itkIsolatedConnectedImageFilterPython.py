# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkIsolatedConnectedImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkIsolatedConnectedImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkIsolatedConnectedImageFilterPython
            return _itkIsolatedConnectedImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkIsolatedConnectedImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkIsolatedConnectedImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkIsolatedConnectedImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkSizePython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkIsolatedConnectedImageFilterID3ID3_New():
  return itkIsolatedConnectedImageFilterID3ID3.New()


def itkIsolatedConnectedImageFilterID2ID2_New():
  return itkIsolatedConnectedImageFilterID2ID2.New()


def itkIsolatedConnectedImageFilterIF3IF3_New():
  return itkIsolatedConnectedImageFilterIF3IF3.New()


def itkIsolatedConnectedImageFilterIF2IF2_New():
  return itkIsolatedConnectedImageFilterIF2IF2.New()


def itkIsolatedConnectedImageFilterIUS3IUS3_New():
  return itkIsolatedConnectedImageFilterIUS3IUS3.New()


def itkIsolatedConnectedImageFilterIUS2IUS2_New():
  return itkIsolatedConnectedImageFilterIUS2IUS2.New()


def itkIsolatedConnectedImageFilterIUC3IUC3_New():
  return itkIsolatedConnectedImageFilterIUC3IUC3.New()


def itkIsolatedConnectedImageFilterIUC2IUC2_New():
  return itkIsolatedConnectedImageFilterIUC2IUC2.New()


def itkIsolatedConnectedImageFilterISS3ISS3_New():
  return itkIsolatedConnectedImageFilterISS3ISS3.New()


def itkIsolatedConnectedImageFilterISS2ISS2_New():
  return itkIsolatedConnectedImageFilterISS2ISS2.New()

class itkIsolatedConnectedImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterID2ID2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterID2ID2_Pointer":
        """Clone(itkIsolatedConnectedImageFilterID2ID2 self) -> itkIsolatedConnectedImageFilterID2ID2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterID2ID2 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterID2ID2 self, itkIndex2 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterID2ID2 self, itkIndex2 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterID2ID2 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterID2ID2 self, itkIndex2 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterID2ID2 self, itkIndex2 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterID2ID2 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterID2ID2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterID2ID2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds2(self)


    def SetLower(self, _arg: 'double const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterID2ID2 self, double const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetLower(self, _arg)


    def GetLower(self) -> "double const &":
        """GetLower(itkIsolatedConnectedImageFilterID2ID2 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetLower(self)


    def SetUpper(self, _arg: 'double const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterID2ID2 self, double const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetUpper(self, _arg)


    def GetUpper(self) -> "double const &":
        """GetUpper(itkIsolatedConnectedImageFilterID2ID2 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'double const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterID2ID2 self, double const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "double const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterID2ID2 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'double const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterID2ID2 self, double const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "double const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterID2ID2 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "double const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterID2ID2 self) -> double const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterID2ID2 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterID2ID2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterID2ID2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterID2ID2 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterID2ID2 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterID2ID2"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterID2ID2

        Create a new object of the class itkIsolatedConnectedImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterID2ID2.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_Clone, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_PrintSelf, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed1, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed1, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds1, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed2, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed2, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds2, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds1, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds2, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetLower, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetLower, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetUpper, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetUpper, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetReplaceValue, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetReplaceValue, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValue, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_swigregister
itkIsolatedConnectedImageFilterID2ID2_swigregister(itkIsolatedConnectedImageFilterID2ID2)

def itkIsolatedConnectedImageFilterID2ID2___New_orig__() -> "itkIsolatedConnectedImageFilterID2ID2_Pointer":
    """itkIsolatedConnectedImageFilterID2ID2___New_orig__() -> itkIsolatedConnectedImageFilterID2ID2_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2___New_orig__()

def itkIsolatedConnectedImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterID2ID2 *":
    """itkIsolatedConnectedImageFilterID2ID2_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterID2ID2"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_cast(obj)

class itkIsolatedConnectedImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterID3ID3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterID3ID3_Pointer":
        """Clone(itkIsolatedConnectedImageFilterID3ID3 self) -> itkIsolatedConnectedImageFilterID3ID3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterID3ID3 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterID3ID3 self, itkIndex3 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterID3ID3 self, itkIndex3 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterID3ID3 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterID3ID3 self, itkIndex3 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterID3ID3 self, itkIndex3 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterID3ID3 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterID3ID3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterID3ID3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds2(self)


    def SetLower(self, _arg: 'double const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterID3ID3 self, double const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetLower(self, _arg)


    def GetLower(self) -> "double const &":
        """GetLower(itkIsolatedConnectedImageFilterID3ID3 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetLower(self)


    def SetUpper(self, _arg: 'double const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterID3ID3 self, double const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetUpper(self, _arg)


    def GetUpper(self) -> "double const &":
        """GetUpper(itkIsolatedConnectedImageFilterID3ID3 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'double const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterID3ID3 self, double const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "double const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterID3ID3 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'double const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterID3ID3 self, double const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "double const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterID3ID3 self) -> double const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "double const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterID3ID3 self) -> double const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterID3ID3 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterID3ID3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterID3ID3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterID3ID3 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterID3ID3 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterID3ID3"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterID3ID3

        Create a new object of the class itkIsolatedConnectedImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterID3ID3.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_Clone, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_PrintSelf, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed1, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed1, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds1, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed2, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed2, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds2, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds1, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds2, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetLower, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetLower, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetUpper, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetUpper, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetReplaceValue, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetReplaceValue, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValue, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_swigregister
itkIsolatedConnectedImageFilterID3ID3_swigregister(itkIsolatedConnectedImageFilterID3ID3)

def itkIsolatedConnectedImageFilterID3ID3___New_orig__() -> "itkIsolatedConnectedImageFilterID3ID3_Pointer":
    """itkIsolatedConnectedImageFilterID3ID3___New_orig__() -> itkIsolatedConnectedImageFilterID3ID3_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3___New_orig__()

def itkIsolatedConnectedImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterID3ID3 *":
    """itkIsolatedConnectedImageFilterID3ID3_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterID3ID3"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_cast(obj)

class itkIsolatedConnectedImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIF2IF2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIF2IF2_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIF2IF2 self) -> itkIsolatedConnectedImageFilterIF2IF2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIF2IF2 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIF2IF2 self, itkIndex2 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIF2IF2 self, itkIndex2 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIF2IF2 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIF2IF2 self, itkIndex2 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIF2IF2 self, itkIndex2 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIF2IF2 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIF2IF2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIF2IF2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds2(self)


    def SetLower(self, _arg: 'float const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIF2IF2 self, float const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetLower(self, _arg)


    def GetLower(self) -> "float const &":
        """GetLower(itkIsolatedConnectedImageFilterIF2IF2 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetLower(self)


    def SetUpper(self, _arg: 'float const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIF2IF2 self, float const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetUpper(self, _arg)


    def GetUpper(self) -> "float const &":
        """GetUpper(itkIsolatedConnectedImageFilterIF2IF2 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'float const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIF2IF2 self, float const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "float const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIF2IF2 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'float const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIF2IF2 self, float const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "float const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIF2IF2 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "float const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIF2IF2 self) -> float const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIF2IF2 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIF2IF2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIF2IF2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIF2IF2 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIF2IF2 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIF2IF2"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIF2IF2

        Create a new object of the class itkIsolatedConnectedImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIF2IF2.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_Clone, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_PrintSelf, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed1, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed1, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds1, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed2, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed2, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds2, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds1, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds2, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetLower, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetLower, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetUpper, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetUpper, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetReplaceValue, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetReplaceValue, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_swigregister
itkIsolatedConnectedImageFilterIF2IF2_swigregister(itkIsolatedConnectedImageFilterIF2IF2)

def itkIsolatedConnectedImageFilterIF2IF2___New_orig__() -> "itkIsolatedConnectedImageFilterIF2IF2_Pointer":
    """itkIsolatedConnectedImageFilterIF2IF2___New_orig__() -> itkIsolatedConnectedImageFilterIF2IF2_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2___New_orig__()

def itkIsolatedConnectedImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIF2IF2 *":
    """itkIsolatedConnectedImageFilterIF2IF2_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIF2IF2"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_cast(obj)

class itkIsolatedConnectedImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIF3IF3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIF3IF3_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIF3IF3 self) -> itkIsolatedConnectedImageFilterIF3IF3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIF3IF3 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIF3IF3 self, itkIndex3 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIF3IF3 self, itkIndex3 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIF3IF3 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIF3IF3 self, itkIndex3 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIF3IF3 self, itkIndex3 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIF3IF3 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIF3IF3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIF3IF3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds2(self)


    def SetLower(self, _arg: 'float const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIF3IF3 self, float const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetLower(self, _arg)


    def GetLower(self) -> "float const &":
        """GetLower(itkIsolatedConnectedImageFilterIF3IF3 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetLower(self)


    def SetUpper(self, _arg: 'float const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIF3IF3 self, float const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetUpper(self, _arg)


    def GetUpper(self) -> "float const &":
        """GetUpper(itkIsolatedConnectedImageFilterIF3IF3 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'float const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIF3IF3 self, float const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "float const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIF3IF3 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'float const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIF3IF3 self, float const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "float const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIF3IF3 self) -> float const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "float const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIF3IF3 self) -> float const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIF3IF3 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIF3IF3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIF3IF3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIF3IF3 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIF3IF3 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIF3IF3"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIF3IF3

        Create a new object of the class itkIsolatedConnectedImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIF3IF3.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_Clone, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_PrintSelf, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed1, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed1, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds1, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed2, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed2, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds2, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds1, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds2, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetLower, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetLower, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetUpper, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetUpper, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetReplaceValue, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetReplaceValue, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_swigregister
itkIsolatedConnectedImageFilterIF3IF3_swigregister(itkIsolatedConnectedImageFilterIF3IF3)

def itkIsolatedConnectedImageFilterIF3IF3___New_orig__() -> "itkIsolatedConnectedImageFilterIF3IF3_Pointer":
    """itkIsolatedConnectedImageFilterIF3IF3___New_orig__() -> itkIsolatedConnectedImageFilterIF3IF3_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3___New_orig__()

def itkIsolatedConnectedImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIF3IF3 *":
    """itkIsolatedConnectedImageFilterIF3IF3_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIF3IF3"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_cast(obj)

class itkIsolatedConnectedImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterISS2ISS2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterISS2ISS2_Pointer":
        """Clone(itkIsolatedConnectedImageFilterISS2ISS2 self) -> itkIsolatedConnectedImageFilterISS2ISS2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterISS2ISS2 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterISS2ISS2 self, itkIndex2 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterISS2ISS2 self, itkIndex2 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterISS2ISS2 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterISS2ISS2 self, itkIndex2 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterISS2ISS2 self, itkIndex2 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterISS2ISS2 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterISS2ISS2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterISS2ISS2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds2(self)


    def SetLower(self, _arg: 'short const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterISS2ISS2 self, short const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetLower(self, _arg)


    def GetLower(self) -> "short const &":
        """GetLower(itkIsolatedConnectedImageFilterISS2ISS2 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetLower(self)


    def SetUpper(self, _arg: 'short const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterISS2ISS2 self, short const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetUpper(self, _arg)


    def GetUpper(self) -> "short const &":
        """GetUpper(itkIsolatedConnectedImageFilterISS2ISS2 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'short const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterISS2ISS2 self, short const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "short const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterISS2ISS2 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'short const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterISS2ISS2 self, short const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "short const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterISS2ISS2 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "short const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterISS2ISS2 self) -> short const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterISS2ISS2 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterISS2ISS2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterISS2ISS2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterISS2ISS2 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterISS2ISS2 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterISS2ISS2"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterISS2ISS2

        Create a new object of the class itkIsolatedConnectedImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterISS2ISS2.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_Clone, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_PrintSelf, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed1, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed1, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds1, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed2, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed2, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds2, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds1, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds2, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetLower, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetLower, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetUpper, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetUpper, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetReplaceValue, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetReplaceValue, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValue, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_swigregister
itkIsolatedConnectedImageFilterISS2ISS2_swigregister(itkIsolatedConnectedImageFilterISS2ISS2)

def itkIsolatedConnectedImageFilterISS2ISS2___New_orig__() -> "itkIsolatedConnectedImageFilterISS2ISS2_Pointer":
    """itkIsolatedConnectedImageFilterISS2ISS2___New_orig__() -> itkIsolatedConnectedImageFilterISS2ISS2_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2___New_orig__()

def itkIsolatedConnectedImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterISS2ISS2 *":
    """itkIsolatedConnectedImageFilterISS2ISS2_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterISS2ISS2"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_cast(obj)

class itkIsolatedConnectedImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterISS3ISS3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterISS3ISS3_Pointer":
        """Clone(itkIsolatedConnectedImageFilterISS3ISS3 self) -> itkIsolatedConnectedImageFilterISS3ISS3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterISS3ISS3 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterISS3ISS3 self, itkIndex3 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterISS3ISS3 self, itkIndex3 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterISS3ISS3 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterISS3ISS3 self, itkIndex3 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterISS3ISS3 self, itkIndex3 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterISS3ISS3 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterISS3ISS3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterISS3ISS3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds2(self)


    def SetLower(self, _arg: 'short const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterISS3ISS3 self, short const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetLower(self, _arg)


    def GetLower(self) -> "short const &":
        """GetLower(itkIsolatedConnectedImageFilterISS3ISS3 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetLower(self)


    def SetUpper(self, _arg: 'short const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterISS3ISS3 self, short const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetUpper(self, _arg)


    def GetUpper(self) -> "short const &":
        """GetUpper(itkIsolatedConnectedImageFilterISS3ISS3 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'short const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterISS3ISS3 self, short const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "short const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterISS3ISS3 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'short const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterISS3ISS3 self, short const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "short const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterISS3ISS3 self) -> short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "short const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterISS3ISS3 self) -> short const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterISS3ISS3 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterISS3ISS3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterISS3ISS3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterISS3ISS3 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterISS3ISS3 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterISS3ISS3"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterISS3ISS3

        Create a new object of the class itkIsolatedConnectedImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterISS3ISS3.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_Clone, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_PrintSelf, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed1, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed1, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds1, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed2, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed2, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds2, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds1, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds2, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetLower, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetLower, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetUpper, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetUpper, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetReplaceValue, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetReplaceValue, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValue, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_swigregister
itkIsolatedConnectedImageFilterISS3ISS3_swigregister(itkIsolatedConnectedImageFilterISS3ISS3)

def itkIsolatedConnectedImageFilterISS3ISS3___New_orig__() -> "itkIsolatedConnectedImageFilterISS3ISS3_Pointer":
    """itkIsolatedConnectedImageFilterISS3ISS3___New_orig__() -> itkIsolatedConnectedImageFilterISS3ISS3_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3___New_orig__()

def itkIsolatedConnectedImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterISS3ISS3 *":
    """itkIsolatedConnectedImageFilterISS3ISS3_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterISS3ISS3"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_cast(obj)

class itkIsolatedConnectedImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIUC2IUC2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIUC2IUC2_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> itkIsolatedConnectedImageFilterIUC2IUC2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIUC2IUC2 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIUC2IUC2 self, itkIndex2 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIUC2IUC2 self, itkIndex2 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIUC2IUC2 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIUC2IUC2 self, itkIndex2 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIUC2IUC2 self, itkIndex2 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIUC2IUC2 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds2(self)


    def SetLower(self, _arg: 'unsigned char const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIUC2IUC2 self, unsigned char const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetLower(self, _arg)


    def GetLower(self) -> "unsigned char const &":
        """GetLower(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetLower(self)


    def SetUpper(self, _arg: 'unsigned char const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIUC2IUC2 self, unsigned char const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetUpper(self, _arg)


    def GetUpper(self) -> "unsigned char const &":
        """GetUpper(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'unsigned char const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUC2IUC2 self, unsigned char const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "unsigned char const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIUC2IUC2 self, unsigned char const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "unsigned char const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "unsigned char const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> unsigned char const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIUC2IUC2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIUC2IUC2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIUC2IUC2 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUC2IUC2"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUC2IUC2

        Create a new object of the class itkIsolatedConnectedImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIUC2IUC2.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_Clone, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_PrintSelf, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed1, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed1, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds1, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed2, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed2, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds2, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds1, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds2, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetLower, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetLower, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetUpper, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetUpper, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetReplaceValue, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetReplaceValue, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_swigregister
itkIsolatedConnectedImageFilterIUC2IUC2_swigregister(itkIsolatedConnectedImageFilterIUC2IUC2)

def itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__() -> "itkIsolatedConnectedImageFilterIUC2IUC2_Pointer":
    """itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__() -> itkIsolatedConnectedImageFilterIUC2IUC2_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__()

def itkIsolatedConnectedImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUC2IUC2 *":
    """itkIsolatedConnectedImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUC2IUC2"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_cast(obj)

class itkIsolatedConnectedImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIUC3IUC3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIUC3IUC3_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> itkIsolatedConnectedImageFilterIUC3IUC3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIUC3IUC3 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIUC3IUC3 self, itkIndex3 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIUC3IUC3 self, itkIndex3 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIUC3IUC3 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIUC3IUC3 self, itkIndex3 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIUC3IUC3 self, itkIndex3 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIUC3IUC3 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds2(self)


    def SetLower(self, _arg: 'unsigned char const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIUC3IUC3 self, unsigned char const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetLower(self, _arg)


    def GetLower(self) -> "unsigned char const &":
        """GetLower(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetLower(self)


    def SetUpper(self, _arg: 'unsigned char const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIUC3IUC3 self, unsigned char const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetUpper(self, _arg)


    def GetUpper(self) -> "unsigned char const &":
        """GetUpper(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'unsigned char const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUC3IUC3 self, unsigned char const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "unsigned char const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIUC3IUC3 self, unsigned char const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "unsigned char const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> unsigned char const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "unsigned char const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> unsigned char const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIUC3IUC3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIUC3IUC3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIUC3IUC3 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUC3IUC3"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUC3IUC3

        Create a new object of the class itkIsolatedConnectedImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIUC3IUC3.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_Clone, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_PrintSelf, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed1, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed1, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds1, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed2, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed2, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds2, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds1, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds2, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetLower, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetLower, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetUpper, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetUpper, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetReplaceValue, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetReplaceValue, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_swigregister
itkIsolatedConnectedImageFilterIUC3IUC3_swigregister(itkIsolatedConnectedImageFilterIUC3IUC3)

def itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__() -> "itkIsolatedConnectedImageFilterIUC3IUC3_Pointer":
    """itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__() -> itkIsolatedConnectedImageFilterIUC3IUC3_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__()

def itkIsolatedConnectedImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUC3IUC3 *":
    """itkIsolatedConnectedImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUC3IUC3"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_cast(obj)

class itkIsolatedConnectedImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIUS2IUS2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIUS2IUS2_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> itkIsolatedConnectedImageFilterIUS2IUS2_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIUS2IUS2 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIUS2IUS2 self, itkIndex2 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIUS2IUS2 self, itkIndex2 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIUS2IUS2 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex2') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIUS2IUS2 self, itkIndex2 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex2') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIUS2IUS2 self, itkIndex2 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIUS2IUS2 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex2,std::allocator< itkIndex2 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> std::vector< itkIndex2,std::allocator< itkIndex2 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds2(self)


    def SetLower(self, _arg: 'unsigned short const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIUS2IUS2 self, unsigned short const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetLower(self, _arg)


    def GetLower(self) -> "unsigned short const &":
        """GetLower(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetLower(self)


    def SetUpper(self, _arg: 'unsigned short const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIUS2IUS2 self, unsigned short const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetUpper(self, _arg)


    def GetUpper(self) -> "unsigned short const &":
        """GetUpper(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'unsigned short const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUS2IUS2 self, unsigned short const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "unsigned short const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIUS2IUS2 self, unsigned short const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "unsigned short const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "unsigned short const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> unsigned short const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIUS2IUS2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIUS2IUS2 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIUS2IUS2 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUS2IUS2"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUS2IUS2

        Create a new object of the class itkIsolatedConnectedImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIUS2IUS2.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_Clone, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_PrintSelf, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed1, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed1, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds1, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed2, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed2, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds2, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds1, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds2, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetLower, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetLower, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetUpper, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetUpper, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetReplaceValue, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetReplaceValue, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_swigregister
itkIsolatedConnectedImageFilterIUS2IUS2_swigregister(itkIsolatedConnectedImageFilterIUS2IUS2)

def itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__() -> "itkIsolatedConnectedImageFilterIUS2IUS2_Pointer":
    """itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__() -> itkIsolatedConnectedImageFilterIUS2IUS2_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__()

def itkIsolatedConnectedImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUS2IUS2 *":
    """itkIsolatedConnectedImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUS2IUS2"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_cast(obj)

class itkIsolatedConnectedImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag.

    C++ includes: itkIsolatedConnectedImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsolatedConnectedImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkIsolatedConnectedImageFilterIUS3IUS3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsolatedConnectedImageFilterIUS3IUS3_Pointer":
        """Clone(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> itkIsolatedConnectedImageFilterIUS3IUS3_Pointer"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_Clone(self)


    def PrintSelf(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """PrintSelf(itkIsolatedConnectedImageFilterIUS3IUS3 self, ostream os, itkIndent indent)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_PrintSelf(self, os, indent)


    def AddSeed1(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed1(itkIsolatedConnectedImageFilterIUS3IUS3 self, itkIndex3 seed)

        Add seed point 1. This
        seed will be isolated from Seed2 (if possible). All pixels connected
        to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed1(self, seed)


    def SetSeed1(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed1(itkIsolatedConnectedImageFilterIUS3IUS3 self, itkIndex3 seed)

        Set a single seed point 1.

        This seed will be isolated from Seed2 (if possible). All pixels
        connected to this seed will be replaced with ReplaceValue. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed1(self, seed)


    def ClearSeeds1(self) -> "void":
        """
        ClearSeeds1(itkIsolatedConnectedImageFilterIUS3IUS3 self)

        Clear all the seeds1.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds1(self)


    def AddSeed2(self, seed: 'itkIndex3') -> "void":
        """
        AddSeed2(itkIsolatedConnectedImageFilterIUS3IUS3 self, itkIndex3 seed)

        Add seed point 2. This
        seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed2(self, seed)


    def SetSeed2(self, seed: 'itkIndex3') -> "void":
        """
        SetSeed2(itkIsolatedConnectedImageFilterIUS3IUS3 self, itkIndex3 seed)

        Set a single seed point 2.

        This seed will be isolated from Seed1 (if possible). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed2(self, seed)


    def ClearSeeds2(self) -> "void":
        """
        ClearSeeds2(itkIsolatedConnectedImageFilterIUS3IUS3 self)

        Clear all the seeds2.

        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds2(self)


    def GetSeeds1(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """
        GetSeeds1(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &

        Method to access seed
        container 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds1(self)


    def GetSeeds2(self) -> "std::vector< itkIndex3,std::allocator< itkIndex3 > > const &":
        """GetSeeds2(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> std::vector< itkIndex3,std::allocator< itkIndex3 > > const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds2(self)


    def SetLower(self, _arg: 'unsigned short const') -> "void":
        """
        SetLower(itkIsolatedConnectedImageFilterIUS3IUS3 self, unsigned short const _arg)

        Set/Get the limit on the
        lower threshold value. The default is the NonpositiveMin() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetLower(self, _arg)


    def GetLower(self) -> "unsigned short const &":
        """GetLower(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetLower(self)


    def SetUpper(self, _arg: 'unsigned short const') -> "void":
        """
        SetUpper(itkIsolatedConnectedImageFilterIUS3IUS3 self, unsigned short const _arg)

        Set/Get the limit on the
        upper threshold value. The default is the max() for the
        InputPixelType. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetUpper(self, _arg)


    def GetUpper(self) -> "unsigned short const &":
        """GetUpper(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetUpper(self)


    def SetIsolatedValueTolerance(self, _arg: 'unsigned short const') -> "void":
        """
        SetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUS3IUS3 self, unsigned short const _arg)

        Set/Get
        the precision required for the intensity threshold value. The default
        is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetIsolatedValueTolerance(self, _arg)


    def GetIsolatedValueTolerance(self) -> "unsigned short const &":
        """GetIsolatedValueTolerance(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValueTolerance(self)


    def SetReplaceValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetReplaceValue(itkIsolatedConnectedImageFilterIUS3IUS3 self, unsigned short const _arg)

        Set/Get value to
        replace thresholded pixels. Pixels that lie within the thresholds will
        be replaced with this value. The default is 1. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetReplaceValue(self, _arg)


    def GetReplaceValue(self) -> "unsigned short const &":
        """GetReplaceValue(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> unsigned short const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetReplaceValue(self)


    def GetIsolatedValue(self) -> "unsigned short const &":
        """
        GetIsolatedValue(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> unsigned short const &

        Get value that
        isolates the two seeds. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValue(self)


    def SetFindUpperThreshold(self, _arg: 'bool const') -> "void":
        """
        SetFindUpperThreshold(itkIsolatedConnectedImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get
        whether to find an upper threshold (separating two dark regions) or a
        lower threshold (separating two bright regions). 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetFindUpperThreshold(self, _arg)


    def FindUpperThresholdOn(self) -> "void":
        """FindUpperThresholdOn(itkIsolatedConnectedImageFilterIUS3IUS3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOn(self)


    def FindUpperThresholdOff(self) -> "void":
        """FindUpperThresholdOff(itkIsolatedConnectedImageFilterIUS3IUS3 self)"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOff(self)


    def GetFindUpperThreshold(self) -> "bool const &":
        """GetFindUpperThreshold(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> bool const &"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetFindUpperThreshold(self)


    def GetThresholdingFailed(self) -> "bool const &":
        """
        GetThresholdingFailed(itkIsolatedConnectedImageFilterIUS3IUS3 self) -> bool const &

        Get the flag
        that tells whether the algorithm failed to find a threshold. 
        """
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetThresholdingFailed(self)

    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUS3IUS3"""
        return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUS3IUS3

        Create a new object of the class itkIsolatedConnectedImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsolatedConnectedImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsolatedConnectedImageFilterIUS3IUS3.Clone = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_Clone, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.PrintSelf = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_PrintSelf, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.AddSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed1, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetSeed1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed1, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.ClearSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds1, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.AddSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed2, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetSeed2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed2, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.ClearSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds2, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetSeeds1 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds1, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetSeeds2 = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds2, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetLower, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetLower = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetLower, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetUpper, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetUpper = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetUpper, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetIsolatedValueTolerance = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValueTolerance, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetReplaceValue, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetReplaceValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetReplaceValue, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetIsolatedValue = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValue, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.SetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.FindUpperThresholdOn = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOn, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.FindUpperThresholdOff = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOff, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetFindUpperThreshold = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetFindUpperThreshold, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3.GetThresholdingFailed = new_instancemethod(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetThresholdingFailed, None, itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3_swigregister = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_swigregister
itkIsolatedConnectedImageFilterIUS3IUS3_swigregister(itkIsolatedConnectedImageFilterIUS3IUS3)

def itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__() -> "itkIsolatedConnectedImageFilterIUS3IUS3_Pointer":
    """itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__() -> itkIsolatedConnectedImageFilterIUS3IUS3_Pointer"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__()

def itkIsolatedConnectedImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkIsolatedConnectedImageFilterIUS3IUS3 *":
    """itkIsolatedConnectedImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkIsolatedConnectedImageFilterIUS3IUS3"""
    return _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def isolated_connected_image_filter(*args, **kwargs):
    """Procedural interface for IsolatedConnectedImageFilter"""
    import itk
    instance = itk.IsolatedConnectedImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def isolated_connected_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IsolatedConnectedImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.IsolatedConnectedImageFilter.values()[0]
    else:
        filter_object = itk.IsolatedConnectedImageFilter

    isolated_connected_image_filter.__doc__ = filter_object.__doc__
    isolated_connected_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    isolated_connected_image_filter.__doc__ += "Available Keyword Arguments:\n"
    isolated_connected_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



