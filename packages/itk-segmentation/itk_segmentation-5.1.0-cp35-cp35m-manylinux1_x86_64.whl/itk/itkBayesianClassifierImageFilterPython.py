# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBayesianClassifierImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBayesianClassifierImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBayesianClassifierImageFilterPython
            return _itkBayesianClassifierImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBayesianClassifierImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBayesianClassifierImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBayesianClassifierImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkFixedArrayPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def itkBayesianClassifierImageFilterVID3USDD_New():
  return itkBayesianClassifierImageFilterVID3USDD.New()


def itkBayesianClassifierImageFilterVID3USFF_New():
  return itkBayesianClassifierImageFilterVID3USFF.New()


def itkBayesianClassifierImageFilterVID3UCDD_New():
  return itkBayesianClassifierImageFilterVID3UCDD.New()


def itkBayesianClassifierImageFilterVID3UCFF_New():
  return itkBayesianClassifierImageFilterVID3UCFF.New()


def itkBayesianClassifierImageFilterVID3SSDD_New():
  return itkBayesianClassifierImageFilterVID3SSDD.New()


def itkBayesianClassifierImageFilterVID3SSFF_New():
  return itkBayesianClassifierImageFilterVID3SSFF.New()


def itkBayesianClassifierImageFilterVIF3USDD_New():
  return itkBayesianClassifierImageFilterVIF3USDD.New()


def itkBayesianClassifierImageFilterVIF3USFF_New():
  return itkBayesianClassifierImageFilterVIF3USFF.New()


def itkBayesianClassifierImageFilterVIF3UCDD_New():
  return itkBayesianClassifierImageFilterVIF3UCDD.New()


def itkBayesianClassifierImageFilterVIF3UCFF_New():
  return itkBayesianClassifierImageFilterVIF3UCFF.New()


def itkBayesianClassifierImageFilterVIF3SSDD_New():
  return itkBayesianClassifierImageFilterVIF3SSDD.New()


def itkBayesianClassifierImageFilterVIF3SSFF_New():
  return itkBayesianClassifierImageFilterVIF3SSFF.New()


def itkBayesianClassifierImageFilterVIUS3USDD_New():
  return itkBayesianClassifierImageFilterVIUS3USDD.New()


def itkBayesianClassifierImageFilterVIUS3USFF_New():
  return itkBayesianClassifierImageFilterVIUS3USFF.New()


def itkBayesianClassifierImageFilterVIUS3UCDD_New():
  return itkBayesianClassifierImageFilterVIUS3UCDD.New()


def itkBayesianClassifierImageFilterVIUS3UCFF_New():
  return itkBayesianClassifierImageFilterVIUS3UCFF.New()


def itkBayesianClassifierImageFilterVIUS3SSDD_New():
  return itkBayesianClassifierImageFilterVIUS3SSDD.New()


def itkBayesianClassifierImageFilterVIUS3SSFF_New():
  return itkBayesianClassifierImageFilterVIUS3SSFF.New()


def itkBayesianClassifierImageFilterVIUC3USDD_New():
  return itkBayesianClassifierImageFilterVIUC3USDD.New()


def itkBayesianClassifierImageFilterVIUC3USFF_New():
  return itkBayesianClassifierImageFilterVIUC3USFF.New()


def itkBayesianClassifierImageFilterVIUC3UCDD_New():
  return itkBayesianClassifierImageFilterVIUC3UCDD.New()


def itkBayesianClassifierImageFilterVIUC3UCFF_New():
  return itkBayesianClassifierImageFilterVIUC3UCFF.New()


def itkBayesianClassifierImageFilterVIUC3SSDD_New():
  return itkBayesianClassifierImageFilterVIUC3SSDD.New()


def itkBayesianClassifierImageFilterVIUC3SSFF_New():
  return itkBayesianClassifierImageFilterVIUC3SSFF.New()


def itkBayesianClassifierImageFilterVISS3USDD_New():
  return itkBayesianClassifierImageFilterVISS3USDD.New()


def itkBayesianClassifierImageFilterVISS3USFF_New():
  return itkBayesianClassifierImageFilterVISS3USFF.New()


def itkBayesianClassifierImageFilterVISS3UCDD_New():
  return itkBayesianClassifierImageFilterVISS3UCDD.New()


def itkBayesianClassifierImageFilterVISS3UCFF_New():
  return itkBayesianClassifierImageFilterVISS3UCFF.New()


def itkBayesianClassifierImageFilterVISS3SSDD_New():
  return itkBayesianClassifierImageFilterVISS3SSDD.New()


def itkBayesianClassifierImageFilterVISS3SSFF_New():
  return itkBayesianClassifierImageFilterVISS3SSFF.New()


def itkBayesianClassifierImageFilterVID2USDD_New():
  return itkBayesianClassifierImageFilterVID2USDD.New()


def itkBayesianClassifierImageFilterVID2USFF_New():
  return itkBayesianClassifierImageFilterVID2USFF.New()


def itkBayesianClassifierImageFilterVID2UCDD_New():
  return itkBayesianClassifierImageFilterVID2UCDD.New()


def itkBayesianClassifierImageFilterVID2UCFF_New():
  return itkBayesianClassifierImageFilterVID2UCFF.New()


def itkBayesianClassifierImageFilterVID2SSDD_New():
  return itkBayesianClassifierImageFilterVID2SSDD.New()


def itkBayesianClassifierImageFilterVID2SSFF_New():
  return itkBayesianClassifierImageFilterVID2SSFF.New()


def itkBayesianClassifierImageFilterVIF2USDD_New():
  return itkBayesianClassifierImageFilterVIF2USDD.New()


def itkBayesianClassifierImageFilterVIF2USFF_New():
  return itkBayesianClassifierImageFilterVIF2USFF.New()


def itkBayesianClassifierImageFilterVIF2UCDD_New():
  return itkBayesianClassifierImageFilterVIF2UCDD.New()


def itkBayesianClassifierImageFilterVIF2UCFF_New():
  return itkBayesianClassifierImageFilterVIF2UCFF.New()


def itkBayesianClassifierImageFilterVIF2SSDD_New():
  return itkBayesianClassifierImageFilterVIF2SSDD.New()


def itkBayesianClassifierImageFilterVIF2SSFF_New():
  return itkBayesianClassifierImageFilterVIF2SSFF.New()


def itkBayesianClassifierImageFilterVIUS2USDD_New():
  return itkBayesianClassifierImageFilterVIUS2USDD.New()


def itkBayesianClassifierImageFilterVIUS2USFF_New():
  return itkBayesianClassifierImageFilterVIUS2USFF.New()


def itkBayesianClassifierImageFilterVIUS2UCDD_New():
  return itkBayesianClassifierImageFilterVIUS2UCDD.New()


def itkBayesianClassifierImageFilterVIUS2UCFF_New():
  return itkBayesianClassifierImageFilterVIUS2UCFF.New()


def itkBayesianClassifierImageFilterVIUS2SSDD_New():
  return itkBayesianClassifierImageFilterVIUS2SSDD.New()


def itkBayesianClassifierImageFilterVIUS2SSFF_New():
  return itkBayesianClassifierImageFilterVIUS2SSFF.New()


def itkBayesianClassifierImageFilterVIUC2USDD_New():
  return itkBayesianClassifierImageFilterVIUC2USDD.New()


def itkBayesianClassifierImageFilterVIUC2USFF_New():
  return itkBayesianClassifierImageFilterVIUC2USFF.New()


def itkBayesianClassifierImageFilterVIUC2UCDD_New():
  return itkBayesianClassifierImageFilterVIUC2UCDD.New()


def itkBayesianClassifierImageFilterVIUC2UCFF_New():
  return itkBayesianClassifierImageFilterVIUC2UCFF.New()


def itkBayesianClassifierImageFilterVIUC2SSDD_New():
  return itkBayesianClassifierImageFilterVIUC2SSDD.New()


def itkBayesianClassifierImageFilterVIUC2SSFF_New():
  return itkBayesianClassifierImageFilterVIUC2SSFF.New()


def itkBayesianClassifierImageFilterVISS2USDD_New():
  return itkBayesianClassifierImageFilterVISS2USDD.New()


def itkBayesianClassifierImageFilterVISS2USFF_New():
  return itkBayesianClassifierImageFilterVISS2USFF.New()


def itkBayesianClassifierImageFilterVISS2UCDD_New():
  return itkBayesianClassifierImageFilterVISS2UCDD.New()


def itkBayesianClassifierImageFilterVISS2UCFF_New():
  return itkBayesianClassifierImageFilterVISS2UCFF.New()


def itkBayesianClassifierImageFilterVISS2SSDD_New():
  return itkBayesianClassifierImageFilterVISS2SSDD.New()


def itkBayesianClassifierImageFilterVISS2SSFF_New():
  return itkBayesianClassifierImageFilterVISS2SSFF.New()

class itkBayesianClassifierImageFilterVID2SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2SSDD self) -> itkBayesianClassifierImageFilterVID2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2SSDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2SSDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2SSDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVID2SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_Clone, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetPriors, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2SSDD)
itkBayesianClassifierImageFilterVID2SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_swigregister
itkBayesianClassifierImageFilterVID2SSDD_swigregister(itkBayesianClassifierImageFilterVID2SSDD)

def itkBayesianClassifierImageFilterVID2SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVID2SSDD_Pointer":
    """itkBayesianClassifierImageFilterVID2SSDD___New_orig__() -> itkBayesianClassifierImageFilterVID2SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD___New_orig__()

def itkBayesianClassifierImageFilterVID2SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2SSDD *":
    """itkBayesianClassifierImageFilterVID2SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSDD_cast(obj)

class itkBayesianClassifierImageFilterVID2SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2SSFF self) -> itkBayesianClassifierImageFilterVID2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2SSFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2SSFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2SSFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVID2SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_Clone, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetPriors, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2SSFF)
itkBayesianClassifierImageFilterVID2SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_swigregister
itkBayesianClassifierImageFilterVID2SSFF_swigregister(itkBayesianClassifierImageFilterVID2SSFF)

def itkBayesianClassifierImageFilterVID2SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVID2SSFF_Pointer":
    """itkBayesianClassifierImageFilterVID2SSFF___New_orig__() -> itkBayesianClassifierImageFilterVID2SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF___New_orig__()

def itkBayesianClassifierImageFilterVID2SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2SSFF *":
    """itkBayesianClassifierImageFilterVID2SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2SSFF_cast(obj)

class itkBayesianClassifierImageFilterVID2UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2UCDD self) -> itkBayesianClassifierImageFilterVID2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2UCDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2UCDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2UCDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVID2UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_Clone, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetPriors, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2UCDD)
itkBayesianClassifierImageFilterVID2UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_swigregister
itkBayesianClassifierImageFilterVID2UCDD_swigregister(itkBayesianClassifierImageFilterVID2UCDD)

def itkBayesianClassifierImageFilterVID2UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVID2UCDD_Pointer":
    """itkBayesianClassifierImageFilterVID2UCDD___New_orig__() -> itkBayesianClassifierImageFilterVID2UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD___New_orig__()

def itkBayesianClassifierImageFilterVID2UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2UCDD *":
    """itkBayesianClassifierImageFilterVID2UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCDD_cast(obj)

class itkBayesianClassifierImageFilterVID2UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2UCFF self) -> itkBayesianClassifierImageFilterVID2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2UCFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2UCFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2UCFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVID2UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_Clone, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetPriors, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2UCFF)
itkBayesianClassifierImageFilterVID2UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_swigregister
itkBayesianClassifierImageFilterVID2UCFF_swigregister(itkBayesianClassifierImageFilterVID2UCFF)

def itkBayesianClassifierImageFilterVID2UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVID2UCFF_Pointer":
    """itkBayesianClassifierImageFilterVID2UCFF___New_orig__() -> itkBayesianClassifierImageFilterVID2UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF___New_orig__()

def itkBayesianClassifierImageFilterVID2UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2UCFF *":
    """itkBayesianClassifierImageFilterVID2UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2UCFF_cast(obj)

class itkBayesianClassifierImageFilterVID2USDD(itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2USDD self) -> itkBayesianClassifierImageFilterVID2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2USDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2USDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2USDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2USDD

        Create a new object of the class itkBayesianClassifierImageFilterVID2USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_Clone, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetPriors, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2USDD)
itkBayesianClassifierImageFilterVID2USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_swigregister
itkBayesianClassifierImageFilterVID2USDD_swigregister(itkBayesianClassifierImageFilterVID2USDD)

def itkBayesianClassifierImageFilterVID2USDD___New_orig__() -> "itkBayesianClassifierImageFilterVID2USDD_Pointer":
    """itkBayesianClassifierImageFilterVID2USDD___New_orig__() -> itkBayesianClassifierImageFilterVID2USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD___New_orig__()

def itkBayesianClassifierImageFilterVID2USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2USDD *":
    """itkBayesianClassifierImageFilterVID2USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USDD_cast(obj)

class itkBayesianClassifierImageFilterVID2USFF(itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID2USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID2USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID2USFF self) -> itkBayesianClassifierImageFilterVID2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID2USFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID2USFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID2USFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID2USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID2USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID2USFF

        Create a new object of the class itkBayesianClassifierImageFilterVID2USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID2USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID2USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID2USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID2USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_Clone, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetPriors, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID2USFF)
itkBayesianClassifierImageFilterVID2USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_swigregister
itkBayesianClassifierImageFilterVID2USFF_swigregister(itkBayesianClassifierImageFilterVID2USFF)

def itkBayesianClassifierImageFilterVID2USFF___New_orig__() -> "itkBayesianClassifierImageFilterVID2USFF_Pointer":
    """itkBayesianClassifierImageFilterVID2USFF___New_orig__() -> itkBayesianClassifierImageFilterVID2USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF___New_orig__()

def itkBayesianClassifierImageFilterVID2USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID2USFF *":
    """itkBayesianClassifierImageFilterVID2USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID2USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID2USFF_cast(obj)

class itkBayesianClassifierImageFilterVID3SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3SSDD self) -> itkBayesianClassifierImageFilterVID3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3SSDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3SSDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3SSDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVID3SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_Clone, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetPriors, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3SSDD)
itkBayesianClassifierImageFilterVID3SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_swigregister
itkBayesianClassifierImageFilterVID3SSDD_swigregister(itkBayesianClassifierImageFilterVID3SSDD)

def itkBayesianClassifierImageFilterVID3SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVID3SSDD_Pointer":
    """itkBayesianClassifierImageFilterVID3SSDD___New_orig__() -> itkBayesianClassifierImageFilterVID3SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD___New_orig__()

def itkBayesianClassifierImageFilterVID3SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3SSDD *":
    """itkBayesianClassifierImageFilterVID3SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSDD_cast(obj)

class itkBayesianClassifierImageFilterVID3SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3SSFF self) -> itkBayesianClassifierImageFilterVID3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3SSFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3SSFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3SSFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVID3SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_Clone, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetPriors, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3SSFF)
itkBayesianClassifierImageFilterVID3SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_swigregister
itkBayesianClassifierImageFilterVID3SSFF_swigregister(itkBayesianClassifierImageFilterVID3SSFF)

def itkBayesianClassifierImageFilterVID3SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVID3SSFF_Pointer":
    """itkBayesianClassifierImageFilterVID3SSFF___New_orig__() -> itkBayesianClassifierImageFilterVID3SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF___New_orig__()

def itkBayesianClassifierImageFilterVID3SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3SSFF *":
    """itkBayesianClassifierImageFilterVID3SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3SSFF_cast(obj)

class itkBayesianClassifierImageFilterVID3UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3UCDD self) -> itkBayesianClassifierImageFilterVID3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3UCDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3UCDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3UCDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVID3UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_Clone, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetPriors, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3UCDD)
itkBayesianClassifierImageFilterVID3UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_swigregister
itkBayesianClassifierImageFilterVID3UCDD_swigregister(itkBayesianClassifierImageFilterVID3UCDD)

def itkBayesianClassifierImageFilterVID3UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVID3UCDD_Pointer":
    """itkBayesianClassifierImageFilterVID3UCDD___New_orig__() -> itkBayesianClassifierImageFilterVID3UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD___New_orig__()

def itkBayesianClassifierImageFilterVID3UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3UCDD *":
    """itkBayesianClassifierImageFilterVID3UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCDD_cast(obj)

class itkBayesianClassifierImageFilterVID3UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3UCFF self) -> itkBayesianClassifierImageFilterVID3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3UCFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3UCFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3UCFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVID3UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_Clone, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetPriors, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3UCFF)
itkBayesianClassifierImageFilterVID3UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_swigregister
itkBayesianClassifierImageFilterVID3UCFF_swigregister(itkBayesianClassifierImageFilterVID3UCFF)

def itkBayesianClassifierImageFilterVID3UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVID3UCFF_Pointer":
    """itkBayesianClassifierImageFilterVID3UCFF___New_orig__() -> itkBayesianClassifierImageFilterVID3UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF___New_orig__()

def itkBayesianClassifierImageFilterVID3UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3UCFF *":
    """itkBayesianClassifierImageFilterVID3UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3UCFF_cast(obj)

class itkBayesianClassifierImageFilterVID3USDD(itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3USDD self) -> itkBayesianClassifierImageFilterVID3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3USDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3USDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3USDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3USDD

        Create a new object of the class itkBayesianClassifierImageFilterVID3USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_Clone, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetPriors, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3USDD)
itkBayesianClassifierImageFilterVID3USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_swigregister
itkBayesianClassifierImageFilterVID3USDD_swigregister(itkBayesianClassifierImageFilterVID3USDD)

def itkBayesianClassifierImageFilterVID3USDD___New_orig__() -> "itkBayesianClassifierImageFilterVID3USDD_Pointer":
    """itkBayesianClassifierImageFilterVID3USDD___New_orig__() -> itkBayesianClassifierImageFilterVID3USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD___New_orig__()

def itkBayesianClassifierImageFilterVID3USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3USDD *":
    """itkBayesianClassifierImageFilterVID3USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USDD_cast(obj)

class itkBayesianClassifierImageFilterVID3USFF(itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVID3USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVID3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVID3USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVID3USFF self) -> itkBayesianClassifierImageFilterVID3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVID3USFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVID3USFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVID3USFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVID3USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVID3USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVID3USFF

        Create a new object of the class itkBayesianClassifierImageFilterVID3USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVID3USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVID3USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVID3USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVID3USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_Clone, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetPriors, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVID3USFF)
itkBayesianClassifierImageFilterVID3USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_swigregister
itkBayesianClassifierImageFilterVID3USFF_swigregister(itkBayesianClassifierImageFilterVID3USFF)

def itkBayesianClassifierImageFilterVID3USFF___New_orig__() -> "itkBayesianClassifierImageFilterVID3USFF_Pointer":
    """itkBayesianClassifierImageFilterVID3USFF___New_orig__() -> itkBayesianClassifierImageFilterVID3USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF___New_orig__()

def itkBayesianClassifierImageFilterVID3USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVID3USFF *":
    """itkBayesianClassifierImageFilterVID3USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVID3USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVID3USFF_cast(obj)

class itkBayesianClassifierImageFilterVIF2SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2SSDD self) -> itkBayesianClassifierImageFilterVIF2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2SSDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2SSDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2SSDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF2SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_Clone, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2SSDD)
itkBayesianClassifierImageFilterVIF2SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_swigregister
itkBayesianClassifierImageFilterVIF2SSDD_swigregister(itkBayesianClassifierImageFilterVIF2SSDD)

def itkBayesianClassifierImageFilterVIF2SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF2SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIF2SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIF2SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIF2SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2SSDD *":
    """itkBayesianClassifierImageFilterVIF2SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIF2SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2SSFF self) -> itkBayesianClassifierImageFilterVIF2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2SSFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2SSFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2SSFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF2SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_Clone, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2SSFF)
itkBayesianClassifierImageFilterVIF2SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_swigregister
itkBayesianClassifierImageFilterVIF2SSFF_swigregister(itkBayesianClassifierImageFilterVIF2SSFF)

def itkBayesianClassifierImageFilterVIF2SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF2SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIF2SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIF2SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIF2SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2SSFF *":
    """itkBayesianClassifierImageFilterVIF2SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIF2UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2UCDD self) -> itkBayesianClassifierImageFilterVIF2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2UCDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2UCDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2UCDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF2UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_Clone, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2UCDD)
itkBayesianClassifierImageFilterVIF2UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_swigregister
itkBayesianClassifierImageFilterVIF2UCDD_swigregister(itkBayesianClassifierImageFilterVIF2UCDD)

def itkBayesianClassifierImageFilterVIF2UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF2UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIF2UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIF2UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIF2UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2UCDD *":
    """itkBayesianClassifierImageFilterVIF2UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIF2UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2UCFF self) -> itkBayesianClassifierImageFilterVIF2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2UCFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2UCFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2UCFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF2UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_Clone, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2UCFF)
itkBayesianClassifierImageFilterVIF2UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_swigregister
itkBayesianClassifierImageFilterVIF2UCFF_swigregister(itkBayesianClassifierImageFilterVIF2UCFF)

def itkBayesianClassifierImageFilterVIF2UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF2UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIF2UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIF2UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIF2UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2UCFF *":
    """itkBayesianClassifierImageFilterVIF2UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIF2USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2USDD self) -> itkBayesianClassifierImageFilterVIF2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2USDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2USDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2USDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF2USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_Clone, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetPriors, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2USDD)
itkBayesianClassifierImageFilterVIF2USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_swigregister
itkBayesianClassifierImageFilterVIF2USDD_swigregister(itkBayesianClassifierImageFilterVIF2USDD)

def itkBayesianClassifierImageFilterVIF2USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF2USDD_Pointer":
    """itkBayesianClassifierImageFilterVIF2USDD___New_orig__() -> itkBayesianClassifierImageFilterVIF2USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD___New_orig__()

def itkBayesianClassifierImageFilterVIF2USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2USDD *":
    """itkBayesianClassifierImageFilterVIF2USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USDD_cast(obj)

class itkBayesianClassifierImageFilterVIF2USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF2USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF2USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF2USFF self) -> itkBayesianClassifierImageFilterVIF2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF2USFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF2USFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF2USFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF2USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF2USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF2USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF2USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF2USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF2USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF2USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF2USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_Clone, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetPriors, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF2USFF)
itkBayesianClassifierImageFilterVIF2USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_swigregister
itkBayesianClassifierImageFilterVIF2USFF_swigregister(itkBayesianClassifierImageFilterVIF2USFF)

def itkBayesianClassifierImageFilterVIF2USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF2USFF_Pointer":
    """itkBayesianClassifierImageFilterVIF2USFF___New_orig__() -> itkBayesianClassifierImageFilterVIF2USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF___New_orig__()

def itkBayesianClassifierImageFilterVIF2USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF2USFF *":
    """itkBayesianClassifierImageFilterVIF2USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF2USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF2USFF_cast(obj)

class itkBayesianClassifierImageFilterVIF3SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3SSDD self) -> itkBayesianClassifierImageFilterVIF3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3SSDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3SSDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3SSDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF3SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_Clone, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3SSDD)
itkBayesianClassifierImageFilterVIF3SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_swigregister
itkBayesianClassifierImageFilterVIF3SSDD_swigregister(itkBayesianClassifierImageFilterVIF3SSDD)

def itkBayesianClassifierImageFilterVIF3SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF3SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIF3SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIF3SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIF3SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3SSDD *":
    """itkBayesianClassifierImageFilterVIF3SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIF3SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3SSFF self) -> itkBayesianClassifierImageFilterVIF3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3SSFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3SSFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3SSFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF3SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_Clone, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3SSFF)
itkBayesianClassifierImageFilterVIF3SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_swigregister
itkBayesianClassifierImageFilterVIF3SSFF_swigregister(itkBayesianClassifierImageFilterVIF3SSFF)

def itkBayesianClassifierImageFilterVIF3SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF3SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIF3SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIF3SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIF3SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3SSFF *":
    """itkBayesianClassifierImageFilterVIF3SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIF3UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3UCDD self) -> itkBayesianClassifierImageFilterVIF3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3UCDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3UCDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3UCDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF3UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_Clone, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3UCDD)
itkBayesianClassifierImageFilterVIF3UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_swigregister
itkBayesianClassifierImageFilterVIF3UCDD_swigregister(itkBayesianClassifierImageFilterVIF3UCDD)

def itkBayesianClassifierImageFilterVIF3UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF3UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIF3UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIF3UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIF3UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3UCDD *":
    """itkBayesianClassifierImageFilterVIF3UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIF3UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3UCFF self) -> itkBayesianClassifierImageFilterVIF3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3UCFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3UCFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3UCFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF3UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_Clone, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3UCFF)
itkBayesianClassifierImageFilterVIF3UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_swigregister
itkBayesianClassifierImageFilterVIF3UCFF_swigregister(itkBayesianClassifierImageFilterVIF3UCFF)

def itkBayesianClassifierImageFilterVIF3UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF3UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIF3UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIF3UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIF3UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3UCFF *":
    """itkBayesianClassifierImageFilterVIF3UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIF3USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3USDD self) -> itkBayesianClassifierImageFilterVIF3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3USDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3USDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3USDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIF3USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_Clone, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetPriors, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3USDD)
itkBayesianClassifierImageFilterVIF3USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_swigregister
itkBayesianClassifierImageFilterVIF3USDD_swigregister(itkBayesianClassifierImageFilterVIF3USDD)

def itkBayesianClassifierImageFilterVIF3USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIF3USDD_Pointer":
    """itkBayesianClassifierImageFilterVIF3USDD___New_orig__() -> itkBayesianClassifierImageFilterVIF3USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD___New_orig__()

def itkBayesianClassifierImageFilterVIF3USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3USDD *":
    """itkBayesianClassifierImageFilterVIF3USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USDD_cast(obj)

class itkBayesianClassifierImageFilterVIF3USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIF3USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIF3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIF3USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIF3USFF self) -> itkBayesianClassifierImageFilterVIF3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIF3USFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIF3USFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIF3USFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIF3USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIF3USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIF3USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIF3USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIF3USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIF3USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIF3USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIF3USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_Clone, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetPriors, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIF3USFF)
itkBayesianClassifierImageFilterVIF3USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_swigregister
itkBayesianClassifierImageFilterVIF3USFF_swigregister(itkBayesianClassifierImageFilterVIF3USFF)

def itkBayesianClassifierImageFilterVIF3USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIF3USFF_Pointer":
    """itkBayesianClassifierImageFilterVIF3USFF___New_orig__() -> itkBayesianClassifierImageFilterVIF3USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF___New_orig__()

def itkBayesianClassifierImageFilterVIF3USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIF3USFF *":
    """itkBayesianClassifierImageFilterVIF3USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIF3USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIF3USFF_cast(obj)

class itkBayesianClassifierImageFilterVISS2SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2SSDD self) -> itkBayesianClassifierImageFilterVISS2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2SSDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2SSDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2SSDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS2SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_Clone, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetPriors, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2SSDD)
itkBayesianClassifierImageFilterVISS2SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_swigregister
itkBayesianClassifierImageFilterVISS2SSDD_swigregister(itkBayesianClassifierImageFilterVISS2SSDD)

def itkBayesianClassifierImageFilterVISS2SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS2SSDD_Pointer":
    """itkBayesianClassifierImageFilterVISS2SSDD___New_orig__() -> itkBayesianClassifierImageFilterVISS2SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD___New_orig__()

def itkBayesianClassifierImageFilterVISS2SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2SSDD *":
    """itkBayesianClassifierImageFilterVISS2SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSDD_cast(obj)

class itkBayesianClassifierImageFilterVISS2SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2SSFF self) -> itkBayesianClassifierImageFilterVISS2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2SSFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2SSFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2SSFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS2SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_Clone, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetPriors, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2SSFF)
itkBayesianClassifierImageFilterVISS2SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_swigregister
itkBayesianClassifierImageFilterVISS2SSFF_swigregister(itkBayesianClassifierImageFilterVISS2SSFF)

def itkBayesianClassifierImageFilterVISS2SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS2SSFF_Pointer":
    """itkBayesianClassifierImageFilterVISS2SSFF___New_orig__() -> itkBayesianClassifierImageFilterVISS2SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF___New_orig__()

def itkBayesianClassifierImageFilterVISS2SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2SSFF *":
    """itkBayesianClassifierImageFilterVISS2SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2SSFF_cast(obj)

class itkBayesianClassifierImageFilterVISS2UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2UCDD self) -> itkBayesianClassifierImageFilterVISS2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2UCDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2UCDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2UCDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS2UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_Clone, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetPriors, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2UCDD)
itkBayesianClassifierImageFilterVISS2UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_swigregister
itkBayesianClassifierImageFilterVISS2UCDD_swigregister(itkBayesianClassifierImageFilterVISS2UCDD)

def itkBayesianClassifierImageFilterVISS2UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS2UCDD_Pointer":
    """itkBayesianClassifierImageFilterVISS2UCDD___New_orig__() -> itkBayesianClassifierImageFilterVISS2UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD___New_orig__()

def itkBayesianClassifierImageFilterVISS2UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2UCDD *":
    """itkBayesianClassifierImageFilterVISS2UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCDD_cast(obj)

class itkBayesianClassifierImageFilterVISS2UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2UCFF self) -> itkBayesianClassifierImageFilterVISS2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2UCFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2UCFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2UCFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS2UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_Clone, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetPriors, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2UCFF)
itkBayesianClassifierImageFilterVISS2UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_swigregister
itkBayesianClassifierImageFilterVISS2UCFF_swigregister(itkBayesianClassifierImageFilterVISS2UCFF)

def itkBayesianClassifierImageFilterVISS2UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS2UCFF_Pointer":
    """itkBayesianClassifierImageFilterVISS2UCFF___New_orig__() -> itkBayesianClassifierImageFilterVISS2UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF___New_orig__()

def itkBayesianClassifierImageFilterVISS2UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2UCFF *":
    """itkBayesianClassifierImageFilterVISS2UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2UCFF_cast(obj)

class itkBayesianClassifierImageFilterVISS2USDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2USDD self) -> itkBayesianClassifierImageFilterVISS2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2USDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2USDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2USDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2USDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS2USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_Clone, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetPriors, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2USDD)
itkBayesianClassifierImageFilterVISS2USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_swigregister
itkBayesianClassifierImageFilterVISS2USDD_swigregister(itkBayesianClassifierImageFilterVISS2USDD)

def itkBayesianClassifierImageFilterVISS2USDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS2USDD_Pointer":
    """itkBayesianClassifierImageFilterVISS2USDD___New_orig__() -> itkBayesianClassifierImageFilterVISS2USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD___New_orig__()

def itkBayesianClassifierImageFilterVISS2USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2USDD *":
    """itkBayesianClassifierImageFilterVISS2USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USDD_cast(obj)

class itkBayesianClassifierImageFilterVISS2USFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS2USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS2USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS2USFF self) -> itkBayesianClassifierImageFilterVISS2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS2USFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS2USFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS2USFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS2USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS2USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS2USFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS2USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS2USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS2USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS2USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS2USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_Clone, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetPriors, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS2USFF)
itkBayesianClassifierImageFilterVISS2USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_swigregister
itkBayesianClassifierImageFilterVISS2USFF_swigregister(itkBayesianClassifierImageFilterVISS2USFF)

def itkBayesianClassifierImageFilterVISS2USFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS2USFF_Pointer":
    """itkBayesianClassifierImageFilterVISS2USFF___New_orig__() -> itkBayesianClassifierImageFilterVISS2USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF___New_orig__()

def itkBayesianClassifierImageFilterVISS2USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS2USFF *":
    """itkBayesianClassifierImageFilterVISS2USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS2USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS2USFF_cast(obj)

class itkBayesianClassifierImageFilterVISS3SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3SSDD self) -> itkBayesianClassifierImageFilterVISS3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3SSDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3SSDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3SSDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS3SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_Clone, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetPriors, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3SSDD)
itkBayesianClassifierImageFilterVISS3SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_swigregister
itkBayesianClassifierImageFilterVISS3SSDD_swigregister(itkBayesianClassifierImageFilterVISS3SSDD)

def itkBayesianClassifierImageFilterVISS3SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS3SSDD_Pointer":
    """itkBayesianClassifierImageFilterVISS3SSDD___New_orig__() -> itkBayesianClassifierImageFilterVISS3SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD___New_orig__()

def itkBayesianClassifierImageFilterVISS3SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3SSDD *":
    """itkBayesianClassifierImageFilterVISS3SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSDD_cast(obj)

class itkBayesianClassifierImageFilterVISS3SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3SSFF self) -> itkBayesianClassifierImageFilterVISS3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3SSFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3SSFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3SSFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS3SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_Clone, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetPriors, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3SSFF)
itkBayesianClassifierImageFilterVISS3SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_swigregister
itkBayesianClassifierImageFilterVISS3SSFF_swigregister(itkBayesianClassifierImageFilterVISS3SSFF)

def itkBayesianClassifierImageFilterVISS3SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS3SSFF_Pointer":
    """itkBayesianClassifierImageFilterVISS3SSFF___New_orig__() -> itkBayesianClassifierImageFilterVISS3SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF___New_orig__()

def itkBayesianClassifierImageFilterVISS3SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3SSFF *":
    """itkBayesianClassifierImageFilterVISS3SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3SSFF_cast(obj)

class itkBayesianClassifierImageFilterVISS3UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3UCDD self) -> itkBayesianClassifierImageFilterVISS3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3UCDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3UCDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3UCDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS3UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_Clone, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetPriors, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3UCDD)
itkBayesianClassifierImageFilterVISS3UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_swigregister
itkBayesianClassifierImageFilterVISS3UCDD_swigregister(itkBayesianClassifierImageFilterVISS3UCDD)

def itkBayesianClassifierImageFilterVISS3UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS3UCDD_Pointer":
    """itkBayesianClassifierImageFilterVISS3UCDD___New_orig__() -> itkBayesianClassifierImageFilterVISS3UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD___New_orig__()

def itkBayesianClassifierImageFilterVISS3UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3UCDD *":
    """itkBayesianClassifierImageFilterVISS3UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCDD_cast(obj)

class itkBayesianClassifierImageFilterVISS3UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3UCFF self) -> itkBayesianClassifierImageFilterVISS3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3UCFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3UCFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3UCFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS3UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_Clone, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetPriors, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3UCFF)
itkBayesianClassifierImageFilterVISS3UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_swigregister
itkBayesianClassifierImageFilterVISS3UCFF_swigregister(itkBayesianClassifierImageFilterVISS3UCFF)

def itkBayesianClassifierImageFilterVISS3UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS3UCFF_Pointer":
    """itkBayesianClassifierImageFilterVISS3UCFF___New_orig__() -> itkBayesianClassifierImageFilterVISS3UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF___New_orig__()

def itkBayesianClassifierImageFilterVISS3UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3UCFF *":
    """itkBayesianClassifierImageFilterVISS3UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3UCFF_cast(obj)

class itkBayesianClassifierImageFilterVISS3USDD(itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3USDD self) -> itkBayesianClassifierImageFilterVISS3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3USDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3USDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3USDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3USDD

        Create a new object of the class itkBayesianClassifierImageFilterVISS3USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_Clone, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetPriors, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3USDD)
itkBayesianClassifierImageFilterVISS3USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_swigregister
itkBayesianClassifierImageFilterVISS3USDD_swigregister(itkBayesianClassifierImageFilterVISS3USDD)

def itkBayesianClassifierImageFilterVISS3USDD___New_orig__() -> "itkBayesianClassifierImageFilterVISS3USDD_Pointer":
    """itkBayesianClassifierImageFilterVISS3USDD___New_orig__() -> itkBayesianClassifierImageFilterVISS3USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD___New_orig__()

def itkBayesianClassifierImageFilterVISS3USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3USDD *":
    """itkBayesianClassifierImageFilterVISS3USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USDD_cast(obj)

class itkBayesianClassifierImageFilterVISS3USFF(itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVISS3USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVISS3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVISS3USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVISS3USFF self) -> itkBayesianClassifierImageFilterVISS3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVISS3USFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVISS3USFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVISS3USFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVISS3USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVISS3USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVISS3USFF

        Create a new object of the class itkBayesianClassifierImageFilterVISS3USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVISS3USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVISS3USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVISS3USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVISS3USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_Clone, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetPriors, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVISS3USFF)
itkBayesianClassifierImageFilterVISS3USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_swigregister
itkBayesianClassifierImageFilterVISS3USFF_swigregister(itkBayesianClassifierImageFilterVISS3USFF)

def itkBayesianClassifierImageFilterVISS3USFF___New_orig__() -> "itkBayesianClassifierImageFilterVISS3USFF_Pointer":
    """itkBayesianClassifierImageFilterVISS3USFF___New_orig__() -> itkBayesianClassifierImageFilterVISS3USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF___New_orig__()

def itkBayesianClassifierImageFilterVISS3USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVISS3USFF *":
    """itkBayesianClassifierImageFilterVISS3USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVISS3USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVISS3USFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC2SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2SSDD self) -> itkBayesianClassifierImageFilterVIUC2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2SSDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2SSDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2SSDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_Clone, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2SSDD)
itkBayesianClassifierImageFilterVIUC2SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_swigregister
itkBayesianClassifierImageFilterVIUC2SSDD_swigregister(itkBayesianClassifierImageFilterVIUC2SSDD)

def itkBayesianClassifierImageFilterVIUC2SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC2SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC2SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC2SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2SSDD *":
    """itkBayesianClassifierImageFilterVIUC2SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC2SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2SSFF self) -> itkBayesianClassifierImageFilterVIUC2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2SSFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2SSFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2SSFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_Clone, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2SSFF)
itkBayesianClassifierImageFilterVIUC2SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_swigregister
itkBayesianClassifierImageFilterVIUC2SSFF_swigregister(itkBayesianClassifierImageFilterVIUC2SSFF)

def itkBayesianClassifierImageFilterVIUC2SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC2SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC2SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC2SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2SSFF *":
    """itkBayesianClassifierImageFilterVIUC2SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC2UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2UCDD self) -> itkBayesianClassifierImageFilterVIUC2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2UCDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2UCDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2UCDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_Clone, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2UCDD)
itkBayesianClassifierImageFilterVIUC2UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_swigregister
itkBayesianClassifierImageFilterVIUC2UCDD_swigregister(itkBayesianClassifierImageFilterVIUC2UCDD)

def itkBayesianClassifierImageFilterVIUC2UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC2UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC2UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC2UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2UCDD *":
    """itkBayesianClassifierImageFilterVIUC2UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC2UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2UCFF self) -> itkBayesianClassifierImageFilterVIUC2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2UCFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2UCFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2UCFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_Clone, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2UCFF)
itkBayesianClassifierImageFilterVIUC2UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_swigregister
itkBayesianClassifierImageFilterVIUC2UCFF_swigregister(itkBayesianClassifierImageFilterVIUC2UCFF)

def itkBayesianClassifierImageFilterVIUC2UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC2UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC2UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC2UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2UCFF *":
    """itkBayesianClassifierImageFilterVIUC2UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC2USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2USDD self) -> itkBayesianClassifierImageFilterVIUC2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2USDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2USDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2USDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_Clone, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2USDD)
itkBayesianClassifierImageFilterVIUC2USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_swigregister
itkBayesianClassifierImageFilterVIUC2USDD_swigregister(itkBayesianClassifierImageFilterVIUC2USDD)

def itkBayesianClassifierImageFilterVIUC2USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2USDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC2USDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC2USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC2USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2USDD *":
    """itkBayesianClassifierImageFilterVIUC2USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC2USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC2USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC2USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC2USFF self) -> itkBayesianClassifierImageFilterVIUC2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2USFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC2USFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC2USFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC2USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC2USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC2USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC2USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC2USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC2USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC2USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC2USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_Clone, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC2USFF)
itkBayesianClassifierImageFilterVIUC2USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_swigregister
itkBayesianClassifierImageFilterVIUC2USFF_swigregister(itkBayesianClassifierImageFilterVIUC2USFF)

def itkBayesianClassifierImageFilterVIUC2USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC2USFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC2USFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC2USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC2USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC2USFF *":
    """itkBayesianClassifierImageFilterVIUC2USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC2USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC2USFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC3SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3SSDD self) -> itkBayesianClassifierImageFilterVIUC3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3SSDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3SSDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3SSDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_Clone, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3SSDD)
itkBayesianClassifierImageFilterVIUC3SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_swigregister
itkBayesianClassifierImageFilterVIUC3SSDD_swigregister(itkBayesianClassifierImageFilterVIUC3SSDD)

def itkBayesianClassifierImageFilterVIUC3SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC3SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC3SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC3SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3SSDD *":
    """itkBayesianClassifierImageFilterVIUC3SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC3SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3SSFF self) -> itkBayesianClassifierImageFilterVIUC3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3SSFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3SSFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3SSFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_Clone, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3SSFF)
itkBayesianClassifierImageFilterVIUC3SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_swigregister
itkBayesianClassifierImageFilterVIUC3SSFF_swigregister(itkBayesianClassifierImageFilterVIUC3SSFF)

def itkBayesianClassifierImageFilterVIUC3SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC3SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC3SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC3SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3SSFF *":
    """itkBayesianClassifierImageFilterVIUC3SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC3UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3UCDD self) -> itkBayesianClassifierImageFilterVIUC3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3UCDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3UCDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3UCDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_Clone, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3UCDD)
itkBayesianClassifierImageFilterVIUC3UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_swigregister
itkBayesianClassifierImageFilterVIUC3UCDD_swigregister(itkBayesianClassifierImageFilterVIUC3UCDD)

def itkBayesianClassifierImageFilterVIUC3UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC3UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC3UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC3UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3UCDD *":
    """itkBayesianClassifierImageFilterVIUC3UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC3UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3UCFF self) -> itkBayesianClassifierImageFilterVIUC3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3UCFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3UCFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3UCFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_Clone, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3UCFF)
itkBayesianClassifierImageFilterVIUC3UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_swigregister
itkBayesianClassifierImageFilterVIUC3UCFF_swigregister(itkBayesianClassifierImageFilterVIUC3UCFF)

def itkBayesianClassifierImageFilterVIUC3UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC3UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC3UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC3UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3UCFF *":
    """itkBayesianClassifierImageFilterVIUC3UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIUC3USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3USDD self) -> itkBayesianClassifierImageFilterVIUC3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3USDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3USDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3USDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_Clone, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetPriors, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3USDD)
itkBayesianClassifierImageFilterVIUC3USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_swigregister
itkBayesianClassifierImageFilterVIUC3USDD_swigregister(itkBayesianClassifierImageFilterVIUC3USDD)

def itkBayesianClassifierImageFilterVIUC3USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3USDD_Pointer":
    """itkBayesianClassifierImageFilterVIUC3USDD___New_orig__() -> itkBayesianClassifierImageFilterVIUC3USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD___New_orig__()

def itkBayesianClassifierImageFilterVIUC3USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3USDD *":
    """itkBayesianClassifierImageFilterVIUC3USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USDD_cast(obj)

class itkBayesianClassifierImageFilterVIUC3USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUC3USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUC3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUC3USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUC3USFF self) -> itkBayesianClassifierImageFilterVIUC3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3USFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUC3USFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUC3USFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUC3USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUC3USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUC3USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUC3USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUC3USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUC3USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUC3USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUC3USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_Clone, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetPriors, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUC3USFF)
itkBayesianClassifierImageFilterVIUC3USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_swigregister
itkBayesianClassifierImageFilterVIUC3USFF_swigregister(itkBayesianClassifierImageFilterVIUC3USFF)

def itkBayesianClassifierImageFilterVIUC3USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUC3USFF_Pointer":
    """itkBayesianClassifierImageFilterVIUC3USFF___New_orig__() -> itkBayesianClassifierImageFilterVIUC3USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF___New_orig__()

def itkBayesianClassifierImageFilterVIUC3USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUC3USFF *":
    """itkBayesianClassifierImageFilterVIUC3USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUC3USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUC3USFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS2SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2SSDD self) -> itkBayesianClassifierImageFilterVIUS2SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2SSDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2SSDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2SSDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_Clone, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2SSDD)
itkBayesianClassifierImageFilterVIUS2SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_swigregister
itkBayesianClassifierImageFilterVIUS2SSDD_swigregister(itkBayesianClassifierImageFilterVIUS2SSDD)

def itkBayesianClassifierImageFilterVIUS2SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS2SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS2SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS2SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2SSDD *":
    """itkBayesianClassifierImageFilterVIUS2SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS2SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2SSFF self) -> itkBayesianClassifierImageFilterVIUS2SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2SSFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2SSFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2SSFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_Clone, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2SSFF)
itkBayesianClassifierImageFilterVIUS2SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_swigregister
itkBayesianClassifierImageFilterVIUS2SSFF_swigregister(itkBayesianClassifierImageFilterVIUS2SSFF)

def itkBayesianClassifierImageFilterVIUS2SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS2SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS2SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS2SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2SSFF *":
    """itkBayesianClassifierImageFilterVIUS2SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS2UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2UCDD self) -> itkBayesianClassifierImageFilterVIUS2UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2UCDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2UCDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2UCDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_Clone, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2UCDD)
itkBayesianClassifierImageFilterVIUS2UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_swigregister
itkBayesianClassifierImageFilterVIUS2UCDD_swigregister(itkBayesianClassifierImageFilterVIUS2UCDD)

def itkBayesianClassifierImageFilterVIUS2UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS2UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS2UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS2UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2UCDD *":
    """itkBayesianClassifierImageFilterVIUS2UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS2UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2UCFF self) -> itkBayesianClassifierImageFilterVIUS2UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2UCFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2UCFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2UCFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_Clone, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2UCFF)
itkBayesianClassifierImageFilterVIUS2UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_swigregister
itkBayesianClassifierImageFilterVIUS2UCFF_swigregister(itkBayesianClassifierImageFilterVIUS2UCFF)

def itkBayesianClassifierImageFilterVIUS2UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS2UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS2UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS2UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2UCFF *":
    """itkBayesianClassifierImageFilterVIUS2UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS2USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2USDD self) -> itkBayesianClassifierImageFilterVIUS2USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID2ID2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2USDD self, itkImageToImageFilterID2ID2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID2ID2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2USDD self) -> itkImageToImageFilterID2ID2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2USDD self, itkVectorImageD2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_Clone, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2USDD)
itkBayesianClassifierImageFilterVIUS2USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_swigregister
itkBayesianClassifierImageFilterVIUS2USDD_swigregister(itkBayesianClassifierImageFilterVIUS2USDD)

def itkBayesianClassifierImageFilterVIUS2USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2USDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS2USDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS2USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS2USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2USDD *":
    """itkBayesianClassifierImageFilterVIUS2USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS2USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS2USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS2USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS2USFF self) -> itkBayesianClassifierImageFilterVIUS2USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF2IF2') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2USFF self, itkImageToImageFilterIF2IF2 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF2IF2_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS2USFF self) -> itkImageToImageFilterIF2IF2_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF2') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS2USFF self, itkVectorImageF2 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS2USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS2USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS2USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS2USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS2USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS2USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS2USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS2USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_Clone, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS2USFF)
itkBayesianClassifierImageFilterVIUS2USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_swigregister
itkBayesianClassifierImageFilterVIUS2USFF_swigregister(itkBayesianClassifierImageFilterVIUS2USFF)

def itkBayesianClassifierImageFilterVIUS2USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS2USFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS2USFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS2USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS2USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS2USFF *":
    """itkBayesianClassifierImageFilterVIUS2USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS2USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS2USFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS3SSDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3SSDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3SSDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3SSDD self) -> itkBayesianClassifierImageFilterVIUS3SSDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3SSDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3SSDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3SSDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3SSDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3SSDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3SSDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3SSDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3SSDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3SSDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3SSDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3SSDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3SSDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3SSDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3SSDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_Clone, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3SSDD)
itkBayesianClassifierImageFilterVIUS3SSDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_swigregister
itkBayesianClassifierImageFilterVIUS3SSDD_swigregister(itkBayesianClassifierImageFilterVIUS3SSDD)

def itkBayesianClassifierImageFilterVIUS3SSDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3SSDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS3SSDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS3SSDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS3SSDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3SSDD *":
    """itkBayesianClassifierImageFilterVIUS3SSDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3SSDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS3SSFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3SSFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3SSFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3SSFF self) -> itkBayesianClassifierImageFilterVIUS3SSFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3SSFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3SSFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3SSFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3SSFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3SSFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3SSFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3SSFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3SSFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3SSFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3SSFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3SSFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3SSFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3SSFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3SSFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_Clone, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3SSFF)
itkBayesianClassifierImageFilterVIUS3SSFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_swigregister
itkBayesianClassifierImageFilterVIUS3SSFF_swigregister(itkBayesianClassifierImageFilterVIUS3SSFF)

def itkBayesianClassifierImageFilterVIUS3SSFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3SSFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS3SSFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS3SSFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS3SSFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3SSFF *":
    """itkBayesianClassifierImageFilterVIUS3SSFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3SSFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3SSFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS3UCDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3UCDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3UCDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3UCDD self) -> itkBayesianClassifierImageFilterVIUS3UCDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3UCDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3UCDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3UCDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3UCDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3UCDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3UCDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3UCDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3UCDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3UCDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3UCDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3UCDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3UCDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3UCDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3UCDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_Clone, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3UCDD)
itkBayesianClassifierImageFilterVIUS3UCDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_swigregister
itkBayesianClassifierImageFilterVIUS3UCDD_swigregister(itkBayesianClassifierImageFilterVIUS3UCDD)

def itkBayesianClassifierImageFilterVIUS3UCDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3UCDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS3UCDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS3UCDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS3UCDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3UCDD *":
    """itkBayesianClassifierImageFilterVIUS3UCDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3UCDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS3UCFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3UCFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3UCFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3UCFF self) -> itkBayesianClassifierImageFilterVIUS3UCFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3UCFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3UCFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3UCFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3UCFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3UCFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3UCFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3UCFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3UCFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3UCFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3UCFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3UCFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3UCFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3UCFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3UCFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_Clone, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3UCFF)
itkBayesianClassifierImageFilterVIUS3UCFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_swigregister
itkBayesianClassifierImageFilterVIUS3UCFF_swigregister(itkBayesianClassifierImageFilterVIUS3UCFF)

def itkBayesianClassifierImageFilterVIUS3UCFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3UCFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS3UCFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS3UCFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS3UCFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3UCFF *":
    """itkBayesianClassifierImageFilterVIUS3UCFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3UCFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3UCFF_cast(obj)

class itkBayesianClassifierImageFilterVIUS3USDD(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3USDD_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3USDD_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3USDD self) -> itkBayesianClassifierImageFilterVIUS3USDD_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterID3ID3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3USDD self, itkImageToImageFilterID3ID3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterID3ID3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3USDD self) -> itkImageToImageFilterID3ID3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageD3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3USDD self, itkVectorImageD3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3USDD self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3USDD self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3USDD

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3USDD *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3USDD"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3USDD

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3USDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3USDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3USDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3USDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3USDD.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_Clone, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetPriors, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3USDD)
itkBayesianClassifierImageFilterVIUS3USDD_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_swigregister
itkBayesianClassifierImageFilterVIUS3USDD_swigregister(itkBayesianClassifierImageFilterVIUS3USDD)

def itkBayesianClassifierImageFilterVIUS3USDD___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3USDD_Pointer":
    """itkBayesianClassifierImageFilterVIUS3USDD___New_orig__() -> itkBayesianClassifierImageFilterVIUS3USDD_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD___New_orig__()

def itkBayesianClassifierImageFilterVIUS3USDD_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3USDD *":
    """itkBayesianClassifierImageFilterVIUS3USDD_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3USDD"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USDD_cast(obj)

class itkBayesianClassifierImageFilterVIUS3USFF(itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3):
    """


    Performs Bayesian Classification on an image.

    Inputs and Outputs The input to this filter is an itk::VectorImage
    that represents pixel memberships to 'n' classes. This image is
    conveniently generated by the
    BayesianClassifierInitializationImageFilter. You may use that filter
    to generate the membership images or specify your own.

    The output of the filter is a label map (an image of unsigned char's
    is the default.) with pixel values indicating the classes they
    correspond to. Pixels with intensity 0 belong to the 0th class, 1
    belong to the 1st class etc.... The classification is done by applying
    a Maximum decision rule to the posterior image. Parameters The filter
    optionally allows you to specify a prior image as well. The prior
    image, if specified must be a VectorImage with as many components as
    the number of classes. The posterior image is then generated by
    multiplying the prior image with the membership image. If the prior
    image is not specified, the posterior image is the same as the
    membership image. Another way to look at it is that the priors default
    to having a uniform distribution over the number of classes. Posterior
    membership of a pixel = Prior * Membership

    The filter optionally accepts a smoothing filter and number of
    iterations associated with the smoothing filter. The philosophy is
    that the filter allows you to iteratively smooth the posteriors prior
    to applying the decision rule. It is hoped that this would yield a
    better classification. The user will need to plug in his own smoothing
    filter with all the parameters set. Template parameters
    InputVectorImage, datatype of the output labelmap, precision of the
    posterior image, precision of the prior image.

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:  VectorImage

    See:   BayesianClassifierInitializationImageFilter

    C++ includes: itkBayesianClassifierImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBayesianClassifierImageFilterVIUS3USFF_Pointer":
        """__New_orig__() -> itkBayesianClassifierImageFilterVIUS3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBayesianClassifierImageFilterVIUS3USFF_Pointer":
        """Clone(itkBayesianClassifierImageFilterVIUS3USFF self) -> itkBayesianClassifierImageFilterVIUS3USFF_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_Clone(self)


    def SetSmoothingFilter(self, arg0: 'itkImageToImageFilterIF3IF3') -> "void":
        """
        SetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3USFF self, itkImageToImageFilterIF3IF3 arg0)

        Set/Get the
        smoothing filter that may optionally be applied to the posterior
        image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetSmoothingFilter(self, arg0)


    def GetSmoothingFilter(self) -> "itkImageToImageFilterIF3IF3_Pointer":
        """GetSmoothingFilter(itkBayesianClassifierImageFilterVIUS3USFF self) -> itkImageToImageFilterIF3IF3_Pointer"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_GetSmoothingFilter(self)


    def SetPriors(self, arg0: 'itkVectorImageF3') -> "void":
        """
        SetPriors(itkBayesianClassifierImageFilterVIUS3USFF self, itkVectorImageF3 arg0)

        Set the priors image. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetPriors(self, arg0)


    def SetNumberOfSmoothingIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3USFF self, unsigned int const _arg)

        Number of iterations to apply the smoothing filter. 
        """
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetNumberOfSmoothingIterations(self, _arg)


    def GetNumberOfSmoothingIterations(self) -> "unsigned int":
        """GetNumberOfSmoothingIterations(itkBayesianClassifierImageFilterVIUS3USFF self) -> unsigned int"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_GetNumberOfSmoothingIterations(self)

    UnsignedIntConvertibleToLabelsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_UnsignedIntConvertibleToLabelsCheck
    PosteriorsAdditiveOperatorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_PosteriorsAdditiveOperatorsCheck
    IntConvertibleToPosteriorsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_IntConvertibleToPosteriorsCheck
    InputHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_InputHasNumericTraitsCheck
    PosteriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_PosteriorsHasNumericTraitsCheck
    PriorsHasNumericTraitsCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_PriorsHasNumericTraitsCheck
    InputPriorsPosteriorsMultiplyOperatorCheck = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_InputPriorsPosteriorsMultiplyOperatorCheck
    __swig_destroy__ = _itkBayesianClassifierImageFilterPython.delete_itkBayesianClassifierImageFilterVIUS3USFF

    def cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3USFF *":
        """cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3USFF"""
        return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierImageFilterVIUS3USFF

        Create a new object of the class itkBayesianClassifierImageFilterVIUS3USFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierImageFilterVIUS3USFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierImageFilterVIUS3USFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBayesianClassifierImageFilterVIUS3USFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBayesianClassifierImageFilterVIUS3USFF.Clone = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_Clone, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF.SetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF.GetSmoothingFilter = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_GetSmoothingFilter, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF.SetPriors = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetPriors, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF.SetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_SetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF.GetNumberOfSmoothingIterations = new_instancemethod(_itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_GetNumberOfSmoothingIterations, None, itkBayesianClassifierImageFilterVIUS3USFF)
itkBayesianClassifierImageFilterVIUS3USFF_swigregister = _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_swigregister
itkBayesianClassifierImageFilterVIUS3USFF_swigregister(itkBayesianClassifierImageFilterVIUS3USFF)

def itkBayesianClassifierImageFilterVIUS3USFF___New_orig__() -> "itkBayesianClassifierImageFilterVIUS3USFF_Pointer":
    """itkBayesianClassifierImageFilterVIUS3USFF___New_orig__() -> itkBayesianClassifierImageFilterVIUS3USFF_Pointer"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF___New_orig__()

def itkBayesianClassifierImageFilterVIUS3USFF_cast(obj: 'itkLightObject') -> "itkBayesianClassifierImageFilterVIUS3USFF *":
    """itkBayesianClassifierImageFilterVIUS3USFF_cast(itkLightObject obj) -> itkBayesianClassifierImageFilterVIUS3USFF"""
    return _itkBayesianClassifierImageFilterPython.itkBayesianClassifierImageFilterVIUS3USFF_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bayesian_classifier_image_filter(*args, **kwargs):
    """Procedural interface for BayesianClassifierImageFilter"""
    import itk
    instance = itk.BayesianClassifierImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def bayesian_classifier_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BayesianClassifierImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BayesianClassifierImageFilter.values()[0]
    else:
        filter_object = itk.BayesianClassifierImageFilter

    bayesian_classifier_image_filter.__doc__ = filter_object.__doc__
    bayesian_classifier_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    bayesian_classifier_image_filter.__doc__ += "Available Keyword Arguments:\n"
    bayesian_classifier_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



