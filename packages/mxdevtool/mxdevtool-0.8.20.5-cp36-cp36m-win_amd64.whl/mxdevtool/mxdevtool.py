# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mxdevtool
else:
    import _mxdevtool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mxdevtool.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _mxdevtool.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _mxdevtool.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _mxdevtool.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _mxdevtool.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _mxdevtool.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _mxdevtool.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _mxdevtool.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _mxdevtool.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _mxdevtool.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _mxdevtool.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _mxdevtool.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _mxdevtool.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _mxdevtool.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _mxdevtool.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _mxdevtool.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mxdevtool:
_mxdevtool.SwigPyIterator_swigregister(SwigPyIterator)
cvar = _mxdevtool.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

Sunday = _mxdevtool.Sunday
Monday = _mxdevtool.Monday
Tuesday = _mxdevtool.Tuesday
Wednesday = _mxdevtool.Wednesday
Thursday = _mxdevtool.Thursday
Friday = _mxdevtool.Friday
Saturday = _mxdevtool.Saturday
January = _mxdevtool.January
February = _mxdevtool.February
March = _mxdevtool.March
April = _mxdevtool.April
May = _mxdevtool.May
June = _mxdevtool.June
July = _mxdevtool.July
August = _mxdevtool.August
September = _mxdevtool.September
October = _mxdevtool.October
November = _mxdevtool.November
December = _mxdevtool.December
Days = _mxdevtool.Days
Weeks = _mxdevtool.Weeks
Months = _mxdevtool.Months
Years = _mxdevtool.Years
NoFrequency = _mxdevtool.NoFrequency
Once = _mxdevtool.Once
Annual = _mxdevtool.Annual
Semiannual = _mxdevtool.Semiannual
EveryFourthMonth = _mxdevtool.EveryFourthMonth
Quarterly = _mxdevtool.Quarterly
Bimonthly = _mxdevtool.Bimonthly
Monthly = _mxdevtool.Monthly
EveryFourthWeek = _mxdevtool.EveryFourthWeek
Biweekly = _mxdevtool.Biweekly
Weekly = _mxdevtool.Weekly
Daily = _mxdevtool.Daily
OtherFrequency = _mxdevtool.OtherFrequency
class Period(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def length(self) -> "Integer":
        return _mxdevtool.Period_length(self)

    def units(self) -> "TimeUnit":
        return _mxdevtool.Period_units(self)

    def frequency(self) -> "Frequency":
        return _mxdevtool.Period_frequency(self)

    def __init__(self, *args):
        _mxdevtool.Period_swiginit(self, _mxdevtool.new_Period(*args))

    def __str__(self) -> "std::string":
        return _mxdevtool.Period___str__(self)

    def __repr__(self) -> "std::string":
        return _mxdevtool.Period___repr__(self)

    def __neg__(self) -> "Period":
        return _mxdevtool.Period___neg__(self)

    def __mul__(self, n: "Integer") -> "Period":
        return _mxdevtool.Period___mul__(self, n)

    def __rmul__(self, n: "Integer") -> "Period":
        return _mxdevtool.Period___rmul__(self, n)

    def __lt__(self, other: "Period") -> "bool":
        return _mxdevtool.Period___lt__(self, other)

    def __eq__(self, other: "Period") -> "bool":
        return _mxdevtool.Period___eq__(self, other)

    def __cmp__(self, other: "Period") -> "int":
        return _mxdevtool.Period___cmp__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Period

# Register Period in _mxdevtool:
_mxdevtool.Period_swigregister(Period)

class PeriodInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _mxdevtool.PeriodInterval_swiginit(self, _mxdevtool.new_PeriodInterval(*args))

    def __str__(self) -> "std::string":
        return _mxdevtool.PeriodInterval___str__(self)

    def __repr__(self) -> "std::string":
        return _mxdevtool.PeriodInterval___repr__(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodInterval

# Register PeriodInterval in _mxdevtool:
_mxdevtool.PeriodInterval_swigregister(PeriodInterval)

class WholePeriodInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.WholePeriodInterval_swiginit(self, _mxdevtool.new_WholePeriodInterval())
    __swig_destroy__ = _mxdevtool.delete_WholePeriodInterval

# Register WholePeriodInterval in _mxdevtool:
_mxdevtool.WholePeriodInterval_swigregister(WholePeriodInterval)

class PeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.PeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.PeriodVector___bool__(self)

    def __len__(self) -> "std::vector< Period >::size_type":
        return _mxdevtool.PeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "std::vector< Period,std::allocator< Period > > *":
        return _mxdevtool.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "void":
        return _mxdevtool.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Period >::value_type const &":
        return _mxdevtool.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.PeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Period >::value_type":
        return _mxdevtool.PeriodVector_pop(self)

    def append(self, x: "Period") -> "void":
        return _mxdevtool.PeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.PeriodVector_empty(self)

    def size(self) -> "std::vector< Period >::size_type":
        return _mxdevtool.PeriodVector_size(self)

    def swap(self, v: "PeriodVector") -> "void":
        return _mxdevtool.PeriodVector_swap(self, v)

    def begin(self) -> "std::vector< Period >::iterator":
        return _mxdevtool.PeriodVector_begin(self)

    def end(self) -> "std::vector< Period >::iterator":
        return _mxdevtool.PeriodVector_end(self)

    def rbegin(self) -> "std::vector< Period >::reverse_iterator":
        return _mxdevtool.PeriodVector_rbegin(self)

    def rend(self) -> "std::vector< Period >::reverse_iterator":
        return _mxdevtool.PeriodVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.PeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< Period >::allocator_type":
        return _mxdevtool.PeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.PeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Period >::iterator":
        return _mxdevtool.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.PeriodVector_swiginit(self, _mxdevtool.new_PeriodVector(*args))

    def push_back(self, x: "Period") -> "void":
        return _mxdevtool.PeriodVector_push_back(self, x)

    def front(self) -> "std::vector< Period >::value_type const &":
        return _mxdevtool.PeriodVector_front(self)

    def back(self) -> "std::vector< Period >::value_type const &":
        return _mxdevtool.PeriodVector_back(self)

    def assign(self, n: "std::vector< Period >::size_type", x: "Period") -> "void":
        return _mxdevtool.PeriodVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.PeriodVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.PeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< Period >::size_type") -> "void":
        return _mxdevtool.PeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< Period >::size_type":
        return _mxdevtool.PeriodVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodVector

# Register PeriodVector in _mxdevtool:
_mxdevtool.PeriodVector_swigregister(PeriodVector)

class PeriodIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.PeriodIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.PeriodIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.PeriodIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< PeriodInterval >::size_type":
        return _mxdevtool.PeriodIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< PeriodInterval >::difference_type", j: "std::vector< PeriodInterval >::difference_type") -> "std::vector< PeriodInterval,std::allocator< PeriodInterval > > *":
        return _mxdevtool.PeriodIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.PeriodIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PeriodInterval >::difference_type", j: "std::vector< PeriodInterval >::difference_type") -> "void":
        return _mxdevtool.PeriodIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.PeriodIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PeriodInterval >::value_type const &":
        return _mxdevtool.PeriodIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.PeriodIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< PeriodInterval >::value_type":
        return _mxdevtool.PeriodIntervalVector_pop(self)

    def append(self, x: "PeriodInterval") -> "void":
        return _mxdevtool.PeriodIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.PeriodIntervalVector_empty(self)

    def size(self) -> "std::vector< PeriodInterval >::size_type":
        return _mxdevtool.PeriodIntervalVector_size(self)

    def swap(self, v: "PeriodIntervalVector") -> "void":
        return _mxdevtool.PeriodIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< PeriodInterval >::iterator":
        return _mxdevtool.PeriodIntervalVector_begin(self)

    def end(self) -> "std::vector< PeriodInterval >::iterator":
        return _mxdevtool.PeriodIntervalVector_end(self)

    def rbegin(self) -> "std::vector< PeriodInterval >::reverse_iterator":
        return _mxdevtool.PeriodIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< PeriodInterval >::reverse_iterator":
        return _mxdevtool.PeriodIntervalVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.PeriodIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< PeriodInterval >::allocator_type":
        return _mxdevtool.PeriodIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.PeriodIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< PeriodInterval >::iterator":
        return _mxdevtool.PeriodIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.PeriodIntervalVector_swiginit(self, _mxdevtool.new_PeriodIntervalVector(*args))

    def push_back(self, x: "PeriodInterval") -> "void":
        return _mxdevtool.PeriodIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< PeriodInterval >::value_type const &":
        return _mxdevtool.PeriodIntervalVector_front(self)

    def back(self) -> "std::vector< PeriodInterval >::value_type const &":
        return _mxdevtool.PeriodIntervalVector_back(self)

    def assign(self, n: "std::vector< PeriodInterval >::size_type", x: "PeriodInterval") -> "void":
        return _mxdevtool.PeriodIntervalVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.PeriodIntervalVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.PeriodIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< PeriodInterval >::size_type") -> "void":
        return _mxdevtool.PeriodIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< PeriodInterval >::size_type":
        return _mxdevtool.PeriodIntervalVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodIntervalVector

# Register PeriodIntervalVector in _mxdevtool:
_mxdevtool.PeriodIntervalVector_swigregister(PeriodIntervalVector)

class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def weekday(self) -> "Weekday":
        return _mxdevtool.Date_weekday(self)

    def dayOfMonth(self) -> "Day":
        return _mxdevtool.Date_dayOfMonth(self)

    def dayOfYear(self) -> "Day":
        return _mxdevtool.Date_dayOfYear(self)

    def month(self) -> "Month":
        return _mxdevtool.Date_month(self)

    def year(self) -> "Year":
        return _mxdevtool.Date_year(self)

    @staticmethod
    def isLeap(y: "Year") -> "bool":
        return _mxdevtool.Date_isLeap(y)

    @staticmethod
    def minDate() -> "Date":
        return _mxdevtool.Date_minDate()

    @staticmethod
    def maxDate() -> "Date":
        return _mxdevtool.Date_maxDate()

    @staticmethod
    def todaysDate() -> "Date":
        return _mxdevtool.Date_todaysDate()

    @staticmethod
    def endOfMonth(arg1: "Date") -> "Date":
        return _mxdevtool.Date_endOfMonth(arg1)

    @staticmethod
    def isEndOfMonth(arg1: "Date") -> "bool":
        return _mxdevtool.Date_isEndOfMonth(arg1)

    @staticmethod
    def nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
        return _mxdevtool.Date_nextWeekday(arg1, arg2)

    @staticmethod
    def nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
        return _mxdevtool.Date_nthWeekday(n, arg2, m, y)

    def __add__(self, *args) -> "Date":
        return _mxdevtool.Date___add__(self, *args)

    def __init__(self, *args):
        _mxdevtool.Date_swiginit(self, _mxdevtool.new_Date(*args))

    def weekdayNumber(self) -> "Integer":
        return _mxdevtool.Date_weekdayNumber(self)

    def __str__(self) -> "std::string":
        return _mxdevtool.Date___str__(self)

    def __repr__(self) -> "std::string":
        return _mxdevtool.Date___repr__(self)

    def ISO(self) -> "std::string":
        return _mxdevtool.Date_ISO(self)

    def __sub__(self, *args) -> "BigInteger":
        return _mxdevtool.Date___sub__(self, *args)

    def __eq__(self, other: "Date") -> "bool":
        return _mxdevtool.Date___eq__(self, other)

    def __cmp__(self, other: "Date") -> "int":
        return _mxdevtool.Date___cmp__(self, other)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Date___nonzero__(self)

    def __hash__(self) -> "int":
        return _mxdevtool.Date___hash__(self)

    def __lt__(self, other: "Date") -> "bool":
        return _mxdevtool.Date___lt__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Date

# Register Date in _mxdevtool:
_mxdevtool.Date_swigregister(Date)

def Date_isLeap(y: "Year") -> "bool":
    return _mxdevtool.Date_isLeap(y)

def Date_minDate() -> "Date":
    return _mxdevtool.Date_minDate()

def Date_maxDate() -> "Date":
    return _mxdevtool.Date_maxDate()

def Date_todaysDate() -> "Date":
    return _mxdevtool.Date_todaysDate()

def Date_endOfMonth(arg1: "Date") -> "Date":
    return _mxdevtool.Date_endOfMonth(arg1)

def Date_isEndOfMonth(arg1: "Date") -> "bool":
    return _mxdevtool.Date_isEndOfMonth(arg1)

def Date_nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
    return _mxdevtool.Date_nextWeekday(arg1, arg2)

def Date_nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
    return _mxdevtool.Date_nthWeekday(n, arg2, m, y)

class DateParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
        return _mxdevtool.DateParser_parseFormatted(str, fmt)

    @staticmethod
    def parseISO(str: "std::string const &") -> "Date":
        return _mxdevtool.DateParser_parseISO(str)

    @staticmethod
    def parse(str: "std::string const &", fmt: "std::string") -> "Date":
        return _mxdevtool.DateParser_parse(str, fmt)

    def __init__(self):
        _mxdevtool.DateParser_swiginit(self, _mxdevtool.new_DateParser())
    __swig_destroy__ = _mxdevtool.delete_DateParser

# Register DateParser in _mxdevtool:
_mxdevtool.DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
    return _mxdevtool.DateParser_parseFormatted(str, fmt)

def DateParser_parseISO(str: "std::string const &") -> "Date":
    return _mxdevtool.DateParser_parseISO(str)

def DateParser_parse(str: "std::string const &", fmt: "std::string") -> "Date":
    return _mxdevtool.DateParser_parse(str, fmt)

class PeriodParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(str: "std::string const &") -> "Period":
        return _mxdevtool.PeriodParser_parse(str)

    def __init__(self):
        _mxdevtool.PeriodParser_swiginit(self, _mxdevtool.new_PeriodParser())
    __swig_destroy__ = _mxdevtool.delete_PeriodParser

# Register PeriodParser in _mxdevtool:
_mxdevtool.PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str: "std::string const &") -> "Period":
    return _mxdevtool.PeriodParser_parse(str)


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.DateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.DateVector___bool__(self)

    def __len__(self) -> "std::vector< Date >::size_type":
        return _mxdevtool.DateVector___len__(self)

    def __getslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "std::vector< Date,std::allocator< Date > > *":
        return _mxdevtool.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.DateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "void":
        return _mxdevtool.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.DateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Date >::value_type const &":
        return _mxdevtool.DateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.DateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Date >::value_type":
        return _mxdevtool.DateVector_pop(self)

    def append(self, x: "Date") -> "void":
        return _mxdevtool.DateVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.DateVector_empty(self)

    def size(self) -> "std::vector< Date >::size_type":
        return _mxdevtool.DateVector_size(self)

    def swap(self, v: "DateVector") -> "void":
        return _mxdevtool.DateVector_swap(self, v)

    def begin(self) -> "std::vector< Date >::iterator":
        return _mxdevtool.DateVector_begin(self)

    def end(self) -> "std::vector< Date >::iterator":
        return _mxdevtool.DateVector_end(self)

    def rbegin(self) -> "std::vector< Date >::reverse_iterator":
        return _mxdevtool.DateVector_rbegin(self)

    def rend(self) -> "std::vector< Date >::reverse_iterator":
        return _mxdevtool.DateVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.DateVector_clear(self)

    def get_allocator(self) -> "std::vector< Date >::allocator_type":
        return _mxdevtool.DateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.DateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Date >::iterator":
        return _mxdevtool.DateVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.DateVector_swiginit(self, _mxdevtool.new_DateVector(*args))

    def push_back(self, x: "Date") -> "void":
        return _mxdevtool.DateVector_push_back(self, x)

    def front(self) -> "std::vector< Date >::value_type const &":
        return _mxdevtool.DateVector_front(self)

    def back(self) -> "std::vector< Date >::value_type const &":
        return _mxdevtool.DateVector_back(self)

    def assign(self, n: "std::vector< Date >::size_type", x: "Date") -> "void":
        return _mxdevtool.DateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.DateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.DateVector_insert(self, *args)

    def reserve(self, n: "std::vector< Date >::size_type") -> "void":
        return _mxdevtool.DateVector_reserve(self, n)

    def capacity(self) -> "std::vector< Date >::size_type":
        return _mxdevtool.DateVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DateVector

# Register DateVector in _mxdevtool:
_mxdevtool.DateVector_swigregister(DateVector)

class IMM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _mxdevtool.IMM_F
    G = _mxdevtool.IMM_G
    H = _mxdevtool.IMM_H
    J = _mxdevtool.IMM_J
    K = _mxdevtool.IMM_K
    M = _mxdevtool.IMM_M
    N = _mxdevtool.IMM_N
    Q = _mxdevtool.IMM_Q
    U = _mxdevtool.IMM_U
    V = _mxdevtool.IMM_V
    X = _mxdevtool.IMM_X
    Z = _mxdevtool.IMM_Z

    @staticmethod
    def isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
        return _mxdevtool.IMM_isIMMdate(d, mainCycle)

    @staticmethod
    def isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
        return _mxdevtool.IMM_isIMMcode(code, mainCycle)

    @staticmethod
    def code(immDate: "Date") -> "std::string":
        return _mxdevtool.IMM_code(immDate)

    @staticmethod
    def date(*args) -> "Date":
        return _mxdevtool.IMM_date(*args)

    @staticmethod
    def nextDate(*args) -> "Date":
        return _mxdevtool.IMM_nextDate(*args)

    @staticmethod
    def nextCode(*args) -> "std::string":
        return _mxdevtool.IMM_nextCode(*args)

    def __init__(self):
        _mxdevtool.IMM_swiginit(self, _mxdevtool.new_IMM())
    __swig_destroy__ = _mxdevtool.delete_IMM

# Register IMM in _mxdevtool:
_mxdevtool.IMM_swigregister(IMM)

def IMM_isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
    return _mxdevtool.IMM_isIMMdate(d, mainCycle)

def IMM_isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
    return _mxdevtool.IMM_isIMMcode(code, mainCycle)

def IMM_code(immDate: "Date") -> "std::string":
    return _mxdevtool.IMM_code(immDate)

def IMM_date(*args) -> "Date":
    return _mxdevtool.IMM_date(*args)

def IMM_nextDate(*args) -> "Date":
    return _mxdevtool.IMM_nextDate(*args)

def IMM_nextCode(*args) -> "std::string":
    return _mxdevtool.IMM_nextCode(*args)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _mxdevtool.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _mxdevtool.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _mxdevtool.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _mxdevtool.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _mxdevtool.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _mxdevtool.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _mxdevtool.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _mxdevtool.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _mxdevtool.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _mxdevtool.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _mxdevtool.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _mxdevtool.IntVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _mxdevtool.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _mxdevtool.IntVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.IntVector_swiginit(self, _mxdevtool.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _mxdevtool.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _mxdevtool.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _mxdevtool.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _mxdevtool.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _mxdevtool.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _mxdevtool.IntVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_IntVector

# Register IntVector in _mxdevtool:
_mxdevtool.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.UnsignedIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.UnsignedIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _mxdevtool.UnsignedIntVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _mxdevtool.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _mxdevtool.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _mxdevtool.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.UnsignedIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _mxdevtool.UnsignedIntVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _mxdevtool.UnsignedIntVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.UnsignedIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _mxdevtool.UnsignedIntVector_size(self)

    def swap(self, v: "UnsignedIntVector") -> "void":
        return _mxdevtool.UnsignedIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _mxdevtool.UnsignedIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _mxdevtool.UnsignedIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _mxdevtool.UnsignedIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _mxdevtool.UnsignedIntVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.UnsignedIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _mxdevtool.UnsignedIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.UnsignedIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _mxdevtool.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.UnsignedIntVector_swiginit(self, _mxdevtool.new_UnsignedIntVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _mxdevtool.UnsignedIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _mxdevtool.UnsignedIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _mxdevtool.UnsignedIntVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _mxdevtool.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.UnsignedIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.UnsignedIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _mxdevtool.UnsignedIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _mxdevtool.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_UnsignedIntVector

# Register UnsignedIntVector in _mxdevtool:
_mxdevtool.UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _mxdevtool.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _mxdevtool.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _mxdevtool.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _mxdevtool.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _mxdevtool.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _mxdevtool.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _mxdevtool.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _mxdevtool.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _mxdevtool.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _mxdevtool.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _mxdevtool.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _mxdevtool.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _mxdevtool.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _mxdevtool.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.DoubleVector_swiginit(self, _mxdevtool.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _mxdevtool.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _mxdevtool.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _mxdevtool.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _mxdevtool.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _mxdevtool.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _mxdevtool.DoubleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DoubleVector

# Register DoubleVector in _mxdevtool:
_mxdevtool.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.DoubleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.DoubleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _mxdevtool.DoubleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _mxdevtool.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _mxdevtool.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _mxdevtool.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.DoubleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _mxdevtool.DoubleVectorVector_pop(self)

    def append(self, x: "DoubleVector") -> "void":
        return _mxdevtool.DoubleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.DoubleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _mxdevtool.DoubleVectorVector_size(self)

    def swap(self, v: "DoubleVectorVector") -> "void":
        return _mxdevtool.DoubleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _mxdevtool.DoubleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _mxdevtool.DoubleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _mxdevtool.DoubleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _mxdevtool.DoubleVectorVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.DoubleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _mxdevtool.DoubleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.DoubleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _mxdevtool.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.DoubleVectorVector_swiginit(self, _mxdevtool.new_DoubleVectorVector(*args))

    def push_back(self, x: "DoubleVector") -> "void":
        return _mxdevtool.DoubleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _mxdevtool.DoubleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _mxdevtool.DoubleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "DoubleVector") -> "void":
        return _mxdevtool.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.DoubleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.DoubleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _mxdevtool.DoubleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _mxdevtool.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DoubleVectorVector

# Register DoubleVectorVector in _mxdevtool:
_mxdevtool.DoubleVectorVector_swigregister(DoubleVectorVector)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.StrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.StrVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _mxdevtool.StrVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _mxdevtool.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.StrVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _mxdevtool.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.StrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _mxdevtool.StrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.StrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _mxdevtool.StrVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _mxdevtool.StrVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.StrVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _mxdevtool.StrVector_size(self)

    def swap(self, v: "StrVector") -> "void":
        return _mxdevtool.StrVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _mxdevtool.StrVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _mxdevtool.StrVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _mxdevtool.StrVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _mxdevtool.StrVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.StrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _mxdevtool.StrVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.StrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _mxdevtool.StrVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.StrVector_swiginit(self, _mxdevtool.new_StrVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _mxdevtool.StrVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _mxdevtool.StrVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _mxdevtool.StrVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _mxdevtool.StrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.StrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.StrVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _mxdevtool.StrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _mxdevtool.StrVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_StrVector

# Register StrVector in _mxdevtool:
_mxdevtool.StrVector_swigregister(StrVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _mxdevtool.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _mxdevtool.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _mxdevtool.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _mxdevtool.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _mxdevtool.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _mxdevtool.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _mxdevtool.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        return _mxdevtool.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _mxdevtool.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _mxdevtool.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _mxdevtool.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _mxdevtool.BoolVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _mxdevtool.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _mxdevtool.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.BoolVector_swiginit(self, _mxdevtool.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _mxdevtool.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _mxdevtool.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _mxdevtool.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _mxdevtool.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _mxdevtool.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _mxdevtool.BoolVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_BoolVector

# Register BoolVector in _mxdevtool:
_mxdevtool.BoolVector_swigregister(BoolVector)

class Observable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Observable *":
        return _mxdevtool.Observable___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Observable___nonzero__(self)

    def __init__(self):
        _mxdevtool.Observable_swiginit(self, _mxdevtool.new_Observable())
    __swig_destroy__ = _mxdevtool.delete_Observable

# Register Observable in _mxdevtool:
_mxdevtool.Observable_swigregister(Observable)

class Observer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback: "PyObject *"):
        _mxdevtool.Observer_swiginit(self, _mxdevtool.new_Observer(callback))

    def _registerWith(self, arg2: "Observable") -> "void":
        return _mxdevtool.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2: "Observable") -> "void":
        return _mxdevtool.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        self._registerWith(x.asObservable())
    def unregisterWith(self,x):
        self._unregisterWith(x.asObservable())

    __swig_destroy__ = _mxdevtool.delete_Observer

# Register Observer in _mxdevtool:
_mxdevtool.Observer_swigregister(Observer)

class Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.Array_swiginit(self, _mxdevtool.new_Array(*args))

    def __len__(self) -> "Size":
        return _mxdevtool.Array___len__(self)

    def __str__(self) -> "std::string":
        return _mxdevtool.Array___str__(self)

    def __add__(self, a: "Array") -> "Array":
        return _mxdevtool.Array___add__(self, a)

    def __sub__(self, a: "Array") -> "Array":
        return _mxdevtool.Array___sub__(self, a)

    def __mul__(self, *args) -> "Array":
        return _mxdevtool.Array___mul__(self, *args)

    def __div__(self, a: "Real") -> "Array":
        return _mxdevtool.Array___div__(self, a)

    def __rmul__(self, a: "Real") -> "Array":
        return _mxdevtool.Array___rmul__(self, a)

    def __getslice__(self, i: "Integer", j: "Integer") -> "Array":
        return _mxdevtool.Array___getslice__(self, i, j)

    def __setslice__(self, i: "Integer", j: "Integer", rhs: "Array") -> "void":
        return _mxdevtool.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Array___nonzero__(self)

    def __getitem__(self, i: "Integer") -> "Real":
        return _mxdevtool.Array___getitem__(self, i)

    def __setitem__(self, i: "Integer", x: "Real") -> "void":
        return _mxdevtool.Array___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_Array

# Register Array in _mxdevtool:
_mxdevtool.Array_swigregister(Array)

class DefaultLexicographicalViewColumn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        return _mxdevtool.DefaultLexicographicalViewColumn___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        return _mxdevtool.DefaultLexicographicalViewColumn___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_DefaultLexicographicalViewColumn

# Register DefaultLexicographicalViewColumn in _mxdevtool:
_mxdevtool.DefaultLexicographicalViewColumn_swigregister(DefaultLexicographicalViewColumn)

class LexicographicalView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xSize(self) -> "Size":
        return _mxdevtool.LexicographicalView_xSize(self)

    def ySize(self) -> "Size":
        return _mxdevtool.LexicographicalView_ySize(self)

    def __init__(self, a: "Array", xSize: "Size"):
        _mxdevtool.LexicographicalView_swiginit(self, _mxdevtool.new_LexicographicalView(a, xSize))

    def __str__(self) -> "std::string":
        return _mxdevtool.LexicographicalView___str__(self)

    def __getitem__(self, i: "Size") -> "DefaultLexicographicalViewColumn":
        return _mxdevtool.LexicographicalView___getitem__(self, i)
    __swig_destroy__ = _mxdevtool.delete_LexicographicalView

# Register LexicographicalView in _mxdevtool:
_mxdevtool.LexicographicalView_swigregister(LexicographicalView)

class MatrixRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        return _mxdevtool.MatrixRow___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        return _mxdevtool.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_MatrixRow

# Register MatrixRow in _mxdevtool:
_mxdevtool.MatrixRow_swigregister(MatrixRow)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.Matrix_swiginit(self, _mxdevtool.new_Matrix(*args))

    def rows(self) -> "Size":
        return _mxdevtool.Matrix_rows(self)

    def columns(self) -> "Size":
        return _mxdevtool.Matrix_columns(self)

    def __str__(self) -> "std::string":
        return _mxdevtool.Matrix___str__(self)

    def __add__(self, m: "Matrix") -> "Matrix":
        return _mxdevtool.Matrix___add__(self, m)

    def __sub__(self, m: "Matrix") -> "Matrix":
        return _mxdevtool.Matrix___sub__(self, m)

    def __mul__(self, *args) -> "Matrix":
        return _mxdevtool.Matrix___mul__(self, *args)

    def __div__(self, x: "Real") -> "Matrix":
        return _mxdevtool.Matrix___div__(self, x)

    def __getitem__(self, i: "Size") -> "MatrixRow":
        return _mxdevtool.Matrix___getitem__(self, i)

    def __rmul__(self, *args) -> "Matrix":
        return _mxdevtool.Matrix___rmul__(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Matrix

# Register Matrix in _mxdevtool:
_mxdevtool.Matrix_swigregister(Matrix)

class SalvagingAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAlgorithm = _mxdevtool.SalvagingAlgorithm_NoAlgorithm
    Spectral = _mxdevtool.SalvagingAlgorithm_Spectral

    def __init__(self):
        _mxdevtool.SalvagingAlgorithm_swiginit(self, _mxdevtool.new_SalvagingAlgorithm())
    __swig_destroy__ = _mxdevtool.delete_SalvagingAlgorithm

# Register SalvagingAlgorithm in _mxdevtool:
_mxdevtool.SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def transpose(m: "Matrix") -> "Matrix":
    return _mxdevtool.transpose(m)

def outerProduct(v1: "Array", v2: "Array") -> "Matrix":
    return _mxdevtool.outerProduct(v1, v2)

def pseudoSqrt(m: "Matrix", a: "SalvagingAlgorithm::Type") -> "Matrix":
    return _mxdevtool.pseudoSqrt(m, a)

def IdentityMatrix(dim: "int") -> "Matrix":
    return _mxdevtool.IdentityMatrix(dim)
class SVD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "Matrix"):
        _mxdevtool.SVD_swiginit(self, _mxdevtool.new_SVD(arg2))

    def U(self) -> "Matrix const &":
        return _mxdevtool.SVD_U(self)

    def V(self) -> "Matrix const &":
        return _mxdevtool.SVD_V(self)

    def S(self) -> "Matrix":
        return _mxdevtool.SVD_S(self)

    def singularValues(self) -> "Array const &":
        return _mxdevtool.SVD_singularValues(self)
    __swig_destroy__ = _mxdevtool.delete_SVD

# Register SVD in _mxdevtool:
_mxdevtool.SVD_swigregister(SVD)

class Quote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Quote *":
        return _mxdevtool.Quote___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Quote___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.Quote_asObservable(self)

    def __init__(self):
        _mxdevtool.Quote_swiginit(self, _mxdevtool.new_Quote())
    __swig_destroy__ = _mxdevtool.delete_Quote

    def value(self) -> "Real":
        return _mxdevtool.Quote_value(self)

# Register Quote in _mxdevtool:
_mxdevtool.Quote_swigregister(Quote)

class QuoteHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.QuoteHandle_swiginit(self, _mxdevtool.new_QuoteHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< Quote >":
        return _mxdevtool.QuoteHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.QuoteHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.QuoteHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandle

    def value(self) -> "Real":
        return _mxdevtool.QuoteHandle_value(self)

# Register QuoteHandle in _mxdevtool:
_mxdevtool.QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.RelinkableQuoteHandle_swiginit(self, _mxdevtool.new_RelinkableQuoteHandle(*args))

    def linkTo(self, arg2: "Quote") -> "void":
        return _mxdevtool.RelinkableQuoteHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandle

# Register RelinkableQuoteHandle in _mxdevtool:
_mxdevtool.RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class SimpleQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value: "Real"):
        _mxdevtool.SimpleQuote_swiginit(self, _mxdevtool.new_SimpleQuote(value))

    def setValue(self, value: "Real") -> "void":
        return _mxdevtool.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _mxdevtool.delete_SimpleQuote

# Register SimpleQuote in _mxdevtool:
_mxdevtool.SimpleQuote_swigregister(SimpleQuote)

class DerivedQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h: "QuoteHandle", function: "PyObject *"):
        _mxdevtool.DerivedQuote_swiginit(self, _mxdevtool.new_DerivedQuote(h, function))
    __swig_destroy__ = _mxdevtool.delete_DerivedQuote

# Register DerivedQuote in _mxdevtool:
_mxdevtool.DerivedQuote_swigregister(DerivedQuote)

class CompositeQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h1: "QuoteHandle", h2: "QuoteHandle", function: "PyObject *"):
        _mxdevtool.CompositeQuote_swiginit(self, _mxdevtool.new_CompositeQuote(h1, h2, function))
    __swig_destroy__ = _mxdevtool.delete_CompositeQuote

# Register CompositeQuote in _mxdevtool:
_mxdevtool.CompositeQuote_swigregister(CompositeQuote)

class QuoteVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.QuoteVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.QuoteVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _mxdevtool.QuoteVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > *":
        return _mxdevtool.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "void":
        return _mxdevtool.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _mxdevtool.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.QuoteVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type":
        return _mxdevtool.QuoteVector_pop(self)

    def append(self, x: "Quote") -> "void":
        return _mxdevtool.QuoteVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.QuoteVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _mxdevtool.QuoteVector_size(self)

    def swap(self, v: "QuoteVector") -> "void":
        return _mxdevtool.QuoteVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _mxdevtool.QuoteVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _mxdevtool.QuoteVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        return _mxdevtool.QuoteVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        return _mxdevtool.QuoteVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.QuoteVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Quote > >::allocator_type":
        return _mxdevtool.QuoteVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.QuoteVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _mxdevtool.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.QuoteVector_swiginit(self, _mxdevtool.new_QuoteVector(*args))

    def push_back(self, x: "Quote") -> "void":
        return _mxdevtool.QuoteVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _mxdevtool.QuoteVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _mxdevtool.QuoteVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type", x: "Quote") -> "void":
        return _mxdevtool.QuoteVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.QuoteVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.QuoteVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type") -> "void":
        return _mxdevtool.QuoteVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _mxdevtool.QuoteVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteVector

# Register QuoteVector in _mxdevtool:
_mxdevtool.QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.QuoteVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.QuoteVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _mxdevtool.QuoteVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "std::vector< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > >,std::allocator< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > > > *":
        return _mxdevtool.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "void":
        return _mxdevtool.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _mxdevtool.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.QuoteVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type":
        return _mxdevtool.QuoteVectorVector_pop(self)

    def append(self, x: "QuoteVector") -> "void":
        return _mxdevtool.QuoteVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.QuoteVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _mxdevtool.QuoteVectorVector_size(self)

    def swap(self, v: "QuoteVectorVector") -> "void":
        return _mxdevtool.QuoteVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _mxdevtool.QuoteVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _mxdevtool.QuoteVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        return _mxdevtool.QuoteVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        return _mxdevtool.QuoteVectorVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.QuoteVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::allocator_type":
        return _mxdevtool.QuoteVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.QuoteVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _mxdevtool.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.QuoteVectorVector_swiginit(self, _mxdevtool.new_QuoteVectorVector(*args))

    def push_back(self, x: "QuoteVector") -> "void":
        return _mxdevtool.QuoteVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _mxdevtool.QuoteVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _mxdevtool.QuoteVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type", x: "QuoteVector") -> "void":
        return _mxdevtool.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.QuoteVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.QuoteVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type") -> "void":
        return _mxdevtool.QuoteVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _mxdevtool.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteVectorVector

# Register QuoteVectorVector in _mxdevtool:
_mxdevtool.QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.QuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.QuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< Handle< Quote > >::size_type":
        return _mxdevtool.QuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > *":
        return _mxdevtool.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "void":
        return _mxdevtool.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Handle< Quote > >::value_type const &":
        return _mxdevtool.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Handle< Quote > >::value_type":
        return _mxdevtool.QuoteHandleVector_pop(self)

    def append(self, x: "QuoteHandle") -> "void":
        return _mxdevtool.QuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.QuoteHandleVector_empty(self)

    def size(self) -> "std::vector< Handle< Quote > >::size_type":
        return _mxdevtool.QuoteHandleVector_size(self)

    def swap(self, v: "QuoteHandleVector") -> "void":
        return _mxdevtool.QuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< Handle< Quote > >::iterator":
        return _mxdevtool.QuoteHandleVector_begin(self)

    def end(self) -> "std::vector< Handle< Quote > >::iterator":
        return _mxdevtool.QuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        return _mxdevtool.QuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        return _mxdevtool.QuoteHandleVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.QuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< Handle< Quote > >::allocator_type":
        return _mxdevtool.QuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.QuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Handle< Quote > >::iterator":
        return _mxdevtool.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.QuoteHandleVector_swiginit(self, _mxdevtool.new_QuoteHandleVector(*args))

    def push_back(self, x: "QuoteHandle") -> "void":
        return _mxdevtool.QuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< Handle< Quote > >::value_type const &":
        return _mxdevtool.QuoteHandleVector_front(self)

    def back(self) -> "std::vector< Handle< Quote > >::value_type const &":
        return _mxdevtool.QuoteHandleVector_back(self)

    def assign(self, n: "std::vector< Handle< Quote > >::size_type", x: "QuoteHandle") -> "void":
        return _mxdevtool.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< Handle< Quote > >::size_type") -> "void":
        return _mxdevtool.QuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< Handle< Quote > >::size_type":
        return _mxdevtool.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandleVector

# Register QuoteHandleVector in _mxdevtool:
_mxdevtool.QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.QuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _mxdevtool.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "std::vector< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > >,std::allocator< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > > > *":
        return _mxdevtool.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "void":
        return _mxdevtool.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _mxdevtool.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type":
        return _mxdevtool.QuoteHandleVectorVector_pop(self)

    def append(self, x: "QuoteHandleVector") -> "void":
        return _mxdevtool.QuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.QuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _mxdevtool.QuoteHandleVectorVector_size(self)

    def swap(self, v: "QuoteHandleVectorVector") -> "void":
        return _mxdevtool.QuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _mxdevtool.QuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _mxdevtool.QuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        return _mxdevtool.QuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        return _mxdevtool.QuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.QuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< Handle< Quote > > >::allocator_type":
        return _mxdevtool.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _mxdevtool.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.QuoteHandleVectorVector_swiginit(self, _mxdevtool.new_QuoteHandleVectorVector(*args))

    def push_back(self, x: "QuoteHandleVector") -> "void":
        return _mxdevtool.QuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _mxdevtool.QuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _mxdevtool.QuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type", x: "QuoteHandleVector") -> "void":
        return _mxdevtool.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type") -> "void":
        return _mxdevtool.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _mxdevtool.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandleVectorVector

# Register QuoteHandleVectorVector in _mxdevtool:
_mxdevtool.QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > *":
        return _mxdevtool.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< RelinkableHandle< Quote > >::value_type":
        return _mxdevtool.RelinkableQuoteHandleVector_pop(self)

    def append(self, x: "RelinkableQuoteHandle") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVector_empty(self)

    def size(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVector") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVector_begin(self)

    def end(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        return _mxdevtool.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        return _mxdevtool.RelinkableQuoteHandleVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< RelinkableHandle< Quote > >::allocator_type":
        return _mxdevtool.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.RelinkableQuoteHandleVector_swiginit(self, _mxdevtool.new_RelinkableQuoteHandleVector(*args))

    def push_back(self, x: "RelinkableQuoteHandle") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVector_front(self)

    def back(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVector_back(self)

    def assign(self, n: "std::vector< RelinkableHandle< Quote > >::size_type", x: "RelinkableQuoteHandle") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< RelinkableHandle< Quote > >::size_type") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandleVector

# Register RelinkableQuoteHandleVector in _mxdevtool:
_mxdevtool.RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "std::vector< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > >,std::allocator< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > > > *":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x: "RelinkableQuoteHandleVector") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVectorVector") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::allocator_type":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.RelinkableQuoteHandleVectorVector_swiginit(self, _mxdevtool.new_RelinkableQuoteHandleVectorVector(*args))

    def push_back(self, x: "RelinkableQuoteHandleVector") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type", x: "RelinkableQuoteHandleVector") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type") -> "void":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _mxdevtool.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandleVectorVector

# Register RelinkableQuoteHandleVectorVector in _mxdevtool:
_mxdevtool.RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

class PricingEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "PricingEngine *":
        return _mxdevtool.PricingEngine___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.PricingEngine___nonzero__(self)

    def __init__(self):
        _mxdevtool.PricingEngine_swiginit(self, _mxdevtool.new_PricingEngine())
    __swig_destroy__ = _mxdevtool.delete_PricingEngine

# Register PricingEngine in _mxdevtool:
_mxdevtool.PricingEngine_swigregister(PricingEngine)

class Instrument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Instrument *":
        return _mxdevtool.Instrument___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Instrument___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.Instrument_asObservable(self)

    def __init__(self):
        _mxdevtool.Instrument_swiginit(self, _mxdevtool.new_Instrument())
    __swig_destroy__ = _mxdevtool.delete_Instrument

    def NPV(self) -> "Real":
        return _mxdevtool.Instrument_NPV(self)

    def errorEstimate(self) -> "Real":
        return _mxdevtool.Instrument_errorEstimate(self)

    def isExpired(self) -> "bool":
        return _mxdevtool.Instrument_isExpired(self)

    def setPricingEngine(self, arg2: "PricingEngine") -> "void":
        return _mxdevtool.Instrument_setPricingEngine(self, arg2)

    def recalculate(self) -> "void":
        return _mxdevtool.Instrument_recalculate(self)

    def freeze(self) -> "void":
        return _mxdevtool.Instrument_freeze(self)

    def unfreeze(self) -> "void":
        return _mxdevtool.Instrument_unfreeze(self)

# Register Instrument in _mxdevtool:
_mxdevtool.Instrument_swigregister(Instrument)

class InstrumentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.InstrumentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.InstrumentVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _mxdevtool.InstrumentVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "std::vector< boost::shared_ptr< Instrument >,std::allocator< boost::shared_ptr< Instrument > > > *":
        return _mxdevtool.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "void":
        return _mxdevtool.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _mxdevtool.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.InstrumentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type":
        return _mxdevtool.InstrumentVector_pop(self)

    def append(self, x: "Instrument") -> "void":
        return _mxdevtool.InstrumentVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.InstrumentVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _mxdevtool.InstrumentVector_size(self)

    def swap(self, v: "InstrumentVector") -> "void":
        return _mxdevtool.InstrumentVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _mxdevtool.InstrumentVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _mxdevtool.InstrumentVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        return _mxdevtool.InstrumentVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        return _mxdevtool.InstrumentVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.InstrumentVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Instrument > >::allocator_type":
        return _mxdevtool.InstrumentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.InstrumentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _mxdevtool.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.InstrumentVector_swiginit(self, _mxdevtool.new_InstrumentVector(*args))

    def push_back(self, x: "Instrument") -> "void":
        return _mxdevtool.InstrumentVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _mxdevtool.InstrumentVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _mxdevtool.InstrumentVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type", x: "Instrument") -> "void":
        return _mxdevtool.InstrumentVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.InstrumentVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.InstrumentVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type") -> "void":
        return _mxdevtool.InstrumentVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _mxdevtool.InstrumentVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_InstrumentVector

# Register InstrumentVector in _mxdevtool:
_mxdevtool.InstrumentVector_swigregister(InstrumentVector)

class Stock(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote: "QuoteHandle"):
        _mxdevtool.Stock_swiginit(self, _mxdevtool.new_Stock(quote))
    __swig_destroy__ = _mxdevtool.delete_Stock

# Register Stock in _mxdevtool:
_mxdevtool.Stock_swigregister(Stock)

Following = _mxdevtool.Following
ModifiedFollowing = _mxdevtool.ModifiedFollowing
Preceding = _mxdevtool.Preceding
ModifiedPreceding = _mxdevtool.ModifiedPreceding
Unadjusted = _mxdevtool.Unadjusted
HalfMonthModifiedFollowing = _mxdevtool.HalfMonthModifiedFollowing
JoinHolidays = _mxdevtool.JoinHolidays
JoinBusinessDays = _mxdevtool.JoinBusinessDays
class Calendar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isWeekend(self, w: "Weekday") -> "bool":
        return _mxdevtool.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2: "Date") -> "Date":
        return _mxdevtool.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2: "Date") -> "bool":
        return _mxdevtool.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2: "Date") -> "bool":
        return _mxdevtool.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2: "Date") -> "bool":
        return _mxdevtool.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2: "Date") -> "void":
        return _mxdevtool.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2: "Date") -> "void":
        return _mxdevtool.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args) -> "Date":
        return _mxdevtool.Calendar_adjust(self, *args)

    def advance(self, *args) -> "Date":
        return _mxdevtool.Calendar_advance(self, *args)

    def businessDaysBetween(self, _from: "Date", to: "Date", includeFirst: "bool"=True, includeLast: "bool"=False) -> "BigInteger":
        return _mxdevtool.Calendar_businessDaysBetween(self, _from, to, includeFirst, includeLast)

    def name(self) -> "std::string":
        return _mxdevtool.Calendar_name(self)

    def __init__(self, name: "std::string"):
        _mxdevtool.Calendar_swiginit(self, _mxdevtool.new_Calendar(name))

    def __str__(self) -> "std::string":
        return _mxdevtool.Calendar___str__(self)

    def __eq__(self, other: "Calendar") -> "bool":
        return _mxdevtool.Calendar___eq__(self, other)

    def __ne__(self, other: "Calendar") -> "bool":
        return _mxdevtool.Calendar___ne__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Calendar

# Register Calendar in _mxdevtool:
_mxdevtool.Calendar_swigregister(Calendar)

class NullCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.NullCalendar_swiginit(self, _mxdevtool.new_NullCalendar())
    __swig_destroy__ = _mxdevtool.delete_NullCalendar

# Register NullCalendar in _mxdevtool:
_mxdevtool.NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.WeekendsOnly_swiginit(self, _mxdevtool.new_WeekendsOnly())
    __swig_destroy__ = _mxdevtool.delete_WeekendsOnly

# Register WeekendsOnly in _mxdevtool:
_mxdevtool.WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.JointCalendar_swiginit(self, _mxdevtool.new_JointCalendar(*args))
    __swig_destroy__ = _mxdevtool.delete_JointCalendar

# Register JointCalendar in _mxdevtool:
_mxdevtool.JointCalendar_swigregister(JointCalendar)


def nullInt() -> "int":
    return _mxdevtool.nullInt()

def nullDouble() -> "double":
    return _mxdevtool.nullDouble()
class DayCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1: "Date", d2: "Date") -> "BigInteger":
        return _mxdevtool.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args) -> "Time":
        return _mxdevtool.DayCounter_yearFraction(self, *args)

    def name(self) -> "std::string":
        return _mxdevtool.DayCounter_name(self)

    def __str__(self) -> "std::string":
        return _mxdevtool.DayCounter___str__(self)

    def __eq__(self, other: "DayCounter") -> "bool":
        return _mxdevtool.DayCounter___eq__(self, other)

    def __ne__(self, other: "DayCounter") -> "bool":
        return _mxdevtool.DayCounter___ne__(self, other)
    __swig_destroy__ = _mxdevtool.delete_DayCounter

# Register DayCounter in _mxdevtool:
_mxdevtool.DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.Actual360_swiginit(self, _mxdevtool.new_Actual360())
    __swig_destroy__ = _mxdevtool.delete_Actual360

# Register Actual360 in _mxdevtool:
_mxdevtool.Actual360_swigregister(Actual360)

class Actual365Fixed(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.Actual365Fixed_swiginit(self, _mxdevtool.new_Actual365Fixed())
    __swig_destroy__ = _mxdevtool.delete_Actual365Fixed

# Register Actual365Fixed in _mxdevtool:
_mxdevtool.Actual365Fixed_swigregister(Actual365Fixed)

class Actual365NoLeap(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.Actual365NoLeap_swiginit(self, _mxdevtool.new_Actual365NoLeap())
    __swig_destroy__ = _mxdevtool.delete_Actual365NoLeap

# Register Actual365NoLeap in _mxdevtool:
_mxdevtool.Actual365NoLeap_swigregister(Actual365NoLeap)

class Thirty360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USA = _mxdevtool.Thirty360_USA
    BondBasis = _mxdevtool.Thirty360_BondBasis
    European = _mxdevtool.Thirty360_European
    EurobondBasis = _mxdevtool.Thirty360_EurobondBasis
    Italian = _mxdevtool.Thirty360_Italian

    def __init__(self, *args):
        _mxdevtool.Thirty360_swiginit(self, _mxdevtool.new_Thirty360(*args))
    __swig_destroy__ = _mxdevtool.delete_Thirty360

# Register Thirty360 in _mxdevtool:
_mxdevtool.Thirty360_swigregister(Thirty360)

class ActualActual(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISMA = _mxdevtool.ActualActual_ISMA
    Bond = _mxdevtool.ActualActual_Bond
    ISDA = _mxdevtool.ActualActual_ISDA
    Historical = _mxdevtool.ActualActual_Historical
    Actual365 = _mxdevtool.ActualActual_Actual365
    AFB = _mxdevtool.ActualActual_AFB
    Euro = _mxdevtool.ActualActual_Euro

    def __init__(self, *args):
        _mxdevtool.ActualActual_swiginit(self, _mxdevtool.new_ActualActual(*args))
    __swig_destroy__ = _mxdevtool.delete_ActualActual

# Register ActualActual in _mxdevtool:
_mxdevtool.ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.OneDayCounter_swiginit(self, _mxdevtool.new_OneDayCounter())
    __swig_destroy__ = _mxdevtool.delete_OneDayCounter

# Register OneDayCounter in _mxdevtool:
_mxdevtool.OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.SimpleDayCounter_swiginit(self, _mxdevtool.new_SimpleDayCounter())
    __swig_destroy__ = _mxdevtool.delete_SimpleDayCounter

# Register SimpleDayCounter in _mxdevtool:
_mxdevtool.SimpleDayCounter_swigregister(SimpleDayCounter)

class Currency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def name(self) -> "std::string const &":
        return _mxdevtool.Currency_name(self)

    def code(self) -> "std::string const &":
        return _mxdevtool.Currency_code(self)

    def numericCode(self) -> "Integer":
        return _mxdevtool.Currency_numericCode(self)

    def symbol(self) -> "std::string const &":
        return _mxdevtool.Currency_symbol(self)

    def fractionSymbol(self) -> "std::string const &":
        return _mxdevtool.Currency_fractionSymbol(self)

    def fractionsPerUnit(self) -> "Integer":
        return _mxdevtool.Currency_fractionsPerUnit(self)

    def format(self) -> "std::string":
        return _mxdevtool.Currency_format(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Currency___nonzero__(self)

    def triangulationCurrency(self) -> "Currency const &":
        return _mxdevtool.Currency_triangulationCurrency(self)

    def __str__(self) -> "std::string":
        return _mxdevtool.Currency___str__(self)

    def __eq__(self, other: "Currency") -> "bool":
        return _mxdevtool.Currency___eq__(self, other)

    def __ne__(self, other: "Currency") -> "bool":
        return _mxdevtool.Currency___ne__(self, other)

    def __mul__(self, x: "Decimal") -> "Money":
        return _mxdevtool.Currency___mul__(self, x)

    def __rmul__(self, x: "Decimal") -> "Money":
        return _mxdevtool.Currency___rmul__(self, x)

    def __init__(self):
        _mxdevtool.Currency_swiginit(self, _mxdevtool.new_Currency())
    __swig_destroy__ = _mxdevtool.delete_Currency

# Register Currency in _mxdevtool:
_mxdevtool.Currency_swigregister(Currency)

class CNYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.CNYCurrency_swiginit(self, _mxdevtool.new_CNYCurrency())
    __swig_destroy__ = _mxdevtool.delete_CNYCurrency

# Register CNYCurrency in _mxdevtool:
_mxdevtool.CNYCurrency_swigregister(CNYCurrency)

class EURCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.EURCurrency_swiginit(self, _mxdevtool.new_EURCurrency())
    __swig_destroy__ = _mxdevtool.delete_EURCurrency

# Register EURCurrency in _mxdevtool:
_mxdevtool.EURCurrency_swigregister(EURCurrency)

class GBPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.GBPCurrency_swiginit(self, _mxdevtool.new_GBPCurrency())
    __swig_destroy__ = _mxdevtool.delete_GBPCurrency

# Register GBPCurrency in _mxdevtool:
_mxdevtool.GBPCurrency_swigregister(GBPCurrency)

class HKDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.HKDCurrency_swiginit(self, _mxdevtool.new_HKDCurrency())
    __swig_destroy__ = _mxdevtool.delete_HKDCurrency

# Register HKDCurrency in _mxdevtool:
_mxdevtool.HKDCurrency_swigregister(HKDCurrency)

class JPYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.JPYCurrency_swiginit(self, _mxdevtool.new_JPYCurrency())
    __swig_destroy__ = _mxdevtool.delete_JPYCurrency

# Register JPYCurrency in _mxdevtool:
_mxdevtool.JPYCurrency_swigregister(JPYCurrency)

class KRWCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.KRWCurrency_swiginit(self, _mxdevtool.new_KRWCurrency())
    __swig_destroy__ = _mxdevtool.delete_KRWCurrency

# Register KRWCurrency in _mxdevtool:
_mxdevtool.KRWCurrency_swigregister(KRWCurrency)

class USDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.USDCurrency_swiginit(self, _mxdevtool.new_USDCurrency())
    __swig_destroy__ = _mxdevtool.delete_USDCurrency

# Register USDCurrency in _mxdevtool:
_mxdevtool.USDCurrency_swigregister(USDCurrency)

Simple = _mxdevtool.Simple
Compounded = _mxdevtool.Compounded
Continuous = _mxdevtool.Continuous
SimpleThenCompounded = _mxdevtool.SimpleThenCompounded
class InterestRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.InterestRate_swiginit(self, _mxdevtool.new_InterestRate(*args))

    def rate(self) -> "Rate":
        return _mxdevtool.InterestRate_rate(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.InterestRate_dayCounter(self)

    def compounding(self) -> "Compounding":
        return _mxdevtool.InterestRate_compounding(self)

    def frequency(self) -> "Frequency":
        return _mxdevtool.InterestRate_frequency(self)

    def discountFactor(self, *args) -> "DiscountFactor":
        return _mxdevtool.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args) -> "Real":
        return _mxdevtool.InterestRate_compoundFactor(self, *args)

    @staticmethod
    def impliedRate(*args) -> "InterestRate":
        return _mxdevtool.InterestRate_impliedRate(*args)

    def equivalentRate(self, *args) -> "InterestRate":
        return _mxdevtool.InterestRate_equivalentRate(self, *args)

    def __str__(self) -> "std::string":
        return _mxdevtool.InterestRate___str__(self)
    __swig_destroy__ = _mxdevtool.delete_InterestRate

# Register InterestRate in _mxdevtool:
_mxdevtool.InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args) -> "InterestRate":
    return _mxdevtool.InterestRate_impliedRate(*args)

class Interpolation1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, interpolator1DType: "Interpolator1D::Type", x: "DoubleVector", y: "DoubleVector"):
        _mxdevtool.Interpolation1D_swiginit(self, _mxdevtool.new_Interpolation1D(interpolator1DType, x, y))

    def interpolate(self, *args) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.Interpolation1D_interpolate(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Interpolation1D

# Register Interpolation1D in _mxdevtool:
_mxdevtool.Interpolation1D_swigregister(Interpolation1D)

class Interpolation2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, interpolator2DType: "Interpolator2D::Type", x1: "DoubleVector", x2: "DoubleVector", z: "Matrix"):
        _mxdevtool.Interpolation2D_swiginit(self, _mxdevtool.new_Interpolation2D(interpolator2DType, x1, x2, z))

    def interpolate(self, *args) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.Interpolation2D_interpolate(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Interpolation2D

# Register Interpolation2D in _mxdevtool:
_mxdevtool.Interpolation2D_swigregister(Interpolation2D)

class YieldTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "YieldTermStructure *":
        return _mxdevtool.YieldTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.YieldTermStructure___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.YieldTermStructure_asObservable(self)

    def __init__(self):
        _mxdevtool.YieldTermStructure_swiginit(self, _mxdevtool.new_YieldTermStructure())
    __swig_destroy__ = _mxdevtool.delete_YieldTermStructure

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.YieldTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _mxdevtool.YieldTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        return _mxdevtool.YieldTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        return _mxdevtool.YieldTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _mxdevtool.YieldTermStructure_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        return _mxdevtool.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        return _mxdevtool.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        return _mxdevtool.YieldTermStructure_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _mxdevtool.YieldTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _mxdevtool.YieldTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _mxdevtool.YieldTermStructure_allowsExtrapolation(self)

# Register YieldTermStructure in _mxdevtool:
_mxdevtool.YieldTermStructure_swigregister(YieldTermStructure)

class YieldTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.YieldTermStructureHandle_swiginit(self, _mxdevtool.new_YieldTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< YieldTermStructure >":
        return _mxdevtool.YieldTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.YieldTermStructureHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_YieldTermStructureHandle

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.YieldTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _mxdevtool.YieldTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        return _mxdevtool.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        return _mxdevtool.YieldTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _mxdevtool.YieldTermStructureHandle_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        return _mxdevtool.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        return _mxdevtool.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        return _mxdevtool.YieldTermStructureHandle_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _mxdevtool.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _mxdevtool.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _mxdevtool.YieldTermStructureHandle_allowsExtrapolation(self)

# Register YieldTermStructureHandle in _mxdevtool:
_mxdevtool.YieldTermStructureHandle_swigregister(YieldTermStructureHandle)

class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.RelinkableYieldTermStructureHandle_swiginit(self, _mxdevtool.new_RelinkableYieldTermStructureHandle(*args))

    def linkTo(self, arg2: "YieldTermStructure") -> "void":
        return _mxdevtool.RelinkableYieldTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableYieldTermStructureHandle

# Register RelinkableYieldTermStructureHandle in _mxdevtool:
_mxdevtool.RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)

class ZeroSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", spreadHandle: "QuoteHandle"):
        _mxdevtool.ZeroSpreadedTermStructure_swiginit(self, _mxdevtool.new_ZeroSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _mxdevtool.delete_ZeroSpreadedTermStructure

# Register ZeroSpreadedTermStructure in _mxdevtool:
_mxdevtool.ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)

class ForwardSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", spreadHandle: "QuoteHandle"):
        _mxdevtool.ForwardSpreadedTermStructure_swiginit(self, _mxdevtool.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _mxdevtool.delete_ForwardSpreadedTermStructure

# Register ForwardSpreadedTermStructure in _mxdevtool:
_mxdevtool.ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)

class FlatForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.FlatForward_swiginit(self, _mxdevtool.new_FlatForward(*args))
    __swig_destroy__ = _mxdevtool.delete_FlatForward

# Register FlatForward in _mxdevtool:
_mxdevtool.FlatForward_swigregister(FlatForward)

class Interpolator1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BackwardFlat = _mxdevtool.Interpolator1D_BackwardFlat
    ForwardFlat = _mxdevtool.Interpolator1D_ForwardFlat
    Linear = _mxdevtool.Interpolator1D_Linear
    LogLinear = _mxdevtool.Interpolator1D_LogLinear
    CubicNaturalSpline = _mxdevtool.Interpolator1D_CubicNaturalSpline
    LogcubicNaturalSpline = _mxdevtool.Interpolator1D_LogcubicNaturalSpline
    MonotonicCubicNaturalSpline = _mxdevtool.Interpolator1D_MonotonicCubicNaturalSpline
    MonotonicLogCubicNaturalSpline = _mxdevtool.Interpolator1D_MonotonicLogCubicNaturalSpline
    KrugerCubic = _mxdevtool.Interpolator1D_KrugerCubic
    KrugerlogCubic = _mxdevtool.Interpolator1D_KrugerlogCubic
    FritschButlandCubic = _mxdevtool.Interpolator1D_FritschButlandCubic
    FritschButlandlogCubic = _mxdevtool.Interpolator1D_FritschButlandlogCubic
    Parabolic = _mxdevtool.Interpolator1D_Parabolic
    LogParabolic = _mxdevtool.Interpolator1D_LogParabolic
    MonotonicParabolic = _mxdevtool.Interpolator1D_MonotonicParabolic
    MonotonicLogParabolic = _mxdevtool.Interpolator1D_MonotonicLogParabolic

    def __init__(self):
        _mxdevtool.Interpolator1D_swiginit(self, _mxdevtool.new_Interpolator1D())
    __swig_destroy__ = _mxdevtool.delete_Interpolator1D

# Register Interpolator1D in _mxdevtool:
_mxdevtool.Interpolator1D_swigregister(Interpolator1D)

class Interpolator2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BackwardflatLinear = _mxdevtool.Interpolator2D_BackwardflatLinear
    Bilinear = _mxdevtool.Interpolator2D_Bilinear
    Bicubic = _mxdevtool.Interpolator2D_Bicubic

    def __init__(self):
        _mxdevtool.Interpolator2D_swiginit(self, _mxdevtool.new_Interpolator2D())
    __swig_destroy__ = _mxdevtool.delete_Interpolator2D

# Register Interpolator2D in _mxdevtool:
_mxdevtool.Interpolator2D_swigregister(Interpolator2D)

class Extrapolator1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FlatForward = _mxdevtool.Extrapolator1D_FlatForward
    FlatSpot = _mxdevtool.Extrapolator1D_FlatSpot
    SmithWilson = _mxdevtool.Extrapolator1D_SmithWilson

    def __init__(self):
        _mxdevtool.Extrapolator1D_swiginit(self, _mxdevtool.new_Extrapolator1D())
    __swig_destroy__ = _mxdevtool.delete_Extrapolator1D

# Register Extrapolator1D in _mxdevtool:
_mxdevtool.Extrapolator1D_swigregister(Extrapolator1D)

class Extrapolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Extrapolation *":
        return _mxdevtool.Extrapolation___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Extrapolation___nonzero__(self)

    def __init__(self):
        _mxdevtool.Extrapolation_swiginit(self, _mxdevtool.new_Extrapolation())
    __swig_destroy__ = _mxdevtool.delete_Extrapolation

# Register Extrapolation in _mxdevtool:
_mxdevtool.Extrapolation_swigregister(Extrapolation)

class SmithWilsonExtrapolation(Extrapolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha: "QuantLib::Real", ufr: "QuantLib::Real"):
        _mxdevtool.SmithWilsonExtrapolation_swiginit(self, _mxdevtool.new_SmithWilsonExtrapolation(alpha, ufr))
    __swig_destroy__ = _mxdevtool.delete_SmithWilsonExtrapolation

# Register SmithWilsonExtrapolation in _mxdevtool:
_mxdevtool.SmithWilsonExtrapolation_swigregister(SmithWilsonExtrapolation)

class FlatExtrapolation(Extrapolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rateType: "std::string"):
        _mxdevtool.FlatExtrapolation_swiginit(self, _mxdevtool.new_FlatExtrapolation(rateType))
    __swig_destroy__ = _mxdevtool.delete_FlatExtrapolation

# Register FlatExtrapolation in _mxdevtool:
_mxdevtool.FlatExtrapolation_swigregister(FlatExtrapolation)

class MarketCurveRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Cash = _mxdevtool.MarketCurveRate_Cash
    Swap = _mxdevtool.MarketCurveRate_Swap
    Bond = _mxdevtool.MarketCurveRate_Bond

    def __init__(self, tenor: "std::string const &", rate: "Real", rateType: "MarketCurveRate::Type"):
        _mxdevtool.MarketCurveRate_swiginit(self, _mxdevtool.new_MarketCurveRate(tenor, rate, rateType))
    tenor = property(_mxdevtool.MarketCurveRate_tenor_get, _mxdevtool.MarketCurveRate_tenor_set)
    rate = property(_mxdevtool.MarketCurveRate_rate_get, _mxdevtool.MarketCurveRate_rate_set)
    rateType = property(_mxdevtool.MarketCurveRate_rateType_get, _mxdevtool.MarketCurveRate_rateType_set)
    __swig_destroy__ = _mxdevtool.delete_MarketCurveRate

# Register MarketCurveRate in _mxdevtool:
_mxdevtool.MarketCurveRate_swigregister(MarketCurveRate)

class MarketCurveRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.MarketCurveRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.MarketCurveRateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.MarketCurveRateVector___bool__(self)

    def __len__(self) -> "std::vector< MarketCurveRate >::size_type":
        return _mxdevtool.MarketCurveRateVector___len__(self)

    def __getslice__(self, i: "std::vector< MarketCurveRate >::difference_type", j: "std::vector< MarketCurveRate >::difference_type") -> "std::vector< MarketCurveRate,std::allocator< MarketCurveRate > > *":
        return _mxdevtool.MarketCurveRateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.MarketCurveRateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< MarketCurveRate >::difference_type", j: "std::vector< MarketCurveRate >::difference_type") -> "void":
        return _mxdevtool.MarketCurveRateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.MarketCurveRateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< MarketCurveRate >::value_type const &":
        return _mxdevtool.MarketCurveRateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.MarketCurveRateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< MarketCurveRate >::value_type":
        return _mxdevtool.MarketCurveRateVector_pop(self)

    def append(self, x: "MarketCurveRate") -> "void":
        return _mxdevtool.MarketCurveRateVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.MarketCurveRateVector_empty(self)

    def size(self) -> "std::vector< MarketCurveRate >::size_type":
        return _mxdevtool.MarketCurveRateVector_size(self)

    def swap(self, v: "MarketCurveRateVector") -> "void":
        return _mxdevtool.MarketCurveRateVector_swap(self, v)

    def begin(self) -> "std::vector< MarketCurveRate >::iterator":
        return _mxdevtool.MarketCurveRateVector_begin(self)

    def end(self) -> "std::vector< MarketCurveRate >::iterator":
        return _mxdevtool.MarketCurveRateVector_end(self)

    def rbegin(self) -> "std::vector< MarketCurveRate >::reverse_iterator":
        return _mxdevtool.MarketCurveRateVector_rbegin(self)

    def rend(self) -> "std::vector< MarketCurveRate >::reverse_iterator":
        return _mxdevtool.MarketCurveRateVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.MarketCurveRateVector_clear(self)

    def get_allocator(self) -> "std::vector< MarketCurveRate >::allocator_type":
        return _mxdevtool.MarketCurveRateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.MarketCurveRateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< MarketCurveRate >::iterator":
        return _mxdevtool.MarketCurveRateVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.MarketCurveRateVector_swiginit(self, _mxdevtool.new_MarketCurveRateVector(*args))

    def push_back(self, x: "MarketCurveRate") -> "void":
        return _mxdevtool.MarketCurveRateVector_push_back(self, x)

    def front(self) -> "std::vector< MarketCurveRate >::value_type const &":
        return _mxdevtool.MarketCurveRateVector_front(self)

    def back(self) -> "std::vector< MarketCurveRate >::value_type const &":
        return _mxdevtool.MarketCurveRateVector_back(self)

    def assign(self, n: "std::vector< MarketCurveRate >::size_type", x: "MarketCurveRate") -> "void":
        return _mxdevtool.MarketCurveRateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.MarketCurveRateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.MarketCurveRateVector_insert(self, *args)

    def reserve(self, n: "std::vector< MarketCurveRate >::size_type") -> "void":
        return _mxdevtool.MarketCurveRateVector_reserve(self, n)

    def capacity(self) -> "std::vector< MarketCurveRate >::size_type":
        return _mxdevtool.MarketCurveRateVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_MarketCurveRateVector

# Register MarketCurveRateVector in _mxdevtool:
_mxdevtool.MarketCurveRateVector_swigregister(MarketCurveRateVector)

class YieldCurveExt(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setSmithwilsonParameter(self, alpha: "Real", ufr: "Real") -> "void":
        return _mxdevtool.YieldCurveExt_setSmithwilsonParameter(self, alpha, ufr)

    def smithwilsonAlpha(self) -> "Real":
        return _mxdevtool.YieldCurveExt_smithwilsonAlpha(self)

    def smithwilsonUFR(self) -> "Real":
        return _mxdevtool.YieldCurveExt_smithwilsonUFR(self)

    def __init__(self):
        _mxdevtool.YieldCurveExt_swiginit(self, _mxdevtool.new_YieldCurveExt())
    __swig_destroy__ = _mxdevtool.delete_YieldCurveExt

# Register YieldCurveExt in _mxdevtool:
_mxdevtool.YieldCurveExt_swigregister(YieldCurveExt)

class ZeroYieldCurveExt(YieldCurveExt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ref_date: "Date", periods_str: "StrVector", zero_rates: "DoubleVector", interpolator1DType: "Interpolator1D::Type", extrapolator1DType: "Extrapolator1D::Type", family_name: "std::string const &"):
        _mxdevtool.ZeroYieldCurveExt_swiginit(self, _mxdevtool.new_ZeroYieldCurveExt(ref_date, periods_str, zero_rates, interpolator1DType, extrapolator1DType, family_name))
    __swig_destroy__ = _mxdevtool.delete_ZeroYieldCurveExt

# Register ZeroYieldCurveExt in _mxdevtool:
_mxdevtool.ZeroYieldCurveExt_swigregister(ZeroYieldCurveExt)

class DiscountFactorCurveExt(YieldCurveExt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ref_date: "Date", periods_str: "StrVector", discountFactors: "DoubleVector", interpolator1DType: "Interpolator1D::Type", extrapolator1DType: "Extrapolator1D::Type", family_name: "std::string const &"):
        _mxdevtool.DiscountFactorCurveExt_swiginit(self, _mxdevtool.new_DiscountFactorCurveExt(ref_date, periods_str, discountFactors, interpolator1DType, extrapolator1DType, family_name))
    __swig_destroy__ = _mxdevtool.delete_DiscountFactorCurveExt

# Register DiscountFactorCurveExt in _mxdevtool:
_mxdevtool.DiscountFactorCurveExt_swigregister(DiscountFactorCurveExt)

class BootstapSwapCurveCCP(YieldCurveExt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate: "Date", tenors_str: "StrVector", rateTypes: "StrVector", quotes: "DoubleVector", interpolatorID: "Interpolator1D::Type", extrapolation: "Extrapolation", familyname: "std::string const &", forSettlement: "bool"):
        _mxdevtool.BootstapSwapCurveCCP_swiginit(self, _mxdevtool.new_BootstapSwapCurveCCP(refDate, tenors_str, rateTypes, quotes, interpolatorID, extrapolation, familyname, forSettlement))
    __swig_destroy__ = _mxdevtool.delete_BootstapSwapCurveCCP

# Register BootstapSwapCurveCCP in _mxdevtool:
_mxdevtool.BootstapSwapCurveCCP_swigregister(BootstapSwapCurveCCP)

class RealTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.RealTimeSeries_swiginit(self, _mxdevtool.new_RealTimeSeries(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > >":
        return _mxdevtool.RealTimeSeries_dates(self)

    def values(self) -> "std::vector< double,std::allocator< double > >":
        return _mxdevtool.RealTimeSeries_values(self)

    def __len__(self) -> "Size":
        return _mxdevtool.RealTimeSeries___len__(self)

    def __getitem__(self, d: "Date") -> "double":
        return _mxdevtool.RealTimeSeries___getitem__(self, d)

    def __setitem__(self, d: "Date", value: "double const &") -> "void":
        return _mxdevtool.RealTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _mxdevtool.delete_RealTimeSeries

# Register RealTimeSeries in _mxdevtool:
_mxdevtool.RealTimeSeries_swigregister(RealTimeSeries)

class IntervalPriceTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.IntervalPriceTimeSeries_swiginit(self, _mxdevtool.new_IntervalPriceTimeSeries(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > >":
        return _mxdevtool.IntervalPriceTimeSeries_dates(self)

    def values(self) -> "std::vector< IntervalPrice,std::allocator< IntervalPrice > >":
        return _mxdevtool.IntervalPriceTimeSeries_values(self)

    def __len__(self) -> "Size":
        return _mxdevtool.IntervalPriceTimeSeries___len__(self)

    def __getitem__(self, d: "Date") -> "IntervalPrice":
        return _mxdevtool.IntervalPriceTimeSeries___getitem__(self, d)

    def __setitem__(self, d: "Date", value: "IntervalPrice") -> "void":
        return _mxdevtool.IntervalPriceTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _mxdevtool.delete_IntervalPriceTimeSeries

# Register IntervalPriceTimeSeries in _mxdevtool:
_mxdevtool.IntervalPriceTimeSeries_swigregister(IntervalPriceTimeSeries)

class IntervalPriceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.IntervalPriceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.IntervalPriceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.IntervalPriceVector___bool__(self)

    def __len__(self) -> "std::vector< IntervalPrice >::size_type":
        return _mxdevtool.IntervalPriceVector___len__(self)

    def __getslice__(self, i: "std::vector< IntervalPrice >::difference_type", j: "std::vector< IntervalPrice >::difference_type") -> "std::vector< IntervalPrice,std::allocator< IntervalPrice > > *":
        return _mxdevtool.IntervalPriceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.IntervalPriceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< IntervalPrice >::difference_type", j: "std::vector< IntervalPrice >::difference_type") -> "void":
        return _mxdevtool.IntervalPriceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.IntervalPriceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< IntervalPrice >::value_type const &":
        return _mxdevtool.IntervalPriceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.IntervalPriceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< IntervalPrice >::value_type":
        return _mxdevtool.IntervalPriceVector_pop(self)

    def append(self, x: "IntervalPrice") -> "void":
        return _mxdevtool.IntervalPriceVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.IntervalPriceVector_empty(self)

    def size(self) -> "std::vector< IntervalPrice >::size_type":
        return _mxdevtool.IntervalPriceVector_size(self)

    def swap(self, v: "IntervalPriceVector") -> "void":
        return _mxdevtool.IntervalPriceVector_swap(self, v)

    def begin(self) -> "std::vector< IntervalPrice >::iterator":
        return _mxdevtool.IntervalPriceVector_begin(self)

    def end(self) -> "std::vector< IntervalPrice >::iterator":
        return _mxdevtool.IntervalPriceVector_end(self)

    def rbegin(self) -> "std::vector< IntervalPrice >::reverse_iterator":
        return _mxdevtool.IntervalPriceVector_rbegin(self)

    def rend(self) -> "std::vector< IntervalPrice >::reverse_iterator":
        return _mxdevtool.IntervalPriceVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.IntervalPriceVector_clear(self)

    def get_allocator(self) -> "std::vector< IntervalPrice >::allocator_type":
        return _mxdevtool.IntervalPriceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.IntervalPriceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< IntervalPrice >::iterator":
        return _mxdevtool.IntervalPriceVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.IntervalPriceVector_swiginit(self, _mxdevtool.new_IntervalPriceVector(*args))

    def push_back(self, x: "IntervalPrice") -> "void":
        return _mxdevtool.IntervalPriceVector_push_back(self, x)

    def front(self) -> "std::vector< IntervalPrice >::value_type const &":
        return _mxdevtool.IntervalPriceVector_front(self)

    def back(self) -> "std::vector< IntervalPrice >::value_type const &":
        return _mxdevtool.IntervalPriceVector_back(self)

    def assign(self, n: "std::vector< IntervalPrice >::size_type", x: "IntervalPrice") -> "void":
        return _mxdevtool.IntervalPriceVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.IntervalPriceVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.IntervalPriceVector_insert(self, *args)

    def reserve(self, n: "std::vector< IntervalPrice >::size_type") -> "void":
        return _mxdevtool.IntervalPriceVector_reserve(self, n)

    def capacity(self) -> "std::vector< IntervalPrice >::size_type":
        return _mxdevtool.IntervalPriceVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_IntervalPriceVector

# Register IntervalPriceVector in _mxdevtool:
_mxdevtool.IntervalPriceVector_swigregister(IntervalPriceVector)

class IntervalPrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Open = _mxdevtool.IntervalPrice_Open
    Close = _mxdevtool.IntervalPrice_Close
    High = _mxdevtool.IntervalPrice_High
    Low = _mxdevtool.IntervalPrice_Low

    def __init__(self, arg2: "Real", arg3: "Real", arg4: "Real", arg5: "Real"):
        _mxdevtool.IntervalPrice_swiginit(self, _mxdevtool.new_IntervalPrice(arg2, arg3, arg4, arg5))

    def setValue(self, arg2: "Real", arg3: "IntervalPrice::Type") -> "void":
        return _mxdevtool.IntervalPrice_setValue(self, arg2, arg3)

    def setValues(self, arg2: "Real", arg3: "Real", arg4: "Real", arg5: "Real") -> "void":
        return _mxdevtool.IntervalPrice_setValues(self, arg2, arg3, arg4, arg5)

    def value(self, t: "IntervalPrice::Type") -> "Real":
        return _mxdevtool.IntervalPrice_value(self, t)

    def open(self) -> "Real":
        return _mxdevtool.IntervalPrice_open(self)

    def close(self) -> "Real":
        return _mxdevtool.IntervalPrice_close(self)

    def high(self) -> "Real":
        return _mxdevtool.IntervalPrice_high(self)

    def low(self) -> "Real":
        return _mxdevtool.IntervalPrice_low(self)

    @staticmethod
    def makeSeries(d: "DateVector", open: "DoubleVector", close: "DoubleVector", high: "DoubleVector", low: "DoubleVector") -> "TimeSeries< IntervalPrice >":
        return _mxdevtool.IntervalPrice_makeSeries(d, open, close, high, low)

    @staticmethod
    def extractValues(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.IntervalPrice_extractValues(arg1, t)

    @staticmethod
    def extractComponent(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "TimeSeries< Real >":
        return _mxdevtool.IntervalPrice_extractComponent(arg1, t)
    __swig_destroy__ = _mxdevtool.delete_IntervalPrice

# Register IntervalPrice in _mxdevtool:
_mxdevtool.IntervalPrice_swigregister(IntervalPrice)

def IntervalPrice_makeSeries(d: "DateVector", open: "DoubleVector", close: "DoubleVector", high: "DoubleVector", low: "DoubleVector") -> "TimeSeries< IntervalPrice >":
    return _mxdevtool.IntervalPrice_makeSeries(d, open, close, high, low)

def IntervalPrice_extractValues(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "std::vector< Real,std::allocator< Real > >":
    return _mxdevtool.IntervalPrice_extractValues(arg1, t)

def IntervalPrice_extractComponent(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "TimeSeries< Real >":
    return _mxdevtool.IntervalPrice_extractComponent(arg1, t)

class IndexManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "IndexManager &":
        return _mxdevtool.IndexManager_instance()

    def setHistory(self, name: "std::string const &", fixings: "RealTimeSeries") -> "void":
        return _mxdevtool.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name: "std::string const &") -> "TimeSeries< Real > const &":
        return _mxdevtool.IndexManager_getHistory(self, name)

    def hasHistory(self, name: "std::string const &") -> "bool":
        return _mxdevtool.IndexManager_hasHistory(self, name)

    def histories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _mxdevtool.IndexManager_histories(self)

    def clearHistory(self, name: "std::string const &") -> "void":
        return _mxdevtool.IndexManager_clearHistory(self, name)

    def clearHistories(self) -> "void":
        return _mxdevtool.IndexManager_clearHistories(self)
    __swig_destroy__ = _mxdevtool.delete_IndexManager

# Register IndexManager in _mxdevtool:
_mxdevtool.IndexManager_swigregister(IndexManager)

def IndexManager_instance() -> "IndexManager &":
    return _mxdevtool.IndexManager_instance()

class Index(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Index *":
        return _mxdevtool.Index___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Index___nonzero__(self)

    def addFixings(self, fixingDates: "DateVector", fixings: "DoubleVector") -> "void":
        return _mxdevtool.Index_addFixings(self, fixingDates, fixings)

    def __str__(self) -> "std::string":
        return _mxdevtool.Index___str__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.Index_asObservable(self)

    def __init__(self):
        _mxdevtool.Index_swiginit(self, _mxdevtool.new_Index())
    __swig_destroy__ = _mxdevtool.delete_Index

    def name(self) -> "std::string":
        return _mxdevtool.Index_name(self)

    def fixingCalendar(self) -> "Calendar":
        return _mxdevtool.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate: "Date") -> "bool":
        return _mxdevtool.Index_isValidFixingDate(self, fixingDate)

    def fixing(self, fixingDate: "Date", forecastTodaysFixing: "bool"=False) -> "Real":
        return _mxdevtool.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def addFixing(self, fixingDate: "Date", fixing: "Rate") -> "void":
        return _mxdevtool.Index_addFixing(self, fixingDate, fixing)

# Register Index in _mxdevtool:
_mxdevtool.Index_swigregister(Index)

class InterestRateIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self) -> "std::string":
        return _mxdevtool.InterestRateIndex_familyName(self)

    def tenor(self) -> "Period":
        return _mxdevtool.InterestRateIndex_tenor(self)

    def fixingDays(self) -> "Natural":
        return _mxdevtool.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate: "Date") -> "Date":
        return _mxdevtool.InterestRateIndex_fixingDate(self, valueDate)

    def currency(self) -> "Currency":
        return _mxdevtool.InterestRateIndex_currency(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.InterestRateIndex_dayCounter(self)

    def maturityDate(self, valueDate: "Date") -> "Date":
        return _mxdevtool.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate: "Date") -> "Date":
        return _mxdevtool.InterestRateIndex_valueDate(self, fixingDate)
    __swig_destroy__ = _mxdevtool.delete_InterestRateIndex

# Register InterestRateIndex in _mxdevtool:
_mxdevtool.InterestRateIndex_swigregister(InterestRateIndex)

class IborIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.IborIndex_swiginit(self, _mxdevtool.new_IborIndex(*args))

    def businessDayConvention(self) -> "BusinessDayConvention":
        return _mxdevtool.IborIndex_businessDayConvention(self)

    def endOfMonth(self) -> "bool":
        return _mxdevtool.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        return _mxdevtool.IborIndex_forwardingTermStructure(self)

    def clone(self, h: "YieldTermStructureHandle") -> "IborIndexPtr":
        return _mxdevtool.IborIndex_clone(self, h)
    __swig_destroy__ = _mxdevtool.delete_IborIndex

# Register IborIndex in _mxdevtool:
_mxdevtool.IborIndex_swigregister(IborIndex)


def as_iborindex(index: "InterestRateIndex") -> "IborIndexPtr":
    return _mxdevtool.as_iborindex(index)
class IborIndexExt(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, familyName: "std::string const &", tenor_str: "std::string const &"):
        _mxdevtool.IborIndexExt_swiginit(self, _mxdevtool.new_IborIndexExt(familyName, tenor_str))
    __swig_destroy__ = _mxdevtool.delete_IborIndexExt

# Register IborIndexExt in _mxdevtool:
_mxdevtool.IborIndexExt_swigregister(IborIndexExt)

class OvernightIndex(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.OvernightIndex_swiginit(self, _mxdevtool.new_OvernightIndex(*args))
    __swig_destroy__ = _mxdevtool.delete_OvernightIndex

# Register OvernightIndex in _mxdevtool:
_mxdevtool.OvernightIndex_swigregister(OvernightIndex)

class SwapIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.SwapIndex_swiginit(self, _mxdevtool.new_SwapIndex(*args))

    def fixedLegTenor(self) -> "Period":
        return _mxdevtool.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self) -> "BusinessDayConvention":
        return _mxdevtool.SwapIndex_fixedLegConvention(self)

    def iborIndex(self) -> "IborIndexPtr":
        return _mxdevtool.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        return _mxdevtool.SwapIndex_forwardingTermStructure(self)
    __swig_destroy__ = _mxdevtool.delete_SwapIndex

# Register SwapIndex in _mxdevtool:
_mxdevtool.SwapIndex_swigregister(SwapIndex)

class DateGeneration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Backward = _mxdevtool.DateGeneration_Backward
    Forward = _mxdevtool.DateGeneration_Forward
    Zero = _mxdevtool.DateGeneration_Zero
    ThirdWednesday = _mxdevtool.DateGeneration_ThirdWednesday
    Twentieth = _mxdevtool.DateGeneration_Twentieth
    TwentiethIMM = _mxdevtool.DateGeneration_TwentiethIMM
    OldCDS = _mxdevtool.DateGeneration_OldCDS
    CDS = _mxdevtool.DateGeneration_CDS

    def __init__(self):
        _mxdevtool.DateGeneration_swiginit(self, _mxdevtool.new_DateGeneration())
    __swig_destroy__ = _mxdevtool.delete_DateGeneration

# Register DateGeneration in _mxdevtool:
_mxdevtool.DateGeneration_swigregister(DateGeneration)

class Schedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.Schedule_swiginit(self, _mxdevtool.new_Schedule(*args))

    def __len__(self) -> "Size":
        return _mxdevtool.Schedule___len__(self)

    def isRegular(self, i: "Size") -> "bool":
        return _mxdevtool.Schedule_isRegular(self, i)

    def __getitem__(self, i: "Integer") -> "Date":
        return _mxdevtool.Schedule___getitem__(self, i)
    __swig_destroy__ = _mxdevtool.delete_Schedule

# Register Schedule in _mxdevtool:
_mxdevtool.Schedule_swigregister(Schedule)

class CashFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CashFlow *":
        return _mxdevtool.CashFlow___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.CashFlow___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.CashFlow_asObservable(self)

    def __init__(self):
        _mxdevtool.CashFlow_swiginit(self, _mxdevtool.new_CashFlow())
    __swig_destroy__ = _mxdevtool.delete_CashFlow

    def amount(self) -> "Real":
        return _mxdevtool.CashFlow_amount(self)

    def date(self) -> "Date":
        return _mxdevtool.CashFlow_date(self)

# Register CashFlow in _mxdevtool:
_mxdevtool.CashFlow_swigregister(CashFlow)

class Leg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Leg___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.Leg___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _mxdevtool.Leg___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > > *":
        return _mxdevtool.Leg___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.Leg___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "void":
        return _mxdevtool.Leg___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.Leg___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _mxdevtool.Leg___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.Leg___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type":
        return _mxdevtool.Leg_pop(self)

    def append(self, x: "CashFlow") -> "void":
        return _mxdevtool.Leg_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.Leg_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _mxdevtool.Leg_size(self)

    def swap(self, v: "Leg") -> "void":
        return _mxdevtool.Leg_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _mxdevtool.Leg_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _mxdevtool.Leg_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        return _mxdevtool.Leg_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        return _mxdevtool.Leg_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.Leg_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< CashFlow > >::allocator_type":
        return _mxdevtool.Leg_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.Leg_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _mxdevtool.Leg_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.Leg_swiginit(self, _mxdevtool.new_Leg(*args))

    def push_back(self, x: "CashFlow") -> "void":
        return _mxdevtool.Leg_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _mxdevtool.Leg_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _mxdevtool.Leg_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type", x: "CashFlow") -> "void":
        return _mxdevtool.Leg_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.Leg_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.Leg_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type") -> "void":
        return _mxdevtool.Leg_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _mxdevtool.Leg_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_Leg

# Register Leg in _mxdevtool:
_mxdevtool.Leg_swigregister(Leg)

class SimpleCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        _mxdevtool.SimpleCashFlow_swiginit(self, _mxdevtool.new_SimpleCashFlow(amount, date))
    __swig_destroy__ = _mxdevtool.delete_SimpleCashFlow

# Register SimpleCashFlow in _mxdevtool:
_mxdevtool.SimpleCashFlow_swigregister(SimpleCashFlow)

class Coupon(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self) -> "Real":
        return _mxdevtool.Coupon_nominal(self)

    def accrualStartDate(self) -> "Date":
        return _mxdevtool.Coupon_accrualStartDate(self)

    def accrualEndDate(self) -> "Date":
        return _mxdevtool.Coupon_accrualEndDate(self)

    def referencePeriodStart(self) -> "Date":
        return _mxdevtool.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self) -> "Date":
        return _mxdevtool.Coupon_referencePeriodEnd(self)

    def exCouponDate(self) -> "Date":
        return _mxdevtool.Coupon_exCouponDate(self)

    def rate(self) -> "Real":
        return _mxdevtool.Coupon_rate(self)

    def accrualPeriod(self) -> "Time":
        return _mxdevtool.Coupon_accrualPeriod(self)

    def accrualDays(self) -> "BigInteger":
        return _mxdevtool.Coupon_accrualDays(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.Coupon_dayCounter(self)

    def accruedAmount(self, date: "Date") -> "Real":
        return _mxdevtool.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _mxdevtool.delete_Coupon

# Register Coupon in _mxdevtool:
_mxdevtool.Coupon_swigregister(Coupon)


def as_coupon(cf: "CashFlow") -> "CouponPtr":
    return _mxdevtool.as_coupon(cf)
class FixedRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.FixedRateCoupon_swiginit(self, _mxdevtool.new_FixedRateCoupon(*args, **kwargs))

    def interestRate(self) -> "InterestRate":
        return _mxdevtool.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _mxdevtool.delete_FixedRateCoupon

# Register FixedRateCoupon in _mxdevtool:
_mxdevtool.FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf: "CashFlow") -> "FixedRateCouponPtr":
    return _mxdevtool.as_fixed_rate_coupon(cf)
class FloatingRateCouponPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "FloatingRateCouponPricer *":
        return _mxdevtool.FloatingRateCouponPricer___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.FloatingRateCouponPricer___nonzero__(self)

    def __init__(self):
        _mxdevtool.FloatingRateCouponPricer_swiginit(self, _mxdevtool.new_FloatingRateCouponPricer())
    __swig_destroy__ = _mxdevtool.delete_FloatingRateCouponPricer

# Register FloatingRateCouponPricer in _mxdevtool:
_mxdevtool.FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)


def setCouponPricer(arg1: "Leg", arg2: "FloatingRateCouponPricer") -> "void":
    return _mxdevtool.setCouponPricer(arg1, arg2)
class FloatingRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self) -> "Date":
        return _mxdevtool.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self) -> "Integer":
        return _mxdevtool.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self) -> "bool":
        return _mxdevtool.FloatingRateCoupon_isInArrears(self)

    def gearing(self) -> "Real":
        return _mxdevtool.FloatingRateCoupon_gearing(self)

    def spread(self) -> "Rate":
        return _mxdevtool.FloatingRateCoupon_spread(self)

    def indexFixing(self) -> "Rate":
        return _mxdevtool.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self) -> "Rate":
        return _mxdevtool.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self) -> "Rate":
        return _mxdevtool.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve: "YieldTermStructureHandle") -> "Real":
        return _mxdevtool.FloatingRateCoupon_price(self, discountCurve)

    def index(self) -> "InterestRateIndexPtr":
        return _mxdevtool.FloatingRateCoupon_index(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        return _mxdevtool.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _mxdevtool.delete_FloatingRateCoupon

# Register FloatingRateCoupon in _mxdevtool:
_mxdevtool.FloatingRateCoupon_swigregister(FloatingRateCoupon)


def as_floating_rate_coupon(cf: "CashFlow") -> "FloatingRateCouponPtr":
    return _mxdevtool.as_floating_rate_coupon(cf)
class CappedFlooredCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.CappedFlooredCoupon_swiginit(self, _mxdevtool.new_CappedFlooredCoupon(*args, **kwargs))

    def cap(self) -> "Rate":
        return _mxdevtool.CappedFlooredCoupon_cap(self)

    def floor(self) -> "Rate":
        return _mxdevtool.CappedFlooredCoupon_floor(self)

    def effectiveCap(self) -> "Rate":
        return _mxdevtool.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self) -> "Rate":
        return _mxdevtool.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self) -> "bool":
        return _mxdevtool.CappedFlooredCoupon_isCapped(self)

    def isFloored(self) -> "bool":
        return _mxdevtool.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        return _mxdevtool.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _mxdevtool.delete_CappedFlooredCoupon

# Register CappedFlooredCoupon in _mxdevtool:
_mxdevtool.CappedFlooredCoupon_swigregister(CappedFlooredCoupon)

class IborCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.IborCoupon_swiginit(self, _mxdevtool.new_IborCoupon(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_IborCoupon

# Register IborCoupon in _mxdevtool:
_mxdevtool.IborCoupon_swigregister(IborCoupon)


def FixedRateLeg(*args, **kwargs) -> "Leg":
    return _mxdevtool.FixedRateLeg(*args, **kwargs)

def IborLeg(*args, **kwargs) -> "Leg":
    return _mxdevtool.IborLeg(*args, **kwargs)

def CmsLeg(*args, **kwargs) -> "Leg":
    return _mxdevtool.CmsLeg(*args, **kwargs)

def CmsZeroLeg(*args, **kwargs) -> "Leg":
    return _mxdevtool.CmsZeroLeg(*args, **kwargs)
class Duration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _mxdevtool.Duration_Simple
    Macaulay = _mxdevtool.Duration_Macaulay
    Modified = _mxdevtool.Duration_Modified

    def __init__(self):
        _mxdevtool.Duration_swiginit(self, _mxdevtool.new_Duration())
    __swig_destroy__ = _mxdevtool.delete_Duration

# Register Duration in _mxdevtool:
_mxdevtool.Duration_swigregister(Duration)

class CashFlows(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(arg1: "Leg") -> "Date":
        return _mxdevtool.CashFlows_startDate(arg1)

    @staticmethod
    def maturityDate(arg1: "Leg") -> "Date":
        return _mxdevtool.CashFlows_maturityDate(arg1)

    @staticmethod
    def npv(*args) -> "Real":
        return _mxdevtool.CashFlows_npv(*args)

    @staticmethod
    def bps(*args) -> "Real":
        return _mxdevtool.CashFlows_bps(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        return _mxdevtool.CashFlows_atmRate(*args)

    @staticmethod
    def yieldRate(*args) -> "Rate":
        return _mxdevtool.CashFlows_yieldRate(*args)

    @staticmethod
    def duration(*args) -> "Time":
        return _mxdevtool.CashFlows_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        return _mxdevtool.CashFlows_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        return _mxdevtool.CashFlows_basisPointValue(*args)

    @staticmethod
    def zSpread(*args) -> "Spread":
        return _mxdevtool.CashFlows_zSpread(*args)
    __swig_destroy__ = _mxdevtool.delete_CashFlows

# Register CashFlows in _mxdevtool:
_mxdevtool.CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg1: "Leg") -> "Date":
    return _mxdevtool.CashFlows_startDate(arg1)

def CashFlows_maturityDate(arg1: "Leg") -> "Date":
    return _mxdevtool.CashFlows_maturityDate(arg1)

def CashFlows_npv(*args) -> "Real":
    return _mxdevtool.CashFlows_npv(*args)

def CashFlows_bps(*args) -> "Real":
    return _mxdevtool.CashFlows_bps(*args)

def CashFlows_atmRate(*args) -> "Rate":
    return _mxdevtool.CashFlows_atmRate(*args)

def CashFlows_yieldRate(*args) -> "Rate":
    return _mxdevtool.CashFlows_yieldRate(*args)

def CashFlows_duration(*args) -> "Time":
    return _mxdevtool.CashFlows_duration(*args)

def CashFlows_convexity(*args) -> "Real":
    return _mxdevtool.CashFlows_convexity(*args)

def CashFlows_basisPointValue(*args) -> "Real":
    return _mxdevtool.CashFlows_basisPointValue(*args)

def CashFlows_zSpread(*args) -> "Spread":
    return _mxdevtool.CashFlows_zSpread(*args)

class Bond(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.Bond_swiginit(self, _mxdevtool.new_Bond(*args))

    def nextCouponRate(self, *args) -> "Rate":
        return _mxdevtool.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args) -> "Rate":
        return _mxdevtool.Bond_previousCouponRate(self, *args)

    def settlementDays(self) -> "Natural":
        return _mxdevtool.Bond_settlementDays(self)

    def settlementDate(self, *args) -> "Date":
        return _mxdevtool.Bond_settlementDate(self, *args)

    def startDate(self) -> "Date":
        return _mxdevtool.Bond_startDate(self)

    def maturityDate(self) -> "Date":
        return _mxdevtool.Bond_maturityDate(self)

    def issueDate(self) -> "Date":
        return _mxdevtool.Bond_issueDate(self)

    def cashflows(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _mxdevtool.Bond_cashflows(self)

    def redemptions(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _mxdevtool.Bond_redemptions(self)

    def redemption(self) -> "boost::shared_ptr< CashFlow >":
        return _mxdevtool.Bond_redemption(self)

    def calendar(self) -> "Calendar":
        return _mxdevtool.Bond_calendar(self)

    def notionals(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.Bond_notionals(self)

    def notional(self, *args) -> "Real":
        return _mxdevtool.Bond_notional(self, *args)

    def cleanPrice(self, *args) -> "Real":
        return _mxdevtool.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args) -> "Real":
        return _mxdevtool.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args) -> "Real":
        return _mxdevtool.Bond_bondYield(self, *args)

    def accruedAmount(self, *args) -> "Real":
        return _mxdevtool.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args) -> "Real":
        return _mxdevtool.Bond_settlementValue(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Bond

# Register Bond in _mxdevtool:
_mxdevtool.Bond_swigregister(Bond)


def cleanPriceFromZSpread(*args) -> "Real":
    return _mxdevtool.cleanPriceFromZSpread(*args)
class ZeroCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.ZeroCouponBond_swiginit(self, _mxdevtool.new_ZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_ZeroCouponBond

# Register ZeroCouponBond in _mxdevtool:
_mxdevtool.ZeroCouponBond_swigregister(ZeroCouponBond)

class FixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.FixedRateBond_swiginit(self, _mxdevtool.new_FixedRateBond(*args, **kwargs))

    def frequency(self) -> "Frequency":
        return _mxdevtool.FixedRateBond_frequency(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _mxdevtool.delete_FixedRateBond

# Register FixedRateBond in _mxdevtool:
_mxdevtool.FixedRateBond_swigregister(FixedRateBond)

class FloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.FloatingRateBond_swiginit(self, _mxdevtool.new_FloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_FloatingRateBond

# Register FloatingRateBond in _mxdevtool:
_mxdevtool.FloatingRateBond_swigregister(FloatingRateBond)

class CmsRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _mxdevtool.CmsRateBond_swiginit(self, _mxdevtool.new_CmsRateBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_CmsRateBond

# Register CmsRateBond in _mxdevtool:
_mxdevtool.CmsRateBond_swigregister(CmsRateBond)

class DiscountingBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, discountCurve: "YieldTermStructureHandle"):
        _mxdevtool.DiscountingBondEngine_swiginit(self, _mxdevtool.new_DiscountingBondEngine(discountCurve))
    __swig_destroy__ = _mxdevtool.delete_DiscountingBondEngine

# Register DiscountingBondEngine in _mxdevtool:
_mxdevtool.DiscountingBondEngine_swigregister(DiscountingBondEngine)

class BondFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(bond: "Bond") -> "Date":
        return _mxdevtool.BondFunctions_startDate(bond)

    @staticmethod
    def maturityDate(bond: "Bond") -> "Date":
        return _mxdevtool.BondFunctions_maturityDate(bond)

    @staticmethod
    def isTradable(*args) -> "bool":
        return _mxdevtool.BondFunctions_isTradable(*args)

    @staticmethod
    def previousCashFlowDate(*args) -> "Date":
        return _mxdevtool.BondFunctions_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args) -> "Date":
        return _mxdevtool.BondFunctions_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args) -> "Real":
        return _mxdevtool.BondFunctions_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args) -> "Real":
        return _mxdevtool.BondFunctions_nextCashFlowAmount(*args)

    @staticmethod
    def previousCouponRate(*args) -> "Rate":
        return _mxdevtool.BondFunctions_previousCouponRate(*args)

    @staticmethod
    def nextCouponRate(*args) -> "Rate":
        return _mxdevtool.BondFunctions_nextCouponRate(*args)

    @staticmethod
    def accrualStartDate(*args) -> "Date":
        return _mxdevtool.BondFunctions_accrualStartDate(*args)

    @staticmethod
    def accrualEndDate(*args) -> "Date":
        return _mxdevtool.BondFunctions_accrualEndDate(*args)

    @staticmethod
    def accrualPeriod(*args) -> "Time":
        return _mxdevtool.BondFunctions_accrualPeriod(*args)

    @staticmethod
    def accrualDays(*args) -> "BigInteger":
        return _mxdevtool.BondFunctions_accrualDays(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        return _mxdevtool.BondFunctions_atmRate(*args)

    @staticmethod
    def cleanPrice(*args) -> "Real":
        return _mxdevtool.BondFunctions_cleanPrice(*args)

    @staticmethod
    def bps(*args) -> "Real":
        return _mxdevtool.BondFunctions_bps(*args)

    @staticmethod
    def _yield(*args) -> "Rate":
        return _mxdevtool.BondFunctions__yield(*args)

    @staticmethod
    def duration(*args) -> "Time":
        return _mxdevtool.BondFunctions_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        return _mxdevtool.BondFunctions_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        return _mxdevtool.BondFunctions_basisPointValue(*args)

    @staticmethod
    def yieldValueBasisPoint(*args) -> "Real":
        return _mxdevtool.BondFunctions_yieldValueBasisPoint(*args)

    def __init__(self):
        _mxdevtool.BondFunctions_swiginit(self, _mxdevtool.new_BondFunctions())
    __swig_destroy__ = _mxdevtool.delete_BondFunctions

# Register BondFunctions in _mxdevtool:
_mxdevtool.BondFunctions_swigregister(BondFunctions)

def BondFunctions_startDate(bond: "Bond") -> "Date":
    return _mxdevtool.BondFunctions_startDate(bond)

def BondFunctions_maturityDate(bond: "Bond") -> "Date":
    return _mxdevtool.BondFunctions_maturityDate(bond)

def BondFunctions_isTradable(*args) -> "bool":
    return _mxdevtool.BondFunctions_isTradable(*args)

def BondFunctions_previousCashFlowDate(*args) -> "Date":
    return _mxdevtool.BondFunctions_previousCashFlowDate(*args)

def BondFunctions_nextCashFlowDate(*args) -> "Date":
    return _mxdevtool.BondFunctions_nextCashFlowDate(*args)

def BondFunctions_previousCashFlowAmount(*args) -> "Real":
    return _mxdevtool.BondFunctions_previousCashFlowAmount(*args)

def BondFunctions_nextCashFlowAmount(*args) -> "Real":
    return _mxdevtool.BondFunctions_nextCashFlowAmount(*args)

def BondFunctions_previousCouponRate(*args) -> "Rate":
    return _mxdevtool.BondFunctions_previousCouponRate(*args)

def BondFunctions_nextCouponRate(*args) -> "Rate":
    return _mxdevtool.BondFunctions_nextCouponRate(*args)

def BondFunctions_accrualStartDate(*args) -> "Date":
    return _mxdevtool.BondFunctions_accrualStartDate(*args)

def BondFunctions_accrualEndDate(*args) -> "Date":
    return _mxdevtool.BondFunctions_accrualEndDate(*args)

def BondFunctions_accrualPeriod(*args) -> "Time":
    return _mxdevtool.BondFunctions_accrualPeriod(*args)

def BondFunctions_accrualDays(*args) -> "BigInteger":
    return _mxdevtool.BondFunctions_accrualDays(*args)

def BondFunctions_atmRate(*args) -> "Rate":
    return _mxdevtool.BondFunctions_atmRate(*args)

def BondFunctions_cleanPrice(*args) -> "Real":
    return _mxdevtool.BondFunctions_cleanPrice(*args)

def BondFunctions_bps(*args) -> "Real":
    return _mxdevtool.BondFunctions_bps(*args)

def BondFunctions__yield(*args) -> "Rate":
    return _mxdevtool.BondFunctions__yield(*args)

def BondFunctions_duration(*args) -> "Time":
    return _mxdevtool.BondFunctions_duration(*args)

def BondFunctions_convexity(*args) -> "Real":
    return _mxdevtool.BondFunctions_convexity(*args)

def BondFunctions_basisPointValue(*args) -> "Real":
    return _mxdevtool.BondFunctions_basisPointValue(*args)

def BondFunctions_yieldValueBasisPoint(*args) -> "Real":
    return _mxdevtool.BondFunctions_yieldValueBasisPoint(*args)

class TimeGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.TimeGrid_swiginit(self, _mxdevtool.new_TimeGrid(*args))

    def __len__(self) -> "Size":
        return _mxdevtool.TimeGrid___len__(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _mxdevtool.TimeGrid_times(self)

    def dts(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _mxdevtool.TimeGrid_dts(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _mxdevtool.TimeGrid_dates(self)

    def date_at(self, i: "Size") -> "Date":
        return _mxdevtool.TimeGrid_date_at(self, i)

    def index(self, t: "Time") -> "Size":
        return _mxdevtool.TimeGrid_index(self, t)

    def closestIndex(self, t: "Time") -> "Size":
        return _mxdevtool.TimeGrid_closestIndex(self, t)

    def closestIndex_Date(self, d: "Date") -> "Size":
        return _mxdevtool.TimeGrid_closestIndex_Date(self, d)

    def closestTime(self, t: "Time") -> "Time":
        return _mxdevtool.TimeGrid_closestTime(self, t)

    def __getitem__(self, i: "Integer") -> "Time":
        return _mxdevtool.TimeGrid___getitem__(self, i)

    def dt(self, i: "Integer") -> "Time":
        return _mxdevtool.TimeGrid_dt(self, i)
    __swig_destroy__ = _mxdevtool.delete_TimeGrid

# Register TimeGrid in _mxdevtool:
_mxdevtool.TimeGrid_swigregister(TimeGrid)

class TimeEqualGrid(TimeGrid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate: "Date", maxYear: "QuantLib::Size", nPerYear: "QuantLib::Size"):
        _mxdevtool.TimeEqualGrid_swiginit(self, _mxdevtool.new_TimeEqualGrid(refDate, maxYear, nPerYear))
    __swig_destroy__ = _mxdevtool.delete_TimeEqualGrid

# Register TimeEqualGrid in _mxdevtool:
_mxdevtool.TimeEqualGrid_swigregister(TimeEqualGrid)

class Money(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.Money_swiginit(self, _mxdevtool.new_Money(*args))

    def currency(self) -> "Currency const &":
        return _mxdevtool.Money_currency(self)

    def value(self) -> "Decimal":
        return _mxdevtool.Money_value(self)

    def rounded(self) -> "Money":
        return _mxdevtool.Money_rounded(self)

    def __pos__(self) -> "Money":
        return _mxdevtool.Money___pos__(self)

    def __neg__(self) -> "Money":
        return _mxdevtool.Money___neg__(self)

    def __add__(self, m: "Money") -> "Money":
        return _mxdevtool.Money___add__(self, m)

    def __sub__(self, m: "Money") -> "Money":
        return _mxdevtool.Money___sub__(self, m)

    def __mul__(self, x: "Decimal") -> "Money":
        return _mxdevtool.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _mxdevtool.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x: "Decimal") -> "Money":
        return _mxdevtool.Money___rmul__(self, x)

    def __lt__(self, other: "Money") -> "bool":
        return _mxdevtool.Money___lt__(self, other)

    def __cmp__(self, other: "Money") -> "int":
        return _mxdevtool.Money___cmp__(self, other)

    def __str__(self) -> "std::string":
        return _mxdevtool.Money___str__(self)
    NoConversion = _mxdevtool.Money_NoConversion
    BaseCurrencyConversion = _mxdevtool.Money_BaseCurrencyConversion
    AutomatedConversion = _mxdevtool.Money_AutomatedConversion

    @staticmethod
    def setConversionType(type: "Money::ConversionType") -> "void":
        return _mxdevtool.Money_setConversionType(type)

    @staticmethod
    def setBaseCurrency(c: "Currency") -> "void":
        return _mxdevtool.Money_setBaseCurrency(c)
    __swig_destroy__ = _mxdevtool.delete_Money

# Register Money in _mxdevtool:
_mxdevtool.Money_swigregister(Money)

def Money_setConversionType(type: "Money::ConversionType") -> "void":
    return _mxdevtool.Money_setConversionType(type)

def Money_setBaseCurrency(c: "Currency") -> "void":
    return _mxdevtool.Money_setBaseCurrency(c)

class Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _mxdevtool.Option_Put
    Call = _mxdevtool.Option_Call
    __swig_destroy__ = _mxdevtool.delete_Option

# Register Option in _mxdevtool:
_mxdevtool.Option_swigregister(Option)

class Barrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DownIn = _mxdevtool.Barrier_DownIn
    UpIn = _mxdevtool.Barrier_UpIn
    DownOut = _mxdevtool.Barrier_DownOut
    UpOut = _mxdevtool.Barrier_UpOut

    def __init__(self):
        _mxdevtool.Barrier_swiginit(self, _mxdevtool.new_Barrier())
    __swig_destroy__ = _mxdevtool.delete_Barrier

# Register Barrier in _mxdevtool:
_mxdevtool.Barrier_swigregister(Barrier)

class EuropeanOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", strike: "Real", s0: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        _mxdevtool.EuropeanOption_swiginit(self, _mxdevtool.new_EuropeanOption(optionType, strike, s0, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        return _mxdevtool.EuropeanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        return _mxdevtool.EuropeanOption_delta(self)

    def gamma(self) -> "Real":
        return _mxdevtool.EuropeanOption_gamma(self)

    def theta(self) -> "Real":
        return _mxdevtool.EuropeanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _mxdevtool.EuropeanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _mxdevtool.EuropeanOption_vega(self)

    def rho(self) -> "Real":
        return _mxdevtool.EuropeanOption_rho(self)

    def dividendRho(self) -> "Real":
        return _mxdevtool.EuropeanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _mxdevtool.EuropeanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_EuropeanOption

# Register EuropeanOption in _mxdevtool:
_mxdevtool.EuropeanOption_swigregister(EuropeanOption)

class AmericanOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", strike: "Real", s0: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        _mxdevtool.AmericanOption_swiginit(self, _mxdevtool.new_AmericanOption(optionType, strike, s0, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        return _mxdevtool.AmericanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        return _mxdevtool.AmericanOption_delta(self)

    def gamma(self) -> "Real":
        return _mxdevtool.AmericanOption_gamma(self)

    def theta(self) -> "Real":
        return _mxdevtool.AmericanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _mxdevtool.AmericanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _mxdevtool.AmericanOption_vega(self)

    def rho(self) -> "Real":
        return _mxdevtool.AmericanOption_rho(self)

    def dividendRho(self) -> "Real":
        return _mxdevtool.AmericanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _mxdevtool.AmericanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_AmericanOption

# Register AmericanOption in _mxdevtool:
_mxdevtool.AmericanOption_swigregister(AmericanOption)

class BermudanOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", strike: "Real", s0: "Real", r: "Real", div: "Real", vol: "Real", exDates: "DateVector"):
        _mxdevtool.BermudanOption_swiginit(self, _mxdevtool.new_BermudanOption(optionType, strike, s0, r, div, vol, exDates))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        return _mxdevtool.BermudanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        return _mxdevtool.BermudanOption_delta(self)

    def gamma(self) -> "Real":
        return _mxdevtool.BermudanOption_gamma(self)

    def theta(self) -> "Real":
        return _mxdevtool.BermudanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _mxdevtool.BermudanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _mxdevtool.BermudanOption_vega(self)

    def rho(self) -> "Real":
        return _mxdevtool.BermudanOption_rho(self)

    def dividendRho(self) -> "Real":
        return _mxdevtool.BermudanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _mxdevtool.BermudanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_BermudanOption

# Register BermudanOption in _mxdevtool:
_mxdevtool.BermudanOption_swigregister(BermudanOption)

class BarrierOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", barrierType: "Barrier::Type", barrier: "Real", rebate: "Real", s0: "Real", strike: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        _mxdevtool.BarrierOption_swiginit(self, _mxdevtool.new_BarrierOption(optionType, barrierType, barrier, rebate, s0, strike, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        return _mxdevtool.BarrierOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        return _mxdevtool.BarrierOption_delta(self)

    def gamma(self) -> "Real":
        return _mxdevtool.BarrierOption_gamma(self)

    def theta(self) -> "Real":
        return _mxdevtool.BarrierOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _mxdevtool.BarrierOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _mxdevtool.BarrierOption_vega(self)

    def rho(self) -> "Real":
        return _mxdevtool.BarrierOption_rho(self)

    def dividendRho(self) -> "Real":
        return _mxdevtool.BarrierOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _mxdevtool.BarrierOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_BarrierOption

# Register BarrierOption in _mxdevtool:
_mxdevtool.BarrierOption_swigregister(BarrierOption)

class Settings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "Settings &":
        return _mxdevtool.Settings_instance()

    def getEvaluationDate(self) -> "Date":
        return _mxdevtool.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d: "Date") -> "void":
        return _mxdevtool.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b: "bool") -> "void":
        return _mxdevtool.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b: "bool") -> "void":
        return _mxdevtool.Settings_includeTodaysCashFlows(self, b)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)

    __swig_destroy__ = _mxdevtool.delete_Settings

# Register Settings in _mxdevtool:
_mxdevtool.Settings_swigregister(Settings)

def Settings_instance() -> "Settings &":
    return _mxdevtool.Settings_instance()

class Statistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self) -> "Size":
        return _mxdevtool.Statistics_samples(self)

    def weightSum(self) -> "Real":
        return _mxdevtool.Statistics_weightSum(self)

    def mean(self) -> "Real":
        return _mxdevtool.Statistics_mean(self)

    def variance(self) -> "Real":
        return _mxdevtool.Statistics_variance(self)

    def standardDeviation(self) -> "Real":
        return _mxdevtool.Statistics_standardDeviation(self)

    def errorEstimate(self) -> "Real":
        return _mxdevtool.Statistics_errorEstimate(self)

    def skewness(self) -> "Real":
        return _mxdevtool.Statistics_skewness(self)

    def kurtosis(self) -> "Real":
        return _mxdevtool.Statistics_kurtosis(self)

    def min(self) -> "Real":
        return _mxdevtool.Statistics_min(self)

    def max(self) -> "Real":
        return _mxdevtool.Statistics_max(self)

    def reset(self) -> "void":
        return _mxdevtool.Statistics_reset(self)

    def add(self, *args) -> "void":
        return _mxdevtool.Statistics_add(self, *args)

    def __init__(self):
        _mxdevtool.Statistics_swiginit(self, _mxdevtool.new_Statistics())
    __swig_destroy__ = _mxdevtool.delete_Statistics

# Register Statistics in _mxdevtool:
_mxdevtool.Statistics_swigregister(Statistics)

class IncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self) -> "Size":
        return _mxdevtool.IncrementalStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_weightSum(self)

    def mean(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_mean(self)

    def variance(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_variance(self)

    def standardDeviation(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_standardDeviation(self)

    def errorEstimate(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_errorEstimate(self)

    def skewness(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_skewness(self)

    def kurtosis(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_kurtosis(self)

    def min(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_min(self)

    def max(self) -> "Real":
        return _mxdevtool.IncrementalStatistics_max(self)

    def reset(self) -> "void":
        return _mxdevtool.IncrementalStatistics_reset(self)

    def add(self, *args) -> "void":
        return _mxdevtool.IncrementalStatistics_add(self, *args)

    def __init__(self):
        _mxdevtool.IncrementalStatistics_swiginit(self, _mxdevtool.new_IncrementalStatistics())
    __swig_destroy__ = _mxdevtool.delete_IncrementalStatistics

# Register IncrementalStatistics in _mxdevtool:
_mxdevtool.IncrementalStatistics_swigregister(IncrementalStatistics)

class RiskStatistics(Statistics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def semiVariance(self) -> "Real":
        return _mxdevtool.RiskStatistics_semiVariance(self)

    def semiDeviation(self) -> "Real":
        return _mxdevtool.RiskStatistics_semiDeviation(self)

    def downsideVariance(self) -> "Real":
        return _mxdevtool.RiskStatistics_downsideVariance(self)

    def downsideDeviation(self) -> "Real":
        return _mxdevtool.RiskStatistics_downsideDeviation(self)

    def regret(self, target: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_regret(self, target)

    def potentialUpside(self, percentile: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_potentialUpside(self, percentile)

    def valueAtRisk(self, percentile: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_valueAtRisk(self, percentile)

    def expectedShortfall(self, percentile: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_expectedShortfall(self, percentile)

    def shortfall(self, target: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_shortfall(self, target)

    def averageShortfall(self, target: "Real") -> "Real":
        return _mxdevtool.RiskStatistics_averageShortfall(self, target)

    def __init__(self):
        _mxdevtool.RiskStatistics_swiginit(self, _mxdevtool.new_RiskStatistics())
    __swig_destroy__ = _mxdevtool.delete_RiskStatistics

# Register RiskStatistics in _mxdevtool:
_mxdevtool.RiskStatistics_swigregister(RiskStatistics)

class MultipleStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _mxdevtool.MultipleStatistics_swiginit(self, _mxdevtool.new_MultipleStatistics(dimension))

    def size(self) -> "Size":
        return _mxdevtool.MultipleStatistics_size(self)

    def samples(self) -> "Size":
        return _mxdevtool.MultipleStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _mxdevtool.MultipleStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _mxdevtool.MultipleStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _mxdevtool.MultipleStatistics_correlation(self)

    def reset(self) -> "void":
        return _mxdevtool.MultipleStatistics_reset(self)

    def add(self, *args) -> "void":
        return _mxdevtool.MultipleStatistics_add(self, *args)
    __swig_destroy__ = _mxdevtool.delete_MultipleStatistics

# Register MultipleStatistics in _mxdevtool:
_mxdevtool.MultipleStatistics_swigregister(MultipleStatistics)

class SequenceStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _mxdevtool.SequenceStatistics_swiginit(self, _mxdevtool.new_SequenceStatistics(dimension))

    def size(self) -> "Size":
        return _mxdevtool.SequenceStatistics_size(self)

    def samples(self) -> "Size":
        return _mxdevtool.SequenceStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _mxdevtool.SequenceStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.SequenceStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _mxdevtool.SequenceStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _mxdevtool.SequenceStatistics_correlation(self)

    def reset(self) -> "void":
        return _mxdevtool.SequenceStatistics_reset(self)

    def add(self, *args) -> "void":
        return _mxdevtool.SequenceStatistics_add(self, *args)
    __swig_destroy__ = _mxdevtool.delete_SequenceStatistics

# Register SequenceStatistics in _mxdevtool:
_mxdevtool.SequenceStatistics_swigregister(SequenceStatistics)

class MultipleIncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _mxdevtool.MultipleIncrementalStatistics_swiginit(self, _mxdevtool.new_MultipleIncrementalStatistics(dimension))

    def size(self) -> "Size":
        return _mxdevtool.MultipleIncrementalStatistics_size(self)

    def samples(self) -> "Size":
        return _mxdevtool.MultipleIncrementalStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _mxdevtool.MultipleIncrementalStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.MultipleIncrementalStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _mxdevtool.MultipleIncrementalStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _mxdevtool.MultipleIncrementalStatistics_correlation(self)

    def reset(self) -> "void":
        return _mxdevtool.MultipleIncrementalStatistics_reset(self)

    def add(self, *args) -> "void":
        return _mxdevtool.MultipleIncrementalStatistics_add(self, *args)
    __swig_destroy__ = _mxdevtool.delete_MultipleIncrementalStatistics

# Register MultipleIncrementalStatistics in _mxdevtool:
_mxdevtool.MultipleIncrementalStatistics_swigregister(MultipleIncrementalStatistics)

class Swap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, firstLeg: "Leg", secondLeg: "Leg"):
        _mxdevtool.Swap_swiginit(self, _mxdevtool.new_Swap(firstLeg, secondLeg))

    def startDate(self) -> "Date":
        return _mxdevtool.Swap_startDate(self)

    def maturityDate(self) -> "Date":
        return _mxdevtool.Swap_maturityDate(self)

    def leg(self, i: "Size") -> "Leg const &":
        return _mxdevtool.Swap_leg(self, i)
    __swig_destroy__ = _mxdevtool.delete_Swap

# Register Swap in _mxdevtool:
_mxdevtool.Swap_swigregister(Swap)

class LegResultType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Net = _mxdevtool.LegResultType_Net
    Pay = _mxdevtool.LegResultType_Pay
    Receive = _mxdevtool.LegResultType_Receive
    Fixed = _mxdevtool.LegResultType_Fixed
    Floating = _mxdevtool.LegResultType_Floating

    def __init__(self):
        _mxdevtool.LegResultType_swiginit(self, _mxdevtool.new_LegResultType())
    __swig_destroy__ = _mxdevtool.delete_LegResultType

# Register LegResultType in _mxdevtool:
_mxdevtool.LegResultType_swigregister(LegResultType)

class VanillaSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _mxdevtool.VanillaSwap_Receiver
    Payer = _mxdevtool.VanillaSwap_Payer

    def __init__(self, type: "VanillaSwap::Type", nominal: "Real", fixedSchedule: "Schedule", fixedRate: "Rate", fixedDayCount: "DayCounter", floatSchedule: "Schedule", index: "IborIndex", spread: "Spread", floatingDayCount: "DayCounter"):
        _mxdevtool.VanillaSwap_swiginit(self, _mxdevtool.new_VanillaSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, spread, floatingDayCount))

    def fairRate(self) -> "Rate":
        return _mxdevtool.VanillaSwap_fairRate(self)

    def fairSpread(self) -> "Spread":
        return _mxdevtool.VanillaSwap_fairSpread(self)

    def fixedLegBPS(self) -> "Real":
        return _mxdevtool.VanillaSwap_fixedLegBPS(self)

    def floatingLegBPS(self) -> "Real":
        return _mxdevtool.VanillaSwap_floatingLegBPS(self)

    def fixedLegNPV(self) -> "Real":
        return _mxdevtool.VanillaSwap_fixedLegNPV(self)

    def floatingLegNPV(self) -> "Real":
        return _mxdevtool.VanillaSwap_floatingLegNPV(self)

    def fixedLeg(self) -> "Leg const &":
        return _mxdevtool.VanillaSwap_fixedLeg(self)

    def floatingLeg(self) -> "Leg const &":
        return _mxdevtool.VanillaSwap_floatingLeg(self)

    def nominal(self) -> "Real":
        return _mxdevtool.VanillaSwap_nominal(self)

    def fixedSchedule(self) -> "Schedule const &":
        return _mxdevtool.VanillaSwap_fixedSchedule(self)

    def floatingSchedule(self) -> "Schedule const &":
        return _mxdevtool.VanillaSwap_floatingSchedule(self)

    def fixedRate(self) -> "Rate":
        return _mxdevtool.VanillaSwap_fixedRate(self)

    def spread(self) -> "Spread":
        return _mxdevtool.VanillaSwap_spread(self)

    def floatingDayCount(self) -> "DayCounter const &":
        return _mxdevtool.VanillaSwap_floatingDayCount(self)

    def fixedDayCount(self) -> "DayCounter const &":
        return _mxdevtool.VanillaSwap_fixedDayCount(self)
    __swig_destroy__ = _mxdevtool.delete_VanillaSwap

# Register VanillaSwap in _mxdevtool:
_mxdevtool.VanillaSwap_swigregister(VanillaSwap)

class DiscountingSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.DiscountingSwapEngine_swiginit(self, _mxdevtool.new_DiscountingSwapEngine(*args))
    __swig_destroy__ = _mxdevtool.delete_DiscountingSwapEngine

# Register DiscountingSwapEngine in _mxdevtool:
_mxdevtool.DiscountingSwapEngine_swigregister(DiscountingSwapEngine)

class VanillaSwapExt(VanillaSwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "VanillaSwap::Type", nominal: "Real", settlementDate: "Date", maturityTenor: "Period", fixedRate: "Real", iborIndexExt: "IborIndexExt", spread: "Real", familyName: "std::string", pricingEngine: "PricingEngine"):
        _mxdevtool.VanillaSwapExt_swiginit(self, _mxdevtool.new_VanillaSwapExt(type, nominal, settlementDate, maturityTenor, fixedRate, iborIndexExt, spread, familyName, pricingEngine))

    def rho(self, resultType: "QuantLib::LegResultType::Type") -> "Real":
        return _mxdevtool.VanillaSwapExt_rho(self, resultType)

    def convexity(self, resultType: "QuantLib::LegResultType::Type") -> "Real":
        return _mxdevtool.VanillaSwapExt_convexity(self, resultType)

    def partialRho(self, resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.VanillaSwapExt_partialRho(self, resultType)

    def partialConvexity(self, resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.VanillaSwapExt_partialConvexity(self, resultType)

    def rhoDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "Real":
        return _mxdevtool.VanillaSwapExt_rhoDecay(self, targetDate, resultType)

    def convexityDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "Real":
        return _mxdevtool.VanillaSwapExt_convexityDecay(self, targetDate, resultType)

    def partialRhoDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.VanillaSwapExt_partialRhoDecay(self, targetDate, resultType)

    def partialConvexityDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.VanillaSwapExt_partialConvexityDecay(self, targetDate, resultType)

    def previousFloatFixingDate(self) -> "Date":
        return _mxdevtool.VanillaSwapExt_previousFloatFixingDate(self)
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExt

# Register VanillaSwapExt in _mxdevtool:
_mxdevtool.VanillaSwapExt_swigregister(VanillaSwapExt)

class VanillaSwapExtEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yieldcurve: "YieldTermStructure"):
        _mxdevtool.VanillaSwapExtEngine_swiginit(self, _mxdevtool.new_VanillaSwapExtEngine(yieldcurve))
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExtEngine

# Register VanillaSwapExtEngine in _mxdevtool:
_mxdevtool.VanillaSwapExtEngine_swigregister(VanillaSwapExtEngine)

class VanillaSwapExtPartialGreekEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yieldcurve: "YieldTermStructure", partialGreekInterval: "PeriodIntervalVector"):
        _mxdevtool.VanillaSwapExtPartialGreekEngine_swiginit(self, _mxdevtool.new_VanillaSwapExtPartialGreekEngine(yieldcurve, partialGreekInterval))
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExtPartialGreekEngine

# Register VanillaSwapExtPartialGreekEngine in _mxdevtool:
_mxdevtool.VanillaSwapExtPartialGreekEngine_swigregister(VanillaSwapExtPartialGreekEngine)

class BlackVolTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "BlackVolTermStructure *":
        return _mxdevtool.BlackVolTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.BlackVolTermStructure___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.BlackVolTermStructure_asObservable(self)

    def __init__(self):
        _mxdevtool.BlackVolTermStructure_swiginit(self, _mxdevtool.new_BlackVolTermStructure())
    __swig_destroy__ = _mxdevtool.delete_BlackVolTermStructure

    def referenceDate(self) -> "Date":
        return _mxdevtool.BlackVolTermStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.BlackVolTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _mxdevtool.BlackVolTermStructure_calendar(self)

    def maxDate(self) -> "Date":
        return _mxdevtool.BlackVolTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _mxdevtool.BlackVolTermStructure_maxTime(self)

    def minStrike(self) -> "Real":
        return _mxdevtool.BlackVolTermStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        return _mxdevtool.BlackVolTermStructure_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        return _mxdevtool.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _mxdevtool.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        return _mxdevtool.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        return _mxdevtool.BlackVolTermStructure_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _mxdevtool.BlackVolTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _mxdevtool.BlackVolTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _mxdevtool.BlackVolTermStructure_allowsExtrapolation(self)

# Register BlackVolTermStructure in _mxdevtool:
_mxdevtool.BlackVolTermStructure_swigregister(BlackVolTermStructure)

class BlackVolTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.BlackVolTermStructureHandle_swiginit(self, _mxdevtool.new_BlackVolTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< BlackVolTermStructure >":
        return _mxdevtool.BlackVolTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.BlackVolTermStructureHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _mxdevtool.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_BlackVolTermStructureHandle

    def referenceDate(self) -> "Date":
        return _mxdevtool.BlackVolTermStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _mxdevtool.BlackVolTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _mxdevtool.BlackVolTermStructureHandle_calendar(self)

    def maxDate(self) -> "Date":
        return _mxdevtool.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _mxdevtool.BlackVolTermStructureHandle_maxTime(self)

    def minStrike(self) -> "Real":
        return _mxdevtool.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        return _mxdevtool.BlackVolTermStructureHandle_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        return _mxdevtool.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _mxdevtool.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        return _mxdevtool.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        return _mxdevtool.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _mxdevtool.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _mxdevtool.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _mxdevtool.BlackVolTermStructureHandle_allowsExtrapolation(self)

# Register BlackVolTermStructureHandle in _mxdevtool:
_mxdevtool.BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)

class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.RelinkableBlackVolTermStructureHandle_swiginit(self, _mxdevtool.new_RelinkableBlackVolTermStructureHandle(*args))

    def linkTo(self, arg2: "BlackVolTermStructure") -> "void":
        return _mxdevtool.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableBlackVolTermStructureHandle

# Register RelinkableBlackVolTermStructureHandle in _mxdevtool:
_mxdevtool.RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)

class BlackConstantVol(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", volatility: "Volatility", family_name: "std::string const &"):
        _mxdevtool.BlackConstantVol_swiginit(self, _mxdevtool.new_BlackConstantVol(referenceDate, volatility, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackConstantVol

# Register BlackConstantVol in _mxdevtool:
_mxdevtool.BlackConstantVol_swigregister(BlackConstantVol)

class BlackVarianceCurve(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", tenors_str: "StrVector", volatilities: "DoubleVector", interpolatorID: "Interpolator1D::Type", family_name: "std::string const &"):
        _mxdevtool.BlackVarianceCurve_swiginit(self, _mxdevtool.new_BlackVarianceCurve(referenceDate, tenors_str, volatilities, interpolatorID, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackVarianceCurve

# Register BlackVarianceCurve in _mxdevtool:
_mxdevtool.BlackVarianceCurve_swigregister(BlackVarianceCurve)

class BlackVarianceSurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", tenors_str: "StrVector", strikes: "DoubleVector", blackVols: "Matrix", family_name: "std::string const &"):
        _mxdevtool.BlackVarianceSurface_swiginit(self, _mxdevtool.new_BlackVarianceSurface(referenceDate, tenors_str, strikes, blackVols, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackVarianceSurface

# Register BlackVarianceSurface in _mxdevtool:
_mxdevtool.BlackVarianceSurface_swigregister(BlackVarianceSurface)

class Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Parameter *":
        return _mxdevtool.Parameter___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.Parameter___nonzero__(self)

    def __init__(self):
        _mxdevtool.Parameter_swiginit(self, _mxdevtool.new_Parameter())
    __swig_destroy__ = _mxdevtool.delete_Parameter

# Register Parameter in _mxdevtool:
_mxdevtool.Parameter_swigregister(Parameter)

class DeterministicParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mxdevtool.DeterministicParameter_swiginit(self, _mxdevtool.new_DeterministicParameter(*args))
    __swig_destroy__ = _mxdevtool.delete_DeterministicParameter

# Register DeterministicParameter in _mxdevtool:
_mxdevtool.DeterministicParameter_swigregister(DeterministicParameter)

class ProcessValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "ProcessValue *":
        return _mxdevtool.ProcessValue___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.ProcessValue___nonzero__(self)

    def __init__(self):
        _mxdevtool.ProcessValue_swiginit(self, _mxdevtool.new_ProcessValue())
    __swig_destroy__ = _mxdevtool.delete_ProcessValue

# Register ProcessValue in _mxdevtool:
_mxdevtool.ProcessValue_swigregister(ProcessValue)

class ProcessValuePtr(ProcessValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __pos__(self) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___pos__(self)

    def __neg__(self) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___neg__(self)

    def __add__(self, *args) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___add__(self, *args)

    def __sub__(self, *args) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___sub__(self, *args)

    def __mul__(self, *args) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___mul__(self, *args)

    def __truediv__(self, *args) -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___truediv__(self, *args)

    def __radd__(self, v: "Real") -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___radd__(self, v)

    def __rsub__(self, v: "Real") -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___rsub__(self, v)

    def __rmul__(self, v: "Real") -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___rmul__(self, v)

    def __rtruediv__(self, v: "Real") -> "ProcessValuePtr":
        return _mxdevtool.ProcessValuePtr___rtruediv__(self, v)

    def get_name(self) -> "std::string":
        return _mxdevtool.ProcessValuePtr_get_name(self)

    def set_name(self, name: "std::string") -> "void":
        return _mxdevtool.ProcessValuePtr_set_name(self, name)

    def get_model_type(self) -> "std::string":
        return _mxdevtool.ProcessValuePtr_get_model_type(self)

    def get_output_type(self) -> "std::string":
        return _mxdevtool.ProcessValuePtr_get_output_type(self)

    def get_source(self) -> "std::string":
        return _mxdevtool.ProcessValuePtr_get_source(self)

    name = property(get_name,set_name)
    model_type = property(get_model_type)
    output_type = property(get_output_type)
    source = property(get_source)


    def __init__(self):
        _mxdevtool.ProcessValuePtr_swiginit(self, _mxdevtool.new_ProcessValuePtr())
    __swig_destroy__ = _mxdevtool.delete_ProcessValuePtr

# Register ProcessValuePtr in _mxdevtool:
_mxdevtool.ProcessValuePtr_swigregister(ProcessValuePtr)

class ProcessModel(ProcessValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.ProcessModel_swiginit(self, _mxdevtool.new_ProcessModel())
    __swig_destroy__ = _mxdevtool.delete_ProcessModel

# Register ProcessModel in _mxdevtool:
_mxdevtool.ProcessModel_swigregister(ProcessModel)

class ProcessValueVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _mxdevtool.ProcessValueVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _mxdevtool.ProcessValueVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _mxdevtool.ProcessValueVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        return _mxdevtool.ProcessValueVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type", j: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type") -> "std::vector< boost::shared_ptr< ProcessValue >,std::allocator< boost::shared_ptr< ProcessValue > > > *":
        return _mxdevtool.ProcessValueVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _mxdevtool.ProcessValueVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type", j: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type") -> "void":
        return _mxdevtool.ProcessValueVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _mxdevtool.ProcessValueVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        return _mxdevtool.ProcessValueVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _mxdevtool.ProcessValueVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type":
        return _mxdevtool.ProcessValueVector_pop(self)

    def append(self, x: "ProcessValue") -> "void":
        return _mxdevtool.ProcessValueVector_append(self, x)

    def empty(self) -> "bool":
        return _mxdevtool.ProcessValueVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        return _mxdevtool.ProcessValueVector_size(self)

    def swap(self, v: "ProcessValueVector") -> "void":
        return _mxdevtool.ProcessValueVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        return _mxdevtool.ProcessValueVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        return _mxdevtool.ProcessValueVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator":
        return _mxdevtool.ProcessValueVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator":
        return _mxdevtool.ProcessValueVector_rend(self)

    def clear(self) -> "void":
        return _mxdevtool.ProcessValueVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::allocator_type":
        return _mxdevtool.ProcessValueVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _mxdevtool.ProcessValueVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        return _mxdevtool.ProcessValueVector_erase(self, *args)

    def __init__(self, *args):
        _mxdevtool.ProcessValueVector_swiginit(self, _mxdevtool.new_ProcessValueVector(*args))

    def push_back(self, x: "ProcessValue") -> "void":
        return _mxdevtool.ProcessValueVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        return _mxdevtool.ProcessValueVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        return _mxdevtool.ProcessValueVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< ProcessValue > >::size_type", x: "ProcessValue") -> "void":
        return _mxdevtool.ProcessValueVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _mxdevtool.ProcessValueVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _mxdevtool.ProcessValueVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< ProcessValue > >::size_type") -> "void":
        return _mxdevtool.ProcessValueVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        return _mxdevtool.ProcessValueVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_ProcessValueVector

# Register ProcessValueVector in _mxdevtool:
_mxdevtool.ProcessValueVector_swigregister(ProcessValueVector)

class GBMConstModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", riskFreeRate: "QuantLib::Real", dividendYield: "QuantLib::Spread", volatility: "QuantLib::Real"):
        _mxdevtool.GBMConstModel_swiginit(self, _mxdevtool.new_GBMConstModel(name, initialValue, riskFreeRate, dividendYield, volatility))
    __swig_destroy__ = _mxdevtool.delete_GBMConstModel

# Register GBMConstModel in _mxdevtool:
_mxdevtool.GBMConstModel_swigregister(GBMConstModel)

class GBMModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", rfCurve: "YieldTermStructure", divCurve: "YieldTermStructure", volTs: "BlackVolTermStructure"):
        _mxdevtool.GBMModel_swiginit(self, _mxdevtool.new_GBMModel(name, initialValue, rfCurve, divCurve, volTs))
    __swig_destroy__ = _mxdevtool.delete_GBMModel

# Register GBMModel in _mxdevtool:
_mxdevtool.GBMModel_swigregister(GBMModel)

class HestonModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", initialValue: "QuantLib::Real", rfCurve: "YieldTermStructure", divCurve: "YieldTermStructure", initialVolatility: "QuantLib::Real", volRevertingSpeed: "QuantLib::Real", longTermVolatility: "QuantLib::Real", volOfVol: "QuantLib::Real", rho: "QuantLib::Real"):
        _mxdevtool.HestonModel_swiginit(self, _mxdevtool.new_HestonModel(name, initialValue, rfCurve, divCurve, initialVolatility, volRevertingSpeed, longTermVolatility, volOfVol, rho))
    __swig_destroy__ = _mxdevtool.delete_HestonModel

# Register HestonModel in _mxdevtool:
_mxdevtool.HestonModel_swigregister(HestonModel)

class HullWhite1FModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alphaCurve: "Parameter", sigmaCurve: "Parameter"):
        _mxdevtool.HullWhite1FModel_swiginit(self, _mxdevtool.new_HullWhite1FModel(name, fittingCurve, alphaCurve, sigmaCurve))
    __swig_destroy__ = _mxdevtool.delete_HullWhite1FModel

# Register HullWhite1FModel in _mxdevtool:
_mxdevtool.HullWhite1FModel_swigregister(HullWhite1FModel)

class BK1FModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alphaCurve: "Parameter", sigmaCurve: "Parameter"):
        _mxdevtool.BK1FModel_swiginit(self, _mxdevtool.new_BK1FModel(name, fittingCurve, alphaCurve, sigmaCurve))
    __swig_destroy__ = _mxdevtool.delete_BK1FModel

# Register BK1FModel in _mxdevtool:
_mxdevtool.BK1FModel_swigregister(BK1FModel)

class Vasicek1FModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", meanRevertingSpeed: "QuantLib::Real", longTermRate: "QuantLib::Real", sigma: "QuantLib::Real"):
        _mxdevtool.Vasicek1FModel_swiginit(self, _mxdevtool.new_Vasicek1FModel(name, initialValue, meanRevertingSpeed, longTermRate, sigma))
    __swig_destroy__ = _mxdevtool.delete_Vasicek1FModel

# Register Vasicek1FModel in _mxdevtool:
_mxdevtool.Vasicek1FModel_swigregister(Vasicek1FModel)

class GTwoExtModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alpha1: "Real", sigma1: "Real", alpha2: "Real", sigma2: "Real", correlation: "Real"):
        _mxdevtool.GTwoExtModel_swiginit(self, _mxdevtool.new_GTwoExtModel(name, fittingCurve, alpha1, sigma1, alpha2, sigma2, correlation))
    __swig_destroy__ = _mxdevtool.delete_GTwoExtModel

# Register GTwoExtModel in _mxdevtool:
_mxdevtool.GTwoExtModel_swigregister(GTwoExtModel)

class CIR1FModel(ProcessModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", meanRevertingSpeed: "QuantLib::Real", longTermRate: "QuantLib::Real", sigma: "QuantLib::Real"):
        _mxdevtool.CIR1FModel_swiginit(self, _mxdevtool.new_CIR1FModel(name, initialValue, meanRevertingSpeed, longTermRate, sigma))
    __swig_destroy__ = _mxdevtool.delete_CIR1FModel

# Register CIR1FModel in _mxdevtool:
_mxdevtool.CIR1FModel_swigregister(CIR1FModel)

class IRsgWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "IRsgWrapper *":
        return _mxdevtool.IRsgWrapper___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.IRsgWrapper___nonzero__(self)

    def __init__(self):
        _mxdevtool.IRsgWrapper_swiginit(self, _mxdevtool.new_IRsgWrapper())
    __swig_destroy__ = _mxdevtool.delete_IRsgWrapper

# Register IRsgWrapper in _mxdevtool:
_mxdevtool.IRsgWrapper_swigregister(IRsgWrapper)

class Rsg(IRsgWrapper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleNum: "long", dimension: "long", seed: "long", skip: "long", isMomentMatching: "bool", randomType: "std::string const &", subType: "std::string const &", randomTransformType: "std::string const &"):
        _mxdevtool.Rsg_swiginit(self, _mxdevtool.new_Rsg(sampleNum, dimension, seed, skip, isMomentMatching, randomType, subType, randomTransformType))

    def nextSequence(self) -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.Rsg_nextSequence(self)
    __swig_destroy__ = _mxdevtool.delete_Rsg

# Register Rsg in _mxdevtool:
_mxdevtool.Rsg_swigregister(Rsg)

class IEvolverBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "IEvolverBase *":
        return _mxdevtool.IEvolverBase___deref__(self)

    def __nonzero__(self) -> "bool":
        return _mxdevtool.IEvolverBase___nonzero__(self)

    def __init__(self):
        _mxdevtool.IEvolverBase_swiginit(self, _mxdevtool.new_IEvolverBase())
    __swig_destroy__ = _mxdevtool.delete_IEvolverBase

    def generate(self) -> "void":
        return _mxdevtool.IEvolverBase_generate(self)

# Register IEvolverBase in _mxdevtool:
_mxdevtool.IEvolverBase_swigregister(IEvolverBase)

class ScenarioGenerator(IEvolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, models: "ProcessValueVector", corr: "Matrix", timeGrid: "TimeGrid", rsg: "IRsgWrapper", autoGenerate: "bool", filename: "std::string const &", processMomentMatch: "bool"):
        _mxdevtool.ScenarioGenerator_swiginit(self, _mxdevtool.new_ScenarioGenerator(models, corr, timeGrid, rsg, autoGenerate, filename, processMomentMatch))
    __swig_destroy__ = _mxdevtool.delete_ScenarioGenerator

# Register ScenarioGenerator in _mxdevtool:
_mxdevtool.ScenarioGenerator_swigregister(ScenarioGenerator)

class ScenarioGenerator2(IEvolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, models: "ProcessValueVector", calcs: "ProcessValueVector", corr: "Matrix", timeGrid: "TimeGrid", rsg: "IRsgWrapper", filename: "std::string const &", processMomentMatch: "bool"):
        _mxdevtool.ScenarioGenerator2_swiginit(self, _mxdevtool.new_ScenarioGenerator2(models, calcs, corr, timeGrid, rsg, filename, processMomentMatch))
    __swig_destroy__ = _mxdevtool.delete_ScenarioGenerator2

# Register ScenarioGenerator2 in _mxdevtool:
_mxdevtool.ScenarioGenerator2_swigregister(ScenarioGenerator2)

class ScenarioResultReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileName: "std::string"):
        _mxdevtool.ScenarioResultReader_swiginit(self, _mxdevtool.new_ScenarioResultReader(fileName))

    def path(self, assetCount: "QuantLib::Size", scenCount: "QuantLib::Size") -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > >":
        return _mxdevtool.ScenarioResultReader_path(self, assetCount, scenCount)

    def multiPath(self, scenCount: "QuantLib::Size") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_multiPath(self, scenCount)

    def multiPathTPos(self, scenCount: "QuantLib::Size", t_pos: "QuantLib::Size") -> "std::vector< Real,std::allocator< Real > >":
        return _mxdevtool.ScenarioResultReader_multiPathTPos(self, scenCount, t_pos)

    def multiPathAllTPos(self, t_pos: "QuantLib::Size") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_multiPathAllTPos(self, t_pos)

    def multiPathAllTPosInterpolateTime(self, t: "QuantLib::Time") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_multiPathAllTPosInterpolateTime(self, t)

    def multiPathAllTPosInterpolateDate(self, date: "Date") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_multiPathAllTPosInterpolateDate(self, date)

    def analytic_multiPath(self) -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_analytic_multiPath(self)

    def average_multiPath(self) -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        return _mxdevtool.ScenarioResultReader_average_multiPath(self)

    def genInfo(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _mxdevtool.ScenarioResultReader_genInfo(self)

    def timeGrid(self) -> "TimeGrid":
        return _mxdevtool.ScenarioResultReader_timeGrid(self)

    def refDate(self) -> "Date":
        return _mxdevtool.ScenarioResultReader_refDate(self)

    def maxTime(self) -> "Real":
        return _mxdevtool.ScenarioResultReader_maxTime(self)

    def maxDate(self) -> "Date":
        return _mxdevtool.ScenarioResultReader_maxDate(self)

    def assetNum(self) -> "int":
        return _mxdevtool.ScenarioResultReader_assetNum(self)

    def calcNum(self) -> "int":
        return _mxdevtool.ScenarioResultReader_calcNum(self)

    def timegridNum(self) -> "int":
        return _mxdevtool.ScenarioResultReader_timegridNum(self)

    def simulNum(self) -> "int":
        return _mxdevtool.ScenarioResultReader_simulNum(self)

    def randomType(self) -> "std::string":
        return _mxdevtool.ScenarioResultReader_randomType(self)

    def randomSubtype(self) -> "std::string":
        return _mxdevtool.ScenarioResultReader_randomSubtype(self)

    def randomMomentMatch(self) -> "int":
        return _mxdevtool.ScenarioResultReader_randomMomentMatch(self)

    def modelMomentMatch(self) -> "int":
        return _mxdevtool.ScenarioResultReader_modelMomentMatch(self)

    def seed(self) -> "int":
        return _mxdevtool.ScenarioResultReader_seed(self)

    def skip(self) -> "int":
        return _mxdevtool.ScenarioResultReader_skip(self)

    def filename(self) -> "std::string":
        return _mxdevtool.ScenarioResultReader_filename(self)
    __swig_destroy__ = _mxdevtool.delete_ScenarioResultReader

# Register ScenarioResultReader in _mxdevtool:
_mxdevtool.ScenarioResultReader_swigregister(ScenarioResultReader)

class AdditionalCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mxdevtool.AdditionalCalc_swiginit(self, _mxdevtool.new_AdditionalCalc())
    __swig_destroy__ = _mxdevtool.delete_AdditionalCalc

# Register AdditionalCalc in _mxdevtool:
_mxdevtool.AdditionalCalc_swigregister(AdditionalCalc)

class SpotRateCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", maturity: "Period", compounding: "Compounding"):
        _mxdevtool.SpotRateCalc_swiginit(self, _mxdevtool.new_SpotRateCalc(name, pv, maturity, compounding))
    __swig_destroy__ = _mxdevtool.delete_SpotRateCalc

# Register SpotRateCalc in _mxdevtool:
_mxdevtool.SpotRateCalc_swigregister(SpotRateCalc)

class ForwardRateCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", startPeriod: "Period", maturity: "Period", compounding: "Compounding"):
        _mxdevtool.ForwardRateCalc_swiginit(self, _mxdevtool.new_ForwardRateCalc(name, pv, startPeriod, maturity, compounding))
    __swig_destroy__ = _mxdevtool.delete_ForwardRateCalc

# Register ForwardRateCalc in _mxdevtool:
_mxdevtool.ForwardRateCalc_swigregister(ForwardRateCalc)

class DiscountFactorCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue"):
        _mxdevtool.DiscountFactorCalc_swiginit(self, _mxdevtool.new_DiscountFactorCalc(name, pv))
    __swig_destroy__ = _mxdevtool.delete_DiscountFactorCalc

# Register DiscountFactorCalc in _mxdevtool:
_mxdevtool.DiscountFactorCalc_swigregister(DiscountFactorCalc)

class LinearOperWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", multiple: "Real", spread: "Real"):
        _mxdevtool.LinearOperWrapperCalc_swiginit(self, _mxdevtool.new_LinearOperWrapperCalc(name, pv, multiple, spread))
    __swig_destroy__ = _mxdevtool.delete_LinearOperWrapperCalc

# Register LinearOperWrapperCalc in _mxdevtool:
_mxdevtool.LinearOperWrapperCalc_swigregister(LinearOperWrapperCalc)

class UnaryFunctionWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", func_type: "std::string"):
        _mxdevtool.UnaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_UnaryFunctionWrapperCalc(name, pv, func_type))
    __swig_destroy__ = _mxdevtool.delete_UnaryFunctionWrapperCalc

# Register UnaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.UnaryFunctionWrapperCalc_swigregister(UnaryFunctionWrapperCalc)

class BinaryFunctionWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv1: "ProcessValue", pv2: "ProcessValue", func_type: "std::string"):
        _mxdevtool.BinaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_BinaryFunctionWrapperCalc(name, pv1, pv2, func_type))
    __swig_destroy__ = _mxdevtool.delete_BinaryFunctionWrapperCalc

# Register BinaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.BinaryFunctionWrapperCalc_swigregister(BinaryFunctionWrapperCalc)

class MultaryFunctionWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv_arr: "ProcessValueVector", func_type: "std::string"):
        _mxdevtool.MultaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_MultaryFunctionWrapperCalc(name, pv_arr, func_type))
    __swig_destroy__ = _mxdevtool.delete_MultaryFunctionWrapperCalc

# Register MultaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.MultaryFunctionWrapperCalc_swigregister(MultaryFunctionWrapperCalc)

class ReturnWrapperCalcPtr(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", return_type: "std::string"):
        _mxdevtool.ReturnWrapperCalcPtr_swiginit(self, _mxdevtool.new_ReturnWrapperCalcPtr(name, pv, return_type))
    __swig_destroy__ = _mxdevtool.delete_ReturnWrapperCalcPtr

# Register ReturnWrapperCalcPtr in _mxdevtool:
_mxdevtool.ReturnWrapperCalcPtr_swigregister(ReturnWrapperCalcPtr)

class MathExprFunctionWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv_arr: "ProcessValueVector", expr: "std::string"):
        _mxdevtool.MathExprFunctionWrapperCalc_swiginit(self, _mxdevtool.new_MathExprFunctionWrapperCalc(name, pv_arr, expr))
    __swig_destroy__ = _mxdevtool.delete_MathExprFunctionWrapperCalc

# Register MathExprFunctionWrapperCalc in _mxdevtool:
_mxdevtool.MathExprFunctionWrapperCalc_swigregister(MathExprFunctionWrapperCalc)

class ConstantValueCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", v: "Real"):
        _mxdevtool.ConstantValueCalc_swiginit(self, _mxdevtool.new_ConstantValueCalc(name, v))
    __swig_destroy__ = _mxdevtool.delete_ConstantValueCalc

# Register ConstantValueCalc in _mxdevtool:
_mxdevtool.ConstantValueCalc_swigregister(ConstantValueCalc)

class YieldCurveValueCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", ts: "YieldTermStructure", output_type: "std::string", compound: "Compounding"):
        _mxdevtool.YieldCurveValueCalc_swiginit(self, _mxdevtool.new_YieldCurveValueCalc(name, ts, output_type, compound))
    __swig_destroy__ = _mxdevtool.delete_YieldCurveValueCalc

# Register YieldCurveValueCalc in _mxdevtool:
_mxdevtool.YieldCurveValueCalc_swigregister(YieldCurveValueCalc)

class FixedRateCMBondPositionCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", notional: "Real", fixedRate: "Real", couponTenor: "Period", maturity: "Period", discountCurve: "YieldTermStructure"):
        _mxdevtool.FixedRateCMBondPositionCalc_swiginit(self, _mxdevtool.new_FixedRateCMBondPositionCalc(name, pv, notional, fixedRate, couponTenor, maturity, discountCurve))
    __swig_destroy__ = _mxdevtool.delete_FixedRateCMBondPositionCalc

# Register FixedRateCMBondPositionCalc in _mxdevtool:
_mxdevtool.FixedRateCMBondPositionCalc_swigregister(FixedRateCMBondPositionCalc)

class ShiftWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", shift: "int"):
        _mxdevtool.ShiftWrapperCalc_swiginit(self, _mxdevtool.new_ShiftWrapperCalc(name, pv, shift))
    __swig_destroy__ = _mxdevtool.delete_ShiftWrapperCalc

# Register ShiftWrapperCalc in _mxdevtool:
_mxdevtool.ShiftWrapperCalc_swigregister(ShiftWrapperCalc)

class FundWrapperCalc(ProcessValuePtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", weights: "DoubleVector", pv_arr: "ProcessValueVector"):
        _mxdevtool.FundWrapperCalc_swiginit(self, _mxdevtool.new_FundWrapperCalc(name, weights, pv_arr))
    __swig_destroy__ = _mxdevtool.delete_FundWrapperCalc

# Register FundWrapperCalc in _mxdevtool:
_mxdevtool.FundWrapperCalc_swigregister(FundWrapperCalc)



