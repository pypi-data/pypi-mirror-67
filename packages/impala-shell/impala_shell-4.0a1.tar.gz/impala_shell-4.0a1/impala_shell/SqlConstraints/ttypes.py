#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import hive_metastore.ttypes

from thrift.transport import TTransport
all_structs = []


class TSqlConstraints(object):
    """
    Attributes:
     - primary_keys
     - foreign_keys
    """


    def __init__(self, primary_keys=None, foreign_keys=None,):
        self.primary_keys = primary_keys
        self.foreign_keys = foreign_keys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.primary_keys = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = hive_metastore.ttypes.SQLPrimaryKey()
                        _elem5.read(iprot)
                        self.primary_keys.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.foreign_keys = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = hive_metastore.ttypes.SQLForeignKey()
                        _elem11.read(iprot)
                        self.foreign_keys.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSqlConstraints')
        if self.primary_keys is not None:
            oprot.writeFieldBegin('primary_keys', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.primary_keys))
            for iter12 in self.primary_keys:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.foreign_keys is not None:
            oprot.writeFieldBegin('foreign_keys', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.foreign_keys))
            for iter13 in self.foreign_keys:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.primary_keys is None:
            raise TProtocolException(message='Required field primary_keys is unset!')
        if self.foreign_keys is None:
            raise TProtocolException(message='Required field foreign_keys is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TSqlConstraints)
TSqlConstraints.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'primary_keys', (TType.STRUCT, [hive_metastore.ttypes.SQLPrimaryKey, None], False), None, ),  # 1
    (2, TType.LIST, 'foreign_keys', (TType.STRUCT, [hive_metastore.ttypes.SQLForeignKey, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
