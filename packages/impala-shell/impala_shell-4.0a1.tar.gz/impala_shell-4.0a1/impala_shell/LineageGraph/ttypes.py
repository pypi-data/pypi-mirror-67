#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Types.ttypes

from thrift.transport import TTransport
all_structs = []


class TEdgeType(object):
    PROJECTION = 0
    PREDICATE = 1

    _VALUES_TO_NAMES = {
        0: "PROJECTION",
        1: "PREDICATE",
    }

    _NAMES_TO_VALUES = {
        "PROJECTION": 0,
        "PREDICATE": 1,
    }


class TVertexMetadata(object):
    """
    Attributes:
     - table_name
     - table_create_time
    """


    def __init__(self, table_name=None, table_create_time=None,):
        self.table_name = table_name
        self.table_create_time = table_create_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.table_create_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TVertexMetadata')
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 1)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.table_create_time is not None:
            oprot.writeFieldBegin('table_create_time', TType.I64, 2)
            oprot.writeI64(self.table_create_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.table_name is None:
            raise TProtocolException(message='Required field table_name is unset!')
        if self.table_create_time is None:
            raise TProtocolException(message='Required field table_create_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TVertex(object):
    """
    Attributes:
     - id
     - label
     - metadata
    """


    def __init__(self, id=None, label=None, metadata=None,):
        self.id = id
        self.label = label
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.metadata = TVertexMetadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TVertex')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 2)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 3)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.label is None:
            raise TProtocolException(message='Required field label is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMultiEdge(object):
    """
    Attributes:
     - sources
     - targets
     - edgetype
    """


    def __init__(self, sources=None, targets=None, edgetype=None,):
        self.sources = sources
        self.targets = targets
        self.edgetype = edgetype

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.sources = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TVertex()
                        _elem5.read(iprot)
                        self.sources.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.targets = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = TVertex()
                        _elem11.read(iprot)
                        self.targets.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.edgetype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMultiEdge')
        if self.sources is not None:
            oprot.writeFieldBegin('sources', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.sources))
            for iter12 in self.sources:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.targets is not None:
            oprot.writeFieldBegin('targets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.targets))
            for iter13 in self.targets:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edgetype is not None:
            oprot.writeFieldBegin('edgetype', TType.I32, 3)
            oprot.writeI32(self.edgetype)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TLineageGraph(object):
    """
    Attributes:
     - query_text
     - hash
     - user
     - started
     - ended
     - edges
     - vertices
     - query_id
     - table_location
    """


    def __init__(self, query_text=None, hash=None, user=None, started=None, ended=None, edges=None, vertices=None, query_id=None, table_location=None,):
        self.query_text = query_text
        self.hash = hash
        self.user = user
        self.started = started
        self.ended = ended
        self.edges = edges
        self.vertices = vertices
        self.query_id = query_id
        self.table_location = table_location

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hash = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.started = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.ended = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.edges = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = TMultiEdge()
                        _elem19.read(iprot)
                        self.edges.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.vertices = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = TVertex()
                        _elem25.read(iprot)
                        self.vertices.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.query_id = Types.ttypes.TUniqueId()
                    self.query_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.table_location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TLineageGraph')
        if self.query_text is not None:
            oprot.writeFieldBegin('query_text', TType.STRING, 1)
            oprot.writeString(self.query_text.encode('utf-8') if sys.version_info[0] == 2 else self.query_text)
            oprot.writeFieldEnd()
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 2)
            oprot.writeString(self.hash.encode('utf-8') if sys.version_info[0] == 2 else self.hash)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 3)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.I64, 4)
            oprot.writeI64(self.started)
            oprot.writeFieldEnd()
        if self.ended is not None:
            oprot.writeFieldBegin('ended', TType.I64, 5)
            oprot.writeI64(self.ended)
            oprot.writeFieldEnd()
        if self.edges is not None:
            oprot.writeFieldBegin('edges', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.edges))
            for iter26 in self.edges:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vertices is not None:
            oprot.writeFieldBegin('vertices', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.vertices))
            for iter27 in self.vertices:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.query_id is not None:
            oprot.writeFieldBegin('query_id', TType.STRUCT, 8)
            self.query_id.write(oprot)
            oprot.writeFieldEnd()
        if self.table_location is not None:
            oprot.writeFieldBegin('table_location', TType.STRING, 9)
            oprot.writeString(self.table_location.encode('utf-8') if sys.version_info[0] == 2 else self.table_location)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.query_text is None:
            raise TProtocolException(message='Required field query_text is unset!')
        if self.hash is None:
            raise TProtocolException(message='Required field hash is unset!')
        if self.user is None:
            raise TProtocolException(message='Required field user is unset!')
        if self.started is None:
            raise TProtocolException(message='Required field started is unset!')
        if self.query_id is None:
            raise TProtocolException(message='Required field query_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TVertexMetadata)
TVertexMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'table_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'table_create_time', None, None, ),  # 2
)
all_structs.append(TVertex)
TVertex.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'label', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'metadata', [TVertexMetadata, None], None, ),  # 3
)
all_structs.append(TMultiEdge)
TMultiEdge.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'sources', (TType.STRUCT, [TVertex, None], False), None, ),  # 1
    (2, TType.LIST, 'targets', (TType.STRUCT, [TVertex, None], False), None, ),  # 2
    (3, TType.I32, 'edgetype', None, None, ),  # 3
)
all_structs.append(TLineageGraph)
TLineageGraph.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'query_text', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hash', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'user', 'UTF8', None, ),  # 3
    (4, TType.I64, 'started', None, None, ),  # 4
    (5, TType.I64, 'ended', None, None, ),  # 5
    (6, TType.LIST, 'edges', (TType.STRUCT, [TMultiEdge, None], False), None, ),  # 6
    (7, TType.LIST, 'vertices', (TType.STRUCT, [TVertex, None], False), None, ),  # 7
    (8, TType.STRUCT, 'query_id', [Types.ttypes.TUniqueId, None], None, ),  # 8
    (9, TType.STRING, 'table_location', 'UTF8', None, ),  # 9
)
fix_spec(all_structs)
del all_structs
