#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Data.ttypes
import Types.ttypes
import CatalogObjects.ttypes

from thrift.transport import TTransport
all_structs = []


class TRowBatch(object):
    """
    Attributes:
     - num_rows
     - row_tuples
     - tuple_offsets
     - tuple_data
     - compression_type
     - uncompressed_size
    """


    def __init__(self, num_rows=None, row_tuples=None, tuple_offsets=None, tuple_data=None, compression_type=None, uncompressed_size=None,):
        self.num_rows = num_rows
        self.row_tuples = row_tuples
        self.tuple_offsets = tuple_offsets
        self.tuple_data = tuple_data
        self.compression_type = compression_type
        self.uncompressed_size = uncompressed_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.num_rows = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.row_tuples = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.row_tuples.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tuple_offsets = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.tuple_offsets.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tuple_data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.compression_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.uncompressed_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRowBatch')
        if self.num_rows is not None:
            oprot.writeFieldBegin('num_rows', TType.I32, 1)
            oprot.writeI32(self.num_rows)
            oprot.writeFieldEnd()
        if self.row_tuples is not None:
            oprot.writeFieldBegin('row_tuples', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.row_tuples))
            for iter12 in self.row_tuples:
                oprot.writeI32(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tuple_offsets is not None:
            oprot.writeFieldBegin('tuple_offsets', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.tuple_offsets))
            for iter13 in self.tuple_offsets:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tuple_data is not None:
            oprot.writeFieldBegin('tuple_data', TType.STRING, 4)
            oprot.writeString(self.tuple_data.encode('utf-8') if sys.version_info[0] == 2 else self.tuple_data)
            oprot.writeFieldEnd()
        if self.compression_type is not None:
            oprot.writeFieldBegin('compression_type', TType.I32, 5)
            oprot.writeI32(self.compression_type)
            oprot.writeFieldEnd()
        if self.uncompressed_size is not None:
            oprot.writeFieldBegin('uncompressed_size', TType.I32, 6)
            oprot.writeI32(self.uncompressed_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.num_rows is None:
            raise TProtocolException(message='Required field num_rows is unset!')
        if self.row_tuples is None:
            raise TProtocolException(message='Required field row_tuples is unset!')
        if self.compression_type is None:
            raise TProtocolException(message='Required field compression_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TResultSetMetadata(object):
    """
    Attributes:
     - columns
    """


    def __init__(self, columns=None,):
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = CatalogObjects.ttypes.TColumn()
                        _elem19.read(iprot)
                        self.columns.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TResultSetMetadata')
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter20 in self.columns:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.columns is None:
            raise TProtocolException(message='Required field columns is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TResultSet(object):
    """
    Attributes:
     - rows
     - schema
    """


    def __init__(self, rows=None, schema=None,):
        self.rows = rows
        self.schema = schema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Data.ttypes.TResultRow()
                        _elem26.read(iprot)
                        self.rows.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.schema = TResultSetMetadata()
                    self.schema.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TResultSet')
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.rows))
            for iter27 in self.rows:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRUCT, 2)
            self.schema.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rows is None:
            raise TProtocolException(message='Required field rows is unset!')
        if self.schema is None:
            raise TProtocolException(message='Required field schema is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TRowBatch)
TRowBatch.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num_rows', None, None, ),  # 1
    (2, TType.LIST, 'row_tuples', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'tuple_offsets', (TType.I32, None, False), None, ),  # 3
    (4, TType.STRING, 'tuple_data', 'UTF8', None, ),  # 4
    (5, TType.I32, 'compression_type', None, None, ),  # 5
    (6, TType.I32, 'uncompressed_size', None, None, ),  # 6
)
all_structs.append(TResultSetMetadata)
TResultSetMetadata.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'columns', (TType.STRUCT, [CatalogObjects.ttypes.TColumn, None], False), None, ),  # 1
)
all_structs.append(TResultSet)
TResultSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'rows', (TType.STRUCT, [Data.ttypes.TResultRow, None], False), None, ),  # 1
    (2, TType.STRUCT, 'schema', [TResultSetMetadata, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
