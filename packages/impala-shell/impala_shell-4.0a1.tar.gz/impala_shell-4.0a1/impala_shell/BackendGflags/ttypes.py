#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TReservedWordsVersion(object):
    IMPALA_2_11 = 0
    IMPALA_3_0 = 1

    _VALUES_TO_NAMES = {
        0: "IMPALA_2_11",
        1: "IMPALA_3_0",
    }

    _NAMES_TO_VALUES = {
        "IMPALA_2_11": 0,
        "IMPALA_3_0": 1,
    }


class TBackendGflags(object):
    """
    Attributes:
     - sentry_config
     - load_auth_to_local_rules
     - non_impala_java_vlog
     - impala_log_lvl
     - inc_stats_size_limit_bytes
     - lineage_event_log_dir
     - load_catalog_in_background
     - num_metadata_loading_threads
     - principal
     - server_name
     - authorization_policy_provider_class
     - kudu_master_hosts
     - local_library_path
     - read_size
     - kudu_operation_timeout_ms
     - initial_hms_cnxn_timeout_s
     - enable_stats_extrapolation
     - sentry_catalog_polling_frequency_s
     - max_hdfs_partitions_parallel_load
     - max_nonhdfs_partitions_parallel_load
     - reserved_words_version
     - max_filter_error_rate
     - min_buffer_size
     - enable_orc_scanner
     - authorized_proxy_group_config
     - use_local_catalog
     - disable_catalog_data_ops_debug_only
     - local_catalog_cache_mb
     - local_catalog_cache_expiration_s
     - catalog_topic_mode
     - invalidate_tables_timeout_s
     - invalidate_tables_on_memory_pressure
     - invalidate_tables_gc_old_gen_full_threshold
     - invalidate_tables_fraction_on_memory_pressure
     - local_catalog_max_fetch_retries
     - kudu_scanner_thread_estimated_bytes_per_column
     - kudu_scanner_thread_max_estimated_bytes
     - catalog_max_parallel_partial_fetch_rpc
     - catalog_partial_fetch_rpc_queue_timeout_s
     - exchg_node_buffer_size_bytes
     - kudu_mutation_buffer_size
     - kudu_error_buffer_size
     - hms_event_polling_interval_s
     - impala_build_version
     - authorization_factory_class
     - unlock_mt_dop
     - ranger_service_type
     - ranger_app_id
     - authorization_provider
     - recursively_list_partitions
     - query_event_hook_classes
     - query_event_hook_nthreads
     - is_executor
     - is_coordinator
     - use_dedicated_coordinator_estimates
     - blacklisted_dbs
     - blacklisted_tables
     - unlock_zorder_sort
     - min_privilege_set_for_show_stmts
     - mt_dop_auto_fallback
     - num_expected_executors
     - num_check_authorization_threads
     - use_customized_user_groups_mapper_for_ranger
     - enable_column_masking
     - enable_insert_events
    """


    def __init__(self, sentry_config=None, load_auth_to_local_rules=None, non_impala_java_vlog=None, impala_log_lvl=None, inc_stats_size_limit_bytes=None, lineage_event_log_dir=None, load_catalog_in_background=None, num_metadata_loading_threads=None, principal=None, server_name=None, authorization_policy_provider_class=None, kudu_master_hosts=None, local_library_path=None, read_size=None, kudu_operation_timeout_ms=None, initial_hms_cnxn_timeout_s=None, enable_stats_extrapolation=None, sentry_catalog_polling_frequency_s=None, max_hdfs_partitions_parallel_load=None, max_nonhdfs_partitions_parallel_load=None, reserved_words_version=None, max_filter_error_rate=None, min_buffer_size=None, enable_orc_scanner=None, authorized_proxy_group_config=None, use_local_catalog=None, disable_catalog_data_ops_debug_only=None, local_catalog_cache_mb=None, local_catalog_cache_expiration_s=None, catalog_topic_mode=None, invalidate_tables_timeout_s=None, invalidate_tables_on_memory_pressure=None, invalidate_tables_gc_old_gen_full_threshold=None, invalidate_tables_fraction_on_memory_pressure=None, local_catalog_max_fetch_retries=None, kudu_scanner_thread_estimated_bytes_per_column=None, kudu_scanner_thread_max_estimated_bytes=None, catalog_max_parallel_partial_fetch_rpc=None, catalog_partial_fetch_rpc_queue_timeout_s=None, exchg_node_buffer_size_bytes=None, kudu_mutation_buffer_size=None, kudu_error_buffer_size=None, hms_event_polling_interval_s=None, impala_build_version=None, authorization_factory_class=None, unlock_mt_dop=None, ranger_service_type=None, ranger_app_id=None, authorization_provider=None, recursively_list_partitions=None, query_event_hook_classes=None, query_event_hook_nthreads=None, is_executor=None, is_coordinator=None, use_dedicated_coordinator_estimates=None, blacklisted_dbs=None, blacklisted_tables=None, unlock_zorder_sort=None, min_privilege_set_for_show_stmts=None, mt_dop_auto_fallback=None, num_expected_executors=None, num_check_authorization_threads=None, use_customized_user_groups_mapper_for_ranger=None, enable_column_masking=None, enable_insert_events=None,):
        self.sentry_config = sentry_config
        self.load_auth_to_local_rules = load_auth_to_local_rules
        self.non_impala_java_vlog = non_impala_java_vlog
        self.impala_log_lvl = impala_log_lvl
        self.inc_stats_size_limit_bytes = inc_stats_size_limit_bytes
        self.lineage_event_log_dir = lineage_event_log_dir
        self.load_catalog_in_background = load_catalog_in_background
        self.num_metadata_loading_threads = num_metadata_loading_threads
        self.principal = principal
        self.server_name = server_name
        self.authorization_policy_provider_class = authorization_policy_provider_class
        self.kudu_master_hosts = kudu_master_hosts
        self.local_library_path = local_library_path
        self.read_size = read_size
        self.kudu_operation_timeout_ms = kudu_operation_timeout_ms
        self.initial_hms_cnxn_timeout_s = initial_hms_cnxn_timeout_s
        self.enable_stats_extrapolation = enable_stats_extrapolation
        self.sentry_catalog_polling_frequency_s = sentry_catalog_polling_frequency_s
        self.max_hdfs_partitions_parallel_load = max_hdfs_partitions_parallel_load
        self.max_nonhdfs_partitions_parallel_load = max_nonhdfs_partitions_parallel_load
        self.reserved_words_version = reserved_words_version
        self.max_filter_error_rate = max_filter_error_rate
        self.min_buffer_size = min_buffer_size
        self.enable_orc_scanner = enable_orc_scanner
        self.authorized_proxy_group_config = authorized_proxy_group_config
        self.use_local_catalog = use_local_catalog
        self.disable_catalog_data_ops_debug_only = disable_catalog_data_ops_debug_only
        self.local_catalog_cache_mb = local_catalog_cache_mb
        self.local_catalog_cache_expiration_s = local_catalog_cache_expiration_s
        self.catalog_topic_mode = catalog_topic_mode
        self.invalidate_tables_timeout_s = invalidate_tables_timeout_s
        self.invalidate_tables_on_memory_pressure = invalidate_tables_on_memory_pressure
        self.invalidate_tables_gc_old_gen_full_threshold = invalidate_tables_gc_old_gen_full_threshold
        self.invalidate_tables_fraction_on_memory_pressure = invalidate_tables_fraction_on_memory_pressure
        self.local_catalog_max_fetch_retries = local_catalog_max_fetch_retries
        self.kudu_scanner_thread_estimated_bytes_per_column = kudu_scanner_thread_estimated_bytes_per_column
        self.kudu_scanner_thread_max_estimated_bytes = kudu_scanner_thread_max_estimated_bytes
        self.catalog_max_parallel_partial_fetch_rpc = catalog_max_parallel_partial_fetch_rpc
        self.catalog_partial_fetch_rpc_queue_timeout_s = catalog_partial_fetch_rpc_queue_timeout_s
        self.exchg_node_buffer_size_bytes = exchg_node_buffer_size_bytes
        self.kudu_mutation_buffer_size = kudu_mutation_buffer_size
        self.kudu_error_buffer_size = kudu_error_buffer_size
        self.hms_event_polling_interval_s = hms_event_polling_interval_s
        self.impala_build_version = impala_build_version
        self.authorization_factory_class = authorization_factory_class
        self.unlock_mt_dop = unlock_mt_dop
        self.ranger_service_type = ranger_service_type
        self.ranger_app_id = ranger_app_id
        self.authorization_provider = authorization_provider
        self.recursively_list_partitions = recursively_list_partitions
        self.query_event_hook_classes = query_event_hook_classes
        self.query_event_hook_nthreads = query_event_hook_nthreads
        self.is_executor = is_executor
        self.is_coordinator = is_coordinator
        self.use_dedicated_coordinator_estimates = use_dedicated_coordinator_estimates
        self.blacklisted_dbs = blacklisted_dbs
        self.blacklisted_tables = blacklisted_tables
        self.unlock_zorder_sort = unlock_zorder_sort
        self.min_privilege_set_for_show_stmts = min_privilege_set_for_show_stmts
        self.mt_dop_auto_fallback = mt_dop_auto_fallback
        self.num_expected_executors = num_expected_executors
        self.num_check_authorization_threads = num_check_authorization_threads
        self.use_customized_user_groups_mapper_for_ranger = use_customized_user_groups_mapper_for_ranger
        self.enable_column_masking = enable_column_masking
        self.enable_insert_events = enable_insert_events

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sentry_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.load_auth_to_local_rules = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.non_impala_java_vlog = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.impala_log_lvl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.inc_stats_size_limit_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.lineage_event_log_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.load_catalog_in_background = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.num_metadata_loading_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.principal = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.server_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.authorization_policy_provider_class = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.kudu_master_hosts = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.local_library_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.read_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.kudu_operation_timeout_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.initial_hms_cnxn_timeout_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.enable_stats_extrapolation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.sentry_catalog_polling_frequency_s = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.max_hdfs_partitions_parallel_load = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.max_nonhdfs_partitions_parallel_load = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.reserved_words_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.max_filter_error_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.min_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.enable_orc_scanner = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.authorized_proxy_group_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.use_local_catalog = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.disable_catalog_data_ops_debug_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.local_catalog_cache_mb = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.local_catalog_cache_expiration_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.catalog_topic_mode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.invalidate_tables_timeout_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.invalidate_tables_on_memory_pressure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.DOUBLE:
                    self.invalidate_tables_gc_old_gen_full_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.DOUBLE:
                    self.invalidate_tables_fraction_on_memory_pressure = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.I32:
                    self.local_catalog_max_fetch_retries = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I64:
                    self.kudu_scanner_thread_estimated_bytes_per_column = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I64:
                    self.kudu_scanner_thread_max_estimated_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.catalog_max_parallel_partial_fetch_rpc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I64:
                    self.catalog_partial_fetch_rpc_queue_timeout_s = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I64:
                    self.exchg_node_buffer_size_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I32:
                    self.kudu_mutation_buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.kudu_error_buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.hms_event_polling_interval_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.impala_build_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.authorization_factory_class = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.BOOL:
                    self.unlock_mt_dop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRING:
                    self.ranger_service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.ranger_app_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.authorization_provider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.BOOL:
                    self.recursively_list_partitions = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.query_event_hook_classes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.I32:
                    self.query_event_hook_nthreads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.BOOL:
                    self.is_executor = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.BOOL:
                    self.is_coordinator = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.BOOL:
                    self.use_dedicated_coordinator_estimates = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.STRING:
                    self.blacklisted_dbs = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.STRING:
                    self.blacklisted_tables = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.BOOL:
                    self.unlock_zorder_sort = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRING:
                    self.min_privilege_set_for_show_stmts = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.BOOL:
                    self.mt_dop_auto_fallback = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.I32:
                    self.num_expected_executors = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.I32:
                    self.num_check_authorization_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.BOOL:
                    self.use_customized_user_groups_mapper_for_ranger = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.BOOL:
                    self.enable_column_masking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.BOOL:
                    self.enable_insert_events = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBackendGflags')
        if self.sentry_config is not None:
            oprot.writeFieldBegin('sentry_config', TType.STRING, 1)
            oprot.writeString(self.sentry_config.encode('utf-8') if sys.version_info[0] == 2 else self.sentry_config)
            oprot.writeFieldEnd()
        if self.load_auth_to_local_rules is not None:
            oprot.writeFieldBegin('load_auth_to_local_rules', TType.BOOL, 2)
            oprot.writeBool(self.load_auth_to_local_rules)
            oprot.writeFieldEnd()
        if self.non_impala_java_vlog is not None:
            oprot.writeFieldBegin('non_impala_java_vlog', TType.I32, 3)
            oprot.writeI32(self.non_impala_java_vlog)
            oprot.writeFieldEnd()
        if self.impala_log_lvl is not None:
            oprot.writeFieldBegin('impala_log_lvl', TType.I32, 4)
            oprot.writeI32(self.impala_log_lvl)
            oprot.writeFieldEnd()
        if self.inc_stats_size_limit_bytes is not None:
            oprot.writeFieldBegin('inc_stats_size_limit_bytes', TType.I64, 5)
            oprot.writeI64(self.inc_stats_size_limit_bytes)
            oprot.writeFieldEnd()
        if self.lineage_event_log_dir is not None:
            oprot.writeFieldBegin('lineage_event_log_dir', TType.STRING, 6)
            oprot.writeString(self.lineage_event_log_dir.encode('utf-8') if sys.version_info[0] == 2 else self.lineage_event_log_dir)
            oprot.writeFieldEnd()
        if self.load_catalog_in_background is not None:
            oprot.writeFieldBegin('load_catalog_in_background', TType.BOOL, 7)
            oprot.writeBool(self.load_catalog_in_background)
            oprot.writeFieldEnd()
        if self.num_metadata_loading_threads is not None:
            oprot.writeFieldBegin('num_metadata_loading_threads', TType.I32, 8)
            oprot.writeI32(self.num_metadata_loading_threads)
            oprot.writeFieldEnd()
        if self.principal is not None:
            oprot.writeFieldBegin('principal', TType.STRING, 9)
            oprot.writeString(self.principal.encode('utf-8') if sys.version_info[0] == 2 else self.principal)
            oprot.writeFieldEnd()
        if self.server_name is not None:
            oprot.writeFieldBegin('server_name', TType.STRING, 11)
            oprot.writeString(self.server_name.encode('utf-8') if sys.version_info[0] == 2 else self.server_name)
            oprot.writeFieldEnd()
        if self.authorization_policy_provider_class is not None:
            oprot.writeFieldBegin('authorization_policy_provider_class', TType.STRING, 12)
            oprot.writeString(self.authorization_policy_provider_class.encode('utf-8') if sys.version_info[0] == 2 else self.authorization_policy_provider_class)
            oprot.writeFieldEnd()
        if self.kudu_master_hosts is not None:
            oprot.writeFieldBegin('kudu_master_hosts', TType.STRING, 13)
            oprot.writeString(self.kudu_master_hosts.encode('utf-8') if sys.version_info[0] == 2 else self.kudu_master_hosts)
            oprot.writeFieldEnd()
        if self.local_library_path is not None:
            oprot.writeFieldBegin('local_library_path', TType.STRING, 14)
            oprot.writeString(self.local_library_path.encode('utf-8') if sys.version_info[0] == 2 else self.local_library_path)
            oprot.writeFieldEnd()
        if self.read_size is not None:
            oprot.writeFieldBegin('read_size', TType.I32, 15)
            oprot.writeI32(self.read_size)
            oprot.writeFieldEnd()
        if self.kudu_operation_timeout_ms is not None:
            oprot.writeFieldBegin('kudu_operation_timeout_ms', TType.I32, 16)
            oprot.writeI32(self.kudu_operation_timeout_ms)
            oprot.writeFieldEnd()
        if self.initial_hms_cnxn_timeout_s is not None:
            oprot.writeFieldBegin('initial_hms_cnxn_timeout_s', TType.I32, 17)
            oprot.writeI32(self.initial_hms_cnxn_timeout_s)
            oprot.writeFieldEnd()
        if self.enable_stats_extrapolation is not None:
            oprot.writeFieldBegin('enable_stats_extrapolation', TType.BOOL, 18)
            oprot.writeBool(self.enable_stats_extrapolation)
            oprot.writeFieldEnd()
        if self.sentry_catalog_polling_frequency_s is not None:
            oprot.writeFieldBegin('sentry_catalog_polling_frequency_s', TType.I64, 19)
            oprot.writeI64(self.sentry_catalog_polling_frequency_s)
            oprot.writeFieldEnd()
        if self.max_hdfs_partitions_parallel_load is not None:
            oprot.writeFieldBegin('max_hdfs_partitions_parallel_load', TType.I32, 20)
            oprot.writeI32(self.max_hdfs_partitions_parallel_load)
            oprot.writeFieldEnd()
        if self.max_nonhdfs_partitions_parallel_load is not None:
            oprot.writeFieldBegin('max_nonhdfs_partitions_parallel_load', TType.I32, 21)
            oprot.writeI32(self.max_nonhdfs_partitions_parallel_load)
            oprot.writeFieldEnd()
        if self.reserved_words_version is not None:
            oprot.writeFieldBegin('reserved_words_version', TType.I32, 22)
            oprot.writeI32(self.reserved_words_version)
            oprot.writeFieldEnd()
        if self.max_filter_error_rate is not None:
            oprot.writeFieldBegin('max_filter_error_rate', TType.DOUBLE, 23)
            oprot.writeDouble(self.max_filter_error_rate)
            oprot.writeFieldEnd()
        if self.min_buffer_size is not None:
            oprot.writeFieldBegin('min_buffer_size', TType.I64, 24)
            oprot.writeI64(self.min_buffer_size)
            oprot.writeFieldEnd()
        if self.enable_orc_scanner is not None:
            oprot.writeFieldBegin('enable_orc_scanner', TType.BOOL, 25)
            oprot.writeBool(self.enable_orc_scanner)
            oprot.writeFieldEnd()
        if self.authorized_proxy_group_config is not None:
            oprot.writeFieldBegin('authorized_proxy_group_config', TType.STRING, 26)
            oprot.writeString(self.authorized_proxy_group_config.encode('utf-8') if sys.version_info[0] == 2 else self.authorized_proxy_group_config)
            oprot.writeFieldEnd()
        if self.use_local_catalog is not None:
            oprot.writeFieldBegin('use_local_catalog', TType.BOOL, 27)
            oprot.writeBool(self.use_local_catalog)
            oprot.writeFieldEnd()
        if self.disable_catalog_data_ops_debug_only is not None:
            oprot.writeFieldBegin('disable_catalog_data_ops_debug_only', TType.BOOL, 28)
            oprot.writeBool(self.disable_catalog_data_ops_debug_only)
            oprot.writeFieldEnd()
        if self.local_catalog_cache_mb is not None:
            oprot.writeFieldBegin('local_catalog_cache_mb', TType.I32, 29)
            oprot.writeI32(self.local_catalog_cache_mb)
            oprot.writeFieldEnd()
        if self.local_catalog_cache_expiration_s is not None:
            oprot.writeFieldBegin('local_catalog_cache_expiration_s', TType.I32, 30)
            oprot.writeI32(self.local_catalog_cache_expiration_s)
            oprot.writeFieldEnd()
        if self.catalog_topic_mode is not None:
            oprot.writeFieldBegin('catalog_topic_mode', TType.STRING, 32)
            oprot.writeString(self.catalog_topic_mode.encode('utf-8') if sys.version_info[0] == 2 else self.catalog_topic_mode)
            oprot.writeFieldEnd()
        if self.invalidate_tables_timeout_s is not None:
            oprot.writeFieldBegin('invalidate_tables_timeout_s', TType.I32, 33)
            oprot.writeI32(self.invalidate_tables_timeout_s)
            oprot.writeFieldEnd()
        if self.invalidate_tables_on_memory_pressure is not None:
            oprot.writeFieldBegin('invalidate_tables_on_memory_pressure', TType.BOOL, 34)
            oprot.writeBool(self.invalidate_tables_on_memory_pressure)
            oprot.writeFieldEnd()
        if self.invalidate_tables_gc_old_gen_full_threshold is not None:
            oprot.writeFieldBegin('invalidate_tables_gc_old_gen_full_threshold', TType.DOUBLE, 35)
            oprot.writeDouble(self.invalidate_tables_gc_old_gen_full_threshold)
            oprot.writeFieldEnd()
        if self.invalidate_tables_fraction_on_memory_pressure is not None:
            oprot.writeFieldBegin('invalidate_tables_fraction_on_memory_pressure', TType.DOUBLE, 36)
            oprot.writeDouble(self.invalidate_tables_fraction_on_memory_pressure)
            oprot.writeFieldEnd()
        if self.local_catalog_max_fetch_retries is not None:
            oprot.writeFieldBegin('local_catalog_max_fetch_retries', TType.I32, 37)
            oprot.writeI32(self.local_catalog_max_fetch_retries)
            oprot.writeFieldEnd()
        if self.kudu_scanner_thread_estimated_bytes_per_column is not None:
            oprot.writeFieldBegin('kudu_scanner_thread_estimated_bytes_per_column', TType.I64, 38)
            oprot.writeI64(self.kudu_scanner_thread_estimated_bytes_per_column)
            oprot.writeFieldEnd()
        if self.kudu_scanner_thread_max_estimated_bytes is not None:
            oprot.writeFieldBegin('kudu_scanner_thread_max_estimated_bytes', TType.I64, 39)
            oprot.writeI64(self.kudu_scanner_thread_max_estimated_bytes)
            oprot.writeFieldEnd()
        if self.catalog_max_parallel_partial_fetch_rpc is not None:
            oprot.writeFieldBegin('catalog_max_parallel_partial_fetch_rpc', TType.I32, 40)
            oprot.writeI32(self.catalog_max_parallel_partial_fetch_rpc)
            oprot.writeFieldEnd()
        if self.catalog_partial_fetch_rpc_queue_timeout_s is not None:
            oprot.writeFieldBegin('catalog_partial_fetch_rpc_queue_timeout_s', TType.I64, 41)
            oprot.writeI64(self.catalog_partial_fetch_rpc_queue_timeout_s)
            oprot.writeFieldEnd()
        if self.exchg_node_buffer_size_bytes is not None:
            oprot.writeFieldBegin('exchg_node_buffer_size_bytes', TType.I64, 42)
            oprot.writeI64(self.exchg_node_buffer_size_bytes)
            oprot.writeFieldEnd()
        if self.kudu_mutation_buffer_size is not None:
            oprot.writeFieldBegin('kudu_mutation_buffer_size', TType.I32, 43)
            oprot.writeI32(self.kudu_mutation_buffer_size)
            oprot.writeFieldEnd()
        if self.kudu_error_buffer_size is not None:
            oprot.writeFieldBegin('kudu_error_buffer_size', TType.I32, 44)
            oprot.writeI32(self.kudu_error_buffer_size)
            oprot.writeFieldEnd()
        if self.hms_event_polling_interval_s is not None:
            oprot.writeFieldBegin('hms_event_polling_interval_s', TType.I32, 45)
            oprot.writeI32(self.hms_event_polling_interval_s)
            oprot.writeFieldEnd()
        if self.impala_build_version is not None:
            oprot.writeFieldBegin('impala_build_version', TType.STRING, 46)
            oprot.writeString(self.impala_build_version.encode('utf-8') if sys.version_info[0] == 2 else self.impala_build_version)
            oprot.writeFieldEnd()
        if self.authorization_factory_class is not None:
            oprot.writeFieldBegin('authorization_factory_class', TType.STRING, 47)
            oprot.writeString(self.authorization_factory_class.encode('utf-8') if sys.version_info[0] == 2 else self.authorization_factory_class)
            oprot.writeFieldEnd()
        if self.unlock_mt_dop is not None:
            oprot.writeFieldBegin('unlock_mt_dop', TType.BOOL, 48)
            oprot.writeBool(self.unlock_mt_dop)
            oprot.writeFieldEnd()
        if self.ranger_service_type is not None:
            oprot.writeFieldBegin('ranger_service_type', TType.STRING, 49)
            oprot.writeString(self.ranger_service_type.encode('utf-8') if sys.version_info[0] == 2 else self.ranger_service_type)
            oprot.writeFieldEnd()
        if self.ranger_app_id is not None:
            oprot.writeFieldBegin('ranger_app_id', TType.STRING, 50)
            oprot.writeString(self.ranger_app_id.encode('utf-8') if sys.version_info[0] == 2 else self.ranger_app_id)
            oprot.writeFieldEnd()
        if self.authorization_provider is not None:
            oprot.writeFieldBegin('authorization_provider', TType.STRING, 51)
            oprot.writeString(self.authorization_provider.encode('utf-8') if sys.version_info[0] == 2 else self.authorization_provider)
            oprot.writeFieldEnd()
        if self.recursively_list_partitions is not None:
            oprot.writeFieldBegin('recursively_list_partitions', TType.BOOL, 52)
            oprot.writeBool(self.recursively_list_partitions)
            oprot.writeFieldEnd()
        if self.query_event_hook_classes is not None:
            oprot.writeFieldBegin('query_event_hook_classes', TType.STRING, 53)
            oprot.writeString(self.query_event_hook_classes.encode('utf-8') if sys.version_info[0] == 2 else self.query_event_hook_classes)
            oprot.writeFieldEnd()
        if self.query_event_hook_nthreads is not None:
            oprot.writeFieldBegin('query_event_hook_nthreads', TType.I32, 54)
            oprot.writeI32(self.query_event_hook_nthreads)
            oprot.writeFieldEnd()
        if self.is_executor is not None:
            oprot.writeFieldBegin('is_executor', TType.BOOL, 55)
            oprot.writeBool(self.is_executor)
            oprot.writeFieldEnd()
        if self.is_coordinator is not None:
            oprot.writeFieldBegin('is_coordinator', TType.BOOL, 56)
            oprot.writeBool(self.is_coordinator)
            oprot.writeFieldEnd()
        if self.use_dedicated_coordinator_estimates is not None:
            oprot.writeFieldBegin('use_dedicated_coordinator_estimates', TType.BOOL, 57)
            oprot.writeBool(self.use_dedicated_coordinator_estimates)
            oprot.writeFieldEnd()
        if self.blacklisted_dbs is not None:
            oprot.writeFieldBegin('blacklisted_dbs', TType.STRING, 58)
            oprot.writeString(self.blacklisted_dbs.encode('utf-8') if sys.version_info[0] == 2 else self.blacklisted_dbs)
            oprot.writeFieldEnd()
        if self.blacklisted_tables is not None:
            oprot.writeFieldBegin('blacklisted_tables', TType.STRING, 59)
            oprot.writeString(self.blacklisted_tables.encode('utf-8') if sys.version_info[0] == 2 else self.blacklisted_tables)
            oprot.writeFieldEnd()
        if self.unlock_zorder_sort is not None:
            oprot.writeFieldBegin('unlock_zorder_sort', TType.BOOL, 60)
            oprot.writeBool(self.unlock_zorder_sort)
            oprot.writeFieldEnd()
        if self.min_privilege_set_for_show_stmts is not None:
            oprot.writeFieldBegin('min_privilege_set_for_show_stmts', TType.STRING, 61)
            oprot.writeString(self.min_privilege_set_for_show_stmts.encode('utf-8') if sys.version_info[0] == 2 else self.min_privilege_set_for_show_stmts)
            oprot.writeFieldEnd()
        if self.mt_dop_auto_fallback is not None:
            oprot.writeFieldBegin('mt_dop_auto_fallback', TType.BOOL, 62)
            oprot.writeBool(self.mt_dop_auto_fallback)
            oprot.writeFieldEnd()
        if self.num_expected_executors is not None:
            oprot.writeFieldBegin('num_expected_executors', TType.I32, 63)
            oprot.writeI32(self.num_expected_executors)
            oprot.writeFieldEnd()
        if self.num_check_authorization_threads is not None:
            oprot.writeFieldBegin('num_check_authorization_threads', TType.I32, 64)
            oprot.writeI32(self.num_check_authorization_threads)
            oprot.writeFieldEnd()
        if self.use_customized_user_groups_mapper_for_ranger is not None:
            oprot.writeFieldBegin('use_customized_user_groups_mapper_for_ranger', TType.BOOL, 65)
            oprot.writeBool(self.use_customized_user_groups_mapper_for_ranger)
            oprot.writeFieldEnd()
        if self.enable_column_masking is not None:
            oprot.writeFieldBegin('enable_column_masking', TType.BOOL, 66)
            oprot.writeBool(self.enable_column_masking)
            oprot.writeFieldEnd()
        if self.enable_insert_events is not None:
            oprot.writeFieldBegin('enable_insert_events', TType.BOOL, 67)
            oprot.writeBool(self.enable_insert_events)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sentry_config is None:
            raise TProtocolException(message='Required field sentry_config is unset!')
        if self.load_auth_to_local_rules is None:
            raise TProtocolException(message='Required field load_auth_to_local_rules is unset!')
        if self.non_impala_java_vlog is None:
            raise TProtocolException(message='Required field non_impala_java_vlog is unset!')
        if self.impala_log_lvl is None:
            raise TProtocolException(message='Required field impala_log_lvl is unset!')
        if self.inc_stats_size_limit_bytes is None:
            raise TProtocolException(message='Required field inc_stats_size_limit_bytes is unset!')
        if self.lineage_event_log_dir is None:
            raise TProtocolException(message='Required field lineage_event_log_dir is unset!')
        if self.load_catalog_in_background is None:
            raise TProtocolException(message='Required field load_catalog_in_background is unset!')
        if self.num_metadata_loading_threads is None:
            raise TProtocolException(message='Required field num_metadata_loading_threads is unset!')
        if self.principal is None:
            raise TProtocolException(message='Required field principal is unset!')
        if self.server_name is None:
            raise TProtocolException(message='Required field server_name is unset!')
        if self.authorization_policy_provider_class is None:
            raise TProtocolException(message='Required field authorization_policy_provider_class is unset!')
        if self.kudu_master_hosts is None:
            raise TProtocolException(message='Required field kudu_master_hosts is unset!')
        if self.local_library_path is None:
            raise TProtocolException(message='Required field local_library_path is unset!')
        if self.read_size is None:
            raise TProtocolException(message='Required field read_size is unset!')
        if self.kudu_operation_timeout_ms is None:
            raise TProtocolException(message='Required field kudu_operation_timeout_ms is unset!')
        if self.initial_hms_cnxn_timeout_s is None:
            raise TProtocolException(message='Required field initial_hms_cnxn_timeout_s is unset!')
        if self.enable_stats_extrapolation is None:
            raise TProtocolException(message='Required field enable_stats_extrapolation is unset!')
        if self.sentry_catalog_polling_frequency_s is None:
            raise TProtocolException(message='Required field sentry_catalog_polling_frequency_s is unset!')
        if self.max_hdfs_partitions_parallel_load is None:
            raise TProtocolException(message='Required field max_hdfs_partitions_parallel_load is unset!')
        if self.max_nonhdfs_partitions_parallel_load is None:
            raise TProtocolException(message='Required field max_nonhdfs_partitions_parallel_load is unset!')
        if self.reserved_words_version is None:
            raise TProtocolException(message='Required field reserved_words_version is unset!')
        if self.max_filter_error_rate is None:
            raise TProtocolException(message='Required field max_filter_error_rate is unset!')
        if self.min_buffer_size is None:
            raise TProtocolException(message='Required field min_buffer_size is unset!')
        if self.enable_orc_scanner is None:
            raise TProtocolException(message='Required field enable_orc_scanner is unset!')
        if self.authorized_proxy_group_config is None:
            raise TProtocolException(message='Required field authorized_proxy_group_config is unset!')
        if self.use_local_catalog is None:
            raise TProtocolException(message='Required field use_local_catalog is unset!')
        if self.disable_catalog_data_ops_debug_only is None:
            raise TProtocolException(message='Required field disable_catalog_data_ops_debug_only is unset!')
        if self.local_catalog_cache_mb is None:
            raise TProtocolException(message='Required field local_catalog_cache_mb is unset!')
        if self.local_catalog_cache_expiration_s is None:
            raise TProtocolException(message='Required field local_catalog_cache_expiration_s is unset!')
        if self.catalog_topic_mode is None:
            raise TProtocolException(message='Required field catalog_topic_mode is unset!')
        if self.invalidate_tables_timeout_s is None:
            raise TProtocolException(message='Required field invalidate_tables_timeout_s is unset!')
        if self.invalidate_tables_on_memory_pressure is None:
            raise TProtocolException(message='Required field invalidate_tables_on_memory_pressure is unset!')
        if self.invalidate_tables_gc_old_gen_full_threshold is None:
            raise TProtocolException(message='Required field invalidate_tables_gc_old_gen_full_threshold is unset!')
        if self.invalidate_tables_fraction_on_memory_pressure is None:
            raise TProtocolException(message='Required field invalidate_tables_fraction_on_memory_pressure is unset!')
        if self.local_catalog_max_fetch_retries is None:
            raise TProtocolException(message='Required field local_catalog_max_fetch_retries is unset!')
        if self.kudu_scanner_thread_estimated_bytes_per_column is None:
            raise TProtocolException(message='Required field kudu_scanner_thread_estimated_bytes_per_column is unset!')
        if self.kudu_scanner_thread_max_estimated_bytes is None:
            raise TProtocolException(message='Required field kudu_scanner_thread_max_estimated_bytes is unset!')
        if self.catalog_max_parallel_partial_fetch_rpc is None:
            raise TProtocolException(message='Required field catalog_max_parallel_partial_fetch_rpc is unset!')
        if self.catalog_partial_fetch_rpc_queue_timeout_s is None:
            raise TProtocolException(message='Required field catalog_partial_fetch_rpc_queue_timeout_s is unset!')
        if self.exchg_node_buffer_size_bytes is None:
            raise TProtocolException(message='Required field exchg_node_buffer_size_bytes is unset!')
        if self.kudu_mutation_buffer_size is None:
            raise TProtocolException(message='Required field kudu_mutation_buffer_size is unset!')
        if self.kudu_error_buffer_size is None:
            raise TProtocolException(message='Required field kudu_error_buffer_size is unset!')
        if self.hms_event_polling_interval_s is None:
            raise TProtocolException(message='Required field hms_event_polling_interval_s is unset!')
        if self.impala_build_version is None:
            raise TProtocolException(message='Required field impala_build_version is unset!')
        if self.authorization_factory_class is None:
            raise TProtocolException(message='Required field authorization_factory_class is unset!')
        if self.unlock_mt_dop is None:
            raise TProtocolException(message='Required field unlock_mt_dop is unset!')
        if self.ranger_service_type is None:
            raise TProtocolException(message='Required field ranger_service_type is unset!')
        if self.ranger_app_id is None:
            raise TProtocolException(message='Required field ranger_app_id is unset!')
        if self.authorization_provider is None:
            raise TProtocolException(message='Required field authorization_provider is unset!')
        if self.recursively_list_partitions is None:
            raise TProtocolException(message='Required field recursively_list_partitions is unset!')
        if self.query_event_hook_classes is None:
            raise TProtocolException(message='Required field query_event_hook_classes is unset!')
        if self.query_event_hook_nthreads is None:
            raise TProtocolException(message='Required field query_event_hook_nthreads is unset!')
        if self.is_executor is None:
            raise TProtocolException(message='Required field is_executor is unset!')
        if self.is_coordinator is None:
            raise TProtocolException(message='Required field is_coordinator is unset!')
        if self.use_dedicated_coordinator_estimates is None:
            raise TProtocolException(message='Required field use_dedicated_coordinator_estimates is unset!')
        if self.blacklisted_dbs is None:
            raise TProtocolException(message='Required field blacklisted_dbs is unset!')
        if self.blacklisted_tables is None:
            raise TProtocolException(message='Required field blacklisted_tables is unset!')
        if self.unlock_zorder_sort is None:
            raise TProtocolException(message='Required field unlock_zorder_sort is unset!')
        if self.min_privilege_set_for_show_stmts is None:
            raise TProtocolException(message='Required field min_privilege_set_for_show_stmts is unset!')
        if self.mt_dop_auto_fallback is None:
            raise TProtocolException(message='Required field mt_dop_auto_fallback is unset!')
        if self.num_expected_executors is None:
            raise TProtocolException(message='Required field num_expected_executors is unset!')
        if self.num_check_authorization_threads is None:
            raise TProtocolException(message='Required field num_check_authorization_threads is unset!')
        if self.use_customized_user_groups_mapper_for_ranger is None:
            raise TProtocolException(message='Required field use_customized_user_groups_mapper_for_ranger is unset!')
        if self.enable_column_masking is None:
            raise TProtocolException(message='Required field enable_column_masking is unset!')
        if self.enable_insert_events is None:
            raise TProtocolException(message='Required field enable_insert_events is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TBackendGflags)
TBackendGflags.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sentry_config', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'load_auth_to_local_rules', None, None, ),  # 2
    (3, TType.I32, 'non_impala_java_vlog', None, None, ),  # 3
    (4, TType.I32, 'impala_log_lvl', None, None, ),  # 4
    (5, TType.I64, 'inc_stats_size_limit_bytes', None, None, ),  # 5
    (6, TType.STRING, 'lineage_event_log_dir', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'load_catalog_in_background', None, None, ),  # 7
    (8, TType.I32, 'num_metadata_loading_threads', None, None, ),  # 8
    (9, TType.STRING, 'principal', 'UTF8', None, ),  # 9
    None,  # 10
    (11, TType.STRING, 'server_name', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'authorization_policy_provider_class', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'kudu_master_hosts', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'local_library_path', 'UTF8', None, ),  # 14
    (15, TType.I32, 'read_size', None, None, ),  # 15
    (16, TType.I32, 'kudu_operation_timeout_ms', None, None, ),  # 16
    (17, TType.I32, 'initial_hms_cnxn_timeout_s', None, None, ),  # 17
    (18, TType.BOOL, 'enable_stats_extrapolation', None, None, ),  # 18
    (19, TType.I64, 'sentry_catalog_polling_frequency_s', None, None, ),  # 19
    (20, TType.I32, 'max_hdfs_partitions_parallel_load', None, None, ),  # 20
    (21, TType.I32, 'max_nonhdfs_partitions_parallel_load', None, None, ),  # 21
    (22, TType.I32, 'reserved_words_version', None, None, ),  # 22
    (23, TType.DOUBLE, 'max_filter_error_rate', None, None, ),  # 23
    (24, TType.I64, 'min_buffer_size', None, None, ),  # 24
    (25, TType.BOOL, 'enable_orc_scanner', None, None, ),  # 25
    (26, TType.STRING, 'authorized_proxy_group_config', 'UTF8', None, ),  # 26
    (27, TType.BOOL, 'use_local_catalog', None, None, ),  # 27
    (28, TType.BOOL, 'disable_catalog_data_ops_debug_only', None, None, ),  # 28
    (29, TType.I32, 'local_catalog_cache_mb', None, None, ),  # 29
    (30, TType.I32, 'local_catalog_cache_expiration_s', None, None, ),  # 30
    None,  # 31
    (32, TType.STRING, 'catalog_topic_mode', 'UTF8', None, ),  # 32
    (33, TType.I32, 'invalidate_tables_timeout_s', None, None, ),  # 33
    (34, TType.BOOL, 'invalidate_tables_on_memory_pressure', None, None, ),  # 34
    (35, TType.DOUBLE, 'invalidate_tables_gc_old_gen_full_threshold', None, None, ),  # 35
    (36, TType.DOUBLE, 'invalidate_tables_fraction_on_memory_pressure', None, None, ),  # 36
    (37, TType.I32, 'local_catalog_max_fetch_retries', None, None, ),  # 37
    (38, TType.I64, 'kudu_scanner_thread_estimated_bytes_per_column', None, None, ),  # 38
    (39, TType.I64, 'kudu_scanner_thread_max_estimated_bytes', None, None, ),  # 39
    (40, TType.I32, 'catalog_max_parallel_partial_fetch_rpc', None, None, ),  # 40
    (41, TType.I64, 'catalog_partial_fetch_rpc_queue_timeout_s', None, None, ),  # 41
    (42, TType.I64, 'exchg_node_buffer_size_bytes', None, None, ),  # 42
    (43, TType.I32, 'kudu_mutation_buffer_size', None, None, ),  # 43
    (44, TType.I32, 'kudu_error_buffer_size', None, None, ),  # 44
    (45, TType.I32, 'hms_event_polling_interval_s', None, None, ),  # 45
    (46, TType.STRING, 'impala_build_version', 'UTF8', None, ),  # 46
    (47, TType.STRING, 'authorization_factory_class', 'UTF8', None, ),  # 47
    (48, TType.BOOL, 'unlock_mt_dop', None, None, ),  # 48
    (49, TType.STRING, 'ranger_service_type', 'UTF8', None, ),  # 49
    (50, TType.STRING, 'ranger_app_id', 'UTF8', None, ),  # 50
    (51, TType.STRING, 'authorization_provider', 'UTF8', None, ),  # 51
    (52, TType.BOOL, 'recursively_list_partitions', None, None, ),  # 52
    (53, TType.STRING, 'query_event_hook_classes', 'UTF8', None, ),  # 53
    (54, TType.I32, 'query_event_hook_nthreads', None, None, ),  # 54
    (55, TType.BOOL, 'is_executor', None, None, ),  # 55
    (56, TType.BOOL, 'is_coordinator', None, None, ),  # 56
    (57, TType.BOOL, 'use_dedicated_coordinator_estimates', None, None, ),  # 57
    (58, TType.STRING, 'blacklisted_dbs', 'UTF8', None, ),  # 58
    (59, TType.STRING, 'blacklisted_tables', 'UTF8', None, ),  # 59
    (60, TType.BOOL, 'unlock_zorder_sort', None, None, ),  # 60
    (61, TType.STRING, 'min_privilege_set_for_show_stmts', 'UTF8', None, ),  # 61
    (62, TType.BOOL, 'mt_dop_auto_fallback', None, None, ),  # 62
    (63, TType.I32, 'num_expected_executors', None, None, ),  # 63
    (64, TType.I32, 'num_check_authorization_threads', None, None, ),  # 64
    (65, TType.BOOL, 'use_customized_user_groups_mapper_for_ranger', None, None, ),  # 65
    (66, TType.BOOL, 'enable_column_masking', None, None, ),  # 66
    (67, TType.BOOL, 'enable_insert_events', None, None, ),  # 67
)
fix_spec(all_structs)
del all_structs
