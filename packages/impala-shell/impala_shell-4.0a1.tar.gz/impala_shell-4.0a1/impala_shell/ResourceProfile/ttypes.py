#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TBackendResourceProfile(object):
    """
    Attributes:
     - min_reservation
     - max_reservation
     - spillable_buffer_size
     - max_row_buffer_size
    """


    def __init__(self, min_reservation=None, max_reservation=None, spillable_buffer_size=None, max_row_buffer_size=None,):
        self.min_reservation = min_reservation
        self.max_reservation = max_reservation
        self.spillable_buffer_size = spillable_buffer_size
        self.max_row_buffer_size = max_row_buffer_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.min_reservation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.max_reservation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.spillable_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.max_row_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBackendResourceProfile')
        if self.min_reservation is not None:
            oprot.writeFieldBegin('min_reservation', TType.I64, 1)
            oprot.writeI64(self.min_reservation)
            oprot.writeFieldEnd()
        if self.max_reservation is not None:
            oprot.writeFieldBegin('max_reservation', TType.I64, 2)
            oprot.writeI64(self.max_reservation)
            oprot.writeFieldEnd()
        if self.spillable_buffer_size is not None:
            oprot.writeFieldBegin('spillable_buffer_size', TType.I64, 3)
            oprot.writeI64(self.spillable_buffer_size)
            oprot.writeFieldEnd()
        if self.max_row_buffer_size is not None:
            oprot.writeFieldBegin('max_row_buffer_size', TType.I64, 4)
            oprot.writeI64(self.max_row_buffer_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.min_reservation is None:
            raise TProtocolException(message='Required field min_reservation is unset!')
        if self.max_reservation is None:
            raise TProtocolException(message='Required field max_reservation is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TBackendResourceProfile)
TBackendResourceProfile.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'min_reservation', None, None, ),  # 1
    (2, TType.I64, 'max_reservation', None, None, ),  # 2
    (3, TType.I64, 'spillable_buffer_size', None, None, ),  # 3
    (4, TType.I64, 'max_row_buffer_size', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
