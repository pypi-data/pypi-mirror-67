{"version":3,"sources":["webpack:///./src/components/ha-dialog.ts","webpack:///./src/dialogs/mqtt-device-debug-info-dialog/mqtt-discovery-payload.ts","webpack:///./src/dialogs/mqtt-device-debug-info-dialog/mqtt-messages.ts","webpack:///./src/dialogs/mqtt-device-debug-info-dialog/dialog-mqtt-device-debug-info.ts"],"names":["MwcDialog","customElements","get","createCloseHeading","hass","title","html","localize","_decorate","customElement","_initialize","_MwcDialog","F","[object Object]","args","super","this","d","kind","static","key","value","style","css","_LitElement","property","_handleToggle","summary","_open","_renderPayload","payload","showAsYaml","safeDump","JSON","stringify","ev","target","open","LitElement","WeakMap","messages","forEach","message","subscribedTopic","topic","_showTopic","map","_renderSingleMessage","_renderSinglePayload","json","showDeserialized","_payloadsJson","has","_tryParseJson","set","jsonPayload","o","parse","e","async","params","_params","fetchMQTTDebugInfo","device","id","then","results","_debugInfo","_close","computeDeviceName","_showDeserialized","_showDeserializedChanged","_showAsYaml","_showAsYamlChanged","entities","length","_renderEntities","triggers","_renderTriggers","undefined","checked","entity","computeStateName","states","entity_id","discovery_data","subscriptions","trigger","haStyleDialog"],"mappings":"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","file":"chunk.5a4652a6891ec3391f2f.js","sourcesContent":["import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <paper-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    icon=\"hass:close\"\n    dialogAction=\"close\"\n    class=\"close_button\"\n  ></paper-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { safeDump } from \"js-yaml\";\nimport {\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"mqtt-discovery-payload\")\nclass MQTTDiscoveryPayload extends LitElement {\n  @property() public payload!: object;\n\n  @property() public showAsYaml = false;\n\n  @property() public summary!: string;\n\n  @property() private _open = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <details @toggle=${this._handleToggle}>\n        <summary>\n          ${this.summary}\n        </summary>\n        ${this._open ? this._renderPayload() : \"\"}\n      </details>\n    `;\n  }\n\n  private _renderPayload(): TemplateResult {\n    const payload = this.payload;\n    return html`\n      ${this.showAsYaml\n        ? html` <pre>${safeDump(payload)}</pre> `\n        : html` <pre>${JSON.stringify(payload, null, 2)}</pre> `}\n    `;\n  }\n\n  private _handleToggle(ev) {\n    this._open = ev.target.open;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"mqtt-discovery-payload\": MQTTDiscoveryPayload;\n  }\n}\n","import { safeDump } from \"js-yaml\";\nimport {\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { MQTTMessage } from \"../../data/mqtt\";\n\n@customElement(\"mqtt-messages\")\nclass MQTTMessages extends LitElement {\n  @property() public messages!: MQTTMessage[];\n\n  @property() public showAsYaml = false;\n\n  @property() public showDeserialized = false;\n\n  @property() public subscribedTopic!: string;\n\n  @property() public summary!: string;\n\n  @property() private _open = false;\n\n  @property() private _payloadsJson = new WeakMap();\n\n  @property() private _showTopic = false;\n\n  protected firstUpdated(): void {\n    this.messages.forEach((message) => {\n      // If any message's topic differs from the subscribed topic, show topics + payload\n      if (this.subscribedTopic !== message.topic) {\n        this._showTopic = true;\n      }\n    });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <details @toggle=${this._handleToggle}>\n        <summary>\n          ${this.summary}\n        </summary>\n        ${this._open\n          ? html`\n              <ul>\n                ${this.messages.map(\n                  (message) => html`\n                    <li>\n                      ${this._renderSingleMessage(message)}\n                    </li>\n                  `\n                )}\n              </ul>\n            `\n          : \"\"}\n      </details>\n    `;\n  }\n\n  private _renderSingleMessage(message): TemplateResult {\n    const topic = message.topic;\n    return this._showTopic\n      ? html`\n          <ul>\n            <li>\n              Topic: ${topic}\n            </li>\n            <li>\n              Payload: ${this._renderSinglePayload(message)}\n            </li>\n          </ul>\n        `\n      : this._renderSinglePayload(message);\n  }\n\n  private _renderSinglePayload(message): TemplateResult {\n    let json;\n\n    if (this.showDeserialized) {\n      if (!this._payloadsJson.has(message)) {\n        json = this._tryParseJson(message.payload);\n        this._payloadsJson.set(message, json);\n      } else {\n        json = this._payloadsJson.get(message);\n      }\n    }\n\n    return json\n      ? html`\n          ${this.showAsYaml\n            ? html` <pre>${safeDump(json)}</pre> `\n            : html` <pre>${JSON.stringify(json, null, 2)}</pre> `}\n        `\n      : html` <code>${message.payload}</code> `;\n  }\n\n  private _tryParseJson(payload) {\n    let jsonPayload = null;\n    let o = payload;\n\n    // If the payload is a string, determine if the payload is valid JSON and if it\n    // is, assign the object representation to this._payloadJson.\n    if (typeof payload === \"string\") {\n      try {\n        o = JSON.parse(payload);\n      } catch (e) {\n        o = null;\n      }\n    }\n    // Handle non-exception-throwing cases:\n    // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n    // but... JSON.parse(null) returns null, and typeof null === \"object\",\n    // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n    if (o && typeof o === \"object\") {\n      jsonPayload = o;\n    }\n    return jsonPayload;\n  }\n\n  private _handleToggle(ev) {\n    this._open = ev.target.open;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"mqtt-messages\": MQTTMessages;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport { computeDeviceName } from \"../../data/device_registry\";\nimport { fetchMQTTDebugInfo, MQTTDeviceDebugInfo } from \"../../data/mqtt\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./mqtt-discovery-payload\";\nimport \"./mqtt-messages\";\nimport { MQTTDeviceDebugInfoDialogParams } from \"./show-dialog-mqtt-device-debug-info\";\n\n@customElement(\"dialog-mqtt-device-debug-info\")\nclass DialogMQTTDeviceDebugInfo extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() private _params?: MQTTDeviceDebugInfoDialogParams;\n\n  @property() private _debugInfo?: MQTTDeviceDebugInfo;\n\n  @property() private _showAsYaml = true;\n\n  @property() private _showDeserialized = true;\n\n  public async showDialog(\n    params: MQTTDeviceDebugInfoDialogParams\n  ): Promise<void> {\n    this._params = params;\n    fetchMQTTDebugInfo(this.hass, params.device.id).then((results) => {\n      this._debugInfo = results;\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._debugInfo) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closing=${this._close}\n        .heading=\"${this.hass!.localize(\n          \"ui.dialogs.mqtt_device_debug_info.title\",\n          \"device\",\n          computeDeviceName(this._params.device, this.hass)\n        )}\"\n      >\n        <h4>\n          ${this.hass!.localize(\n            \"ui.dialogs.mqtt_device_debug_info.payload_display\"\n          )}\n        </h4>\n        <ha-switch\n          .checked=${this._showDeserialized}\n          @change=${this._showDeserializedChanged}\n        >\n          ${this.hass!.localize(\n            \"ui.dialogs.mqtt_device_debug_info.deserialize\"\n          )}\n        </ha-switch>\n        <ha-switch\n          .checked=${this._showAsYaml}\n          @change=${this._showAsYamlChanged}\n        >\n          ${this.hass!.localize(\n            \"ui.dialogs.mqtt_device_debug_info.show_as_yaml\"\n          )}\n        </ha-switch>\n        <h4>\n          ${this.hass!.localize(\"ui.dialogs.mqtt_device_debug_info.entities\")}\n        </h4>\n        <ul>\n          ${this._debugInfo.entities.length\n            ? this._renderEntities()\n            : html`\n                ${this.hass!.localize(\n                  \"ui.dialogs.mqtt_device_debug_info.no_entities\"\n                )}\n              `}\n        </ul>\n        <h4>\n          ${this.hass!.localize(\"ui.dialogs.mqtt_device_debug_info.triggers\")}\n        </h4>\n        <ul>\n          ${this._debugInfo.triggers.length\n            ? this._renderTriggers()\n            : html`\n                ${this.hass!.localize(\n                  \"ui.dialogs.mqtt_device_debug_info.no_triggers\"\n                )}\n              `}\n        </ul>\n        <mwc-button slot=\"primaryAction\" @click=${this._close}>\n          ${this.hass!.localize(\"ui.dialogs.generic.close\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _close(): void {\n    this._params = undefined;\n    this._debugInfo = undefined;\n  }\n\n  private _showAsYamlChanged(ev: Event): void {\n    this._showAsYaml = (ev.target as HaSwitch).checked;\n  }\n\n  private _showDeserializedChanged(ev: Event): void {\n    this._showDeserialized = (ev.target as HaSwitch).checked;\n  }\n\n  private _renderEntities(): TemplateResult {\n    return html`\n      ${this._debugInfo!.entities.map(\n        (entity) => html`\n          <li>\n            '${computeStateName(this.hass.states[entity.entity_id])}'\n            (<code>${entity.entity_id}</code>)\n            <br />MQTT discovery data:\n            <ul>\n              <li>\n                Topic:\n                <code>${entity.discovery_data.topic}</code>\n              </li>\n              <li>\n                <mqtt-discovery-payload\n                  .hass=${this.hass}\n                  .payload=${entity.discovery_data.payload}\n                  .showAsYaml=${this._showAsYaml}\n                  .summary=${\"Payload\"}\n                >\n                </mqtt-discovery-payload>\n              </li>\n            </ul>\n            Subscribed topics:\n            <ul>\n              ${entity.subscriptions.map(\n                (topic) => html`\n                  <li>\n                    <code>${topic.topic}</code>\n                    <mqtt-messages\n                      .hass=${this.hass}\n                      .messages=${topic.messages}\n                      .showDeserialized=${this._showDeserialized}\n                      .showAsYaml=${this._showAsYaml}\n                      .subscribedTopic=${topic.topic}\n                      .summary=${this.hass!.localize(\n                        \"ui.dialogs.mqtt_device_debug_info.recent_messages\",\n                        \"n\",\n                        topic.messages.length\n                      )}\n                    >\n                    </mqtt-messages>\n                  </li>\n                `\n              )}\n            </ul>\n          </li>\n        `\n      )}\n    `;\n  }\n\n  private _renderTriggers(): TemplateResult {\n    return html`\n      ${this._debugInfo!.triggers.map(\n        (trigger) => html`\n          <li>\n            Discovery topic:\n            <code>${trigger.discovery_data.topic}</code>\n            <mqtt-discovery-payload\n              .hass=${this.hass}\n              .payload=${trigger.discovery_data.payload}\n              .showAsYaml=${this._showAsYaml}\n              .summary=\"Discovery payload\"\n            >\n            </mqtt-discovery-payload>\n          </li>\n        `\n      )}\n    `;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 95%;\n          --mdc-dialog-min-width: 640px;\n        }\n        ha-switch {\n          margin: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-mqtt-device-debug-info\": DialogMQTTDeviceDebugInfo;\n  }\n}\n"],"sourceRoot":""}