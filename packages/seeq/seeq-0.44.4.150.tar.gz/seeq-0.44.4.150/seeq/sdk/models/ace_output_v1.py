# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.44.04
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AceOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_level': 'str',
        'created_at': 'str',
        'href': 'str',
        'id': 'str',
        'identity': 'IdentityPreviewV1'
    }

    attribute_map = {
        'access_level': 'accessLevel',
        'created_at': 'createdAt',
        'href': 'href',
        'id': 'id',
        'identity': 'identity'
    }

    def __init__(self, access_level=None, created_at=None, href=None, id=None, identity=None):
        """
        AceOutputV1 - a model defined in Swagger
        """

        self._access_level = None
        self._created_at = None
        self._href = None
        self._id = None
        self._identity = None

        if access_level is not None:
          self.access_level = access_level
        if created_at is not None:
          self.created_at = created_at
        if href is not None:
          self.href = href
        if id is not None:
          self.id = id
        if identity is not None:
          self.identity = identity

    @property
    def access_level(self):
        """
        Gets the access_level of this AceOutputV1.
        Get access level

        :return: The access_level of this AceOutputV1.
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """
        Sets the access_level of this AceOutputV1.
        Get access level

        :param access_level: The access_level of this AceOutputV1.
        :type: str
        """

        self._access_level = access_level

    @property
    def created_at(self):
        """
        Gets the created_at of this AceOutputV1.
        The ISO 8601 date of when the ACE was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The created_at of this AceOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AceOutputV1.
        The ISO 8601 date of when the ACE was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param created_at: The created_at of this AceOutputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def href(self):
        """
        Gets the href of this AceOutputV1.
        The href that can be used to interact with the item

        :return: The href of this AceOutputV1.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this AceOutputV1.
        The href that can be used to interact with the item

        :param href: The href of this AceOutputV1.
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """
        Gets the id of this AceOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this AceOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AceOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this AceOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identity(self):
        """
        Gets the identity of this AceOutputV1.
        Get the identity that the ACE restricts access for

        :return: The identity of this AceOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """
        Sets the identity of this AceOutputV1.
        Get the identity that the ACE restricts access for

        :param identity: The identity of this AceOutputV1.
        :type: IdentityPreviewV1
        """

        self._identity = identity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AceOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
