# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.44.04
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_provider_class': 'str',
        'auth_provider_id': 'str',
        'description': 'str',
        'email': 'str',
        'first_name': 'str',
        'is_admin': 'bool',
        'last_name': 'str',
        'name': 'str',
        'password': 'str',
        'session_duration': 'int',
        'username': 'str'
    }

    attribute_map = {
        'auth_provider_class': 'authProviderClass',
        'auth_provider_id': 'authProviderId',
        'description': 'description',
        'email': 'email',
        'first_name': 'firstName',
        'is_admin': 'isAdmin',
        'last_name': 'lastName',
        'name': 'name',
        'password': 'password',
        'session_duration': 'sessionDuration',
        'username': 'username'
    }

    def __init__(self, auth_provider_class=None, auth_provider_id=None, description=None, email=None, first_name=None, is_admin=False, last_name=None, name=None, password=None, session_duration=None, username=None):
        """
        UserInputV1 - a model defined in Swagger
        """

        self._auth_provider_class = None
        self._auth_provider_id = None
        self._description = None
        self._email = None
        self._first_name = None
        self._is_admin = None
        self._last_name = None
        self._name = None
        self._password = None
        self._session_duration = None
        self._username = None

        if auth_provider_class is not None:
          self.auth_provider_class = auth_provider_class
        if auth_provider_id is not None:
          self.auth_provider_id = auth_provider_id
        if description is not None:
          self.description = description
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if is_admin is not None:
          self.is_admin = is_admin
        if last_name is not None:
          self.last_name = last_name
        if name is not None:
          self.name = name
        if password is not None:
          self.password = password
        if session_duration is not None:
          self.session_duration = session_duration
        if username is not None:
          self.username = username

    @property
    def auth_provider_class(self):
        """
        Gets the auth_provider_class of this UserInputV1.
        The class of the auth provider for this user. Leave blank to use the Seeq directory.

        :return: The auth_provider_class of this UserInputV1.
        :rtype: str
        """
        return self._auth_provider_class

    @auth_provider_class.setter
    def auth_provider_class(self, auth_provider_class):
        """
        Sets the auth_provider_class of this UserInputV1.
        The class of the auth provider for this user. Leave blank to use the Seeq directory.

        :param auth_provider_class: The auth_provider_class of this UserInputV1.
        :type: str
        """

        self._auth_provider_class = auth_provider_class

    @property
    def auth_provider_id(self):
        """
        Gets the auth_provider_id of this UserInputV1.
        The id of the auth provider for this user. Leave blank to use the Seeq directory.

        :return: The auth_provider_id of this UserInputV1.
        :rtype: str
        """
        return self._auth_provider_id

    @auth_provider_id.setter
    def auth_provider_id(self, auth_provider_id):
        """
        Sets the auth_provider_id of this UserInputV1.
        The id of the auth provider for this user. Leave blank to use the Seeq directory.

        :param auth_provider_id: The auth_provider_id of this UserInputV1.
        :type: str
        """

        self._auth_provider_id = auth_provider_id

    @property
    def description(self):
        """
        Gets the description of this UserInputV1.
        Clarifying information or other plain language description of this asset. An input of just whitespace is equivalent to a null input.

        :return: The description of this UserInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UserInputV1.
        Clarifying information or other plain language description of this asset. An input of just whitespace is equivalent to a null input.

        :param description: The description of this UserInputV1.
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """
        Gets the email of this UserInputV1.
        The email address of the user

        :return: The email of this UserInputV1.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserInputV1.
        The email address of the user

        :param email: The email of this UserInputV1.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserInputV1.
        The first name of the user

        :return: The first_name of this UserInputV1.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserInputV1.
        The first name of the user

        :param first_name: The first_name of this UserInputV1.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def is_admin(self):
        """
        Gets the is_admin of this UserInputV1.
        Whether or not the user is an administrator.

        :return: The is_admin of this UserInputV1.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """
        Sets the is_admin of this UserInputV1.
        Whether or not the user is an administrator.

        :param is_admin: The is_admin of this UserInputV1.
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def last_name(self):
        """
        Gets the last_name of this UserInputV1.
        The last name of the user

        :return: The last_name of this UserInputV1.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserInputV1.
        The last name of the user

        :param last_name: The last_name of this UserInputV1.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def name(self):
        """
        Gets the name of this UserInputV1.
        Human readable name. Null or whitespace names are not permitted. Defaults to a concatenation of the first and last name

        :return: The name of this UserInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserInputV1.
        Human readable name. Null or whitespace names are not permitted. Defaults to a concatenation of the first and last name

        :param name: The name of this UserInputV1.
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """
        Gets the password of this UserInputV1.
        The password of the user. Required for users in the Seeq directory.

        :return: The password of this UserInputV1.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserInputV1.
        The password of the user. Required for users in the Seeq directory.

        :param password: The password of this UserInputV1.
        :type: str
        """

        self._password = password

    @property
    def session_duration(self):
        """
        Gets the session_duration of this UserInputV1.
        The session duration, in minutes, for the user. Defaults to 1 day. This controls the maximum period of inactivity before the user must authenticate again. A value of 0 indicates the user does not have a session duration

        :return: The session_duration of this UserInputV1.
        :rtype: int
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """
        Sets the session_duration of this UserInputV1.
        The session duration, in minutes, for the user. Defaults to 1 day. This controls the maximum period of inactivity before the user must authenticate again. A value of 0 indicates the user does not have a session duration

        :param session_duration: The session_duration of this UserInputV1.
        :type: int
        """

        self._session_duration = session_duration

    @property
    def username(self):
        """
        Gets the username of this UserInputV1.
        The username of the user. Required for users from an external directory such as LDAP or Windows Authentication.

        :return: The username of this UserInputV1.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserInputV1.
        The username of the user. Required for users from an external directory such as LDAP or Windows Authentication.

        :param username: The username of this UserInputV1.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
