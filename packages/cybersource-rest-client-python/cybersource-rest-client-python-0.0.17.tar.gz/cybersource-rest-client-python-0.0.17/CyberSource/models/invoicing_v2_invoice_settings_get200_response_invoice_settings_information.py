# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_logo': 'str',
        'merchant_display_name': 'str',
        'custom_email_message': 'str',
        'enable_reminders': 'bool',
        'header_style': 'InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle'
    }

    attribute_map = {
        'merchant_logo': 'merchantLogo',
        'merchant_display_name': 'merchantDisplayName',
        'custom_email_message': 'customEmailMessage',
        'enable_reminders': 'enableReminders',
        'header_style': 'headerStyle'
    }

    def __init__(self, merchant_logo=None, merchant_display_name=None, custom_email_message=None, enable_reminders=None, header_style=None):
        """
        InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation - a model defined in Swagger
        """

        self._merchant_logo = None
        self._merchant_display_name = None
        self._custom_email_message = None
        self._enable_reminders = None
        self._header_style = None

        if merchant_logo is not None:
          self.merchant_logo = merchant_logo
        if merchant_display_name is not None:
          self.merchant_display_name = merchant_display_name
        if custom_email_message is not None:
          self.custom_email_message = custom_email_message
        if enable_reminders is not None:
          self.enable_reminders = enable_reminders
        if header_style is not None:
          self.header_style = header_style

    @property
    def merchant_logo(self):
        """
        Gets the merchant_logo of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The image file, which must be encoded in Base64 format. Supported file formats are `png`, `jpg`, and `gif`. The image file size restriction is 1 MB.

        :return: The merchant_logo of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :rtype: str
        """
        return self._merchant_logo

    @merchant_logo.setter
    def merchant_logo(self, merchant_logo):
        """
        Sets the merchant_logo of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The image file, which must be encoded in Base64 format. Supported file formats are `png`, `jpg`, and `gif`. The image file size restriction is 1 MB.

        :param merchant_logo: The merchant_logo of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :type: str
        """
        if merchant_logo is not None and len(merchant_logo) > 10000000:
            raise ValueError("Invalid value for `merchant_logo`, length must be less than or equal to `10000000`")

        self._merchant_logo = merchant_logo

    @property
    def merchant_display_name(self):
        """
        Gets the merchant_display_name of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The merchant's display name shown on the invoice.

        :return: The merchant_display_name of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :rtype: str
        """
        return self._merchant_display_name

    @merchant_display_name.setter
    def merchant_display_name(self, merchant_display_name):
        """
        Sets the merchant_display_name of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The merchant's display name shown on the invoice.

        :param merchant_display_name: The merchant_display_name of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :type: str
        """
        if merchant_display_name is not None and len(merchant_display_name) > 100:
            raise ValueError("Invalid value for `merchant_display_name`, length must be less than or equal to `100`")

        self._merchant_display_name = merchant_display_name

    @property
    def custom_email_message(self):
        """
        Gets the custom_email_message of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The content of the email message that we send to your customers.

        :return: The custom_email_message of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :rtype: str
        """
        return self._custom_email_message

    @custom_email_message.setter
    def custom_email_message(self, custom_email_message):
        """
        Sets the custom_email_message of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        The content of the email message that we send to your customers.

        :param custom_email_message: The custom_email_message of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :type: str
        """
        if custom_email_message is not None and len(custom_email_message) > 2000:
            raise ValueError("Invalid value for `custom_email_message`, length must be less than or equal to `2000`")

        self._custom_email_message = custom_email_message

    @property
    def enable_reminders(self):
        """
        Gets the enable_reminders of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.

        :return: The enable_reminders of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :rtype: bool
        """
        return self._enable_reminders

    @enable_reminders.setter
    def enable_reminders(self, enable_reminders):
        """
        Sets the enable_reminders of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.

        :param enable_reminders: The enable_reminders of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :type: bool
        """

        self._enable_reminders = enable_reminders

    @property
    def header_style(self):
        """
        Gets the header_style of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.

        :return: The header_style of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :rtype: InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle
        """
        return self._header_style

    @header_style.setter
    def header_style(self, header_style):
        """
        Sets the header_style of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.

        :param header_style: The header_style of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.
        :type: InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle
        """

        self._header_style = header_style

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
