'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_O='psu_last_logged_time'
_N='psu_device_id'
_M='psu_geo_location'
_L='psu_accept_language'
_K='psu_accept_encoding'
_J='psu_accept_charset'
_I='psu_accept'
_H='psu_referer'
_G='psu_user_agent'
_F='psu_date'
_E='psu_http_method'
_D='psu_ip_port'
_C='psu_ip_address'
_B='str'
_A=None
import pprint,re
class ClientInfo:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B,_F:_B,_G:_B,_H:_B,_I:_B,_J:_B,_K:_B,_L:_B,_M:_B,_N:_B,_O:_B};attribute_map={_C:'psuIpAddress',_D:'psuIpPort',_E:'psuHttpMethod',_F:'psuDate',_G:'psuUserAgent',_H:'psuReferer',_I:'psuAccept',_J:'psuAcceptCharset',_K:'psuAcceptEncoding',_L:'psuAcceptLanguage',_M:'psuGeoLocation',_N:'psuDeviceId',_O:'psuLastLoggedTime'}
	def __init__(A,psu_ip_address=_A,psu_ip_port=_A,psu_http_method=_A,psu_date=_A,psu_user_agent=_A,psu_referer=_A,psu_accept=_A,psu_accept_charset=_A,psu_accept_encoding=_A,psu_accept_language=_A,psu_geo_location=_A,psu_device_id=_A,psu_last_logged_time=_A):
		'ClientInfo - a model defined in Swagger';N=psu_last_logged_time;M=psu_device_id;L=psu_geo_location;K=psu_accept_language;J=psu_accept_encoding;I=psu_accept_charset;H=psu_accept;G=psu_referer;F=psu_user_agent;E=psu_date;D=psu_http_method;C=psu_ip_port;B=psu_ip_address;A._psu_ip_address=_A;A._psu_ip_port=_A;A._psu_http_method=_A;A._psu_date=_A;A._psu_user_agent=_A;A._psu_referer=_A;A._psu_accept=_A;A._psu_accept_charset=_A;A._psu_accept_encoding=_A;A._psu_accept_language=_A;A._psu_geo_location=_A;A._psu_device_id=_A;A._psu_last_logged_time=_A;A.discriminator=_A
		if B is not _A:A.psu_ip_address=B
		if C is not _A:A.psu_ip_port=C
		if D is not _A:A.psu_http_method=D
		if E is not _A:A.psu_date=E
		if F is not _A:A.psu_user_agent=F
		if G is not _A:A.psu_referer=G
		if H is not _A:A.psu_accept=H
		if I is not _A:A.psu_accept_charset=I
		if J is not _A:A.psu_accept_encoding=J
		if K is not _A:A.psu_accept_language=K
		if L is not _A:A.psu_geo_location=L
		if M is not _A:A.psu_device_id=M
		if N is not _A:A.psu_last_logged_time=N
	@property
	def psu_ip_address(self):"Gets the psu_ip_address of this ClientInfo.  # noqa: E501\n\n        IP address used by the PSU's terminal when connecting to the TPP  # noqa: E501\n\n        :return: The psu_ip_address of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ";return self._psu_ip_address
	@psu_ip_address.setter
	def psu_ip_address(self,psu_ip_address):"Sets the psu_ip_address of this ClientInfo.\n\n        IP address used by the PSU's terminal when connecting to the TPP  # noqa: E501\n\n        :param psu_ip_address: The psu_ip_address of this ClientInfo.  # noqa: E501\n        :type: str\n        ";self._psu_ip_address=psu_ip_address
	@property
	def psu_ip_port(self):"Gets the psu_ip_port of this ClientInfo.  # noqa: E501\n\n        IP port used by the PSU's terminal when connecting to the TPP  # noqa: E501\n\n        :return: The psu_ip_port of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ";return self._psu_ip_port
	@psu_ip_port.setter
	def psu_ip_port(self,psu_ip_port):"Sets the psu_ip_port of this ClientInfo.\n\n        IP port used by the PSU's terminal when connecting to the TPP  # noqa: E501\n\n        :param psu_ip_port: The psu_ip_port of this ClientInfo.  # noqa: E501\n        :type: str\n        ";self._psu_ip_port=psu_ip_port
	@property
	def psu_http_method(self):'Gets the psu_http_method of this ClientInfo.  # noqa: E501\n\n        Http method for the most relevant PSU’s terminal request to the TTP  # noqa: E501\n\n        :return: The psu_http_method of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_http_method
	@psu_http_method.setter
	def psu_http_method(self,psu_http_method):'Sets the psu_http_method of this ClientInfo.\n\n        Http method for the most relevant PSU’s terminal request to the TTP  # noqa: E501\n\n        :param psu_http_method: The psu_http_method of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_http_method=psu_http_method
	@property
	def psu_date(self):'Gets the psu_date of this ClientInfo.  # noqa: E501\n\n        Timestamp of the most relevant PSU’s terminal request to the TTP  # noqa: E501\n\n        :return: The psu_date of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_date
	@psu_date.setter
	def psu_date(self,psu_date):'Sets the psu_date of this ClientInfo.\n\n        Timestamp of the most relevant PSU’s terminal request to the TTP  # noqa: E501\n\n        :param psu_date: The psu_date of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_date=psu_date
	@property
	def psu_user_agent(self):'Gets the psu_user_agent of this ClientInfo.  # noqa: E501\n\n        "User-Agent" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :return: The psu_user_agent of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_user_agent
	@psu_user_agent.setter
	def psu_user_agent(self,psu_user_agent):'Sets the psu_user_agent of this ClientInfo.\n\n        "User-Agent" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :param psu_user_agent: The psu_user_agent of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_user_agent=psu_user_agent
	@property
	def psu_referer(self):'Gets the psu_referer of this ClientInfo.  # noqa: E501\n\n        "Referer" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that "referer" (incorrect spelling) is to be used. The correct spelling "referrer" can be used but might not be understood.   # noqa: E501\n\n        :return: The psu_referer of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_referer
	@psu_referer.setter
	def psu_referer(self,psu_referer):'Sets the psu_referer of this ClientInfo.\n\n        "Referer" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that "referer" (incorrect spelling) is to be used. The correct spelling "referrer" can be used but might not be understood.   # noqa: E501\n\n        :param psu_referer: The psu_referer of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_referer=psu_referer
	@property
	def psu_accept(self):'Gets the psu_accept of this ClientInfo.  # noqa: E501\n\n        "Accept" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :return: The psu_accept of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_accept
	@psu_accept.setter
	def psu_accept(self,psu_accept):'Sets the psu_accept of this ClientInfo.\n\n        "Accept" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :param psu_accept: The psu_accept of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_accept=psu_accept
	@property
	def psu_accept_charset(self):'Gets the psu_accept_charset of this ClientInfo.  # noqa: E501\n\n        "Accept-Charset" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :return: The psu_accept_charset of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_accept_charset
	@psu_accept_charset.setter
	def psu_accept_charset(self,psu_accept_charset):'Sets the psu_accept_charset of this ClientInfo.\n\n        "Accept-Charset" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :param psu_accept_charset: The psu_accept_charset of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_accept_charset=psu_accept_charset
	@property
	def psu_accept_encoding(self):'Gets the psu_accept_encoding of this ClientInfo.  # noqa: E501\n\n        "Accept-Encoding" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :return: The psu_accept_encoding of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_accept_encoding
	@psu_accept_encoding.setter
	def psu_accept_encoding(self,psu_accept_encoding):'Sets the psu_accept_encoding of this ClientInfo.\n\n        "Accept-Encoding" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :param psu_accept_encoding: The psu_accept_encoding of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_accept_encoding=psu_accept_encoding
	@property
	def psu_accept_language(self):'Gets the psu_accept_language of this ClientInfo.  # noqa: E501\n\n        "Accept-Language" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :return: The psu_accept_language of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_accept_language
	@psu_accept_language.setter
	def psu_accept_language(self,psu_accept_language):'Sets the psu_accept_language of this ClientInfo.\n\n        "Accept-Language" header field sent by the PSU terminal when connecting to the TPP   # noqa: E501\n\n        :param psu_accept_language: The psu_accept_language of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_accept_language=psu_accept_language
	@property
	def psu_geo_location(self):'Gets the psu_geo_location of this ClientInfo.  # noqa: E501\n\n        Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP  # noqa: E501\n\n        :return: The psu_geo_location of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_geo_location
	@psu_geo_location.setter
	def psu_geo_location(self,psu_geo_location):'Sets the psu_geo_location of this ClientInfo.\n\n        Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP  # noqa: E501\n\n        :param psu_geo_location: The psu_geo_location of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_geo_location=psu_geo_location
	@property
	def psu_device_id(self):'Gets the psu_device_id of this ClientInfo.  # noqa: E501\n\n        UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device.   # noqa: E501\n\n        :return: The psu_device_id of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_device_id
	@psu_device_id.setter
	def psu_device_id(self,psu_device_id):'Sets the psu_device_id of this ClientInfo.\n\n        UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device.   # noqa: E501\n\n        :param psu_device_id: The psu_device_id of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_device_id=psu_device_id
	@property
	def psu_last_logged_time(self):'Gets the psu_last_logged_time of this ClientInfo.  # noqa: E501\n\n        The time when the PSU last logged in with the TPP.  # noqa: E501\n\n        :return: The psu_last_logged_time of this ClientInfo.  # noqa: E501\n        :rtype: str\n        ';return self._psu_last_logged_time
	@psu_last_logged_time.setter
	def psu_last_logged_time(self,psu_last_logged_time):'Sets the psu_last_logged_time of this ClientInfo.\n\n        The time when the PSU last logged in with the TPP.  # noqa: E501\n\n        :param psu_last_logged_time: The psu_last_logged_time of this ClientInfo.  # noqa: E501\n        :type: str\n        ';self._psu_last_logged_time=psu_last_logged_time
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(ClientInfo,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,ClientInfo):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other