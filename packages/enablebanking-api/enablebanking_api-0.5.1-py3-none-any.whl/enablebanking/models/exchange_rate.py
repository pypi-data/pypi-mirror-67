'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='str'
_E='contract_identification'
_D='rate_type'
_C='exchange_rate'
_B='unit_currency'
_A=None
import pprint,re
from decimal import Decimal
from enablebanking.models.currency_code import CurrencyCode
class ExchangeRate:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'CurrencyCode',_C:'Decimal',_D:_F,_E:_F};attribute_map={_B:'unitCurrency',_C:'exchangeRate',_D:'rateType',_E:'contractIdentification'}
	def __init__(A,unit_currency=_A,exchange_rate=_A,rate_type=_A,contract_identification=_A):
		'ExchangeRate - a model defined in Swagger';E=contract_identification;D=rate_type;C=exchange_rate;B=unit_currency;A._unit_currency=_A;A._exchange_rate=_A;A._rate_type=_A;A._contract_identification=_A;A.discriminator=_A
		if B is not _A:A.unit_currency=B
		if C is not _A:A.exchange_rate=C
		if D is not _A:A.rate_type=D
		if E is not _A:A.contract_identification=E
	@property
	def unit_currency(self):'Gets the unit_currency of this ExchangeRate.  # noqa: E501\n\n        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.  # noqa: E501\n\n        :return: The unit_currency of this ExchangeRate.  # noqa: E501\n        :rtype: CurrencyCode\n        ';return self._unit_currency
	@unit_currency.setter
	def unit_currency(self,unit_currency):'Sets the unit_currency of this ExchangeRate.\n\n        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.  # noqa: E501\n\n        :param unit_currency: The unit_currency of this ExchangeRate.  # noqa: E501\n        :type: CurrencyCode\n        ';self._unit_currency=unit_currency
	@property
	def exchange_rate(self):'Gets the exchange_rate of this ExchangeRate.  # noqa: E501\n\n        The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.   # noqa: E501\n\n        :return: The exchange_rate of this ExchangeRate.  # noqa: E501\n        :rtype: Decimal\n        ';return self._exchange_rate
	@exchange_rate.setter
	def exchange_rate(self,exchange_rate):'Sets the exchange_rate of this ExchangeRate.\n\n        The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.   # noqa: E501\n\n        :param exchange_rate: The exchange_rate of this ExchangeRate.  # noqa: E501\n        :type: Decimal\n        ';self._exchange_rate=exchange_rate
	@property
	def rate_type(self):'Gets the rate_type of this ExchangeRate.  # noqa: E501\n\n\n        :return: The rate_type of this ExchangeRate.  # noqa: E501\n        :rtype: str\n        ';return self._rate_type
	@rate_type.setter
	def rate_type(self,rate_type):
		'Sets the rate_type of this ExchangeRate.\n\n\n        :param rate_type: The rate_type of this ExchangeRate.  # noqa: E501\n        :type: str\n        ';A=rate_type;B=['SPOT','SALE','AGRD']
		if A not in B:raise ValueError('Invalid value for `rate_type` ({0}), must be one of {1}'.format(A,B))
		self._rate_type=A
	@property
	def contract_identification(self):'Gets the contract_identification of this ExchangeRate.  # noqa: E501\n\n        Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.  # noqa: E501\n\n        :return: The contract_identification of this ExchangeRate.  # noqa: E501\n        :rtype: str\n        ';return self._contract_identification
	@contract_identification.setter
	def contract_identification(self,contract_identification):
		'Sets the contract_identification of this ExchangeRate.\n\n        Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.  # noqa: E501\n\n        :param contract_identification: The contract_identification of this ExchangeRate.  # noqa: E501\n        :type: str\n        ';A=contract_identification
		if A is not _A and len(A)>35:raise ValueError('Invalid value for `contract_identification`, length must be less than or equal to `35`')
		self._contract_identification=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(ExchangeRate,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,ExchangeRate):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other