'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_E='ocp_apim_subscription_key'
_D='client_secret'
_C='client_id'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class POPPankkiConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B};attribute_map={_C:'clientId',_D:'clientSecret',_E:'ocpApimSubscriptionKey'}
	def __init__(A,client_id=_A,client_secret=_A,ocp_apim_subscription_key=_A):'POPPankkiConnectorSettings - a model defined in Swagger';A._client_id=_A;A._client_secret=_A;A._ocp_apim_subscription_key=_A;A.discriminator=_A;A.client_id=client_id;A.client_secret=client_secret;A.ocp_apim_subscription_key=ocp_apim_subscription_key
	@property
	def client_id(self):'Gets the client_id of this POPPankkiConnectorSettings.  # noqa: E501\n\n        API client ID (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :return: The client_id of this POPPankkiConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this POPPankkiConnectorSettings.\n\n        API client ID (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :param client_id: The client_id of this POPPankkiConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def client_secret(self):'Gets the client_secret of this POPPankkiConnectorSettings.  # noqa: E501\n\n        API client secret (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :return: The client_secret of this POPPankkiConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_secret
	@client_secret.setter
	def client_secret(self,client_secret):
		'Sets the client_secret of this POPPankkiConnectorSettings.\n\n        API client secret (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :param client_secret: The client_secret of this POPPankkiConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_secret
		if A is _A:raise ValueError('Invalid value for `client_secret`, must not be `None`')
		self._client_secret=A
	@property
	def ocp_apim_subscription_key(self):'Gets the ocp_apim_subscription_key of this POPPankkiConnectorSettings.  # noqa: E501\n\n        API subscription key (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :return: The ocp_apim_subscription_key of this POPPankkiConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._ocp_apim_subscription_key
	@ocp_apim_subscription_key.setter
	def ocp_apim_subscription_key(self,ocp_apim_subscription_key):
		'Sets the ocp_apim_subscription_key of this POPPankkiConnectorSettings.\n\n        API subscription key (obtained from Samlink Developer Portal)  # noqa: E501\n\n        :param ocp_apim_subscription_key: The ocp_apim_subscription_key of this POPPankkiConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=ocp_apim_subscription_key
		if A is _A:raise ValueError('Invalid value for `ocp_apim_subscription_key`, must not be `None`')
		self._ocp_apim_subscription_key=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(POPPankkiConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,POPPankkiConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other