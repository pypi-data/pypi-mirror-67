'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_G='sign_cert_string'
_F='sign_pub_key_serial'
_E='sign_key_path'
_D='key_path'
_C='cert_path'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class MedicinosBankasConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B,_F:_B,_G:_B};attribute_map={_C:'certPath',_D:'keyPath',_E:'signKeyPath',_F:'signPubKeySerial',_G:'signCertString'}
	def __init__(A,cert_path=_A,key_path=_A,sign_key_path=_A,sign_pub_key_serial=_A,sign_cert_string=_A):'MedicinosBankasConnectorSettings - a model defined in Swagger';A._cert_path=_A;A._key_path=_A;A._sign_key_path=_A;A._sign_pub_key_serial=_A;A._sign_cert_string=_A;A.discriminator=_A;A.cert_path=cert_path;A.key_path=key_path;A.sign_key_path=sign_key_path;A.sign_pub_key_serial=sign_pub_key_serial;A.sign_cert_string=sign_cert_string
	@property
	def cert_path(self):'Gets the cert_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n\n        Path to QWAC certificate in PEM format  # noqa: E501\n\n        :return: The cert_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._cert_path
	@cert_path.setter
	def cert_path(self,cert_path):
		'Sets the cert_path of this MedicinosBankasConnectorSettings.\n\n        Path to QWAC certificate in PEM format  # noqa: E501\n\n        :param cert_path: The cert_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=cert_path
		if A is _A:raise ValueError('Invalid value for `cert_path`, must not be `None`')
		self._cert_path=A
	@property
	def key_path(self):'Gets the key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n\n        Path to QWAC certificate private key in PEM format  # noqa: E501\n\n        :return: The key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._key_path
	@key_path.setter
	def key_path(self,key_path):
		'Sets the key_path of this MedicinosBankasConnectorSettings.\n\n        Path to QWAC certificate private key in PEM format  # noqa: E501\n\n        :param key_path: The key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=key_path
		if A is _A:raise ValueError('Invalid value for `key_path`, must not be `None`')
		self._key_path=A
	@property
	def sign_key_path(self):'Gets the sign_key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n\n        Path to QSeal certificate in PEM format  # noqa: E501\n\n        :return: The sign_key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_key_path
	@sign_key_path.setter
	def sign_key_path(self,sign_key_path):
		'Sets the sign_key_path of this MedicinosBankasConnectorSettings.\n\n        Path to QSeal certificate in PEM format  # noqa: E501\n\n        :param sign_key_path: The sign_key_path of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_key_path
		if A is _A:raise ValueError('Invalid value for `sign_key_path`, must not be `None`')
		self._sign_key_path=A
	@property
	def sign_pub_key_serial(self):'Gets the sign_pub_key_serial of this MedicinosBankasConnectorSettings.  # noqa: E501\n\n        Public serial key of the QSeal certificate located in signKeyPath  # noqa: E501\n\n        :return: The sign_pub_key_serial of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_pub_key_serial
	@sign_pub_key_serial.setter
	def sign_pub_key_serial(self,sign_pub_key_serial):
		'Sets the sign_pub_key_serial of this MedicinosBankasConnectorSettings.\n\n        Public serial key of the QSeal certificate located in signKeyPath  # noqa: E501\n\n        :param sign_pub_key_serial: The sign_pub_key_serial of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_pub_key_serial
		if A is _A:raise ValueError('Invalid value for `sign_pub_key_serial`, must not be `None`')
		self._sign_pub_key_serial=A
	@property
	def sign_cert_string(self):'Gets the sign_cert_string of this MedicinosBankasConnectorSettings.  # noqa: E501\n\n        QSEAL certificate string   # noqa: E501\n\n        :return: The sign_cert_string of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_cert_string
	@sign_cert_string.setter
	def sign_cert_string(self,sign_cert_string):
		'Sets the sign_cert_string of this MedicinosBankasConnectorSettings.\n\n        QSEAL certificate string   # noqa: E501\n\n        :param sign_cert_string: The sign_cert_string of this MedicinosBankasConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_cert_string
		if A is _A:raise ValueError('Invalid value for `sign_cert_string`, must not be `None`')
		self._sign_cert_string=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(MedicinosBankasConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,MedicinosBankasConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other