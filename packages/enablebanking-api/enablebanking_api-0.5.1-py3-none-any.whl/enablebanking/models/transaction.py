'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_S='AccountIdentification'
_R='PartyIdentification'
_Q='str'
_P='remittance_information'
_O='transaction_date'
_N='value_date'
_M='booking_date'
_L='credit_debit_indicator'
_K='bank_transaction_code'
_J='debtor_account'
_I='creditor_account'
_H='transaction_amount'
_G='entry_reference'
_F='resource_id'
_E='date'
_D='status'
_C='debtor'
_B='creditor'
_A=None
import pprint,re
from enablebanking.models.account_identification import AccountIdentification
from enablebanking.models.amount_type import AmountType
from enablebanking.models.bank_transaction_code import BankTransactionCode
from enablebanking.models.party_identification import PartyIdentification
from enablebanking.models.resource_id import ResourceId
from enablebanking.models.transaction_status import TransactionStatus
from enablebanking.models.unstructured_remittance_information import UnstructuredRemittanceInformation
class Transaction:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_F:'ResourceId',_G:_Q,_H:'AmountType',_B:_R,_I:_S,_C:_R,_J:_S,_K:'BankTransactionCode',_L:_Q,_D:'TransactionStatus',_M:_E,_N:_E,_O:_E,_P:'UnstructuredRemittanceInformation'};attribute_map={_F:'resourceId',_G:'entryReference',_H:'transactionAmount',_B:_B,_I:'creditorAccount',_C:_C,_J:'debtorAccount',_K:'bankTransactionCode',_L:'creditDebitIndicator',_D:_D,_M:'bookingDate',_N:'valueDate',_O:'transactionDate',_P:'remittanceInformation'}
	def __init__(A,resource_id=_A,entry_reference=_A,transaction_amount=_A,creditor=_A,creditor_account=_A,debtor=_A,debtor_account=_A,bank_transaction_code=_A,credit_debit_indicator=_A,status=_A,booking_date=_A,value_date=_A,transaction_date=_A,remittance_information=_A):
		'Transaction - a model defined in Swagger';L=remittance_information;K=transaction_date;J=value_date;I=booking_date;H=bank_transaction_code;G=debtor_account;F=debtor;E=creditor_account;D=creditor;C=entry_reference;B=resource_id;A._resource_id=_A;A._entry_reference=_A;A._transaction_amount=_A;A._creditor=_A;A._creditor_account=_A;A._debtor=_A;A._debtor_account=_A;A._bank_transaction_code=_A;A._credit_debit_indicator=_A;A._status=_A;A._booking_date=_A;A._value_date=_A;A._transaction_date=_A;A._remittance_information=_A;A.discriminator=_A
		if B is not _A:A.resource_id=B
		if C is not _A:A.entry_reference=C
		A.transaction_amount=transaction_amount
		if D is not _A:A.creditor=D
		if E is not _A:A.creditor_account=E
		if F is not _A:A.debtor=F
		if G is not _A:A.debtor_account=G
		if H is not _A:A.bank_transaction_code=H
		A.credit_debit_indicator=credit_debit_indicator;A.status=status
		if I is not _A:A.booking_date=I
		if J is not _A:A.value_date=J
		if K is not _A:A.transaction_date=K
		if L is not _A:A.remittance_information=L
	@property
	def resource_id(self):'Gets the resource_id of this Transaction.  # noqa: E501\n\n\n        :return: The resource_id of this Transaction.  # noqa: E501\n        :rtype: ResourceId\n        ';return self._resource_id
	@resource_id.setter
	def resource_id(self,resource_id):'Sets the resource_id of this Transaction.\n\n\n        :param resource_id: The resource_id of this Transaction.  # noqa: E501\n        :type: ResourceId\n        ';self._resource_id=resource_id
	@property
	def entry_reference(self):'Gets the entry_reference of this Transaction.  # noqa: E501\n\n        Technical incremental identification of the transaction.   # noqa: E501\n\n        :return: The entry_reference of this Transaction.  # noqa: E501\n        :rtype: str\n        ';return self._entry_reference
	@entry_reference.setter
	def entry_reference(self,entry_reference):
		'Sets the entry_reference of this Transaction.\n\n        Technical incremental identification of the transaction.   # noqa: E501\n\n        :param entry_reference: The entry_reference of this Transaction.  # noqa: E501\n        :type: str\n        ';A=entry_reference
		if A is not _A and len(A)>40:raise ValueError('Invalid value for `entry_reference`, length must be less than or equal to `40`')
		self._entry_reference=A
	@property
	def transaction_amount(self):'Gets the transaction_amount of this Transaction.  # noqa: E501\n\n\n        :return: The transaction_amount of this Transaction.  # noqa: E501\n        :rtype: AmountType\n        ';return self._transaction_amount
	@transaction_amount.setter
	def transaction_amount(self,transaction_amount):
		'Sets the transaction_amount of this Transaction.\n\n\n        :param transaction_amount: The transaction_amount of this Transaction.  # noqa: E501\n        :type: AmountType\n        ';A=transaction_amount
		if A is _A:raise ValueError('Invalid value for `transaction_amount`, must not be `None`')
		self._transaction_amount=A
	@property
	def creditor(self):'Gets the creditor of this Transaction.  # noqa: E501\n\n\n        :return: The creditor of this Transaction.  # noqa: E501\n        :rtype: PartyIdentification\n        ';return self._creditor
	@creditor.setter
	def creditor(self,creditor):'Sets the creditor of this Transaction.\n\n\n        :param creditor: The creditor of this Transaction.  # noqa: E501\n        :type: PartyIdentification\n        ';self._creditor=creditor
	@property
	def creditor_account(self):'Gets the creditor_account of this Transaction.  # noqa: E501\n\n\n        :return: The creditor_account of this Transaction.  # noqa: E501\n        :rtype: AccountIdentification\n        ';return self._creditor_account
	@creditor_account.setter
	def creditor_account(self,creditor_account):'Sets the creditor_account of this Transaction.\n\n\n        :param creditor_account: The creditor_account of this Transaction.  # noqa: E501\n        :type: AccountIdentification\n        ';self._creditor_account=creditor_account
	@property
	def debtor(self):'Gets the debtor of this Transaction.  # noqa: E501\n\n\n        :return: The debtor of this Transaction.  # noqa: E501\n        :rtype: PartyIdentification\n        ';return self._debtor
	@debtor.setter
	def debtor(self,debtor):'Sets the debtor of this Transaction.\n\n\n        :param debtor: The debtor of this Transaction.  # noqa: E501\n        :type: PartyIdentification\n        ';self._debtor=debtor
	@property
	def debtor_account(self):'Gets the debtor_account of this Transaction.  # noqa: E501\n\n\n        :return: The debtor_account of this Transaction.  # noqa: E501\n        :rtype: AccountIdentification\n        ';return self._debtor_account
	@debtor_account.setter
	def debtor_account(self,debtor_account):'Sets the debtor_account of this Transaction.\n\n\n        :param debtor_account: The debtor_account of this Transaction.  # noqa: E501\n        :type: AccountIdentification\n        ';self._debtor_account=debtor_account
	@property
	def bank_transaction_code(self):'Gets the bank_transaction_code of this Transaction.  # noqa: E501\n\n\n        :return: The bank_transaction_code of this Transaction.  # noqa: E501\n        :rtype: BankTransactionCode\n        ';return self._bank_transaction_code
	@bank_transaction_code.setter
	def bank_transaction_code(self,bank_transaction_code):'Sets the bank_transaction_code of this Transaction.\n\n\n        :param bank_transaction_code: The bank_transaction_code of this Transaction.  # noqa: E501\n        :type: BankTransactionCode\n        ';self._bank_transaction_code=bank_transaction_code
	@property
	def credit_debit_indicator(self):'Gets the credit_debit_indicator of this Transaction.  # noqa: E501\n\n        Accounting flow of the transaction  # noqa: E501\n\n        :return: The credit_debit_indicator of this Transaction.  # noqa: E501\n        :rtype: str\n        ';return self._credit_debit_indicator
	@credit_debit_indicator.setter
	def credit_debit_indicator(self,credit_debit_indicator):
		'Sets the credit_debit_indicator of this Transaction.\n\n        Accounting flow of the transaction  # noqa: E501\n\n        :param credit_debit_indicator: The credit_debit_indicator of this Transaction.  # noqa: E501\n        :type: str\n        ';A=credit_debit_indicator
		if A is _A:raise ValueError('Invalid value for `credit_debit_indicator`, must not be `None`')
		B=['CRDT','DBIT']
		if A not in B:raise ValueError('Invalid value for `credit_debit_indicator` ({0}), must be one of {1}'.format(A,B))
		self._credit_debit_indicator=A
	@property
	def status(self):'Gets the status of this Transaction.  # noqa: E501\n\n\n        :return: The status of this Transaction.  # noqa: E501\n        :rtype: TransactionStatus\n        ';return self._status
	@status.setter
	def status(self,status):
		'Sets the status of this Transaction.\n\n\n        :param status: The status of this Transaction.  # noqa: E501\n        :type: TransactionStatus\n        ';A=status
		if A is _A:raise ValueError('Invalid value for `status`, must not be `None`')
		self._status=A
	@property
	def booking_date(self):'Gets the booking_date of this Transaction.  # noqa: E501\n\n        Booking date of the transaction on the account  # noqa: E501\n\n        :return: The booking_date of this Transaction.  # noqa: E501\n        :rtype: date\n        ';return self._booking_date
	@booking_date.setter
	def booking_date(self,booking_date):'Sets the booking_date of this Transaction.\n\n        Booking date of the transaction on the account  # noqa: E501\n\n        :param booking_date: The booking_date of this Transaction.  # noqa: E501\n        :type: date\n        ';self._booking_date=booking_date
	@property
	def value_date(self):'Gets the value_date of this Transaction.  # noqa: E501\n\n        Value date of the transaction on the account  # noqa: E501\n\n        :return: The value_date of this Transaction.  # noqa: E501\n        :rtype: date\n        ';return self._value_date
	@value_date.setter
	def value_date(self,value_date):'Sets the value_date of this Transaction.\n\n        Value date of the transaction on the account  # noqa: E501\n\n        :param value_date: The value_date of this Transaction.  # noqa: E501\n        :type: date\n        ';self._value_date=value_date
	@property
	def transaction_date(self):'Gets the transaction_date of this Transaction.  # noqa: E501\n\n        Date used for specific purposes: - for card transaction: date of the transaction - for credit transfer: acquiring date of the transaction - for direct debit: receiving date of the transaction   # noqa: E501\n\n        :return: The transaction_date of this Transaction.  # noqa: E501\n        :rtype: date\n        ';return self._transaction_date
	@transaction_date.setter
	def transaction_date(self,transaction_date):'Sets the transaction_date of this Transaction.\n\n        Date used for specific purposes: - for card transaction: date of the transaction - for credit transfer: acquiring date of the transaction - for direct debit: receiving date of the transaction   # noqa: E501\n\n        :param transaction_date: The transaction_date of this Transaction.  # noqa: E501\n        :type: date\n        ';self._transaction_date=transaction_date
	@property
	def remittance_information(self):'Gets the remittance_information of this Transaction.  # noqa: E501\n\n\n        :return: The remittance_information of this Transaction.  # noqa: E501\n        :rtype: UnstructuredRemittanceInformation\n        ';return self._remittance_information
	@remittance_information.setter
	def remittance_information(self,remittance_information):'Sets the remittance_information of this Transaction.\n\n\n        :param remittance_information: The remittance_information of this Transaction.  # noqa: E501\n        :type: UnstructuredRemittanceInformation\n        ';self._remittance_information=remittance_information
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Transaction,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Transaction):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other