'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_L='payment_auth_redirect_uri'
_K='payment_auth_state'
_J='sign_pub_key_serial'
_I='sign_key_path'
_H='key_path'
_G='cert_path'
_F='client_secret'
_E='client_id'
_D='api_secret'
_C='api_key'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class OPConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B,_F:_B,_G:_B,_H:_B,_I:_B,_J:_B,_K:_B,_L:_B};attribute_map={_C:'apiKey',_D:'apiSecret',_E:'clientId',_F:'clientSecret',_G:'certPath',_H:'keyPath',_I:'signKeyPath',_J:'signPubKeySerial',_K:'paymentAuthState',_L:'paymentAuthRedirectUri'}
	def __init__(A,api_key=_A,api_secret=_A,client_id=_A,client_secret=_A,cert_path=_A,key_path=_A,sign_key_path=_A,sign_pub_key_serial=_A,payment_auth_state=_A,payment_auth_redirect_uri=_A):
		'OPConnectorSettings - a model defined in Swagger';C=payment_auth_redirect_uri;B=payment_auth_state;A._api_key=_A;A._api_secret=_A;A._client_id=_A;A._client_secret=_A;A._cert_path=_A;A._key_path=_A;A._sign_key_path=_A;A._sign_pub_key_serial=_A;A._payment_auth_state=_A;A._payment_auth_redirect_uri=_A;A.discriminator=_A;A.api_key=api_key;A.api_secret=api_secret;A.client_id=client_id;A.client_secret=client_secret;A.cert_path=cert_path;A.key_path=key_path;A.sign_key_path=sign_key_path;A.sign_pub_key_serial=sign_pub_key_serial
		if B is not _A:A.payment_auth_state=B
		if C is not _A:A.payment_auth_redirect_uri=C
	@property
	def api_key(self):'Gets the api_key of this OPConnectorSettings.  # noqa: E501\n\n        API key  # noqa: E501\n\n        :return: The api_key of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._api_key
	@api_key.setter
	def api_key(self,api_key):
		'Sets the api_key of this OPConnectorSettings.\n\n        API key  # noqa: E501\n\n        :param api_key: The api_key of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=api_key
		if A is _A:raise ValueError('Invalid value for `api_key`, must not be `None`')
		self._api_key=A
	@property
	def api_secret(self):'Gets the api_secret of this OPConnectorSettings.  # noqa: E501\n\n        API secret  # noqa: E501\n\n        :return: The api_secret of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._api_secret
	@api_secret.setter
	def api_secret(self,api_secret):
		'Sets the api_secret of this OPConnectorSettings.\n\n        API secret  # noqa: E501\n\n        :param api_secret: The api_secret of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=api_secret
		if A is _A:raise ValueError('Invalid value for `api_secret`, must not be `None`')
		self._api_secret=A
	@property
	def client_id(self):'Gets the client_id of this OPConnectorSettings.  # noqa: E501\n\n        Client id  # noqa: E501\n\n        :return: The client_id of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this OPConnectorSettings.\n\n        Client id  # noqa: E501\n\n        :param client_id: The client_id of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def client_secret(self):'Gets the client_secret of this OPConnectorSettings.  # noqa: E501\n\n        Client secret  # noqa: E501\n\n        :return: The client_secret of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_secret
	@client_secret.setter
	def client_secret(self,client_secret):
		'Sets the client_secret of this OPConnectorSettings.\n\n        Client secret  # noqa: E501\n\n        :param client_secret: The client_secret of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_secret
		if A is _A:raise ValueError('Invalid value for `client_secret`, must not be `None`')
		self._client_secret=A
	@property
	def cert_path(self):'Gets the cert_path of this OPConnectorSettings.  # noqa: E501\n\n        Path to a QWAC   # noqa: E501\n\n        :return: The cert_path of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._cert_path
	@cert_path.setter
	def cert_path(self,cert_path):
		'Sets the cert_path of this OPConnectorSettings.\n\n        Path to a QWAC   # noqa: E501\n\n        :param cert_path: The cert_path of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=cert_path
		if A is _A:raise ValueError('Invalid value for `cert_path`, must not be `None`')
		self._cert_path=A
	@property
	def key_path(self):'Gets the key_path of this OPConnectorSettings.  # noqa: E501\n\n        Path to a QWAC private key  # noqa: E501\n\n        :return: The key_path of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._key_path
	@key_path.setter
	def key_path(self,key_path):
		'Sets the key_path of this OPConnectorSettings.\n\n        Path to a QWAC private key  # noqa: E501\n\n        :param key_path: The key_path of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=key_path
		if A is _A:raise ValueError('Invalid value for `key_path`, must not be `None`')
		self._key_path=A
	@property
	def sign_key_path(self):'Gets the sign_key_path of this OPConnectorSettings.  # noqa: E501\n\n        Path to a public QSEAL certificate  # noqa: E501\n\n        :return: The sign_key_path of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_key_path
	@sign_key_path.setter
	def sign_key_path(self,sign_key_path):
		'Sets the sign_key_path of this OPConnectorSettings.\n\n        Path to a public QSEAL certificate  # noqa: E501\n\n        :param sign_key_path: The sign_key_path of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_key_path
		if A is _A:raise ValueError('Invalid value for `sign_key_path`, must not be `None`')
		self._sign_key_path=A
	@property
	def sign_pub_key_serial(self):'Gets the sign_pub_key_serial of this OPConnectorSettings.  # noqa: E501\n\n        Public QSEAL certificate serial number  # noqa: E501\n\n        :return: The sign_pub_key_serial of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_pub_key_serial
	@sign_pub_key_serial.setter
	def sign_pub_key_serial(self,sign_pub_key_serial):
		'Sets the sign_pub_key_serial of this OPConnectorSettings.\n\n        Public QSEAL certificate serial number  # noqa: E501\n\n        :param sign_pub_key_serial: The sign_pub_key_serial of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_pub_key_serial
		if A is _A:raise ValueError('Invalid value for `sign_pub_key_serial`, must not be `None`')
		self._sign_pub_key_serial=A
	@property
	def payment_auth_state(self):'Gets the payment_auth_state of this OPConnectorSettings.  # noqa: E501\n\n        Redirect uri for payment (PISP) authorization flow  # noqa: E501\n\n        :return: The payment_auth_state of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_state
	@payment_auth_state.setter
	def payment_auth_state(self,payment_auth_state):'Sets the payment_auth_state of this OPConnectorSettings.\n\n        Redirect uri for payment (PISP) authorization flow  # noqa: E501\n\n        :param payment_auth_state: The payment_auth_state of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_state=payment_auth_state
	@property
	def payment_auth_redirect_uri(self):'Gets the payment_auth_redirect_uri of this OPConnectorSettings.  # noqa: E501\n\n        State for payment (PISP) authorization flow  # noqa: E501\n\n        :return: The payment_auth_redirect_uri of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_redirect_uri
	@payment_auth_redirect_uri.setter
	def payment_auth_redirect_uri(self,payment_auth_redirect_uri):'Sets the payment_auth_redirect_uri of this OPConnectorSettings.\n\n        State for payment (PISP) authorization flow  # noqa: E501\n\n        :param payment_auth_redirect_uri: The payment_auth_redirect_uri of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_redirect_uri=payment_auth_redirect_uri
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(OPConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,OPConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other