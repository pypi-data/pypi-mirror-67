'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_E='accounts_required'
_D='extends_details'
_C='before_accounts'
_B='bool'
_A=None
import pprint,re
class ModifyConsentsInfo:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B};attribute_map={_C:'beforeAccounts',_D:'extendsDetails',_E:'accountsRequired'}
	def __init__(A,before_accounts=_A,extends_details=_A,accounts_required=_A):'ModifyConsentsInfo - a model defined in Swagger';A._before_accounts=_A;A._extends_details=_A;A._accounts_required=_A;A.discriminator=_A;A.before_accounts=before_accounts;A.extends_details=extends_details;A.accounts_required=accounts_required
	@property
	def before_accounts(self):'Gets the before_accounts of this ModifyConsentsInfo.  # noqa: E501\n\n        Shows if `modifyConsents` needs to be called for getting list of accounts (before `getAccounts` method)   # noqa: E501\n\n        :return: The before_accounts of this ModifyConsentsInfo.  # noqa: E501\n        :rtype: bool\n        ';return self._before_accounts
	@before_accounts.setter
	def before_accounts(self,before_accounts):
		'Sets the before_accounts of this ModifyConsentsInfo.\n\n        Shows if `modifyConsents` needs to be called for getting list of accounts (before `getAccounts` method)   # noqa: E501\n\n        :param before_accounts: The before_accounts of this ModifyConsentsInfo.  # noqa: E501\n        :type: bool\n        ';A=before_accounts
		if A is _A:raise ValueError('Invalid value for `before_accounts`, must not be `None`')
		self._before_accounts=A
	@property
	def extends_details(self):'Gets the extends_details of this ModifyConsentsInfo.  # noqa: E501\n\n        Shows if bank returns extended information about accounts from method `getAccounts` after user consent is received (meaning modifyConsents is called). This "additional information" may differ from bank to bank and is not specified   # noqa: E501\n\n        :return: The extends_details of this ModifyConsentsInfo.  # noqa: E501\n        :rtype: bool\n        ';return self._extends_details
	@extends_details.setter
	def extends_details(self,extends_details):
		'Sets the extends_details of this ModifyConsentsInfo.\n\n        Shows if bank returns extended information about accounts from method `getAccounts` after user consent is received (meaning modifyConsents is called). This "additional information" may differ from bank to bank and is not specified   # noqa: E501\n\n        :param extends_details: The extends_details of this ModifyConsentsInfo.  # noqa: E501\n        :type: bool\n        ';A=extends_details
		if A is _A:raise ValueError('Invalid value for `extends_details`, must not be `None`')
		self._extends_details=A
	@property
	def accounts_required(self):'Gets the accounts_required of this ModifyConsentsInfo.  # noqa: E501\n\n        Shows if `accounts` field has to be filled in for getting account details If `true` then `modifyConsents` needs to be called with accounts list in `Access` model before calling `getAccountTransactions` or `getAccountBalances`   # noqa: E501\n\n        :return: The accounts_required of this ModifyConsentsInfo.  # noqa: E501\n        :rtype: bool\n        ';return self._accounts_required
	@accounts_required.setter
	def accounts_required(self,accounts_required):
		'Sets the accounts_required of this ModifyConsentsInfo.\n\n        Shows if `accounts` field has to be filled in for getting account details If `true` then `modifyConsents` needs to be called with accounts list in `Access` model before calling `getAccountTransactions` or `getAccountBalances`   # noqa: E501\n\n        :param accounts_required: The accounts_required of this ModifyConsentsInfo.  # noqa: E501\n        :type: bool\n        ';A=accounts_required
		if A is _A:raise ValueError('Invalid value for `accounts_required`, must not be `None`')
		self._accounts_required=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(ModifyConsentsInfo,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,ModifyConsentsInfo):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other