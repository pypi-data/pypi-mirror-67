'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_L='payment_auth_state'
_K='payment_auth_redirect_uri'
_J='sign_cert_url'
_I='sign_fingerprint'
_H='sign_subject_key_identifier'
_G='sign_key_path'
_F='key_path'
_E='cert_path'
_D='client_id'
_C='origin'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class KIRConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B,_F:_B,_G:_B,_H:_B,_I:_B,_J:_B,_K:_B,_L:_B};attribute_map={_C:_C,_D:'clientId',_E:'certPath',_F:'keyPath',_G:'signKeyPath',_H:'signSubjectKeyIdentifier',_I:'signFingerprint',_J:'signCertUrl',_K:'paymentAuthRedirectUri',_L:'paymentAuthState'}
	def __init__(A,origin=_A,client_id=_A,cert_path=_A,key_path=_A,sign_key_path=_A,sign_subject_key_identifier=_A,sign_fingerprint=_A,sign_cert_url=_A,payment_auth_redirect_uri=_A,payment_auth_state=_A):
		'KIRConnectorSettings - a model defined in Swagger';G=payment_auth_state;F=payment_auth_redirect_uri;E=sign_cert_url;D=sign_fingerprint;C=sign_subject_key_identifier;B=sign_key_path;A._origin=_A;A._client_id=_A;A._cert_path=_A;A._key_path=_A;A._sign_key_path=_A;A._sign_subject_key_identifier=_A;A._sign_fingerprint=_A;A._sign_cert_url=_A;A._payment_auth_redirect_uri=_A;A._payment_auth_state=_A;A.discriminator=_A;A.origin=origin;A.client_id=client_id;A.cert_path=cert_path;A.key_path=key_path
		if B is not _A:A.sign_key_path=B
		if C is not _A:A.sign_subject_key_identifier=C
		if D is not _A:A.sign_fingerprint=D
		if E is not _A:A.sign_cert_url=E
		if F is not _A:A.payment_auth_redirect_uri=F
		if G is not _A:A.payment_auth_state=G
	@property
	def origin(self):'Gets the origin of this KIRConnectorSettings.  # noqa: E501\n\n        API origin (scheme://domain:port)  # noqa: E501\n\n        :return: The origin of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._origin
	@origin.setter
	def origin(self,origin):
		'Sets the origin of this KIRConnectorSettings.\n\n        API origin (scheme://domain:port)  # noqa: E501\n\n        :param origin: The origin of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=origin
		if A is _A:raise ValueError('Invalid value for `origin`, must not be `None`')
		self._origin=A
	@property
	def client_id(self):'Gets the client_id of this KIRConnectorSettings.  # noqa: E501\n\n        TPP ID to be put here. KIR sandbox certificates use PSDPL-KNF-1234567890  # noqa: E501\n\n        :return: The client_id of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this KIRConnectorSettings.\n\n        TPP ID to be put here. KIR sandbox certificates use PSDPL-KNF-1234567890  # noqa: E501\n\n        :param client_id: The client_id of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def cert_path(self):'Gets the cert_path of this KIRConnectorSettings.  # noqa: E501\n\n        Path to sandbox QWAC certificate  # noqa: E501\n\n        :return: The cert_path of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._cert_path
	@cert_path.setter
	def cert_path(self,cert_path):
		'Sets the cert_path of this KIRConnectorSettings.\n\n        Path to sandbox QWAC certificate  # noqa: E501\n\n        :param cert_path: The cert_path of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=cert_path
		if A is _A:raise ValueError('Invalid value for `cert_path`, must not be `None`')
		self._cert_path=A
	@property
	def key_path(self):'Gets the key_path of this KIRConnectorSettings.  # noqa: E501\n\n        Path to sandbox key used for QWAC  # noqa: E501\n\n        :return: The key_path of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._key_path
	@key_path.setter
	def key_path(self,key_path):
		'Sets the key_path of this KIRConnectorSettings.\n\n        Path to sandbox key used for QWAC  # noqa: E501\n\n        :param key_path: The key_path of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=key_path
		if A is _A:raise ValueError('Invalid value for `key_path`, must not be `None`')
		self._key_path=A
	@property
	def sign_key_path(self):'Gets the sign_key_path of this KIRConnectorSettings.  # noqa: E501\n\n        Path to sandbox key used for QSeal certificate. If not set request signing will be skipped   # noqa: E501\n\n        :return: The sign_key_path of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_key_path
	@sign_key_path.setter
	def sign_key_path(self,sign_key_path):'Sets the sign_key_path of this KIRConnectorSettings.\n\n        Path to sandbox key used for QSeal certificate. If not set request signing will be skipped   # noqa: E501\n\n        :param sign_key_path: The sign_key_path of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._sign_key_path=sign_key_path
	@property
	def sign_subject_key_identifier(self):'Gets the sign_subject_key_identifier of this KIRConnectorSettings.  # noqa: E501\n\n        Subject Key Identifier (2.5.29.14) field of QSeal certificate as hex string   # noqa: E501\n\n        :return: The sign_subject_key_identifier of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_subject_key_identifier
	@sign_subject_key_identifier.setter
	def sign_subject_key_identifier(self,sign_subject_key_identifier):'Sets the sign_subject_key_identifier of this KIRConnectorSettings.\n\n        Subject Key Identifier (2.5.29.14) field of QSeal certificate as hex string   # noqa: E501\n\n        :param sign_subject_key_identifier: The sign_subject_key_identifier of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._sign_subject_key_identifier=sign_subject_key_identifier
	@property
	def sign_fingerprint(self):'Gets the sign_fingerprint of this KIRConnectorSettings.  # noqa: E501\n\n        Fingerprint of the QSeal certificate (base64 encoded without padding)  # noqa: E501\n\n        :return: The sign_fingerprint of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_fingerprint
	@sign_fingerprint.setter
	def sign_fingerprint(self,sign_fingerprint):'Sets the sign_fingerprint of this KIRConnectorSettings.\n\n        Fingerprint of the QSeal certificate (base64 encoded without padding)  # noqa: E501\n\n        :param sign_fingerprint: The sign_fingerprint of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._sign_fingerprint=sign_fingerprint
	@property
	def sign_cert_url(self):'Gets the sign_cert_url of this KIRConnectorSettings.  # noqa: E501\n\n        Public URL where QSeal certificate can be found  # noqa: E501\n\n        :return: The sign_cert_url of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_cert_url
	@sign_cert_url.setter
	def sign_cert_url(self,sign_cert_url):'Sets the sign_cert_url of this KIRConnectorSettings.\n\n        Public URL where QSeal certificate can be found  # noqa: E501\n\n        :param sign_cert_url: The sign_cert_url of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._sign_cert_url=sign_cert_url
	@property
	def payment_auth_redirect_uri(self):'Gets the payment_auth_redirect_uri of this KIRConnectorSettings.  # noqa: E501\n\n        Payment redirect URI  # noqa: E501\n\n        :return: The payment_auth_redirect_uri of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_redirect_uri
	@payment_auth_redirect_uri.setter
	def payment_auth_redirect_uri(self,payment_auth_redirect_uri):'Sets the payment_auth_redirect_uri of this KIRConnectorSettings.\n\n        Payment redirect URI  # noqa: E501\n\n        :param payment_auth_redirect_uri: The payment_auth_redirect_uri of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_redirect_uri=payment_auth_redirect_uri
	@property
	def payment_auth_state(self):'Gets the payment_auth_state of this KIRConnectorSettings.  # noqa: E501\n\n        Payment authentication state  # noqa: E501\n\n        :return: The payment_auth_state of this KIRConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_state
	@payment_auth_state.setter
	def payment_auth_state(self,payment_auth_state):'Sets the payment_auth_state of this KIRConnectorSettings.\n\n        Payment authentication state  # noqa: E501\n\n        :param payment_auth_state: The payment_auth_state of this KIRConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_state=payment_auth_state
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(KIRConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,KIRConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other