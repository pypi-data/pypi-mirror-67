'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_H='payment_auth_state'
_G='payment_auth_redirect_uri'
_F='client_id'
_E='key_path'
_D='cert_path'
_C='country'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class SEBConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_D:_B,_E:_B,_F:_B,_G:_B,_H:_B};attribute_map={_C:_C,_D:'certPath',_E:'keyPath',_F:'clientId',_G:'paymentAuthRedirectUri',_H:'paymentAuthState'}
	def __init__(A,country=_A,cert_path=_A,key_path=_A,client_id=_A,payment_auth_redirect_uri=_A,payment_auth_state=_A):
		'SEBConnectorSettings - a model defined in Swagger';C=payment_auth_state;B=payment_auth_redirect_uri;A._country=_A;A._cert_path=_A;A._key_path=_A;A._client_id=_A;A._payment_auth_redirect_uri=_A;A._payment_auth_state=_A;A.discriminator=_A;A.country=country;A.cert_path=cert_path;A.key_path=key_path;A.client_id=client_id
		if B is not _A:A.payment_auth_redirect_uri=B
		if C is not _A:A.payment_auth_state=C
	@property
	def country(self):'Gets the country of this SEBConnectorSettings.  # noqa: E501\n\n        Bank country (only clients from the specified will be able to authenticate). Possilbe values: `EE` - Estonia `LV` - Latvia `LT` - Lithuania   # noqa: E501\n\n        :return: The country of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._country
	@country.setter
	def country(self,country):
		'Sets the country of this SEBConnectorSettings.\n\n        Bank country (only clients from the specified will be able to authenticate). Possilbe values: `EE` - Estonia `LV` - Latvia `LT` - Lithuania   # noqa: E501\n\n        :param country: The country of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=country
		if A is _A:raise ValueError('Invalid value for `country`, must not be `None`')
		self._country=A
	@property
	def cert_path(self):'Gets the cert_path of this SEBConnectorSettings.  # noqa: E501\n\n        Path to QWAC certificate in PEM format. Test certificate (for accessing sandbox environment) can be downloaded from SEB Developer Portal.   # noqa: E501\n\n        :return: The cert_path of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._cert_path
	@cert_path.setter
	def cert_path(self,cert_path):
		'Sets the cert_path of this SEBConnectorSettings.\n\n        Path to QWAC certificate in PEM format. Test certificate (for accessing sandbox environment) can be downloaded from SEB Developer Portal.   # noqa: E501\n\n        :param cert_path: The cert_path of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=cert_path
		if A is _A:raise ValueError('Invalid value for `cert_path`, must not be `None`')
		self._cert_path=A
	@property
	def key_path(self):'Gets the key_path of this SEBConnectorSettings.  # noqa: E501\n\n        Path to QWAC certificate private key in PEM format.   # noqa: E501\n\n        :return: The key_path of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._key_path
	@key_path.setter
	def key_path(self,key_path):
		'Sets the key_path of this SEBConnectorSettings.\n\n        Path to QWAC certificate private key in PEM format.   # noqa: E501\n\n        :param key_path: The key_path of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=key_path
		if A is _A:raise ValueError('Invalid value for `key_path`, must not be `None`')
		self._key_path=A
	@property
	def client_id(self):'Gets the client_id of this SEBConnectorSettings.  # noqa: E501\n\n        API client ID (obtained from SEB Developer Portal)  # noqa: E501\n\n        :return: The client_id of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this SEBConnectorSettings.\n\n        API client ID (obtained from SEB Developer Portal)  # noqa: E501\n\n        :param client_id: The client_id of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def payment_auth_redirect_uri(self):'Gets the payment_auth_redirect_uri of this SEBConnectorSettings.  # noqa: E501\n\n        URI where clients are redirected to after payment authorization.  # noqa: E501\n\n        :return: The payment_auth_redirect_uri of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_redirect_uri
	@payment_auth_redirect_uri.setter
	def payment_auth_redirect_uri(self,payment_auth_redirect_uri):'Sets the payment_auth_redirect_uri of this SEBConnectorSettings.\n\n        URI where clients are redirected to after payment authorization.  # noqa: E501\n\n        :param payment_auth_redirect_uri: The payment_auth_redirect_uri of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_redirect_uri=payment_auth_redirect_uri
	@property
	def payment_auth_state(self):'Gets the payment_auth_state of this SEBConnectorSettings.  # noqa: E501\n\n        This value returned to paymentAuthRedirectUri after payment authorization.  # noqa: E501\n\n        :return: The payment_auth_state of this SEBConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_state
	@payment_auth_state.setter
	def payment_auth_state(self,payment_auth_state):'Sets the payment_auth_state of this SEBConnectorSettings.\n\n        This value returned to paymentAuthRedirectUri after payment authorization.  # noqa: E501\n\n        :param payment_auth_state: The payment_auth_state of this SEBConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_state=payment_auth_state
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(SEBConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,SEBConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other