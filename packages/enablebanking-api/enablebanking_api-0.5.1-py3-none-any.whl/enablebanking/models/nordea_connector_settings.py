'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_J='payment_auth_state'
_I='payment_auth_redirect_uri'
_H='session_duration'
_G='sign_key_path'
_F='client_secret'
_E='client_id'
_D='language'
_C='country'
_B='str'
_A=None
import pprint,re
from enablebanking.models.connector_settings import ConnectorSettings
class NordeaConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_B,_E:_B,_F:_B,_G:_B,_H:'int',_D:_B,_I:_B,_J:_B};attribute_map={_C:_C,_E:'clientId',_F:'clientSecret',_G:'signKeyPath',_H:'sessionDuration',_D:_D,_I:'paymentAuthRedirectUri',_J:'paymentAuthState'}
	def __init__(A,country=_A,client_id=_A,client_secret=_A,sign_key_path=_A,session_duration=_A,language=_A,payment_auth_redirect_uri=_A,payment_auth_state=_A):
		'NordeaConnectorSettings - a model defined in Swagger';E=payment_auth_state;D=payment_auth_redirect_uri;C=language;B=session_duration;A._country=_A;A._client_id=_A;A._client_secret=_A;A._sign_key_path=_A;A._session_duration=_A;A._language=_A;A._payment_auth_redirect_uri=_A;A._payment_auth_state=_A;A.discriminator=_A;A.country=country;A.client_id=client_id;A.client_secret=client_secret;A.sign_key_path=sign_key_path
		if B is not _A:A.session_duration=B
		if C is not _A:A.language=C
		if D is not _A:A.payment_auth_redirect_uri=D
		if E is not _A:A.payment_auth_state=E
	@property
	def country(self):'Gets the country of this NordeaConnectorSettings.  # noqa: E501\n\n        Bank country (only clients from the specified will be able to authenticate). Possilbe values: `FI` - Finland   # noqa: E501\n\n        :return: The country of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._country
	@country.setter
	def country(self,country):
		'Sets the country of this NordeaConnectorSettings.\n\n        Bank country (only clients from the specified will be able to authenticate). Possilbe values: `FI` - Finland   # noqa: E501\n\n        :param country: The country of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=country
		if A is _A:raise ValueError('Invalid value for `country`, must not be `None`')
		self._country=A
	@property
	def client_id(self):'Gets the client_id of this NordeaConnectorSettings.  # noqa: E501\n\n        API client ID (obtained from Nordea Developer Portal)  # noqa: E501\n\n        :return: The client_id of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this NordeaConnectorSettings.\n\n        API client ID (obtained from Nordea Developer Portal)  # noqa: E501\n\n        :param client_id: The client_id of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def client_secret(self):'Gets the client_secret of this NordeaConnectorSettings.  # noqa: E501\n\n        API client secret (obtained from Nordea Developer Portal)  # noqa: E501\n\n        :return: The client_secret of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_secret
	@client_secret.setter
	def client_secret(self,client_secret):
		'Sets the client_secret of this NordeaConnectorSettings.\n\n        API client secret (obtained from Nordea Developer Portal)  # noqa: E501\n\n        :param client_secret: The client_secret of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_secret
		if A is _A:raise ValueError('Invalid value for `client_secret`, must not be `None`')
		self._client_secret=A
	@property
	def sign_key_path(self):'Gets the sign_key_path of this NordeaConnectorSettings.  # noqa: E501\n\n        Path to Qseal private key in PEM format. Private key in PEM format can be extracted from test certificate from Nordea Developer Portal (provided in PKCS12 format) using openssl utility: `openssl pkcs12 -in source.p12 -out key.pem -nocerts -nodes`   # noqa: E501\n\n        :return: The sign_key_path of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._sign_key_path
	@sign_key_path.setter
	def sign_key_path(self,sign_key_path):
		'Sets the sign_key_path of this NordeaConnectorSettings.\n\n        Path to Qseal private key in PEM format. Private key in PEM format can be extracted from test certificate from Nordea Developer Portal (provided in PKCS12 format) using openssl utility: `openssl pkcs12 -in source.p12 -out key.pem -nocerts -nodes`   # noqa: E501\n\n        :param sign_key_path: The sign_key_path of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=sign_key_path
		if A is _A:raise ValueError('Invalid value for `sign_key_path`, must not be `None`')
		self._sign_key_path=A
	@property
	def session_duration(self):'Gets the session_duration of this NordeaConnectorSettings.  # noqa: E501\n\n        Duration of access authorization in minutes (up to 129600 minutes - 90 days). This value will be overriden with [Access](#access-type).validUntil if provided to [getAuth](#getauth) call.  # noqa: E501\n\n        :return: The session_duration of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: int\n        ';return self._session_duration
	@session_duration.setter
	def session_duration(self,session_duration):'Sets the session_duration of this NordeaConnectorSettings.\n\n        Duration of access authorization in minutes (up to 129600 minutes - 90 days). This value will be overriden with [Access](#access-type).validUntil if provided to [getAuth](#getauth) call.  # noqa: E501\n\n        :param session_duration: The session_duration of this NordeaConnectorSettings.  # noqa: E501\n        :type: int\n        ';self._session_duration=session_duration
	@property
	def language(self):'Gets the language of this NordeaConnectorSettings.  # noqa: E501\n\n        Language of authentication user interface. If country is `FI`, the default language is `fi`  # noqa: E501\n\n        :return: The language of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._language
	@language.setter
	def language(self,language):'Sets the language of this NordeaConnectorSettings.\n\n        Language of authentication user interface. If country is `FI`, the default language is `fi`  # noqa: E501\n\n        :param language: The language of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._language=language
	@property
	def payment_auth_redirect_uri(self):'Gets the payment_auth_redirect_uri of this NordeaConnectorSettings.  # noqa: E501\n\n        State for payment (PISP) authorization flow  # noqa: E501\n\n        :return: The payment_auth_redirect_uri of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_redirect_uri
	@payment_auth_redirect_uri.setter
	def payment_auth_redirect_uri(self,payment_auth_redirect_uri):'Sets the payment_auth_redirect_uri of this NordeaConnectorSettings.\n\n        State for payment (PISP) authorization flow  # noqa: E501\n\n        :param payment_auth_redirect_uri: The payment_auth_redirect_uri of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_redirect_uri=payment_auth_redirect_uri
	@property
	def payment_auth_state(self):'Gets the payment_auth_state of this NordeaConnectorSettings.  # noqa: E501\n\n        Redirect uri for payment (PISP) authorization flow  # noqa: E501\n\n        :return: The payment_auth_state of this NordeaConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._payment_auth_state
	@payment_auth_state.setter
	def payment_auth_state(self,payment_auth_state):'Sets the payment_auth_state of this NordeaConnectorSettings.\n\n        Redirect uri for payment (PISP) authorization flow  # noqa: E501\n\n        :param payment_auth_state: The payment_auth_state of this NordeaConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._payment_auth_state=payment_auth_state
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(NordeaConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,NordeaConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other