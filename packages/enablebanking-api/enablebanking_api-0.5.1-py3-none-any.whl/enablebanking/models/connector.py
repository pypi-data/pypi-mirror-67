'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_N='bool'
_M='required_psu_headers'
_L='aspsp_ids'
_K='refresh_token'
_J='consent_revocation'
_I='auth_info'
_H='modify_consents_info'
_G='payments'
_F='scopes'
_E='countries'
_D='environments'
_C='name'
_B='list[str]'
_A=None
import pprint,re
from enablebanking.models.country_auth_info import CountryAuthInfo
from enablebanking.models.country_modify_consents_info import CountryModifyConsentsInfo
from enablebanking.models.country_payment_types import CountryPaymentTypes
class Connector:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:'str',_D:_B,_E:_B,_F:_B,_H:'list[CountryModifyConsentsInfo]',_I:'list[CountryAuthInfo]',_J:_N,_K:_N,_G:'list[CountryPaymentTypes]',_L:_B,_M:_B};attribute_map={_C:_C,_D:_D,_E:_E,_F:_F,_H:'modifyConsentsInfo',_I:'authInfo',_J:'consentRevocation',_K:'refreshToken',_G:_G,_L:'aspspIds',_M:'requiredPsuHeaders'}
	def __init__(A,name=_A,environments=_A,countries=_A,scopes=_A,modify_consents_info=_A,auth_info=_A,consent_revocation=_A,refresh_token=_A,payments=_A,aspsp_ids=_A,required_psu_headers=_A):
		'Connector - a model defined in Swagger';K=required_psu_headers;J=aspsp_ids;I=payments;H=refresh_token;G=consent_revocation;F=auth_info;E=modify_consents_info;D=scopes;C=countries;B=environments;A._name=_A;A._environments=_A;A._countries=_A;A._scopes=_A;A._modify_consents_info=_A;A._auth_info=_A;A._consent_revocation=_A;A._refresh_token=_A;A._payments=_A;A._aspsp_ids=_A;A._required_psu_headers=_A;A.discriminator=_A
		if name is not _A:A.name=name
		if B is not _A:A.environments=B
		if C is not _A:A.countries=C
		if D is not _A:A.scopes=D
		if E is not _A:A.modify_consents_info=E
		if F is not _A:A.auth_info=F
		if G is not _A:A.consent_revocation=G
		if H is not _A:A.refresh_token=H
		if I is not _A:A.payments=I
		if J is not _A:A.aspsp_ids=J
		if K is not _A:A.required_psu_headers=K
	@property
	def name(self):'Gets the name of this Connector.  # noqa: E501\n\n        Name of the connector  # noqa: E501\n\n        :return: The name of this Connector.  # noqa: E501\n        :rtype: str\n        ';return self._name
	@name.setter
	def name(self,name):'Sets the name of this Connector.\n\n        Name of the connector  # noqa: E501\n\n        :param name: The name of this Connector.  # noqa: E501\n        :type: str\n        ';self._name=name
	@property
	def environments(self):'Gets the environments of this Connector.  # noqa: E501\n\n        List of supported environments (sandbox/production)  # noqa: E501\n\n        :return: The environments of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._environments
	@environments.setter
	def environments(self,environments):'Sets the environments of this Connector.\n\n        List of supported environments (sandbox/production)  # noqa: E501\n\n        :param environments: The environments of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._environments=environments
	@property
	def countries(self):'Gets the countries of this Connector.  # noqa: E501\n\n        List of supported countries supported  # noqa: E501\n\n        :return: The countries of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._countries
	@countries.setter
	def countries(self,countries):'Sets the countries of this Connector.\n\n        List of supported countries supported  # noqa: E501\n\n        :param countries: The countries of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._countries=countries
	@property
	def scopes(self):'Gets the scopes of this Connector.  # noqa: E501\n\n        List of supported APIs (aisp/pisp) supported  # noqa: E501\n\n        :return: The scopes of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._scopes
	@scopes.setter
	def scopes(self,scopes):'Sets the scopes of this Connector.\n\n        List of supported APIs (aisp/pisp) supported  # noqa: E501\n\n        :param scopes: The scopes of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._scopes=scopes
	@property
	def modify_consents_info(self):'Gets the modify_consents_info of this Connector.  # noqa: E501\n\n        Details about usage of `modifyConsents` method by country  # noqa: E501\n\n        :return: The modify_consents_info of this Connector.  # noqa: E501\n        :rtype: list[CountryModifyConsentsInfo]\n        ';return self._modify_consents_info
	@modify_consents_info.setter
	def modify_consents_info(self,modify_consents_info):'Sets the modify_consents_info of this Connector.\n\n        Details about usage of `modifyConsents` method by country  # noqa: E501\n\n        :param modify_consents_info: The modify_consents_info of this Connector.  # noqa: E501\n        :type: list[CountryModifyConsentsInfo]\n        ';self._modify_consents_info=modify_consents_info
	@property
	def auth_info(self):'Gets the auth_info of this Connector.  # noqa: E501\n\n        Details about usage of `getAuth` method by country  # noqa: E501\n\n        :return: The auth_info of this Connector.  # noqa: E501\n        :rtype: list[CountryAuthInfo]\n        ';return self._auth_info
	@auth_info.setter
	def auth_info(self,auth_info):'Sets the auth_info of this Connector.\n\n        Details about usage of `getAuth` method by country  # noqa: E501\n\n        :param auth_info: The auth_info of this Connector.  # noqa: E501\n        :type: list[CountryAuthInfo]\n        ';self._auth_info=auth_info
	@property
	def consent_revocation(self):'Gets the consent_revocation of this Connector.  # noqa: E501\n\n        Flag showning if the consent revocation is supported in the connector  # noqa: E501\n\n        :return: The consent_revocation of this Connector.  # noqa: E501\n        :rtype: bool\n        ';return self._consent_revocation
	@consent_revocation.setter
	def consent_revocation(self,consent_revocation):'Sets the consent_revocation of this Connector.\n\n        Flag showning if the consent revocation is supported in the connector  # noqa: E501\n\n        :param consent_revocation: The consent_revocation of this Connector.  # noqa: E501\n        :type: bool\n        ';self._consent_revocation=consent_revocation
	@property
	def refresh_token(self):'Gets the refresh_token of this Connector.  # noqa: E501\n\n        Flag showning if the `refresh_token` grant type is supported in the connector  # noqa: E501\n\n        :return: The refresh_token of this Connector.  # noqa: E501\n        :rtype: bool\n        ';return self._refresh_token
	@refresh_token.setter
	def refresh_token(self,refresh_token):'Sets the refresh_token of this Connector.\n\n        Flag showning if the `refresh_token` grant type is supported in the connector  # noqa: E501\n\n        :param refresh_token: The refresh_token of this Connector.  # noqa: E501\n        :type: bool\n        ';self._refresh_token=refresh_token
	@property
	def payments(self):'Gets the payments of this Connector.  # noqa: E501\n\n        Supported payment types by country  # noqa: E501\n\n        :return: The payments of this Connector.  # noqa: E501\n        :rtype: list[CountryPaymentTypes]\n        ';return self._payments
	@payments.setter
	def payments(self,payments):'Sets the payments of this Connector.\n\n        Supported payment types by country  # noqa: E501\n\n        :param payments: The payments of this Connector.  # noqa: E501\n        :type: list[CountryPaymentTypes]\n        ';self._payments=payments
	@property
	def aspsp_ids(self):'Gets the aspsp_ids of this Connector.  # noqa: E501\n\n        List of all ASPSP IDs supported in the connector  # noqa: E501\n\n        :return: The aspsp_ids of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._aspsp_ids
	@aspsp_ids.setter
	def aspsp_ids(self,aspsp_ids):'Sets the aspsp_ids of this Connector.\n\n        List of all ASPSP IDs supported in the connector  # noqa: E501\n\n        :param aspsp_ids: The aspsp_ids of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._aspsp_ids=aspsp_ids
	@property
	def required_psu_headers(self):'Gets the required_psu_headers of this Connector.  # noqa: E501\n\n        List of required PSU headers  # noqa: E501\n\n        :return: The required_psu_headers of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._required_psu_headers
	@required_psu_headers.setter
	def required_psu_headers(self,required_psu_headers):'Sets the required_psu_headers of this Connector.\n\n        List of required PSU headers  # noqa: E501\n\n        :param required_psu_headers: The required_psu_headers of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._required_psu_headers=required_psu_headers
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Connector,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Connector):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other