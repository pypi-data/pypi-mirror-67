'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='response_body'
_E='str'
_D='jws'
_C='message'
_B='status'
_A=None
import pprint,re
class InvalidResponseSignatureException:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'int',_C:_E,_D:_E,_F:_E};attribute_map={_B:_B,_C:_C,_D:_D,_F:'responseBody'}
	def __init__(A,status=_A,message=_A,jws=_A,response_body=_A):'InvalidResponseSignatureException - a model defined in Swagger';A._status=_A;A._message=_A;A._jws=_A;A._response_body=_A;A.discriminator=_A;A.status=status;A.message=message;A.jws=jws;A.response_body=response_body
	@property
	def status(self):'Gets the status of this InvalidResponseSignatureException.  # noqa: E501\n\n        Error code  # noqa: E501\n\n        :return: The status of this InvalidResponseSignatureException.  # noqa: E501\n        :rtype: int\n        ';return self._status
	@status.setter
	def status(self,status):
		'Sets the status of this InvalidResponseSignatureException.\n\n        Error code  # noqa: E501\n\n        :param status: The status of this InvalidResponseSignatureException.  # noqa: E501\n        :type: int\n        ';A=status
		if A is _A:raise ValueError('Invalid value for `status`, must not be `None`')
		self._status=A
	@property
	def message(self):'Gets the message of this InvalidResponseSignatureException.  # noqa: E501\n\n        Textual reason phrase  # noqa: E501\n\n        :return: The message of this InvalidResponseSignatureException.  # noqa: E501\n        :rtype: str\n        ';return self._message
	@message.setter
	def message(self,message):
		'Sets the message of this InvalidResponseSignatureException.\n\n        Textual reason phrase  # noqa: E501\n\n        :param message: The message of this InvalidResponseSignatureException.  # noqa: E501\n        :type: str\n        ';A=message
		if A is _A:raise ValueError('Invalid value for `message`, must not be `None`')
		if A is not _A and len(A)>140:raise ValueError('Invalid value for `message`, length must be less than or equal to `140`')
		self._message=A
	@property
	def jws(self):'Gets the jws of this InvalidResponseSignatureException.  # noqa: E501\n\n        JSON web signature  # noqa: E501\n\n        :return: The jws of this InvalidResponseSignatureException.  # noqa: E501\n        :rtype: str\n        ';return self._jws
	@jws.setter
	def jws(self,jws):
		'Sets the jws of this InvalidResponseSignatureException.\n\n        JSON web signature  # noqa: E501\n\n        :param jws: The jws of this InvalidResponseSignatureException.  # noqa: E501\n        :type: str\n        '
		if jws is _A:raise ValueError('Invalid value for `jws`, must not be `None`')
		self._jws=jws
	@property
	def response_body(self):'Gets the response_body of this InvalidResponseSignatureException.  # noqa: E501\n\n        Body of http response  # noqa: E501\n\n        :return: The response_body of this InvalidResponseSignatureException.  # noqa: E501\n        :rtype: str\n        ';return self._response_body
	@response_body.setter
	def response_body(self,response_body):
		'Sets the response_body of this InvalidResponseSignatureException.\n\n        Body of http response  # noqa: E501\n\n        :param response_body: The response_body of this InvalidResponseSignatureException.  # noqa: E501\n        :type: str\n        ';A=response_body
		if A is _A:raise ValueError('Invalid value for `response_body`, must not be `None`')
		self._response_body=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(InvalidResponseSignatureException,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,InvalidResponseSignatureException):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other