'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_D='limit_days'
_C='details'
_B='statuses'
_A=None
import pprint,re
from enablebanking.models.transaction_status import TransactionStatus
class TransactionsAccess:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'list[TransactionStatus]',_C:'bool',_D:'int'};attribute_map={_B:_B,_C:_C,_D:'limitDays'}
	def __init__(A,statuses=_A,details=_A,limit_days=_A):
		'TransactionsAccess - a model defined in Swagger';D=limit_days;C=details;B=statuses;A._statuses=_A;A._details=_A;A._limit_days=_A;A.discriminator=_A
		if B is not _A:A.statuses=B
		if C is not _A:A.details=C
		if D is not _A:A.limit_days=D
	@property
	def statuses(self):'Gets the statuses of this TransactionsAccess.  # noqa: E501\n\n        List of transaction statuses, which are going to be accessed  # noqa: E501\n\n        :return: The statuses of this TransactionsAccess.  # noqa: E501\n        :rtype: list[TransactionStatus]\n        ';return self._statuses
	@statuses.setter
	def statuses(self,statuses):'Sets the statuses of this TransactionsAccess.\n\n        List of transaction statuses, which are going to be accessed  # noqa: E501\n\n        :param statuses: The statuses of this TransactionsAccess.  # noqa: E501\n        :type: list[TransactionStatus]\n        ';self._statuses=statuses
	@property
	def details(self):'Gets the details of this TransactionsAccess.  # noqa: E501\n\n        Indicator that access to transaction details is requested  # noqa: E501\n\n        :return: The details of this TransactionsAccess.  # noqa: E501\n        :rtype: bool\n        ';return self._details
	@details.setter
	def details(self,details):'Sets the details of this TransactionsAccess.\n\n        Indicator that access to transaction details is requested  # noqa: E501\n\n        :param details: The details of this TransactionsAccess.  # noqa: E501\n        :type: bool\n        ';self._details=details
	@property
	def limit_days(self):'Gets the limit_days of this TransactionsAccess.  # noqa: E501\n\n        Number of days in the past to access transactions  # noqa: E501\n\n        :return: The limit_days of this TransactionsAccess.  # noqa: E501\n        :rtype: int\n        ';return self._limit_days
	@limit_days.setter
	def limit_days(self,limit_days):
		'Sets the limit_days of this TransactionsAccess.\n\n        Number of days in the past to access transactions  # noqa: E501\n\n        :param limit_days: The limit_days of this TransactionsAccess.  # noqa: E501\n        :type: int\n        ';A=limit_days
		if A is not _A and A<1:raise ValueError('Invalid value for `limit_days`, must be a value greater than or equal to `1`')
		self._limit_days=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(TransactionsAccess,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,TransactionsAccess):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other