'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_R='PartyIdentification'
_Q='credit_transfer_transaction'
_P='funds_availability'
_O='status_reason_information'
_N='payment_information_status'
_M='charge_bearer'
_L='debtor_currency'
_K='debtor_agent'
_J='debtor_account'
_I='payment_type_information'
_H='initiating_party'
_G='creation_date_time'
_F='payment_information_id'
_E='resource_id'
_D='booking'
_C='purpose'
_B='debtor'
_A=None
import pprint,re
from enablebanking.models.account_identification import AccountIdentification
from enablebanking.models.booking_information import BookingInformation
from enablebanking.models.charge_bearer_code import ChargeBearerCode
from enablebanking.models.creation_date_time import CreationDateTime
from enablebanking.models.credit_transfer_transaction import CreditTransferTransaction
from enablebanking.models.financial_institution_identification import FinancialInstitutionIdentification
from enablebanking.models.funds_availability_information import FundsAvailabilityInformation
from enablebanking.models.party_identification import PartyIdentification
from enablebanking.models.payment_information_id import PaymentInformationId
from enablebanking.models.payment_information_status_code import PaymentInformationStatusCode
from enablebanking.models.payment_type_information import PaymentTypeInformation
from enablebanking.models.purpose_code import PurposeCode
from enablebanking.models.resource_id import ResourceId
from enablebanking.models.status_reason_information import StatusReasonInformation
class PaymentRequestResource:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_E:'ResourceId',_F:'PaymentInformationId',_G:'CreationDateTime',_H:_R,_I:'PaymentTypeInformation',_B:_R,_J:'AccountIdentification',_K:'FinancialInstitutionIdentification',_L:'str',_C:'PurposeCode',_M:'ChargeBearerCode',_N:'PaymentInformationStatusCode',_O:'StatusReasonInformation',_P:'FundsAvailabilityInformation',_D:'BookingInformation',_Q:'list[CreditTransferTransaction]'};attribute_map={_E:'resourceId',_F:'paymentInformationId',_G:'creationDateTime',_H:'initiatingParty',_I:'paymentTypeInformation',_B:_B,_J:'debtorAccount',_K:'debtorAgent',_L:'debtorCurrency',_C:_C,_M:'chargeBearer',_N:'paymentInformationStatus',_O:'statusReasonInformation',_P:'fundsAvailability',_D:_D,_Q:'creditTransferTransaction'}
	def __init__(A,resource_id=_A,payment_information_id=_A,creation_date_time=_A,initiating_party=_A,payment_type_information=_A,debtor=_A,debtor_account=_A,debtor_agent=_A,debtor_currency=_A,purpose=_A,charge_bearer=_A,payment_information_status=_A,status_reason_information=_A,funds_availability=_A,booking=_A,credit_transfer_transaction=_A):
		'PaymentRequestResource - a model defined in Swagger';P=booking;O=funds_availability;N=status_reason_information;M=payment_information_status;L=charge_bearer;K=purpose;J=debtor_currency;I=debtor_agent;H=debtor_account;G=debtor;F=payment_type_information;E=initiating_party;D=creation_date_time;C=payment_information_id;B=resource_id;A._resource_id=_A;A._payment_information_id=_A;A._creation_date_time=_A;A._initiating_party=_A;A._payment_type_information=_A;A._debtor=_A;A._debtor_account=_A;A._debtor_agent=_A;A._debtor_currency=_A;A._purpose=_A;A._charge_bearer=_A;A._payment_information_status=_A;A._status_reason_information=_A;A._funds_availability=_A;A._booking=_A;A._credit_transfer_transaction=_A;A.discriminator=_A
		if B is not _A:A.resource_id=B
		if C is not _A:A.payment_information_id=C
		if D is not _A:A.creation_date_time=D
		if E is not _A:A.initiating_party=E
		if F is not _A:A.payment_type_information=F
		if G is not _A:A.debtor=G
		if H is not _A:A.debtor_account=H
		if I is not _A:A.debtor_agent=I
		if J is not _A:A.debtor_currency=J
		if K is not _A:A.purpose=K
		if L is not _A:A.charge_bearer=L
		if M is not _A:A.payment_information_status=M
		if N is not _A:A.status_reason_information=N
		if O is not _A:A.funds_availability=O
		if P is not _A:A.booking=P
		A.credit_transfer_transaction=credit_transfer_transaction
	@property
	def resource_id(self):'Gets the resource_id of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The resource_id of this PaymentRequestResource.  # noqa: E501\n        :rtype: ResourceId\n        ';return self._resource_id
	@resource_id.setter
	def resource_id(self,resource_id):'Sets the resource_id of this PaymentRequestResource.\n\n\n        :param resource_id: The resource_id of this PaymentRequestResource.  # noqa: E501\n        :type: ResourceId\n        ';self._resource_id=resource_id
	@property
	def payment_information_id(self):'Gets the payment_information_id of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The payment_information_id of this PaymentRequestResource.  # noqa: E501\n        :rtype: PaymentInformationId\n        ';return self._payment_information_id
	@payment_information_id.setter
	def payment_information_id(self,payment_information_id):'Sets the payment_information_id of this PaymentRequestResource.\n\n\n        :param payment_information_id: The payment_information_id of this PaymentRequestResource.  # noqa: E501\n        :type: PaymentInformationId\n        ';self._payment_information_id=payment_information_id
	@property
	def creation_date_time(self):'Gets the creation_date_time of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The creation_date_time of this PaymentRequestResource.  # noqa: E501\n        :rtype: CreationDateTime\n        ';return self._creation_date_time
	@creation_date_time.setter
	def creation_date_time(self,creation_date_time):'Sets the creation_date_time of this PaymentRequestResource.\n\n\n        :param creation_date_time: The creation_date_time of this PaymentRequestResource.  # noqa: E501\n        :type: CreationDateTime\n        ';self._creation_date_time=creation_date_time
	@property
	def initiating_party(self):'Gets the initiating_party of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The initiating_party of this PaymentRequestResource.  # noqa: E501\n        :rtype: PartyIdentification\n        ';return self._initiating_party
	@initiating_party.setter
	def initiating_party(self,initiating_party):'Sets the initiating_party of this PaymentRequestResource.\n\n\n        :param initiating_party: The initiating_party of this PaymentRequestResource.  # noqa: E501\n        :type: PartyIdentification\n        ';self._initiating_party=initiating_party
	@property
	def payment_type_information(self):'Gets the payment_type_information of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The payment_type_information of this PaymentRequestResource.  # noqa: E501\n        :rtype: PaymentTypeInformation\n        ';return self._payment_type_information
	@payment_type_information.setter
	def payment_type_information(self,payment_type_information):'Sets the payment_type_information of this PaymentRequestResource.\n\n\n        :param payment_type_information: The payment_type_information of this PaymentRequestResource.  # noqa: E501\n        :type: PaymentTypeInformation\n        ';self._payment_type_information=payment_type_information
	@property
	def debtor(self):'Gets the debtor of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The debtor of this PaymentRequestResource.  # noqa: E501\n        :rtype: PartyIdentification\n        ';return self._debtor
	@debtor.setter
	def debtor(self,debtor):'Sets the debtor of this PaymentRequestResource.\n\n\n        :param debtor: The debtor of this PaymentRequestResource.  # noqa: E501\n        :type: PartyIdentification\n        ';self._debtor=debtor
	@property
	def debtor_account(self):'Gets the debtor_account of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The debtor_account of this PaymentRequestResource.  # noqa: E501\n        :rtype: AccountIdentification\n        ';return self._debtor_account
	@debtor_account.setter
	def debtor_account(self,debtor_account):'Sets the debtor_account of this PaymentRequestResource.\n\n\n        :param debtor_account: The debtor_account of this PaymentRequestResource.  # noqa: E501\n        :type: AccountIdentification\n        ';self._debtor_account=debtor_account
	@property
	def debtor_agent(self):'Gets the debtor_agent of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The debtor_agent of this PaymentRequestResource.  # noqa: E501\n        :rtype: FinancialInstitutionIdentification\n        ';return self._debtor_agent
	@debtor_agent.setter
	def debtor_agent(self,debtor_agent):'Sets the debtor_agent of this PaymentRequestResource.\n\n\n        :param debtor_agent: The debtor_agent of this PaymentRequestResource.  # noqa: E501\n        :type: FinancialInstitutionIdentification\n        ';self._debtor_agent=debtor_agent
	@property
	def debtor_currency(self):'Gets the debtor_currency of this PaymentRequestResource.  # noqa: E501\n\n        Debtor account currency code  # noqa: E501\n\n        :return: The debtor_currency of this PaymentRequestResource.  # noqa: E501\n        :rtype: str\n        ';return self._debtor_currency
	@debtor_currency.setter
	def debtor_currency(self,debtor_currency):
		'Sets the debtor_currency of this PaymentRequestResource.\n\n        Debtor account currency code  # noqa: E501\n\n        :param debtor_currency: The debtor_currency of this PaymentRequestResource.  # noqa: E501\n        :type: str\n        ';A=debtor_currency
		if A is not _A and len(A)>3:raise ValueError('Invalid value for `debtor_currency`, length must be less than or equal to `3`')
		self._debtor_currency=A
	@property
	def purpose(self):'Gets the purpose of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The purpose of this PaymentRequestResource.  # noqa: E501\n        :rtype: PurposeCode\n        ';return self._purpose
	@purpose.setter
	def purpose(self,purpose):'Sets the purpose of this PaymentRequestResource.\n\n\n        :param purpose: The purpose of this PaymentRequestResource.  # noqa: E501\n        :type: PurposeCode\n        ';self._purpose=purpose
	@property
	def charge_bearer(self):'Gets the charge_bearer of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The charge_bearer of this PaymentRequestResource.  # noqa: E501\n        :rtype: ChargeBearerCode\n        ';return self._charge_bearer
	@charge_bearer.setter
	def charge_bearer(self,charge_bearer):'Sets the charge_bearer of this PaymentRequestResource.\n\n\n        :param charge_bearer: The charge_bearer of this PaymentRequestResource.  # noqa: E501\n        :type: ChargeBearerCode\n        ';self._charge_bearer=charge_bearer
	@property
	def payment_information_status(self):'Gets the payment_information_status of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The payment_information_status of this PaymentRequestResource.  # noqa: E501\n        :rtype: PaymentInformationStatusCode\n        ';return self._payment_information_status
	@payment_information_status.setter
	def payment_information_status(self,payment_information_status):'Sets the payment_information_status of this PaymentRequestResource.\n\n\n        :param payment_information_status: The payment_information_status of this PaymentRequestResource.  # noqa: E501\n        :type: PaymentInformationStatusCode\n        ';self._payment_information_status=payment_information_status
	@property
	def status_reason_information(self):'Gets the status_reason_information of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The status_reason_information of this PaymentRequestResource.  # noqa: E501\n        :rtype: StatusReasonInformation\n        ';return self._status_reason_information
	@status_reason_information.setter
	def status_reason_information(self,status_reason_information):'Sets the status_reason_information of this PaymentRequestResource.\n\n\n        :param status_reason_information: The status_reason_information of this PaymentRequestResource.  # noqa: E501\n        :type: StatusReasonInformation\n        ';self._status_reason_information=status_reason_information
	@property
	def funds_availability(self):'Gets the funds_availability of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The funds_availability of this PaymentRequestResource.  # noqa: E501\n        :rtype: FundsAvailabilityInformation\n        ';return self._funds_availability
	@funds_availability.setter
	def funds_availability(self,funds_availability):'Sets the funds_availability of this PaymentRequestResource.\n\n\n        :param funds_availability: The funds_availability of this PaymentRequestResource.  # noqa: E501\n        :type: FundsAvailabilityInformation\n        ';self._funds_availability=funds_availability
	@property
	def booking(self):'Gets the booking of this PaymentRequestResource.  # noqa: E501\n\n\n        :return: The booking of this PaymentRequestResource.  # noqa: E501\n        :rtype: BookingInformation\n        ';return self._booking
	@booking.setter
	def booking(self,booking):'Sets the booking of this PaymentRequestResource.\n\n\n        :param booking: The booking of this PaymentRequestResource.  # noqa: E501\n        :type: BookingInformation\n        ';self._booking=booking
	@property
	def credit_transfer_transaction(self):'Gets the credit_transfer_transaction of this PaymentRequestResource.  # noqa: E501\n\n        ISO20022: Payment processes required to transfer cash from the debtor to the creditor. API: Each ASPSP will specify a maxItems value for this field taking into accounts its specificities about payment request handling   # noqa: E501\n\n        :return: The credit_transfer_transaction of this PaymentRequestResource.  # noqa: E501\n        :rtype: list[CreditTransferTransaction]\n        ';return self._credit_transfer_transaction
	@credit_transfer_transaction.setter
	def credit_transfer_transaction(self,credit_transfer_transaction):
		'Sets the credit_transfer_transaction of this PaymentRequestResource.\n\n        ISO20022: Payment processes required to transfer cash from the debtor to the creditor. API: Each ASPSP will specify a maxItems value for this field taking into accounts its specificities about payment request handling   # noqa: E501\n\n        :param credit_transfer_transaction: The credit_transfer_transaction of this PaymentRequestResource.  # noqa: E501\n        :type: list[CreditTransferTransaction]\n        ';A=credit_transfer_transaction
		if A is _A:raise ValueError('Invalid value for `credit_transfer_transaction`, must not be `None`')
		self._credit_transfer_transaction=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in D.swagger_types.items():
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(PaymentRequestResource,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,PaymentRequestResource):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other