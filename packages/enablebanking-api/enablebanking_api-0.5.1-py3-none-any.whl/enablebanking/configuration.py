'\n    enable:Banking SDK\n\n    enable:Banking SDK consists of 4 interfaces:  - [Meta](#auth-api) provides information about available connectors; - [Auth](#auth-api) provides PSU (bank user) authentication and token creation   functionality; - [AISP](#aisp-api) provides functions for accessing account information, such as   transactions and balances, on behalf of a PSU; - [PISP](#pisp-api) provides functions for initiating and conforming payment   requests.  The same calls and data structures are used for interacting with different ASPSPs (banks). In order to use each of the interfaces corresponding instance needs to be created. When instantiating any of the interfaces except Meta, ASPSP connector name and settings need to be supplied. The settings differ from one connector to another (although many of them have the same properties) and are described in the [Connectors](#connectors-types) section of the documentation.  enable:Banking SDK interfaces are based on [STET PSD2 specification](https://www.stet.eu/en/psd2/), but have been modified and extended in order to support usage scenarious beyond the original specification.   # noqa: E501\n\n    API version: 0.5.1\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_A=None
import copy,logging,multiprocessing,sys
from http import client as httplib
class TypeWithDefault(type):
	def __init__(A,name,bases,dct):super(TypeWithDefault,A).__init__(name,bases,dct);A._default=_A
	def __call__(A):
		if A._default is _A:A._default=type.__call__(A)
		return copy.copy(A._default)
	def set_default(A,default):A._default=copy.copy(default)
class Configuration:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Ref: https://github.com/swagger-api/swagger-codegen\n    Do not edit the class manually.\n    ';__metaclass__=TypeWithDefault
	def __init__(A):'Constructor';A.host='https://localhost/eb';A.temp_folder_path=_A;A.logger={};A.logger['package_logger']=logging.getLogger('enablebanking');A.logger_format='%(asctime)s %(levelname)s %(message)s';A.logger_stream_handler=_A;A.logger_file_handler=_A;A.logger_file=_A;A.debug=False;A.verify_ssl=True;A.ssl_ca_cert=_A;A.cert_file=_A;A.key_file=_A;A.assert_hostname=_A;A.proxy=_A;A.safe_chars_for_path_param=''
	@property
	def logger_file(self):'The logger file.\n\n        If the logger_file is None, then add stream handler and remove file\n        handler. Otherwise, add file handler and remove stream handler.\n\n        :param value: The logger_file path.\n        :type: str\n        ';return self.__logger_file
	@logger_file.setter
	def logger_file(self,value):
		'The logger file.\n\n        If the logger_file is None, then add stream handler and remove file\n        handler. Otherwise, add file handler and remove stream handler.\n\n        :param value: The logger_file path.\n        :type: str\n        ';A=self;A.__logger_file=value
		if A.__logger_file:
			A.logger_file_handler=logging.FileHandler(A.__logger_file);A.logger_file_handler.setFormatter(A.logger_formatter)
			for (C,B) in A.logger.items():
				B.addHandler(A.logger_file_handler)
				if A.logger_stream_handler:B.removeHandler(A.logger_stream_handler)
		else:
			A.logger_stream_handler=logging.StreamHandler();A.logger_stream_handler.setFormatter(A.logger_formatter)
			for (C,B) in A.logger.items():
				B.addHandler(A.logger_stream_handler)
				if A.logger_file_handler:B.removeHandler(A.logger_file_handler)
	@property
	def debug(self):'Debug status\n\n        :param value: The debug status, True or False.\n        :type: bool\n        ';return self.__debug
	@debug.setter
	def debug(self,value):
		'Debug status\n\n        :param value: The debug status, True or False.\n        :type: bool\n        ';A=self;A.__debug=value
		if A.__debug:
			for (C,B) in A.logger.items():B.setLevel(logging.DEBUG)
			httplib.HTTPConnection.debuglevel=1
		else:
			for (C,B) in A.logger.items():B.setLevel(logging.WARNING)
			httplib.HTTPConnection.debuglevel=0
	@property
	def logger_format(self):'The logger format.\n\n        The logger_formatter will be updated when sets logger_format.\n\n        :param value: The format string.\n        :type: str\n        ';return self.__logger_format
	@logger_format.setter
	def logger_format(self,value):'The logger format.\n\n        The logger_formatter will be updated when sets logger_format.\n\n        :param value: The format string.\n        :type: str\n        ';A=self;A.__logger_format=value;A.logger_formatter=logging.Formatter(A.__logger_format)
	def to_debug_report(A):'Gets the essential information for debugging.\n\n        :return: The report for debugging.\n        ';return 'Python SDK Debug Report:\nOS: {env}\nPython Version: {pyversion}\nVersion of the API: 0.5.1\nSDK Package Version: 0.5.1'.format(env=sys.platform,pyversion=sys.version)