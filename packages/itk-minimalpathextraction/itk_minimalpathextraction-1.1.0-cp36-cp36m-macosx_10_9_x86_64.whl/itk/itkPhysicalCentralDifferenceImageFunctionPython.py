# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPhysicalCentralDifferenceImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPhysicalCentralDifferenceImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkPhysicalCentralDifferenceImageFunctionPython
            return _itkPhysicalCentralDifferenceImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPhysicalCentralDifferenceImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPhysicalCentralDifferenceImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPhysicalCentralDifferenceImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import itkContinuousIndexPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython

def itkPhysicalCentralDifferenceImageFunctionID3float_New():
  return itkPhysicalCentralDifferenceImageFunctionID3float.New()


def itkPhysicalCentralDifferenceImageFunctionIF3float_New():
  return itkPhysicalCentralDifferenceImageFunctionIF3float.New()


def itkPhysicalCentralDifferenceImageFunctionIUS3float_New():
  return itkPhysicalCentralDifferenceImageFunctionIUS3float.New()


def itkPhysicalCentralDifferenceImageFunctionIUC3float_New():
  return itkPhysicalCentralDifferenceImageFunctionIUC3float.New()


def itkPhysicalCentralDifferenceImageFunctionISS3float_New():
  return itkPhysicalCentralDifferenceImageFunctionISS3float.New()


def itkPhysicalCentralDifferenceImageFunctionID2float_New():
  return itkPhysicalCentralDifferenceImageFunctionID2float.New()


def itkPhysicalCentralDifferenceImageFunctionIF2float_New():
  return itkPhysicalCentralDifferenceImageFunctionIF2float.New()


def itkPhysicalCentralDifferenceImageFunctionIUS2float_New():
  return itkPhysicalCentralDifferenceImageFunctionIUS2float.New()


def itkPhysicalCentralDifferenceImageFunctionIUC2float_New():
  return itkPhysicalCentralDifferenceImageFunctionIUC2float.New()


def itkPhysicalCentralDifferenceImageFunctionISS2float_New():
  return itkPhysicalCentralDifferenceImageFunctionISS2float.New()


def itkImageFunctionID3CVdouble3float_New():
  return itkImageFunctionID3CVdouble3float.New()


def itkImageFunctionIF3CVdouble3float_New():
  return itkImageFunctionIF3CVdouble3float.New()


def itkImageFunctionIUS3CVdouble3float_New():
  return itkImageFunctionIUS3CVdouble3float.New()


def itkImageFunctionIUC3CVdouble3float_New():
  return itkImageFunctionIUC3CVdouble3float.New()


def itkImageFunctionISS3CVdouble3float_New():
  return itkImageFunctionISS3CVdouble3float.New()


def itkImageFunctionID2CVdouble2float_New():
  return itkImageFunctionID2CVdouble2float.New()


def itkImageFunctionIF2CVdouble2float_New():
  return itkImageFunctionIF2CVdouble2float.New()


def itkImageFunctionIUS2CVdouble2float_New():
  return itkImageFunctionIUS2CVdouble2float.New()


def itkImageFunctionIUC2CVdouble2float_New():
  return itkImageFunctionIUC2CVdouble2float.New()


def itkImageFunctionISS2CVdouble2float_New():
  return itkImageFunctionISS2CVdouble2float.New()


def itkFunctionBasePF3CVdouble3_New():
  return itkFunctionBasePF3CVdouble3.New()


def itkFunctionBasePF2CVdouble2_New():
  return itkFunctionBasePF2CVdouble2.New()

class itkFunctionBasePF2CVdouble2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF2CVdouble2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF2') -> "itkCovariantVectorD2":
        """Evaluate(itkFunctionBasePF2CVdouble2 self, itkPointF2 input) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_Evaluate(self, input)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkFunctionBasePF2CVdouble2

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF2CVdouble2 *":
        """cast(itkLightObject obj) -> itkFunctionBasePF2CVdouble2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF2CVdouble2

        Create a new object of the class itkFunctionBasePF2CVdouble2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF2CVdouble2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF2CVdouble2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF2CVdouble2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF2CVdouble2.Evaluate = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_Evaluate, None, itkFunctionBasePF2CVdouble2)
itkFunctionBasePF2CVdouble2_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_swigregister
itkFunctionBasePF2CVdouble2_swigregister(itkFunctionBasePF2CVdouble2)

def itkFunctionBasePF2CVdouble2_cast(obj: 'itkLightObject') -> "itkFunctionBasePF2CVdouble2 *":
    """itkFunctionBasePF2CVdouble2_cast(itkLightObject obj) -> itkFunctionBasePF2CVdouble2"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_cast(obj)

class itkFunctionBasePF3CVdouble3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF3CVdouble3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF3') -> "itkCovariantVectorD3":
        """Evaluate(itkFunctionBasePF3CVdouble3 self, itkPointF3 input) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_Evaluate(self, input)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkFunctionBasePF3CVdouble3

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF3CVdouble3 *":
        """cast(itkLightObject obj) -> itkFunctionBasePF3CVdouble3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF3CVdouble3

        Create a new object of the class itkFunctionBasePF3CVdouble3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF3CVdouble3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF3CVdouble3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF3CVdouble3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF3CVdouble3.Evaluate = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_Evaluate, None, itkFunctionBasePF3CVdouble3)
itkFunctionBasePF3CVdouble3_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_swigregister
itkFunctionBasePF3CVdouble3_swigregister(itkFunctionBasePF3CVdouble3)

def itkFunctionBasePF3CVdouble3_cast(obj: 'itkLightObject') -> "itkFunctionBasePF3CVdouble3 *":
    """itkFunctionBasePF3CVdouble3_cast(itkLightObject obj) -> itkFunctionBasePF3CVdouble3"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_cast(obj)

class itkImageFunctionID2CVdouble2float(itkFunctionBasePF2CVdouble2):
    """Proxy of C++ itkImageFunctionID2CVdouble2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageD2') -> "void":
        """SetInputImage(itkImageFunctionID2CVdouble2float self, itkImageD2 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageD2 const *":
        """GetInputImage(itkImageFunctionID2CVdouble2float self) -> itkImageD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex2') -> "itkCovariantVectorD2":
        """EvaluateAtIndex(itkImageFunctionID2CVdouble2float self, itkIndex2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF2') -> "itkCovariantVectorD2":
        """EvaluateAtContinuousIndex(itkImageFunctionID2CVdouble2float self, itkContinuousIndexF2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionID2CVdouble2float self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionID2CVdouble2float self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionID2CVdouble2float self, itkPointF2 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF2', index: 'itkIndex2') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionID2CVdouble2float self, itkPointF2 point, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF2', cindex: 'itkContinuousIndexF2') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionID2CVdouble2float self, itkPointF2 point, itkContinuousIndexF2 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF2', index: 'itkIndex2') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionID2CVdouble2float self, itkContinuousIndexF2 cindex, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex2 const &":
        """GetStartIndex(itkImageFunctionID2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex2 const &":
        """GetEndIndex(itkImageFunctionID2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetStartContinuousIndex(itkImageFunctionID2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetEndContinuousIndex(itkImageFunctionID2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionID2CVdouble2float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionID2CVdouble2float *":
        """cast(itkLightObject obj) -> itkImageFunctionID2CVdouble2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionID2CVdouble2float

        Create a new object of the class itkImageFunctionID2CVdouble2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionID2CVdouble2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionID2CVdouble2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionID2CVdouble2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionID2CVdouble2float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_SetInputImage, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetInputImage, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtContinuousIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_IsInsideBuffer, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToNearestIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToContinuousIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartContinuousIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndContinuousIndex, None, itkImageFunctionID2CVdouble2float)
itkImageFunctionID2CVdouble2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_swigregister
itkImageFunctionID2CVdouble2float_swigregister(itkImageFunctionID2CVdouble2float)

def itkImageFunctionID2CVdouble2float_cast(obj: 'itkLightObject') -> "itkImageFunctionID2CVdouble2float *":
    """itkImageFunctionID2CVdouble2float_cast(itkLightObject obj) -> itkImageFunctionID2CVdouble2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_cast(obj)

class itkImageFunctionID3CVdouble3float(itkFunctionBasePF3CVdouble3):
    """Proxy of C++ itkImageFunctionID3CVdouble3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageD3') -> "void":
        """SetInputImage(itkImageFunctionID3CVdouble3float self, itkImageD3 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageD3 const *":
        """GetInputImage(itkImageFunctionID3CVdouble3float self) -> itkImageD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex3') -> "itkCovariantVectorD3":
        """EvaluateAtIndex(itkImageFunctionID3CVdouble3float self, itkIndex3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF3') -> "itkCovariantVectorD3":
        """EvaluateAtContinuousIndex(itkImageFunctionID3CVdouble3float self, itkContinuousIndexF3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionID3CVdouble3float self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionID3CVdouble3float self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionID3CVdouble3float self, itkPointF3 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF3', index: 'itkIndex3') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionID3CVdouble3float self, itkPointF3 point, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF3', cindex: 'itkContinuousIndexF3') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionID3CVdouble3float self, itkPointF3 point, itkContinuousIndexF3 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF3', index: 'itkIndex3') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionID3CVdouble3float self, itkContinuousIndexF3 cindex, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex3 const &":
        """GetStartIndex(itkImageFunctionID3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex3 const &":
        """GetEndIndex(itkImageFunctionID3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetStartContinuousIndex(itkImageFunctionID3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetEndContinuousIndex(itkImageFunctionID3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionID3CVdouble3float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionID3CVdouble3float *":
        """cast(itkLightObject obj) -> itkImageFunctionID3CVdouble3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionID3CVdouble3float

        Create a new object of the class itkImageFunctionID3CVdouble3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionID3CVdouble3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionID3CVdouble3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionID3CVdouble3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionID3CVdouble3float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_SetInputImage, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetInputImage, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtContinuousIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_IsInsideBuffer, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToNearestIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToContinuousIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartContinuousIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndContinuousIndex, None, itkImageFunctionID3CVdouble3float)
itkImageFunctionID3CVdouble3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_swigregister
itkImageFunctionID3CVdouble3float_swigregister(itkImageFunctionID3CVdouble3float)

def itkImageFunctionID3CVdouble3float_cast(obj: 'itkLightObject') -> "itkImageFunctionID3CVdouble3float *":
    """itkImageFunctionID3CVdouble3float_cast(itkLightObject obj) -> itkImageFunctionID3CVdouble3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_cast(obj)

class itkImageFunctionIF2CVdouble2float(itkFunctionBasePF2CVdouble2):
    """Proxy of C++ itkImageFunctionIF2CVdouble2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageF2') -> "void":
        """SetInputImage(itkImageFunctionIF2CVdouble2float self, itkImageF2 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageF2 const *":
        """GetInputImage(itkImageFunctionIF2CVdouble2float self) -> itkImageF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex2') -> "itkCovariantVectorD2":
        """EvaluateAtIndex(itkImageFunctionIF2CVdouble2float self, itkIndex2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF2') -> "itkCovariantVectorD2":
        """EvaluateAtContinuousIndex(itkImageFunctionIF2CVdouble2float self, itkContinuousIndexF2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIF2CVdouble2float self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2CVdouble2float self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2CVdouble2float self, itkPointF2 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF2', index: 'itkIndex2') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIF2CVdouble2float self, itkPointF2 point, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF2', cindex: 'itkContinuousIndexF2') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIF2CVdouble2float self, itkPointF2 point, itkContinuousIndexF2 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF2', index: 'itkIndex2') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIF2CVdouble2float self, itkContinuousIndexF2 cindex, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex2 const &":
        """GetStartIndex(itkImageFunctionIF2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex2 const &":
        """GetEndIndex(itkImageFunctionIF2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetStartContinuousIndex(itkImageFunctionIF2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetEndContinuousIndex(itkImageFunctionIF2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIF2CVdouble2float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIF2CVdouble2float *":
        """cast(itkLightObject obj) -> itkImageFunctionIF2CVdouble2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF2CVdouble2float

        Create a new object of the class itkImageFunctionIF2CVdouble2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF2CVdouble2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF2CVdouble2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF2CVdouble2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF2CVdouble2float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_SetInputImage, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetInputImage, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtContinuousIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_IsInsideBuffer, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToNearestIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToContinuousIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartContinuousIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndContinuousIndex, None, itkImageFunctionIF2CVdouble2float)
itkImageFunctionIF2CVdouble2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_swigregister
itkImageFunctionIF2CVdouble2float_swigregister(itkImageFunctionIF2CVdouble2float)

def itkImageFunctionIF2CVdouble2float_cast(obj: 'itkLightObject') -> "itkImageFunctionIF2CVdouble2float *":
    """itkImageFunctionIF2CVdouble2float_cast(itkLightObject obj) -> itkImageFunctionIF2CVdouble2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_cast(obj)

class itkImageFunctionIF3CVdouble3float(itkFunctionBasePF3CVdouble3):
    """Proxy of C++ itkImageFunctionIF3CVdouble3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageF3') -> "void":
        """SetInputImage(itkImageFunctionIF3CVdouble3float self, itkImageF3 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageF3 const *":
        """GetInputImage(itkImageFunctionIF3CVdouble3float self) -> itkImageF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex3') -> "itkCovariantVectorD3":
        """EvaluateAtIndex(itkImageFunctionIF3CVdouble3float self, itkIndex3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF3') -> "itkCovariantVectorD3":
        """EvaluateAtContinuousIndex(itkImageFunctionIF3CVdouble3float self, itkContinuousIndexF3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIF3CVdouble3float self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3CVdouble3float self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3CVdouble3float self, itkPointF3 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF3', index: 'itkIndex3') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIF3CVdouble3float self, itkPointF3 point, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF3', cindex: 'itkContinuousIndexF3') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIF3CVdouble3float self, itkPointF3 point, itkContinuousIndexF3 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF3', index: 'itkIndex3') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIF3CVdouble3float self, itkContinuousIndexF3 cindex, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex3 const &":
        """GetStartIndex(itkImageFunctionIF3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex3 const &":
        """GetEndIndex(itkImageFunctionIF3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetStartContinuousIndex(itkImageFunctionIF3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetEndContinuousIndex(itkImageFunctionIF3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIF3CVdouble3float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIF3CVdouble3float *":
        """cast(itkLightObject obj) -> itkImageFunctionIF3CVdouble3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF3CVdouble3float

        Create a new object of the class itkImageFunctionIF3CVdouble3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF3CVdouble3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF3CVdouble3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF3CVdouble3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF3CVdouble3float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_SetInputImage, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetInputImage, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtContinuousIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_IsInsideBuffer, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToNearestIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToContinuousIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartContinuousIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndContinuousIndex, None, itkImageFunctionIF3CVdouble3float)
itkImageFunctionIF3CVdouble3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_swigregister
itkImageFunctionIF3CVdouble3float_swigregister(itkImageFunctionIF3CVdouble3float)

def itkImageFunctionIF3CVdouble3float_cast(obj: 'itkLightObject') -> "itkImageFunctionIF3CVdouble3float *":
    """itkImageFunctionIF3CVdouble3float_cast(itkLightObject obj) -> itkImageFunctionIF3CVdouble3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_cast(obj)

class itkImageFunctionISS2CVdouble2float(itkFunctionBasePF2CVdouble2):
    """Proxy of C++ itkImageFunctionISS2CVdouble2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageSS2') -> "void":
        """SetInputImage(itkImageFunctionISS2CVdouble2float self, itkImageSS2 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageSS2 const *":
        """GetInputImage(itkImageFunctionISS2CVdouble2float self) -> itkImageSS2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex2') -> "itkCovariantVectorD2":
        """EvaluateAtIndex(itkImageFunctionISS2CVdouble2float self, itkIndex2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF2') -> "itkCovariantVectorD2":
        """EvaluateAtContinuousIndex(itkImageFunctionISS2CVdouble2float self, itkContinuousIndexF2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionISS2CVdouble2float self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2CVdouble2float self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2CVdouble2float self, itkPointF2 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF2', index: 'itkIndex2') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionISS2CVdouble2float self, itkPointF2 point, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF2', cindex: 'itkContinuousIndexF2') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionISS2CVdouble2float self, itkPointF2 point, itkContinuousIndexF2 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF2', index: 'itkIndex2') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionISS2CVdouble2float self, itkContinuousIndexF2 cindex, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex2 const &":
        """GetStartIndex(itkImageFunctionISS2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex2 const &":
        """GetEndIndex(itkImageFunctionISS2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetStartContinuousIndex(itkImageFunctionISS2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetEndContinuousIndex(itkImageFunctionISS2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionISS2CVdouble2float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionISS2CVdouble2float *":
        """cast(itkLightObject obj) -> itkImageFunctionISS2CVdouble2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS2CVdouble2float

        Create a new object of the class itkImageFunctionISS2CVdouble2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS2CVdouble2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS2CVdouble2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS2CVdouble2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS2CVdouble2float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_SetInputImage, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetInputImage, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtContinuousIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_IsInsideBuffer, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToNearestIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToContinuousIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartContinuousIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndContinuousIndex, None, itkImageFunctionISS2CVdouble2float)
itkImageFunctionISS2CVdouble2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_swigregister
itkImageFunctionISS2CVdouble2float_swigregister(itkImageFunctionISS2CVdouble2float)

def itkImageFunctionISS2CVdouble2float_cast(obj: 'itkLightObject') -> "itkImageFunctionISS2CVdouble2float *":
    """itkImageFunctionISS2CVdouble2float_cast(itkLightObject obj) -> itkImageFunctionISS2CVdouble2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_cast(obj)

class itkImageFunctionISS3CVdouble3float(itkFunctionBasePF3CVdouble3):
    """Proxy of C++ itkImageFunctionISS3CVdouble3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageSS3') -> "void":
        """SetInputImage(itkImageFunctionISS3CVdouble3float self, itkImageSS3 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageSS3 const *":
        """GetInputImage(itkImageFunctionISS3CVdouble3float self) -> itkImageSS3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex3') -> "itkCovariantVectorD3":
        """EvaluateAtIndex(itkImageFunctionISS3CVdouble3float self, itkIndex3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF3') -> "itkCovariantVectorD3":
        """EvaluateAtContinuousIndex(itkImageFunctionISS3CVdouble3float self, itkContinuousIndexF3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionISS3CVdouble3float self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3CVdouble3float self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3CVdouble3float self, itkPointF3 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF3', index: 'itkIndex3') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionISS3CVdouble3float self, itkPointF3 point, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF3', cindex: 'itkContinuousIndexF3') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionISS3CVdouble3float self, itkPointF3 point, itkContinuousIndexF3 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF3', index: 'itkIndex3') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionISS3CVdouble3float self, itkContinuousIndexF3 cindex, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex3 const &":
        """GetStartIndex(itkImageFunctionISS3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex3 const &":
        """GetEndIndex(itkImageFunctionISS3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetStartContinuousIndex(itkImageFunctionISS3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetEndContinuousIndex(itkImageFunctionISS3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionISS3CVdouble3float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionISS3CVdouble3float *":
        """cast(itkLightObject obj) -> itkImageFunctionISS3CVdouble3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS3CVdouble3float

        Create a new object of the class itkImageFunctionISS3CVdouble3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS3CVdouble3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS3CVdouble3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS3CVdouble3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS3CVdouble3float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_SetInputImage, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetInputImage, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtContinuousIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_IsInsideBuffer, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToNearestIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToContinuousIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartContinuousIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndContinuousIndex, None, itkImageFunctionISS3CVdouble3float)
itkImageFunctionISS3CVdouble3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_swigregister
itkImageFunctionISS3CVdouble3float_swigregister(itkImageFunctionISS3CVdouble3float)

def itkImageFunctionISS3CVdouble3float_cast(obj: 'itkLightObject') -> "itkImageFunctionISS3CVdouble3float *":
    """itkImageFunctionISS3CVdouble3float_cast(itkLightObject obj) -> itkImageFunctionISS3CVdouble3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_cast(obj)

class itkImageFunctionIUC2CVdouble2float(itkFunctionBasePF2CVdouble2):
    """Proxy of C++ itkImageFunctionIUC2CVdouble2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageUC2') -> "void":
        """SetInputImage(itkImageFunctionIUC2CVdouble2float self, itkImageUC2 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageUC2 const *":
        """GetInputImage(itkImageFunctionIUC2CVdouble2float self) -> itkImageUC2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex2') -> "itkCovariantVectorD2":
        """EvaluateAtIndex(itkImageFunctionIUC2CVdouble2float self, itkIndex2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF2') -> "itkCovariantVectorD2":
        """EvaluateAtContinuousIndex(itkImageFunctionIUC2CVdouble2float self, itkContinuousIndexF2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIUC2CVdouble2float self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2CVdouble2float self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2CVdouble2float self, itkPointF2 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF2', index: 'itkIndex2') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIUC2CVdouble2float self, itkPointF2 point, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF2', cindex: 'itkContinuousIndexF2') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIUC2CVdouble2float self, itkPointF2 point, itkContinuousIndexF2 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF2', index: 'itkIndex2') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC2CVdouble2float self, itkContinuousIndexF2 cindex, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex2 const &":
        """GetStartIndex(itkImageFunctionIUC2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex2 const &":
        """GetEndIndex(itkImageFunctionIUC2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetStartContinuousIndex(itkImageFunctionIUC2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetEndContinuousIndex(itkImageFunctionIUC2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUC2CVdouble2float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIUC2CVdouble2float *":
        """cast(itkLightObject obj) -> itkImageFunctionIUC2CVdouble2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC2CVdouble2float

        Create a new object of the class itkImageFunctionIUC2CVdouble2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC2CVdouble2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC2CVdouble2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC2CVdouble2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC2CVdouble2float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_SetInputImage, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetInputImage, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtContinuousIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_IsInsideBuffer, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToNearestIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToContinuousIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartContinuousIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndContinuousIndex, None, itkImageFunctionIUC2CVdouble2float)
itkImageFunctionIUC2CVdouble2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_swigregister
itkImageFunctionIUC2CVdouble2float_swigregister(itkImageFunctionIUC2CVdouble2float)

def itkImageFunctionIUC2CVdouble2float_cast(obj: 'itkLightObject') -> "itkImageFunctionIUC2CVdouble2float *":
    """itkImageFunctionIUC2CVdouble2float_cast(itkLightObject obj) -> itkImageFunctionIUC2CVdouble2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_cast(obj)

class itkImageFunctionIUC3CVdouble3float(itkFunctionBasePF3CVdouble3):
    """Proxy of C++ itkImageFunctionIUC3CVdouble3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageUC3') -> "void":
        """SetInputImage(itkImageFunctionIUC3CVdouble3float self, itkImageUC3 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageUC3 const *":
        """GetInputImage(itkImageFunctionIUC3CVdouble3float self) -> itkImageUC3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex3') -> "itkCovariantVectorD3":
        """EvaluateAtIndex(itkImageFunctionIUC3CVdouble3float self, itkIndex3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF3') -> "itkCovariantVectorD3":
        """EvaluateAtContinuousIndex(itkImageFunctionIUC3CVdouble3float self, itkContinuousIndexF3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIUC3CVdouble3float self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3CVdouble3float self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3CVdouble3float self, itkPointF3 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF3', index: 'itkIndex3') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIUC3CVdouble3float self, itkPointF3 point, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF3', cindex: 'itkContinuousIndexF3') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIUC3CVdouble3float self, itkPointF3 point, itkContinuousIndexF3 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF3', index: 'itkIndex3') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC3CVdouble3float self, itkContinuousIndexF3 cindex, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex3 const &":
        """GetStartIndex(itkImageFunctionIUC3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex3 const &":
        """GetEndIndex(itkImageFunctionIUC3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetStartContinuousIndex(itkImageFunctionIUC3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetEndContinuousIndex(itkImageFunctionIUC3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUC3CVdouble3float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIUC3CVdouble3float *":
        """cast(itkLightObject obj) -> itkImageFunctionIUC3CVdouble3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC3CVdouble3float

        Create a new object of the class itkImageFunctionIUC3CVdouble3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC3CVdouble3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC3CVdouble3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC3CVdouble3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC3CVdouble3float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_SetInputImage, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetInputImage, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtContinuousIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_IsInsideBuffer, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToNearestIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToContinuousIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartContinuousIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndContinuousIndex, None, itkImageFunctionIUC3CVdouble3float)
itkImageFunctionIUC3CVdouble3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_swigregister
itkImageFunctionIUC3CVdouble3float_swigregister(itkImageFunctionIUC3CVdouble3float)

def itkImageFunctionIUC3CVdouble3float_cast(obj: 'itkLightObject') -> "itkImageFunctionIUC3CVdouble3float *":
    """itkImageFunctionIUC3CVdouble3float_cast(itkLightObject obj) -> itkImageFunctionIUC3CVdouble3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_cast(obj)

class itkImageFunctionIUS2CVdouble2float(itkFunctionBasePF2CVdouble2):
    """Proxy of C++ itkImageFunctionIUS2CVdouble2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageUS2') -> "void":
        """SetInputImage(itkImageFunctionIUS2CVdouble2float self, itkImageUS2 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageUS2 const *":
        """GetInputImage(itkImageFunctionIUS2CVdouble2float self) -> itkImageUS2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex2') -> "itkCovariantVectorD2":
        """EvaluateAtIndex(itkImageFunctionIUS2CVdouble2float self, itkIndex2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF2') -> "itkCovariantVectorD2":
        """EvaluateAtContinuousIndex(itkImageFunctionIUS2CVdouble2float self, itkContinuousIndexF2 index) -> itkCovariantVectorD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIUS2CVdouble2float self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2CVdouble2float self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2CVdouble2float self, itkPointF2 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF2', index: 'itkIndex2') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIUS2CVdouble2float self, itkPointF2 point, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF2', cindex: 'itkContinuousIndexF2') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIUS2CVdouble2float self, itkPointF2 point, itkContinuousIndexF2 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF2', index: 'itkIndex2') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS2CVdouble2float self, itkContinuousIndexF2 cindex, itkIndex2 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex2 const &":
        """GetStartIndex(itkImageFunctionIUS2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex2 const &":
        """GetEndIndex(itkImageFunctionIUS2CVdouble2float self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetStartContinuousIndex(itkImageFunctionIUS2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF2 const &":
        """GetEndContinuousIndex(itkImageFunctionIUS2CVdouble2float self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUS2CVdouble2float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIUS2CVdouble2float *":
        """cast(itkLightObject obj) -> itkImageFunctionIUS2CVdouble2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS2CVdouble2float

        Create a new object of the class itkImageFunctionIUS2CVdouble2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS2CVdouble2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS2CVdouble2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS2CVdouble2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS2CVdouble2float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_SetInputImage, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetInputImage, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtContinuousIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_IsInsideBuffer, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToNearestIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToContinuousIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartContinuousIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndContinuousIndex, None, itkImageFunctionIUS2CVdouble2float)
itkImageFunctionIUS2CVdouble2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_swigregister
itkImageFunctionIUS2CVdouble2float_swigregister(itkImageFunctionIUS2CVdouble2float)

def itkImageFunctionIUS2CVdouble2float_cast(obj: 'itkLightObject') -> "itkImageFunctionIUS2CVdouble2float *":
    """itkImageFunctionIUS2CVdouble2float_cast(itkLightObject obj) -> itkImageFunctionIUS2CVdouble2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_cast(obj)

class itkImageFunctionIUS3CVdouble3float(itkFunctionBasePF3CVdouble3):
    """Proxy of C++ itkImageFunctionIUS3CVdouble3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr: 'itkImageUS3') -> "void":
        """SetInputImage(itkImageFunctionIUS3CVdouble3float self, itkImageUS3 ptr)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_SetInputImage(self, ptr)


    def GetInputImage(self) -> "itkImageUS3 const *":
        """GetInputImage(itkImageFunctionIUS3CVdouble3float self) -> itkImageUS3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetInputImage(self)


    def EvaluateAtIndex(self, index: 'itkIndex3') -> "itkCovariantVectorD3":
        """EvaluateAtIndex(itkImageFunctionIUS3CVdouble3float self, itkIndex3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index: 'itkContinuousIndexF3') -> "itkCovariantVectorD3":
        """EvaluateAtContinuousIndex(itkImageFunctionIUS3CVdouble3float self, itkContinuousIndexF3 index) -> itkCovariantVectorD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args) -> "bool":
        """
        IsInsideBuffer(itkImageFunctionIUS3CVdouble3float self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3CVdouble3float self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3CVdouble3float self, itkPointF3 point) -> bool
        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point: 'itkPointF3', index: 'itkIndex3') -> "void":
        """ConvertPointToNearestIndex(itkImageFunctionIUS3CVdouble3float self, itkPointF3 point, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point: 'itkPointF3', cindex: 'itkContinuousIndexF3') -> "void":
        """ConvertPointToContinuousIndex(itkImageFunctionIUS3CVdouble3float self, itkPointF3 point, itkContinuousIndexF3 cindex)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex: 'itkContinuousIndexF3', index: 'itkIndex3') -> "void":
        """ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS3CVdouble3float self, itkContinuousIndexF3 cindex, itkIndex3 index)"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self) -> "itkIndex3 const &":
        """GetStartIndex(itkImageFunctionIUS3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartIndex(self)


    def GetEndIndex(self) -> "itkIndex3 const &":
        """GetEndIndex(itkImageFunctionIUS3CVdouble3float self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndIndex(self)


    def GetStartContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetStartContinuousIndex(itkImageFunctionIUS3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self) -> "itkContinuousIndexF3 const &":
        """GetEndContinuousIndex(itkImageFunctionIUS3CVdouble3float self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUS3CVdouble3float

    def cast(obj: 'itkLightObject') -> "itkImageFunctionIUS3CVdouble3float *":
        """cast(itkLightObject obj) -> itkImageFunctionIUS3CVdouble3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS3CVdouble3float

        Create a new object of the class itkImageFunctionIUS3CVdouble3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS3CVdouble3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS3CVdouble3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS3CVdouble3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS3CVdouble3float.SetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_SetInputImage, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.GetInputImage = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetInputImage, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.EvaluateAtIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.EvaluateAtContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtContinuousIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.IsInsideBuffer = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_IsInsideBuffer, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.ConvertPointToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToNearestIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.ConvertPointToContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToContinuousIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.GetStartIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.GetEndIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.GetStartContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartContinuousIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float.GetEndContinuousIndex = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndContinuousIndex, None, itkImageFunctionIUS3CVdouble3float)
itkImageFunctionIUS3CVdouble3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_swigregister
itkImageFunctionIUS3CVdouble3float_swigregister(itkImageFunctionIUS3CVdouble3float)

def itkImageFunctionIUS3CVdouble3float_cast(obj: 'itkLightObject') -> "itkImageFunctionIUS3CVdouble3float *":
    """itkImageFunctionIUS3CVdouble3float_cast(itkLightObject obj) -> itkImageFunctionIUS3CVdouble3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionID2float(itkImageFunctionID2CVdouble2float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionID2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionID2float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionID2float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionID2float self) -> itkPhysicalCentralDifferenceImageFunctionID2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionID2float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionID2float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionID2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionID2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionID2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionID2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionID2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionID2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionID2float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_Clone, None, itkPhysicalCentralDifferenceImageFunctionID2float)
itkPhysicalCentralDifferenceImageFunctionID2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_swigregister
itkPhysicalCentralDifferenceImageFunctionID2float_swigregister(itkPhysicalCentralDifferenceImageFunctionID2float)

def itkPhysicalCentralDifferenceImageFunctionID2float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionID2float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionID2float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID2float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionID2float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionID2float *":
    """itkPhysicalCentralDifferenceImageFunctionID2float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionID2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionID3float(itkImageFunctionID3CVdouble3float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionID3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionID3float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionID3float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionID3float self) -> itkPhysicalCentralDifferenceImageFunctionID3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionID3float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionID3float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionID3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionID3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionID3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionID3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionID3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionID3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionID3float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_Clone, None, itkPhysicalCentralDifferenceImageFunctionID3float)
itkPhysicalCentralDifferenceImageFunctionID3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_swigregister
itkPhysicalCentralDifferenceImageFunctionID3float_swigregister(itkPhysicalCentralDifferenceImageFunctionID3float)

def itkPhysicalCentralDifferenceImageFunctionID3float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionID3float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionID3float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID3float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionID3float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionID3float *":
    """itkPhysicalCentralDifferenceImageFunctionID3float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionID3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIF2float(itkImageFunctionIF2CVdouble2float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIF2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIF2float self) -> itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIF2float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIF2float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIF2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIF2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIF2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIF2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIF2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIF2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIF2float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIF2float)
itkPhysicalCentralDifferenceImageFunctionIF2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_swigregister
itkPhysicalCentralDifferenceImageFunctionIF2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIF2float)

def itkPhysicalCentralDifferenceImageFunctionIF2float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIF2float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIF2float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIF2float *":
    """itkPhysicalCentralDifferenceImageFunctionIF2float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIF2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIF3float(itkImageFunctionIF3CVdouble3float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIF3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIF3float self) -> itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIF3float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIF3float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIF3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIF3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIF3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIF3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIF3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIF3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIF3float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIF3float)
itkPhysicalCentralDifferenceImageFunctionIF3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_swigregister
itkPhysicalCentralDifferenceImageFunctionIF3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIF3float)

def itkPhysicalCentralDifferenceImageFunctionIF3float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIF3float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIF3float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIF3float *":
    """itkPhysicalCentralDifferenceImageFunctionIF3float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIF3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionISS2float(itkImageFunctionISS2CVdouble2float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionISS2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionISS2float self) -> itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionISS2float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionISS2float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionISS2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionISS2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionISS2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionISS2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionISS2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionISS2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionISS2float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_Clone, None, itkPhysicalCentralDifferenceImageFunctionISS2float)
itkPhysicalCentralDifferenceImageFunctionISS2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_swigregister
itkPhysicalCentralDifferenceImageFunctionISS2float_swigregister(itkPhysicalCentralDifferenceImageFunctionISS2float)

def itkPhysicalCentralDifferenceImageFunctionISS2float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionISS2float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionISS2float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionISS2float *":
    """itkPhysicalCentralDifferenceImageFunctionISS2float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionISS2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionISS3float(itkImageFunctionISS3CVdouble3float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionISS3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionISS3float self) -> itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionISS3float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionISS3float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionISS3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionISS3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionISS3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionISS3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionISS3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionISS3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionISS3float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_Clone, None, itkPhysicalCentralDifferenceImageFunctionISS3float)
itkPhysicalCentralDifferenceImageFunctionISS3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_swigregister
itkPhysicalCentralDifferenceImageFunctionISS3float_swigregister(itkPhysicalCentralDifferenceImageFunctionISS3float)

def itkPhysicalCentralDifferenceImageFunctionISS3float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionISS3float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionISS3float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionISS3float *":
    """itkPhysicalCentralDifferenceImageFunctionISS3float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionISS3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIUC2float(itkImageFunctionIUC2CVdouble2float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUC2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIUC2float self) -> itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUC2float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUC2float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUC2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUC2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUC2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUC2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUC2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUC2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIUC2float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIUC2float)
itkPhysicalCentralDifferenceImageFunctionIUC2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_swigregister
itkPhysicalCentralDifferenceImageFunctionIUC2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUC2float)

def itkPhysicalCentralDifferenceImageFunctionIUC2float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIUC2float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIUC2float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUC2float *":
    """itkPhysicalCentralDifferenceImageFunctionIUC2float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUC2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIUC3float(itkImageFunctionIUC3CVdouble3float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUC3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIUC3float self) -> itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUC3float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUC3float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUC3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUC3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUC3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUC3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUC3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUC3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIUC3float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIUC3float)
itkPhysicalCentralDifferenceImageFunctionIUC3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_swigregister
itkPhysicalCentralDifferenceImageFunctionIUC3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUC3float)

def itkPhysicalCentralDifferenceImageFunctionIUC3float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIUC3float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIUC3float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUC3float *":
    """itkPhysicalCentralDifferenceImageFunctionIUC3float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUC3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIUS2float(itkImageFunctionIUS2CVdouble2float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUS2float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIUS2float self) -> itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUS2float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUS2float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUS2float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUS2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUS2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUS2float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUS2float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUS2float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIUS2float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIUS2float)
itkPhysicalCentralDifferenceImageFunctionIUS2float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_swigregister
itkPhysicalCentralDifferenceImageFunctionIUS2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUS2float)

def itkPhysicalCentralDifferenceImageFunctionIUS2float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIUS2float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIUS2float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUS2float *":
    """itkPhysicalCentralDifferenceImageFunctionIUS2float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUS2float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_cast(obj)

class itkPhysicalCentralDifferenceImageFunctionIUS3float(itkImageFunctionIUS3CVdouble3float):
    """Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUS3float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer":
        """__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer":
        """Clone(itkPhysicalCentralDifferenceImageFunctionIUS3float self) -> itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_Clone(self)

    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUS3float

    def cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUS3float *":
        """cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUS3float"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUS3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUS3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUS3float.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUS3float.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUS3float.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhysicalCentralDifferenceImageFunctionIUS3float.Clone = new_instancemethod(_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_Clone, None, itkPhysicalCentralDifferenceImageFunctionIUS3float)
itkPhysicalCentralDifferenceImageFunctionIUS3float_swigregister = _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_swigregister
itkPhysicalCentralDifferenceImageFunctionIUS3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUS3float)

def itkPhysicalCentralDifferenceImageFunctionIUS3float___New_orig__() -> "itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer":
    """itkPhysicalCentralDifferenceImageFunctionIUS3float___New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float___New_orig__()

def itkPhysicalCentralDifferenceImageFunctionIUS3float_cast(obj: 'itkLightObject') -> "itkPhysicalCentralDifferenceImageFunctionIUS3float *":
    """itkPhysicalCentralDifferenceImageFunctionIUS3float_cast(itkLightObject obj) -> itkPhysicalCentralDifferenceImageFunctionIUS3float"""
    return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_cast(obj)



