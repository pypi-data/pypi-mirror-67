# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkKdTreeBasedKmeansEstimatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkKdTreeBasedKmeansEstimatorPython', [dirname(__file__)])
        except ImportError:
            import _itkKdTreeBasedKmeansEstimatorPython
            return _itkKdTreeBasedKmeansEstimatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkKdTreeBasedKmeansEstimatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkKdTreeBasedKmeansEstimatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkKdTreeBasedKmeansEstimatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import ITKCommonBasePython
import itkArrayPython
import itkKdTreePython
import itkEuclideanDistanceMetricPython
import itkDistanceMetricPython
import itkFunctionBasePython
import itkContinuousIndexPython
import itkPointPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkImagePython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkListSamplePython
import itkSamplePython

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_New():
  return itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New()


def itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_New():
  return itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New()

class itkKdTreeBasedKmeansEstimatorKdTreeLSVF2(ITKCommonBasePython.itkObject):
    """


    fast k-means algorithm implementation using k-d tree structure

    It returns k mean vectors that are centroids of k-clusters using pre-
    generated k-d tree. k-d tree generation is done by the
    WeightedCentroidKdTreeGenerator. The tree construction needs to be
    done only once. The resulting k-d tree's non-terminal nodes that have
    their children nodes have vector sums of measurement vectors that
    belong to the nodes and the number of measurement vectors in addition
    to the typical node boundary information and pointers to children
    nodes. Instead of reassigning every measurement vector to the nearest
    cluster centroid and recalculating centroid, it maintain a set of
    cluster centroid candidates and using pruning algorithm that utilizes
    k-d tree, it updates the means of only relevant candidates at each
    iterations. It would be faster than traditional implementation of
    k-means algorithm. However, the k-d tree consumes a large amount of
    memory. The tree construction time and pruning algorithm's performance
    are important factors to the whole process's performance. If users
    want to use k-d tree for some purpose other than k-means estimation,
    they can use the KdTreeGenerator instead of the
    WeightedCentroidKdTreeGenerator. It will save the tree construction
    time and memory usage.

    Note: There is a second implementation of k-means algorithm in ITK
    under the While the Kd tree based implementation is more time
    efficient, the GLA/LBG based algorithm is more memory efficient.

    Recent API changes: The static const macro to get the length of a
    measurement vector, MeasurementVectorSize has been removed to allow
    the length of a measurement vector to be specified at run time. It is
    now obtained from the KdTree set as input. You may query this length
    using the function GetMeasurementVectorSize().

    See:  ImageKmeansModelEstimator

    See:   WeightedCentroidKdTreeGenerator, KdTree

    C++ includes: itkKdTreeBasedKmeansEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer":
        """__New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer":
        """Clone(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Clone(self)


    def GetOutput(self) -> "itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const > > > > const *":
        """
        GetOutput(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const > > > > const *

        Output Membership
        function vector containing the membership functions with the final
        optimized parameters 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetOutput(self)


    def SetParameters(self, _arg: 'itkArrayD') -> "void":
        """
        SetParameters(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self, itkArrayD _arg)

        Set the position to
        initialize the optimization. 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetParameters(self, _arg)


    def GetParameters(self) -> "itkArrayD":
        """GetParameters(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> itkArrayD"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetParameters(self)


    def SetMaximumIteration(self, _arg: 'int const') -> "void":
        """
        SetMaximumIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self, int const _arg)

        Set/Get maximum
        iteration limit. 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetMaximumIteration(self, _arg)


    def GetMaximumIteration(self) -> "int":
        """GetMaximumIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMaximumIteration(self)


    def SetCentroidPositionChangesThreshold(self, _arg: 'double const') -> "void":
        """
        SetCentroidPositionChangesThreshold(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self, double const _arg)

        Set/Get the termination threshold for the squared sum of changes in
        centroid positions after one iteration 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetCentroidPositionChangesThreshold(self, _arg)


    def GetCentroidPositionChangesThreshold(self) -> "double":
        """GetCentroidPositionChangesThreshold(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChangesThreshold(self)


    def SetKdTree(self, tree: 'itkKdTreeLSVF2') -> "void":
        """
        SetKdTree(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self, itkKdTreeLSVF2 tree)

        Set/Get the pointer to
        the KdTree 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetKdTree(self, tree)


    def GetKdTree(self) -> "itkKdTreeLSVF2 const *":
        """GetKdTree(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> itkKdTreeLSVF2"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetKdTree(self)


    def GetMeasurementVectorSize(self) -> "unsigned int":
        """
        GetMeasurementVectorSize(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> unsigned int

        Get the
        length of measurement vectors in the KdTree 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMeasurementVectorSize(self)


    def GetCurrentIteration(self) -> "int":
        """GetCurrentIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCurrentIteration(self)


    def GetCentroidPositionChanges(self) -> "double":
        """GetCentroidPositionChanges(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChanges(self)


    def StartOptimization(self) -> "void":
        """
        StartOptimization(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self)

        Start
        optimization Optimization will stop when it meets either of two
        termination conditions, the maximum iteration limit or epsilon
        (minimal changes in squared sum of changes in centroid positions) 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_StartOptimization(self)


    def SetUseClusterLabels(self, _arg: 'bool const') -> "void":
        """SetUseClusterLabels(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self, bool const _arg)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetUseClusterLabels(self, _arg)


    def GetUseClusterLabels(self) -> "bool":
        """GetUseClusterLabels(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 self) -> bool"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetUseClusterLabels(self)

    __swig_destroy__ = _itkKdTreeBasedKmeansEstimatorPython.delete_itkKdTreeBasedKmeansEstimatorKdTreeLSVF2

    def cast(obj: 'itkLightObject') -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 *":
        """cast(itkLightObject obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2

        Create a new object of the class itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.Clone = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Clone, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetOutput = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetOutput, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.SetParameters = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetParameters, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetParameters = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetParameters, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.SetMaximumIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetMaximumIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetMaximumIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMaximumIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.SetCentroidPositionChangesThreshold = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetCentroidPositionChangesThreshold, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetCentroidPositionChangesThreshold = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChangesThreshold, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.SetKdTree = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetKdTree, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetKdTree = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetKdTree, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetMeasurementVectorSize = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMeasurementVectorSize, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetCurrentIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCurrentIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetCentroidPositionChanges = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChanges, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.StartOptimization = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_StartOptimization, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.SetUseClusterLabels = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetUseClusterLabels, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.GetUseClusterLabels = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetUseClusterLabels, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_swigregister = _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_swigregister
itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_swigregister(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF2___New_orig__() -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer":
    """itkKdTreeBasedKmeansEstimatorKdTreeLSVF2___New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer"""
    return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2___New_orig__()

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_cast(obj: 'itkLightObject') -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 *":
    """itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_cast(itkLightObject obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2"""
    return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_cast(obj)

class itkKdTreeBasedKmeansEstimatorKdTreeLSVF3(ITKCommonBasePython.itkObject):
    """


    fast k-means algorithm implementation using k-d tree structure

    It returns k mean vectors that are centroids of k-clusters using pre-
    generated k-d tree. k-d tree generation is done by the
    WeightedCentroidKdTreeGenerator. The tree construction needs to be
    done only once. The resulting k-d tree's non-terminal nodes that have
    their children nodes have vector sums of measurement vectors that
    belong to the nodes and the number of measurement vectors in addition
    to the typical node boundary information and pointers to children
    nodes. Instead of reassigning every measurement vector to the nearest
    cluster centroid and recalculating centroid, it maintain a set of
    cluster centroid candidates and using pruning algorithm that utilizes
    k-d tree, it updates the means of only relevant candidates at each
    iterations. It would be faster than traditional implementation of
    k-means algorithm. However, the k-d tree consumes a large amount of
    memory. The tree construction time and pruning algorithm's performance
    are important factors to the whole process's performance. If users
    want to use k-d tree for some purpose other than k-means estimation,
    they can use the KdTreeGenerator instead of the
    WeightedCentroidKdTreeGenerator. It will save the tree construction
    time and memory usage.

    Note: There is a second implementation of k-means algorithm in ITK
    under the While the Kd tree based implementation is more time
    efficient, the GLA/LBG based algorithm is more memory efficient.

    Recent API changes: The static const macro to get the length of a
    measurement vector, MeasurementVectorSize has been removed to allow
    the length of a measurement vector to be specified at run time. It is
    now obtained from the KdTree set as input. You may query this length
    using the function GetMeasurementVectorSize().

    See:  ImageKmeansModelEstimator

    See:   WeightedCentroidKdTreeGenerator, KdTree

    C++ includes: itkKdTreeBasedKmeansEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer":
        """__New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer":
        """Clone(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Clone(self)


    def GetOutput(self) -> "itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,3 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,3 > > const > > > > const *":
        """
        GetOutput(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,3 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,3 > > const > > > > const *

        Output Membership
        function vector containing the membership functions with the final
        optimized parameters 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetOutput(self)


    def SetParameters(self, _arg: 'itkArrayD') -> "void":
        """
        SetParameters(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self, itkArrayD _arg)

        Set the position to
        initialize the optimization. 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetParameters(self, _arg)


    def GetParameters(self) -> "itkArrayD":
        """GetParameters(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> itkArrayD"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetParameters(self)


    def SetMaximumIteration(self, _arg: 'int const') -> "void":
        """
        SetMaximumIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self, int const _arg)

        Set/Get maximum
        iteration limit. 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetMaximumIteration(self, _arg)


    def GetMaximumIteration(self) -> "int":
        """GetMaximumIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMaximumIteration(self)


    def SetCentroidPositionChangesThreshold(self, _arg: 'double const') -> "void":
        """
        SetCentroidPositionChangesThreshold(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self, double const _arg)

        Set/Get the termination threshold for the squared sum of changes in
        centroid positions after one iteration 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetCentroidPositionChangesThreshold(self, _arg)


    def GetCentroidPositionChangesThreshold(self) -> "double":
        """GetCentroidPositionChangesThreshold(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChangesThreshold(self)


    def SetKdTree(self, tree: 'itkKdTreeLSVF3') -> "void":
        """
        SetKdTree(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self, itkKdTreeLSVF3 tree)

        Set/Get the pointer to
        the KdTree 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetKdTree(self, tree)


    def GetKdTree(self) -> "itkKdTreeLSVF3 const *":
        """GetKdTree(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> itkKdTreeLSVF3"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetKdTree(self)


    def GetMeasurementVectorSize(self) -> "unsigned int":
        """
        GetMeasurementVectorSize(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> unsigned int

        Get the
        length of measurement vectors in the KdTree 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMeasurementVectorSize(self)


    def GetCurrentIteration(self) -> "int":
        """GetCurrentIteration(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCurrentIteration(self)


    def GetCentroidPositionChanges(self) -> "double":
        """GetCentroidPositionChanges(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChanges(self)


    def StartOptimization(self) -> "void":
        """
        StartOptimization(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self)

        Start
        optimization Optimization will stop when it meets either of two
        termination conditions, the maximum iteration limit or epsilon
        (minimal changes in squared sum of changes in centroid positions) 
        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_StartOptimization(self)


    def SetUseClusterLabels(self, _arg: 'bool const') -> "void":
        """SetUseClusterLabels(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self, bool const _arg)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetUseClusterLabels(self, _arg)


    def GetUseClusterLabels(self) -> "bool":
        """GetUseClusterLabels(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 self) -> bool"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetUseClusterLabels(self)

    __swig_destroy__ = _itkKdTreeBasedKmeansEstimatorPython.delete_itkKdTreeBasedKmeansEstimatorKdTreeLSVF3

    def cast(obj: 'itkLightObject') -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 *":
        """cast(itkLightObject obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3

        Create a new object of the class itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.Clone = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Clone, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetOutput = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetOutput, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.SetParameters = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetParameters, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetParameters = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetParameters, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.SetMaximumIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetMaximumIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetMaximumIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMaximumIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.SetCentroidPositionChangesThreshold = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetCentroidPositionChangesThreshold, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetCentroidPositionChangesThreshold = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChangesThreshold, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.SetKdTree = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetKdTree, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetKdTree = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetKdTree, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetMeasurementVectorSize = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMeasurementVectorSize, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetCurrentIteration = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCurrentIteration, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetCentroidPositionChanges = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChanges, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.StartOptimization = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_StartOptimization, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.SetUseClusterLabels = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetUseClusterLabels, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.GetUseClusterLabels = new_instancemethod(_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetUseClusterLabels, None, itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_swigregister = _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_swigregister
itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_swigregister(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF3___New_orig__() -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer":
    """itkKdTreeBasedKmeansEstimatorKdTreeLSVF3___New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer"""
    return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3___New_orig__()

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_cast(obj: 'itkLightObject') -> "itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 *":
    """itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_cast(itkLightObject obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3"""
    return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_cast(obj)



