# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramToProbabilityImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramToProbabilityImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramToProbabilityImageFilterPython
            return _itkHistogramToProbabilityImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramToProbabilityImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramToProbabilityImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramToProbabilityImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageSourcePython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageSourceCommonPython
import itkHistogramPython
import itkSamplePython
import itkArrayPython

def itkHistogramToProbabilityImageFilterHDID3_New():
  return itkHistogramToProbabilityImageFilterHDID3.New()


def itkHistogramToProbabilityImageFilterHDID3_Superclass_New():
  return itkHistogramToProbabilityImageFilterHDID3_Superclass.New()


def itkHistogramToProbabilityImageFilterHFID3_New():
  return itkHistogramToProbabilityImageFilterHFID3.New()


def itkHistogramToProbabilityImageFilterHFID3_Superclass_New():
  return itkHistogramToProbabilityImageFilterHFID3_Superclass.New()


def itkHistogramToProbabilityImageFilterHDIF3_New():
  return itkHistogramToProbabilityImageFilterHDIF3.New()


def itkHistogramToProbabilityImageFilterHDIF3_Superclass_New():
  return itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()


def itkHistogramToProbabilityImageFilterHFIF3_New():
  return itkHistogramToProbabilityImageFilterHFIF3.New()


def itkHistogramToProbabilityImageFilterHFIF3_Superclass_New():
  return itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()


def itkHistogramToProbabilityImageFilterHDID2_New():
  return itkHistogramToProbabilityImageFilterHDID2.New()


def itkHistogramToProbabilityImageFilterHDID2_Superclass_New():
  return itkHistogramToProbabilityImageFilterHDID2_Superclass.New()


def itkHistogramToProbabilityImageFilterHFID2_New():
  return itkHistogramToProbabilityImageFilterHFID2.New()


def itkHistogramToProbabilityImageFilterHFID2_Superclass_New():
  return itkHistogramToProbabilityImageFilterHFID2_Superclass.New()


def itkHistogramToProbabilityImageFilterHDIF2_New():
  return itkHistogramToProbabilityImageFilterHDIF2.New()


def itkHistogramToProbabilityImageFilterHDIF2_Superclass_New():
  return itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()


def itkHistogramToProbabilityImageFilterHFIF2_New():
  return itkHistogramToProbabilityImageFilterHFIF2.New()


def itkHistogramToProbabilityImageFilterHFIF2_Superclass_New():
  return itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID2_Superclass(itkImageSourcePython.itkImageSourceID2):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHDID2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDID2_Superclass self) -> itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHDID2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToProbabilityImageFilterHDID2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHDID2_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHDID2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double >
        GetFunctor(itkHistogramToProbabilityImageFilterHDID2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHDID2_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID2_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDID2_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_swigregister
itkHistogramToProbabilityImageFilterHDID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID2_Superclass)

def itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHDID2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID2_Superclass *":
    """itkHistogramToProbabilityImageFilterHDID2_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID2_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHDID3_Superclass(itkImageSourcePython.itkImageSourceID3):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHDID3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDID3_Superclass self) -> itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHDID3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToProbabilityImageFilterHDID3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHDID3_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHDID3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double >
        GetFunctor(itkHistogramToProbabilityImageFilterHDID3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHDID3_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID3_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDID3_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_swigregister
itkHistogramToProbabilityImageFilterHDID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID3_Superclass)

def itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHDID3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID3_Superclass *":
    """itkHistogramToProbabilityImageFilterHDID3_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID3_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHDIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHDIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDIF2_Superclass self) -> itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHDIF2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToProbabilityImageFilterHDIF2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHDIF2_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float >
        GetFunctor(itkHistogramToProbabilityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHDIF2_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF2_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDIF2_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_swigregister
itkHistogramToProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF2_Superclass)

def itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF2_Superclass *":
    """itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF2_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHDIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHDIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDIF3_Superclass self) -> itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHDIF3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToProbabilityImageFilterHDIF3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHDIF3_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float >
        GetFunctor(itkHistogramToProbabilityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHDIF3_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF3_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDIF3_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_swigregister
itkHistogramToProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF3_Superclass)

def itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF3_Superclass *":
    """itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF3_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHFID2_Superclass(itkImageSourcePython.itkImageSourceID2):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHFID2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFID2_Superclass self) -> itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHFID2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToProbabilityImageFilterHFID2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHFID2_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHFID2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double >
        GetFunctor(itkHistogramToProbabilityImageFilterHFID2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHFID2_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID2_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFID2_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_swigregister
itkHistogramToProbabilityImageFilterHFID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID2_Superclass)

def itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHFID2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID2_Superclass *":
    """itkHistogramToProbabilityImageFilterHFID2_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID2_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHFID3_Superclass(itkImageSourcePython.itkImageSourceID3):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHFID3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFID3_Superclass self) -> itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHFID3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToProbabilityImageFilterHFID3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHFID3_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHFID3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double >
        GetFunctor(itkHistogramToProbabilityImageFilterHFID3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHFID3_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID3_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFID3_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_swigregister
itkHistogramToProbabilityImageFilterHFID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID3_Superclass)

def itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHFID3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID3_Superclass *":
    """itkHistogramToProbabilityImageFilterHFID3_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID3_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHFIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHFIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFIF2_Superclass self) -> itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHFIF2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToProbabilityImageFilterHFIF2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHFIF2_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float >
        GetFunctor(itkHistogramToProbabilityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHFIF2_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF2_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFIF2_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_swigregister
itkHistogramToProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF2_Superclass)

def itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF2_Superclass *":
    """itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF2_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHFIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToProbabilityImageFilterHFIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFIF3_Superclass self) -> itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToProbabilityImageFilterHFIF3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToProbabilityImageFilterHFIF3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramProbabilityFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToProbabilityImageFilterHFIF3_Superclass self, itk::Function::HistogramProbabilityFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramProbabilityFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToProbabilityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float >
        GetFunctor(itkHistogramToProbabilityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToProbabilityImageFilterHFIF3_Superclass self, unsigned long n)"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF3_Superclass"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFIF3_Superclass.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_Clone, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetInput, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetInput, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetFunctor, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetFunctor, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency, None, itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_swigregister
itkHistogramToProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF3_Superclass)

def itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer":
    """itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__()

def itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF3_Superclass *":
    """itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF3_Superclass"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast(obj)

class itkHistogramToProbabilityImageFilterHDID2(itkHistogramToProbabilityImageFilterHDID2_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDID2_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDID2_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDID2 self) -> itkHistogramToProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID2 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID2"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDID2.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Clone, None, itkHistogramToProbabilityImageFilterHDID2)
itkHistogramToProbabilityImageFilterHDID2_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_swigregister
itkHistogramToProbabilityImageFilterHDID2_swigregister(itkHistogramToProbabilityImageFilterHDID2)

def itkHistogramToProbabilityImageFilterHDID2___New_orig__() -> "itkHistogramToProbabilityImageFilterHDID2_Pointer":
    """itkHistogramToProbabilityImageFilterHDID2___New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2___New_orig__()

def itkHistogramToProbabilityImageFilterHDID2_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID2 *":
    """itkHistogramToProbabilityImageFilterHDID2_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID2"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_cast(obj)

class itkHistogramToProbabilityImageFilterHDID3(itkHistogramToProbabilityImageFilterHDID3_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDID3_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDID3_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDID3 self) -> itkHistogramToProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID3 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID3"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDID3.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Clone, None, itkHistogramToProbabilityImageFilterHDID3)
itkHistogramToProbabilityImageFilterHDID3_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_swigregister
itkHistogramToProbabilityImageFilterHDID3_swigregister(itkHistogramToProbabilityImageFilterHDID3)

def itkHistogramToProbabilityImageFilterHDID3___New_orig__() -> "itkHistogramToProbabilityImageFilterHDID3_Pointer":
    """itkHistogramToProbabilityImageFilterHDID3___New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3___New_orig__()

def itkHistogramToProbabilityImageFilterHDID3_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDID3 *":
    """itkHistogramToProbabilityImageFilterHDID3_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDID3"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_cast(obj)

class itkHistogramToProbabilityImageFilterHDIF2(itkHistogramToProbabilityImageFilterHDIF2_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF2_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDIF2_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDIF2 self) -> itkHistogramToProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF2"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDIF2.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Clone, None, itkHistogramToProbabilityImageFilterHDIF2)
itkHistogramToProbabilityImageFilterHDIF2_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_swigregister
itkHistogramToProbabilityImageFilterHDIF2_swigregister(itkHistogramToProbabilityImageFilterHDIF2)

def itkHistogramToProbabilityImageFilterHDIF2___New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF2_Pointer":
    """itkHistogramToProbabilityImageFilterHDIF2___New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2___New_orig__()

def itkHistogramToProbabilityImageFilterHDIF2_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF2 *":
    """itkHistogramToProbabilityImageFilterHDIF2_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF2"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_cast(obj)

class itkHistogramToProbabilityImageFilterHDIF3(itkHistogramToProbabilityImageFilterHDIF3_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF3_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHDIF3_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHDIF3 self) -> itkHistogramToProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF3"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHDIF3.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Clone, None, itkHistogramToProbabilityImageFilterHDIF3)
itkHistogramToProbabilityImageFilterHDIF3_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_swigregister
itkHistogramToProbabilityImageFilterHDIF3_swigregister(itkHistogramToProbabilityImageFilterHDIF3)

def itkHistogramToProbabilityImageFilterHDIF3___New_orig__() -> "itkHistogramToProbabilityImageFilterHDIF3_Pointer":
    """itkHistogramToProbabilityImageFilterHDIF3___New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3___New_orig__()

def itkHistogramToProbabilityImageFilterHDIF3_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHDIF3 *":
    """itkHistogramToProbabilityImageFilterHDIF3_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHDIF3"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_cast(obj)

class itkHistogramToProbabilityImageFilterHFID2(itkHistogramToProbabilityImageFilterHFID2_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFID2_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFID2_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFID2 self) -> itkHistogramToProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID2 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID2"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFID2.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Clone, None, itkHistogramToProbabilityImageFilterHFID2)
itkHistogramToProbabilityImageFilterHFID2_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_swigregister
itkHistogramToProbabilityImageFilterHFID2_swigregister(itkHistogramToProbabilityImageFilterHFID2)

def itkHistogramToProbabilityImageFilterHFID2___New_orig__() -> "itkHistogramToProbabilityImageFilterHFID2_Pointer":
    """itkHistogramToProbabilityImageFilterHFID2___New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2___New_orig__()

def itkHistogramToProbabilityImageFilterHFID2_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID2 *":
    """itkHistogramToProbabilityImageFilterHFID2_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID2"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_cast(obj)

class itkHistogramToProbabilityImageFilterHFID3(itkHistogramToProbabilityImageFilterHFID3_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFID3_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFID3_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFID3 self) -> itkHistogramToProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID3 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID3"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFID3.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Clone, None, itkHistogramToProbabilityImageFilterHFID3)
itkHistogramToProbabilityImageFilterHFID3_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_swigregister
itkHistogramToProbabilityImageFilterHFID3_swigregister(itkHistogramToProbabilityImageFilterHFID3)

def itkHistogramToProbabilityImageFilterHFID3___New_orig__() -> "itkHistogramToProbabilityImageFilterHFID3_Pointer":
    """itkHistogramToProbabilityImageFilterHFID3___New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3___New_orig__()

def itkHistogramToProbabilityImageFilterHFID3_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFID3 *":
    """itkHistogramToProbabilityImageFilterHFID3_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFID3"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_cast(obj)

class itkHistogramToProbabilityImageFilterHFIF2(itkHistogramToProbabilityImageFilterHFIF2_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF2_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFIF2_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFIF2 self) -> itkHistogramToProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF2"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFIF2.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Clone, None, itkHistogramToProbabilityImageFilterHFIF2)
itkHistogramToProbabilityImageFilterHFIF2_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_swigregister
itkHistogramToProbabilityImageFilterHFIF2_swigregister(itkHistogramToProbabilityImageFilterHFIF2)

def itkHistogramToProbabilityImageFilterHFIF2___New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF2_Pointer":
    """itkHistogramToProbabilityImageFilterHFIF2___New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2___New_orig__()

def itkHistogramToProbabilityImageFilterHFIF2_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF2 *":
    """itkHistogramToProbabilityImageFilterHFIF2_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF2"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_cast(obj)

class itkHistogramToProbabilityImageFilterHFIF3(itkHistogramToProbabilityImageFilterHFIF3_Superclass):
    """


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter

    C++ includes: itkHistogramToProbabilityImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF3_Pointer":
        """__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToProbabilityImageFilterHFIF3_Pointer":
        """Clone(itkHistogramToProbabilityImageFilterHFIF3 self) -> itkHistogramToProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF3"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToProbabilityImageFilterHFIF3.Clone = new_instancemethod(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Clone, None, itkHistogramToProbabilityImageFilterHFIF3)
itkHistogramToProbabilityImageFilterHFIF3_swigregister = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_swigregister
itkHistogramToProbabilityImageFilterHFIF3_swigregister(itkHistogramToProbabilityImageFilterHFIF3)

def itkHistogramToProbabilityImageFilterHFIF3___New_orig__() -> "itkHistogramToProbabilityImageFilterHFIF3_Pointer":
    """itkHistogramToProbabilityImageFilterHFIF3___New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Pointer"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3___New_orig__()

def itkHistogramToProbabilityImageFilterHFIF3_cast(obj: 'itkLightObject') -> "itkHistogramToProbabilityImageFilterHFIF3 *":
    """itkHistogramToProbabilityImageFilterHFIF3_cast(itkLightObject obj) -> itkHistogramToProbabilityImageFilterHFIF3"""
    return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_probability_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToProbabilityImageFilter"""
    import itk
    instance = itk.HistogramToProbabilityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_probability_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToProbabilityImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToProbabilityImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToProbabilityImageFilter

    histogram_to_probability_image_filter.__doc__ = filter_object.__doc__
    histogram_to_probability_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_probability_image_filter.__doc__ += "Available Keyword Arguments:\n"
    histogram_to_probability_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "Available Keyword Arguments:\n"
    histogram_to_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



