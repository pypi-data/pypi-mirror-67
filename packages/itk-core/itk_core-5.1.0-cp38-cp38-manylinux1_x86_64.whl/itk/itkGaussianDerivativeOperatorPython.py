# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGaussianDerivativeOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGaussianDerivativeOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkGaussianDerivativeOperatorPython
            return _itkGaussianDerivativeOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGaussianDerivativeOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGaussianDerivativeOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGaussianDerivativeOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkNeighborhoodOperatorPython
import itkNeighborhoodPython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
class itkGaussianDerivativeOperatorD2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianDerivativeOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNormalizeAcrossScale(self, flag: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkGaussianDerivativeOperatorD2 self, bool flag)

        Set/Get the
        flag for calculating scale-space normalized derivatives.

        Normalized derivatives are obtained multiplying by the scale parameter
        $t^1/order$. This use useful for scale-space selection algorithms such
        as blob detection. The scaling results in the value of the derivatives
        being independent of the size of an object. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetNormalizeAcrossScale(self, flag)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkGaussianDerivativeOperatorD2 self) -> bool"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkGaussianDerivativeOperatorD2 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkGaussianDerivativeOperatorD2 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOff(self)


    def SetVariance(self, variance: 'double const') -> "void":
        """
        SetVariance(itkGaussianDerivativeOperatorD2 self, double const variance)

        Set/Get the variance of
        the Gaussian kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetVariance(self, variance)


    def GetVariance(self) -> "double":
        """GetVariance(itkGaussianDerivativeOperatorD2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetVariance(self)


    def SetSpacing(self, spacing: 'double const') -> "void":
        """
        SetSpacing(itkGaussianDerivativeOperatorD2 self, double const spacing)

        Set/Get the spacing for
        the direction of this kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double":
        """GetSpacing(itkGaussianDerivativeOperatorD2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetSpacing(self)


    def SetMaximumError(self, maxerror: 'double const') -> "void":
        """
        SetMaximumError(itkGaussianDerivativeOperatorD2 self, double const maxerror)

        Set/Get the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value is clamped between 0.00001 and 0.99999. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumError(self, maxerror)


    def GetMaximumError(self) -> "double":
        """GetMaximumError(itkGaussianDerivativeOperatorD2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianDerivativeOperatorD2 self, unsigned int n)

        Sets/Get a
        limit for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumKernelWidth(self, n)


    def SetOrder(self, order: 'unsigned int const') -> "void":
        """
        SetOrder(itkGaussianDerivativeOperatorD2 self, unsigned int const order)

        Sets/Get the order of the
        derivative. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetOrder(self, order)


    def GetOrder(self) -> "unsigned int":
        """GetOrder(itkGaussianDerivativeOperatorD2 self) -> unsigned int"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetOrder(self)

    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorD2

    def __init__(self, *args):
        """
        __init__(itkGaussianDerivativeOperatorD2 self) -> itkGaussianDerivativeOperatorD2
        __init__(itkGaussianDerivativeOperatorD2 self, itkGaussianDerivativeOperatorD2 arg0) -> itkGaussianDerivativeOperatorD2



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianDerivativeOperator.h 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorD2(*args))
itkGaussianDerivativeOperatorD2.SetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.GetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.NormalizeAcrossScaleOn = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOn, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.NormalizeAcrossScaleOff = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOff, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.SetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetVariance, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.GetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetVariance, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.SetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetSpacing, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.GetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetSpacing, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.SetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumError, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.GetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetMaximumError, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.SetMaximumKernelWidth = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumKernelWidth, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.SetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetOrder, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2.GetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetOrder, None, itkGaussianDerivativeOperatorD2)
itkGaussianDerivativeOperatorD2_swigregister = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_swigregister
itkGaussianDerivativeOperatorD2_swigregister(itkGaussianDerivativeOperatorD2)

class itkGaussianDerivativeOperatorD3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianDerivativeOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNormalizeAcrossScale(self, flag: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkGaussianDerivativeOperatorD3 self, bool flag)

        Set/Get the
        flag for calculating scale-space normalized derivatives.

        Normalized derivatives are obtained multiplying by the scale parameter
        $t^1/order$. This use useful for scale-space selection algorithms such
        as blob detection. The scaling results in the value of the derivatives
        being independent of the size of an object. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetNormalizeAcrossScale(self, flag)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkGaussianDerivativeOperatorD3 self) -> bool"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkGaussianDerivativeOperatorD3 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkGaussianDerivativeOperatorD3 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOff(self)


    def SetVariance(self, variance: 'double const') -> "void":
        """
        SetVariance(itkGaussianDerivativeOperatorD3 self, double const variance)

        Set/Get the variance of
        the Gaussian kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetVariance(self, variance)


    def GetVariance(self) -> "double":
        """GetVariance(itkGaussianDerivativeOperatorD3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetVariance(self)


    def SetSpacing(self, spacing: 'double const') -> "void":
        """
        SetSpacing(itkGaussianDerivativeOperatorD3 self, double const spacing)

        Set/Get the spacing for
        the direction of this kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double":
        """GetSpacing(itkGaussianDerivativeOperatorD3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetSpacing(self)


    def SetMaximumError(self, maxerror: 'double const') -> "void":
        """
        SetMaximumError(itkGaussianDerivativeOperatorD3 self, double const maxerror)

        Set/Get the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value is clamped between 0.00001 and 0.99999. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumError(self, maxerror)


    def GetMaximumError(self) -> "double":
        """GetMaximumError(itkGaussianDerivativeOperatorD3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianDerivativeOperatorD3 self, unsigned int n)

        Sets/Get a
        limit for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumKernelWidth(self, n)


    def SetOrder(self, order: 'unsigned int const') -> "void":
        """
        SetOrder(itkGaussianDerivativeOperatorD3 self, unsigned int const order)

        Sets/Get the order of the
        derivative. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetOrder(self, order)


    def GetOrder(self) -> "unsigned int":
        """GetOrder(itkGaussianDerivativeOperatorD3 self) -> unsigned int"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetOrder(self)

    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorD3

    def __init__(self, *args):
        """
        __init__(itkGaussianDerivativeOperatorD3 self) -> itkGaussianDerivativeOperatorD3
        __init__(itkGaussianDerivativeOperatorD3 self, itkGaussianDerivativeOperatorD3 arg0) -> itkGaussianDerivativeOperatorD3



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianDerivativeOperator.h 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorD3(*args))
itkGaussianDerivativeOperatorD3.SetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.GetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.NormalizeAcrossScaleOn = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOn, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.NormalizeAcrossScaleOff = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOff, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.SetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetVariance, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.GetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetVariance, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.SetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetSpacing, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.GetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetSpacing, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.SetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumError, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.GetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetMaximumError, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.SetMaximumKernelWidth = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumKernelWidth, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.SetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetOrder, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3.GetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetOrder, None, itkGaussianDerivativeOperatorD3)
itkGaussianDerivativeOperatorD3_swigregister = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_swigregister
itkGaussianDerivativeOperatorD3_swigregister(itkGaussianDerivativeOperatorD3)

class itkGaussianDerivativeOperatorEnums(object):
    """Proxy of C++ itkGaussianDerivativeOperatorEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    InterpolationMode_NearestNeighbourInterpolation = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_InterpolationMode_NearestNeighbourInterpolation
    InterpolationMode_LinearInterpolation = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_InterpolationMode_LinearInterpolation

    def __init__(self, *args):
        """
        __init__(itkGaussianDerivativeOperatorEnums self) -> itkGaussianDerivativeOperatorEnums
        __init__(itkGaussianDerivativeOperatorEnums self, itkGaussianDerivativeOperatorEnums arg0) -> itkGaussianDerivativeOperatorEnums
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorEnums(*args))
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorEnums
itkGaussianDerivativeOperatorEnums_swigregister = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_swigregister
itkGaussianDerivativeOperatorEnums_swigregister(itkGaussianDerivativeOperatorEnums)

class itkGaussianDerivativeOperatorF2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianDerivativeOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNormalizeAcrossScale(self, flag: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkGaussianDerivativeOperatorF2 self, bool flag)

        Set/Get the
        flag for calculating scale-space normalized derivatives.

        Normalized derivatives are obtained multiplying by the scale parameter
        $t^1/order$. This use useful for scale-space selection algorithms such
        as blob detection. The scaling results in the value of the derivatives
        being independent of the size of an object. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetNormalizeAcrossScale(self, flag)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkGaussianDerivativeOperatorF2 self) -> bool"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkGaussianDerivativeOperatorF2 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkGaussianDerivativeOperatorF2 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOff(self)


    def SetVariance(self, variance: 'double const') -> "void":
        """
        SetVariance(itkGaussianDerivativeOperatorF2 self, double const variance)

        Set/Get the variance of
        the Gaussian kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetVariance(self, variance)


    def GetVariance(self) -> "double":
        """GetVariance(itkGaussianDerivativeOperatorF2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetVariance(self)


    def SetSpacing(self, spacing: 'double const') -> "void":
        """
        SetSpacing(itkGaussianDerivativeOperatorF2 self, double const spacing)

        Set/Get the spacing for
        the direction of this kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double":
        """GetSpacing(itkGaussianDerivativeOperatorF2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetSpacing(self)


    def SetMaximumError(self, maxerror: 'double const') -> "void":
        """
        SetMaximumError(itkGaussianDerivativeOperatorF2 self, double const maxerror)

        Set/Get the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value is clamped between 0.00001 and 0.99999. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumError(self, maxerror)


    def GetMaximumError(self) -> "double":
        """GetMaximumError(itkGaussianDerivativeOperatorF2 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianDerivativeOperatorF2 self, unsigned int n)

        Sets/Get a
        limit for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumKernelWidth(self, n)


    def SetOrder(self, order: 'unsigned int const') -> "void":
        """
        SetOrder(itkGaussianDerivativeOperatorF2 self, unsigned int const order)

        Sets/Get the order of the
        derivative. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetOrder(self, order)


    def GetOrder(self) -> "unsigned int":
        """GetOrder(itkGaussianDerivativeOperatorF2 self) -> unsigned int"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetOrder(self)

    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorF2

    def __init__(self, *args):
        """
        __init__(itkGaussianDerivativeOperatorF2 self) -> itkGaussianDerivativeOperatorF2
        __init__(itkGaussianDerivativeOperatorF2 self, itkGaussianDerivativeOperatorF2 arg0) -> itkGaussianDerivativeOperatorF2



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianDerivativeOperator.h 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorF2(*args))
itkGaussianDerivativeOperatorF2.SetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.GetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.NormalizeAcrossScaleOn = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOn, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.NormalizeAcrossScaleOff = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOff, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.SetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetVariance, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.GetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetVariance, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.SetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetSpacing, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.GetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetSpacing, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.SetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumError, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.GetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetMaximumError, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.SetMaximumKernelWidth = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumKernelWidth, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.SetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetOrder, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2.GetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetOrder, None, itkGaussianDerivativeOperatorF2)
itkGaussianDerivativeOperatorF2_swigregister = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_swigregister
itkGaussianDerivativeOperatorF2_swigregister(itkGaussianDerivativeOperatorF2)

class itkGaussianDerivativeOperatorF3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianDerivativeOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNormalizeAcrossScale(self, flag: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkGaussianDerivativeOperatorF3 self, bool flag)

        Set/Get the
        flag for calculating scale-space normalized derivatives.

        Normalized derivatives are obtained multiplying by the scale parameter
        $t^1/order$. This use useful for scale-space selection algorithms such
        as blob detection. The scaling results in the value of the derivatives
        being independent of the size of an object. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetNormalizeAcrossScale(self, flag)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkGaussianDerivativeOperatorF3 self) -> bool"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkGaussianDerivativeOperatorF3 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkGaussianDerivativeOperatorF3 self)"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOff(self)


    def SetVariance(self, variance: 'double const') -> "void":
        """
        SetVariance(itkGaussianDerivativeOperatorF3 self, double const variance)

        Set/Get the variance of
        the Gaussian kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetVariance(self, variance)


    def GetVariance(self) -> "double":
        """GetVariance(itkGaussianDerivativeOperatorF3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetVariance(self)


    def SetSpacing(self, spacing: 'double const') -> "void":
        """
        SetSpacing(itkGaussianDerivativeOperatorF3 self, double const spacing)

        Set/Get the spacing for
        the direction of this kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double":
        """GetSpacing(itkGaussianDerivativeOperatorF3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetSpacing(self)


    def SetMaximumError(self, maxerror: 'double const') -> "void":
        """
        SetMaximumError(itkGaussianDerivativeOperatorF3 self, double const maxerror)

        Set/Get the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value is clamped between 0.00001 and 0.99999. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumError(self, maxerror)


    def GetMaximumError(self) -> "double":
        """GetMaximumError(itkGaussianDerivativeOperatorF3 self) -> double"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianDerivativeOperatorF3 self, unsigned int n)

        Sets/Get a
        limit for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumKernelWidth(self, n)


    def SetOrder(self, order: 'unsigned int const') -> "void":
        """
        SetOrder(itkGaussianDerivativeOperatorF3 self, unsigned int const order)

        Sets/Get the order of the
        derivative. 
        """
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetOrder(self, order)


    def GetOrder(self) -> "unsigned int":
        """GetOrder(itkGaussianDerivativeOperatorF3 self) -> unsigned int"""
        return _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetOrder(self)

    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorF3

    def __init__(self, *args):
        """
        __init__(itkGaussianDerivativeOperatorF3 self) -> itkGaussianDerivativeOperatorF3
        __init__(itkGaussianDerivativeOperatorF3 self, itkGaussianDerivativeOperatorF3 arg0) -> itkGaussianDerivativeOperatorF3



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianDerivativeOperator.h 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorF3(*args))
itkGaussianDerivativeOperatorF3.SetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.GetNormalizeAcrossScale = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetNormalizeAcrossScale, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.NormalizeAcrossScaleOn = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOn, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.NormalizeAcrossScaleOff = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOff, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.SetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetVariance, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.GetVariance = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetVariance, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.SetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetSpacing, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.GetSpacing = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetSpacing, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.SetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumError, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.GetMaximumError = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetMaximumError, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.SetMaximumKernelWidth = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumKernelWidth, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.SetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetOrder, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3.GetOrder = new_instancemethod(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetOrder, None, itkGaussianDerivativeOperatorF3)
itkGaussianDerivativeOperatorF3_swigregister = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_swigregister
itkGaussianDerivativeOperatorF3_swigregister(itkGaussianDerivativeOperatorF3)



