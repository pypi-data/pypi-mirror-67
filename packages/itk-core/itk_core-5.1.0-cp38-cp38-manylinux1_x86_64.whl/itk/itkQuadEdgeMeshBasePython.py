# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkQuadEdgeMeshBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkQuadEdgeMeshBasePython', [dirname(__file__)])
        except ImportError:
            import _itkQuadEdgeMeshBasePython
            return _itkQuadEdgeMeshBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkQuadEdgeMeshBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkQuadEdgeMeshBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkQuadEdgeMeshBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMapContainerPython
import ITKCommonBasePython
import pyBasePython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkQuadEdgeMeshLineCellPython
import itkArrayPython
import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import itkQuadEdgeCellTraitsInfoPython
import itkQuadEdgeMeshPointPython
import itkImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython

def itkImageToMeshFilterIUS3MD3QEMTD3BBFF_New():
  return itkImageToMeshFilterIUS3MD3QEMTD3BBFF.New()


def itkImageToMeshFilterIUC3MD3QEMTD3BBFF_New():
  return itkImageToMeshFilterIUC3MD3QEMTD3BBFF.New()


def itkImageToMeshFilterISS3MD3QEMTD3BBFF_New():
  return itkImageToMeshFilterISS3MD3QEMTD3BBFF.New()


def itkImageToMeshFilterIUS2MD2QEMTD2BBFF_New():
  return itkImageToMeshFilterIUS2MD2QEMTD2BBFF.New()


def itkImageToMeshFilterIUC2MD2QEMTD2BBFF_New():
  return itkImageToMeshFilterIUC2MD2QEMTD2BBFF.New()


def itkImageToMeshFilterISS2MD2QEMTD2BBFF_New():
  return itkImageToMeshFilterISS2MD2QEMTD2BBFF.New()


def itkMeshToMeshFilterQEMD3QEMD3_New():
  return itkMeshToMeshFilterQEMD3QEMD3.New()


def itkMeshToMeshFilterQEMD2QEMD2_New():
  return itkMeshToMeshFilterQEMD2QEMD2.New()


def itkMeshSourceMD3QEMTD3BBFF_New():
  return itkMeshSourceMD3QEMTD3BBFF.New()


def itkMeshSourceQEMD3_New():
  return itkMeshSourceQEMD3.New()


def itkMeshSourceMD2QEMTD2BBFF_New():
  return itkMeshSourceMD2QEMTD2BBFF.New()


def itkMeshSourceQEMD2_New():
  return itkMeshSourceQEMD2.New()


def itkQuadEdgeMeshD3_New():
  return itkQuadEdgeMeshD3.New()


def itkQuadEdgeMeshD2_New():
  return itkQuadEdgeMeshD2.New()


def itkBoundingBoxUL3FMCULQEMPF3_New():
  return itkBoundingBoxUL3FMCULQEMPF3.New()


def itkBoundingBoxUL2FMCULQEMPF2_New():
  return itkBoundingBoxUL2FMCULQEMPF2.New()


def itkPointSetD3QEMTD3BBFF_New():
  return itkPointSetD3QEMTD3BBFF.New()


def itkPointSetD2QEMTD2BBFF_New():
  return itkPointSetD2QEMTD2BBFF.New()


def itkMeshD3QEMTD3BBFF_New():
  return itkMeshD3QEMTD3BBFF.New()


def itkMeshD2QEMTD2BBFF_New():
  return itkMeshD2QEMTD2BBFF.New()


def itkMapContainerULCIDQEMCTI3_New():
  return itkMapContainerULCIDQEMCTI3.New()


def itkMapContainerULCIDQEMCTI2_New():
  return itkMapContainerULCIDQEMCTI2.New()

class itkBoundingBoxUL2FMCULQEMPF2(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL2FMCULQEMPF2_Pointer":
        """__New_orig__() -> itkBoundingBoxUL2FMCULQEMPF2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL2FMCULQEMPF2_Pointer":
        """Clone(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkBoundingBoxUL2FMCULQEMPF2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULQEMPF2GQEULULBBT') -> "void":
        """
        SetPoints(itkBoundingBoxUL2FMCULQEMPF2 self, itkMapContainerULQEMPF2GQEULULBBT arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULQEMPF2GQEULULBBT const *":
        """GetPoints(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkMapContainerULQEMPF2GQEULULBBT"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF2,4 >":
        """
        ComputeCorners(itkBoundingBoxUL2FMCULQEMPF2 self) -> std::array< itkPointF2,4 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL2FMCULQEMPF2 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF4 const &":
        """
        GetBounds(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkFixedArrayF4

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetBounds(self)


    def GetCenter(self) -> "itkPointF2":
        """
        GetCenter(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkPointF2

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetCenter(self)


    def GetMinimum(self) -> "itkPointF2":
        """
        GetMinimum(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkPointF2

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMinimum(itkBoundingBoxUL2FMCULQEMPF2 self, itkPointF2 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF2":
        """
        GetMaximum(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkPointF2

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMaximum(itkBoundingBoxUL2FMCULQEMPF2 self, itkPointF2 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF2') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL2FMCULQEMPF2 self, itkPointF2 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL2FMCULQEMPF2 self) -> double"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF2') -> "bool":
        """
        IsInside(itkBoundingBoxUL2FMCULQEMPF2 self, itkPointF2 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL2FMCULQEMPF2_Pointer":
        """
        DeepCopy(itkBoundingBoxUL2FMCULQEMPF2 self) -> itkBoundingBoxUL2FMCULQEMPF2_Pointer

        Duplicates this bounding
        box 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_DeepCopy(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkBoundingBoxUL2FMCULQEMPF2

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FMCULQEMPF2 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL2FMCULQEMPF2"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2FMCULQEMPF2

        Create a new object of the class itkBoundingBoxUL2FMCULQEMPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2FMCULQEMPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2FMCULQEMPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL2FMCULQEMPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL2FMCULQEMPF2.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_Clone, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.SetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetPoints, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetPoints, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.ComputeCorners = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ComputeCorners, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.ComputeBoundingBox = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ComputeBoundingBox, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetBounds = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetBounds, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetCenter = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetCenter, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetMinimum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetMinimum, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.SetMinimum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetMinimum, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetMaximum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetMaximum, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.SetMaximum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_SetMaximum, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.ConsiderPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_ConsiderPoint, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.GetDiagonalLength2 = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_GetDiagonalLength2, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.IsInside = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_IsInside, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2.DeepCopy = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_DeepCopy, None, itkBoundingBoxUL2FMCULQEMPF2)
itkBoundingBoxUL2FMCULQEMPF2_swigregister = _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_swigregister
itkBoundingBoxUL2FMCULQEMPF2_swigregister(itkBoundingBoxUL2FMCULQEMPF2)

def itkBoundingBoxUL2FMCULQEMPF2___New_orig__() -> "itkBoundingBoxUL2FMCULQEMPF2_Pointer":
    """itkBoundingBoxUL2FMCULQEMPF2___New_orig__() -> itkBoundingBoxUL2FMCULQEMPF2_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2___New_orig__()

def itkBoundingBoxUL2FMCULQEMPF2_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FMCULQEMPF2 *":
    """itkBoundingBoxUL2FMCULQEMPF2_cast(itkLightObject obj) -> itkBoundingBoxUL2FMCULQEMPF2"""
    return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL2FMCULQEMPF2_cast(obj)

class itkBoundingBoxUL3FMCULQEMPF3(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL3FMCULQEMPF3_Pointer":
        """__New_orig__() -> itkBoundingBoxUL3FMCULQEMPF3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL3FMCULQEMPF3_Pointer":
        """Clone(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkBoundingBoxUL3FMCULQEMPF3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULQEMPF3GQEULULBBT') -> "void":
        """
        SetPoints(itkBoundingBoxUL3FMCULQEMPF3 self, itkMapContainerULQEMPF3GQEULULBBT arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULQEMPF3GQEULULBBT const *":
        """GetPoints(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkMapContainerULQEMPF3GQEULULBBT"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF3,8 >":
        """
        ComputeCorners(itkBoundingBoxUL3FMCULQEMPF3 self) -> std::array< itkPointF3,8 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL3FMCULQEMPF3 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF6 const &":
        """
        GetBounds(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkFixedArrayF6

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetBounds(self)


    def GetCenter(self) -> "itkPointF3":
        """
        GetCenter(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkPointF3

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetCenter(self)


    def GetMinimum(self) -> "itkPointF3":
        """
        GetMinimum(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkPointF3

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMinimum(itkBoundingBoxUL3FMCULQEMPF3 self, itkPointF3 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF3":
        """
        GetMaximum(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkPointF3

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMaximum(itkBoundingBoxUL3FMCULQEMPF3 self, itkPointF3 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF3') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL3FMCULQEMPF3 self, itkPointF3 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL3FMCULQEMPF3 self) -> double"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF3') -> "bool":
        """
        IsInside(itkBoundingBoxUL3FMCULQEMPF3 self, itkPointF3 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL3FMCULQEMPF3_Pointer":
        """
        DeepCopy(itkBoundingBoxUL3FMCULQEMPF3 self) -> itkBoundingBoxUL3FMCULQEMPF3_Pointer

        Duplicates this bounding
        box 
        """
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_DeepCopy(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkBoundingBoxUL3FMCULQEMPF3

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FMCULQEMPF3 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL3FMCULQEMPF3"""
        return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3FMCULQEMPF3

        Create a new object of the class itkBoundingBoxUL3FMCULQEMPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3FMCULQEMPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3FMCULQEMPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL3FMCULQEMPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL3FMCULQEMPF3.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_Clone, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.SetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetPoints, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetPoints, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.ComputeCorners = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ComputeCorners, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.ComputeBoundingBox = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ComputeBoundingBox, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetBounds = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetBounds, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetCenter = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetCenter, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetMinimum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetMinimum, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.SetMinimum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetMinimum, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetMaximum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetMaximum, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.SetMaximum = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_SetMaximum, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.ConsiderPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_ConsiderPoint, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.GetDiagonalLength2 = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_GetDiagonalLength2, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.IsInside = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_IsInside, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3.DeepCopy = new_instancemethod(_itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_DeepCopy, None, itkBoundingBoxUL3FMCULQEMPF3)
itkBoundingBoxUL3FMCULQEMPF3_swigregister = _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_swigregister
itkBoundingBoxUL3FMCULQEMPF3_swigregister(itkBoundingBoxUL3FMCULQEMPF3)

def itkBoundingBoxUL3FMCULQEMPF3___New_orig__() -> "itkBoundingBoxUL3FMCULQEMPF3_Pointer":
    """itkBoundingBoxUL3FMCULQEMPF3___New_orig__() -> itkBoundingBoxUL3FMCULQEMPF3_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3___New_orig__()

def itkBoundingBoxUL3FMCULQEMPF3_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FMCULQEMPF3 *":
    """itkBoundingBoxUL3FMCULQEMPF3_cast(itkLightObject obj) -> itkBoundingBoxUL3FMCULQEMPF3"""
    return _itkQuadEdgeMeshBasePython.itkBoundingBoxUL3FMCULQEMPF3_cast(obj)

class itkMapContainerULCIDQEMCTI2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULCIDQEMCTI2 self) -> itkMapContainerULCIDQEMCTI2
        __init__(itkMapContainerULCIDQEMCTI2 self, std::less< unsigned long > const & comp) -> itkMapContainerULCIDQEMCTI2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_swiginit(self, _itkQuadEdgeMeshBasePython.new_itkMapContainerULCIDQEMCTI2(*args))

    def __New_orig__() -> "itkMapContainerULCIDQEMCTI2_Pointer":
        """__New_orig__() -> itkMapContainerULCIDQEMCTI2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULCIDQEMCTI2_Pointer":
        """Clone(itkMapContainerULCIDQEMCTI2 self) -> itkMapContainerULCIDQEMCTI2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkCellInterfaceDQEMCTI2 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI2 * > > > &":
        """
        CastToSTLContainer(itkMapContainerULCIDQEMCTI2 self) -> std::map< unsigned long,itkCellInterfaceDQEMCTI2 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI2 * > > > &

        Cast the
        container to a STL container type 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkCellInterfaceDQEMCTI2 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI2 * > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULCIDQEMCTI2 self) -> std::map< unsigned long,itkCellInterfaceDQEMCTI2 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI2 * > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkCellInterfaceDQEMCTI2 *const &":
        """
        ElementAt(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI2
        ElementAt(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI2

        Get a reference to the
        element at the given index. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkCellInterfaceDQEMCTI2 *&":
        """
        CreateElementAt(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI2 *&

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkCellInterfaceDQEMCTI2 *":
        """
        GetElement(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI2') -> "void":
        """
        SetElement(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0, itkCellInterfaceDQEMCTI2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI2') -> "void":
        """
        InsertElement(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0, itkCellInterfaceDQEMCTI2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI2 **') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0, itkCellInterfaceDQEMCTI2 ** arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULCIDQEMCTI2 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULCIDQEMCTI2 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULCIDQEMCTI2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULCIDQEMCTI2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Initialize(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMapContainerULCIDQEMCTI2

    def cast(obj: 'itkLightObject') -> "itkMapContainerULCIDQEMCTI2 *":
        """cast(itkLightObject obj) -> itkMapContainerULCIDQEMCTI2"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULCIDQEMCTI2

        Create a new object of the class itkMapContainerULCIDQEMCTI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULCIDQEMCTI2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULCIDQEMCTI2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULCIDQEMCTI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULCIDQEMCTI2.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Clone, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.CastToSTLContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CastToSTLContainer, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.CastToSTLConstContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CastToSTLConstContainer, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.ElementAt = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_ElementAt, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.CreateElementAt = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CreateElementAt, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.GetElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_GetElement, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.SetElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_SetElement, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.InsertElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_InsertElement, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.IndexExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_IndexExists, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.GetElementIfIndexExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_GetElementIfIndexExists, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.CreateIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_CreateIndex, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.DeleteIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_DeleteIndex, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.Size = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Size, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.Reserve = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Reserve, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.Squeeze = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Squeeze, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2.Initialize = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_Initialize, None, itkMapContainerULCIDQEMCTI2)
itkMapContainerULCIDQEMCTI2_swigregister = _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_swigregister
itkMapContainerULCIDQEMCTI2_swigregister(itkMapContainerULCIDQEMCTI2)

def itkMapContainerULCIDQEMCTI2___New_orig__() -> "itkMapContainerULCIDQEMCTI2_Pointer":
    """itkMapContainerULCIDQEMCTI2___New_orig__() -> itkMapContainerULCIDQEMCTI2_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2___New_orig__()

def itkMapContainerULCIDQEMCTI2_cast(obj: 'itkLightObject') -> "itkMapContainerULCIDQEMCTI2 *":
    """itkMapContainerULCIDQEMCTI2_cast(itkLightObject obj) -> itkMapContainerULCIDQEMCTI2"""
    return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI2_cast(obj)

class itkMapContainerULCIDQEMCTI3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULCIDQEMCTI3 self) -> itkMapContainerULCIDQEMCTI3
        __init__(itkMapContainerULCIDQEMCTI3 self, std::less< unsigned long > const & comp) -> itkMapContainerULCIDQEMCTI3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_swiginit(self, _itkQuadEdgeMeshBasePython.new_itkMapContainerULCIDQEMCTI3(*args))

    def __New_orig__() -> "itkMapContainerULCIDQEMCTI3_Pointer":
        """__New_orig__() -> itkMapContainerULCIDQEMCTI3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULCIDQEMCTI3_Pointer":
        """Clone(itkMapContainerULCIDQEMCTI3 self) -> itkMapContainerULCIDQEMCTI3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkCellInterfaceDQEMCTI3 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI3 * > > > &":
        """
        CastToSTLContainer(itkMapContainerULCIDQEMCTI3 self) -> std::map< unsigned long,itkCellInterfaceDQEMCTI3 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI3 * > > > &

        Cast the
        container to a STL container type 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkCellInterfaceDQEMCTI3 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI3 * > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULCIDQEMCTI3 self) -> std::map< unsigned long,itkCellInterfaceDQEMCTI3 *,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkCellInterfaceDQEMCTI3 * > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkCellInterfaceDQEMCTI3 *const &":
        """
        ElementAt(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI3
        ElementAt(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI3

        Get a reference to the
        element at the given index. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkCellInterfaceDQEMCTI3 *&":
        """
        CreateElementAt(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI3 *&

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkCellInterfaceDQEMCTI3 *":
        """
        GetElement(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0) -> itkCellInterfaceDQEMCTI3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI3') -> "void":
        """
        SetElement(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0, itkCellInterfaceDQEMCTI3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI3') -> "void":
        """
        InsertElement(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0, itkCellInterfaceDQEMCTI3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI3 **') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0, itkCellInterfaceDQEMCTI3 ** arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULCIDQEMCTI3 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULCIDQEMCTI3 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULCIDQEMCTI3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULCIDQEMCTI3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Initialize(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMapContainerULCIDQEMCTI3

    def cast(obj: 'itkLightObject') -> "itkMapContainerULCIDQEMCTI3 *":
        """cast(itkLightObject obj) -> itkMapContainerULCIDQEMCTI3"""
        return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULCIDQEMCTI3

        Create a new object of the class itkMapContainerULCIDQEMCTI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULCIDQEMCTI3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULCIDQEMCTI3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULCIDQEMCTI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULCIDQEMCTI3.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Clone, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.CastToSTLContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CastToSTLContainer, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.CastToSTLConstContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CastToSTLConstContainer, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.ElementAt = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_ElementAt, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.CreateElementAt = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CreateElementAt, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.GetElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_GetElement, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.SetElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_SetElement, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.InsertElement = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_InsertElement, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.IndexExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_IndexExists, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.GetElementIfIndexExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_GetElementIfIndexExists, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.CreateIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_CreateIndex, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.DeleteIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_DeleteIndex, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.Size = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Size, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.Reserve = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Reserve, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.Squeeze = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Squeeze, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3.Initialize = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_Initialize, None, itkMapContainerULCIDQEMCTI3)
itkMapContainerULCIDQEMCTI3_swigregister = _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_swigregister
itkMapContainerULCIDQEMCTI3_swigregister(itkMapContainerULCIDQEMCTI3)

def itkMapContainerULCIDQEMCTI3___New_orig__() -> "itkMapContainerULCIDQEMCTI3_Pointer":
    """itkMapContainerULCIDQEMCTI3___New_orig__() -> itkMapContainerULCIDQEMCTI3_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3___New_orig__()

def itkMapContainerULCIDQEMCTI3_cast(obj: 'itkLightObject') -> "itkMapContainerULCIDQEMCTI3 *":
    """itkMapContainerULCIDQEMCTI3_cast(itkLightObject obj) -> itkMapContainerULCIDQEMCTI3"""
    return _itkQuadEdgeMeshBasePython.itkMapContainerULCIDQEMCTI3_cast(obj)

class itkMeshSourceMD2QEMTD2BBFF(ITKCommonBasePython.itkProcessObject):
    """


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data.

    C++ includes: itkMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshSourceMD2QEMTD2BBFF_Pointer":
        """__New_orig__() -> itkMeshSourceMD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshSourceMD2QEMTD2BBFF_Pointer":
        """Clone(itkMeshSourceMD2QEMTD2BBFF self) -> itkMeshSourceMD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_Clone(self)


    def GetOutput(self, *args) -> "itkMeshD2QEMTD2BBFF *":
        """
        GetOutput(itkMeshSourceMD2QEMTD2BBFF self) -> itkMeshD2QEMTD2BBFF
        GetOutput(itkMeshSourceMD2QEMTD2BBFF self, unsigned int idx) -> itkMeshD2QEMTD2BBFF

        Get the mesh output of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GetOutput(self, *args)


    def SetOutput(self, output: 'itkMeshD2QEMTD2BBFF') -> "void":
        """SetOutput(itkMeshSourceMD2QEMTD2BBFF self, itkMeshD2QEMTD2BBFF output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkMeshSourceMD2QEMTD2BBFF self, itkDataObject output)
        GraftOutput(itkMeshSourceMD2QEMTD2BBFF self, std::string const & key, itkDataObject output)

        Graft the specified
        data object onto this ProcessObject's named output. This is similar to
        the GraftOutput method except it allows you to specify which output is
        affected. See the GraftOutput for general usage information. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkMeshSourceMD2QEMTD2BBFF self, unsigned int idx, itkDataObject output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceMD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkMeshSourceMD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkMeshSourceMD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceMD2QEMTD2BBFF

        Create a new object of the class itkMeshSourceMD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceMD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshSourceMD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshSourceMD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshSourceMD2QEMTD2BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_Clone, None, itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GetOutput, None, itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF.SetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_SetOutput, None, itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF.GraftOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftOutput, None, itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF.GraftNthOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftNthOutput, None, itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_swigregister
itkMeshSourceMD2QEMTD2BBFF_swigregister(itkMeshSourceMD2QEMTD2BBFF)

def itkMeshSourceMD2QEMTD2BBFF___New_orig__() -> "itkMeshSourceMD2QEMTD2BBFF_Pointer":
    """itkMeshSourceMD2QEMTD2BBFF___New_orig__() -> itkMeshSourceMD2QEMTD2BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF___New_orig__()

def itkMeshSourceMD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkMeshSourceMD2QEMTD2BBFF *":
    """itkMeshSourceMD2QEMTD2BBFF_cast(itkLightObject obj) -> itkMeshSourceMD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_cast(obj)

class itkMeshSourceMD3QEMTD3BBFF(ITKCommonBasePython.itkProcessObject):
    """


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data.

    C++ includes: itkMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshSourceMD3QEMTD3BBFF_Pointer":
        """__New_orig__() -> itkMeshSourceMD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshSourceMD3QEMTD3BBFF_Pointer":
        """Clone(itkMeshSourceMD3QEMTD3BBFF self) -> itkMeshSourceMD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_Clone(self)


    def GetOutput(self, *args) -> "itkMeshD3QEMTD3BBFF *":
        """
        GetOutput(itkMeshSourceMD3QEMTD3BBFF self) -> itkMeshD3QEMTD3BBFF
        GetOutput(itkMeshSourceMD3QEMTD3BBFF self, unsigned int idx) -> itkMeshD3QEMTD3BBFF

        Get the mesh output of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GetOutput(self, *args)


    def SetOutput(self, output: 'itkMeshD3QEMTD3BBFF') -> "void":
        """SetOutput(itkMeshSourceMD3QEMTD3BBFF self, itkMeshD3QEMTD3BBFF output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkMeshSourceMD3QEMTD3BBFF self, itkDataObject output)
        GraftOutput(itkMeshSourceMD3QEMTD3BBFF self, std::string const & key, itkDataObject output)

        Graft the specified
        data object onto this ProcessObject's named output. This is similar to
        the GraftOutput method except it allows you to specify which output is
        affected. See the GraftOutput for general usage information. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkMeshSourceMD3QEMTD3BBFF self, unsigned int idx, itkDataObject output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceMD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkMeshSourceMD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkMeshSourceMD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceMD3QEMTD3BBFF

        Create a new object of the class itkMeshSourceMD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceMD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshSourceMD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshSourceMD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshSourceMD3QEMTD3BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_Clone, None, itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GetOutput, None, itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF.SetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_SetOutput, None, itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF.GraftOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftOutput, None, itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF.GraftNthOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftNthOutput, None, itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_swigregister
itkMeshSourceMD3QEMTD3BBFF_swigregister(itkMeshSourceMD3QEMTD3BBFF)

def itkMeshSourceMD3QEMTD3BBFF___New_orig__() -> "itkMeshSourceMD3QEMTD3BBFF_Pointer":
    """itkMeshSourceMD3QEMTD3BBFF___New_orig__() -> itkMeshSourceMD3QEMTD3BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF___New_orig__()

def itkMeshSourceMD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkMeshSourceMD3QEMTD3BBFF *":
    """itkMeshSourceMD3QEMTD3BBFF_cast(itkLightObject obj) -> itkMeshSourceMD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_cast(obj)

class itkMeshSourceQEMD2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data.

    C++ includes: itkMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshSourceQEMD2_Pointer":
        """__New_orig__() -> itkMeshSourceQEMD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshSourceQEMD2_Pointer":
        """Clone(itkMeshSourceQEMD2 self) -> itkMeshSourceQEMD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_Clone(self)


    def GetOutput(self, *args) -> "itkQuadEdgeMeshD2 *":
        """
        GetOutput(itkMeshSourceQEMD2 self) -> itkQuadEdgeMeshD2
        GetOutput(itkMeshSourceQEMD2 self, unsigned int idx) -> itkQuadEdgeMeshD2

        Get the mesh output of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GetOutput(self, *args)


    def SetOutput(self, output: 'itkQuadEdgeMeshD2') -> "void":
        """SetOutput(itkMeshSourceQEMD2 self, itkQuadEdgeMeshD2 output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkMeshSourceQEMD2 self, itkDataObject output)
        GraftOutput(itkMeshSourceQEMD2 self, std::string const & key, itkDataObject output)

        Graft the specified
        data object onto this ProcessObject's named output. This is similar to
        the GraftOutput method except it allows you to specify which output is
        affected. See the GraftOutput for general usage information. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkMeshSourceQEMD2 self, unsigned int idx, itkDataObject output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceQEMD2

    def cast(obj: 'itkLightObject') -> "itkMeshSourceQEMD2 *":
        """cast(itkLightObject obj) -> itkMeshSourceQEMD2"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceQEMD2

        Create a new object of the class itkMeshSourceQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceQEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshSourceQEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshSourceQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshSourceQEMD2.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_Clone, None, itkMeshSourceQEMD2)
itkMeshSourceQEMD2.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GetOutput, None, itkMeshSourceQEMD2)
itkMeshSourceQEMD2.SetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_SetOutput, None, itkMeshSourceQEMD2)
itkMeshSourceQEMD2.GraftOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftOutput, None, itkMeshSourceQEMD2)
itkMeshSourceQEMD2.GraftNthOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftNthOutput, None, itkMeshSourceQEMD2)
itkMeshSourceQEMD2_swigregister = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_swigregister
itkMeshSourceQEMD2_swigregister(itkMeshSourceQEMD2)

def itkMeshSourceQEMD2___New_orig__() -> "itkMeshSourceQEMD2_Pointer":
    """itkMeshSourceQEMD2___New_orig__() -> itkMeshSourceQEMD2_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2___New_orig__()

def itkMeshSourceQEMD2_cast(obj: 'itkLightObject') -> "itkMeshSourceQEMD2 *":
    """itkMeshSourceQEMD2_cast(itkLightObject obj) -> itkMeshSourceQEMD2"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_cast(obj)

class itkMeshSourceQEMD3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data.

    C++ includes: itkMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshSourceQEMD3_Pointer":
        """__New_orig__() -> itkMeshSourceQEMD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshSourceQEMD3_Pointer":
        """Clone(itkMeshSourceQEMD3 self) -> itkMeshSourceQEMD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_Clone(self)


    def GetOutput(self, *args) -> "itkQuadEdgeMeshD3 *":
        """
        GetOutput(itkMeshSourceQEMD3 self) -> itkQuadEdgeMeshD3
        GetOutput(itkMeshSourceQEMD3 self, unsigned int idx) -> itkQuadEdgeMeshD3

        Get the mesh output of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GetOutput(self, *args)


    def SetOutput(self, output: 'itkQuadEdgeMeshD3') -> "void":
        """SetOutput(itkMeshSourceQEMD3 self, itkQuadEdgeMeshD3 output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkMeshSourceQEMD3 self, itkDataObject output)
        GraftOutput(itkMeshSourceQEMD3 self, std::string const & key, itkDataObject output)

        Graft the specified
        data object onto this ProcessObject's named output. This is similar to
        the GraftOutput method except it allows you to specify which output is
        affected. See the GraftOutput for general usage information. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkMeshSourceQEMD3 self, unsigned int idx, itkDataObject output)"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceQEMD3

    def cast(obj: 'itkLightObject') -> "itkMeshSourceQEMD3 *":
        """cast(itkLightObject obj) -> itkMeshSourceQEMD3"""
        return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceQEMD3

        Create a new object of the class itkMeshSourceQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceQEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshSourceQEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshSourceQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshSourceQEMD3.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_Clone, None, itkMeshSourceQEMD3)
itkMeshSourceQEMD3.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GetOutput, None, itkMeshSourceQEMD3)
itkMeshSourceQEMD3.SetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_SetOutput, None, itkMeshSourceQEMD3)
itkMeshSourceQEMD3.GraftOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftOutput, None, itkMeshSourceQEMD3)
itkMeshSourceQEMD3.GraftNthOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftNthOutput, None, itkMeshSourceQEMD3)
itkMeshSourceQEMD3_swigregister = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_swigregister
itkMeshSourceQEMD3_swigregister(itkMeshSourceQEMD3)

def itkMeshSourceQEMD3___New_orig__() -> "itkMeshSourceQEMD3_Pointer":
    """itkMeshSourceQEMD3___New_orig__() -> itkMeshSourceQEMD3_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3___New_orig__()

def itkMeshSourceQEMD3_cast(obj: 'itkLightObject') -> "itkMeshSourceQEMD3 *":
    """itkMeshSourceQEMD3_cast(itkLightObject obj) -> itkMeshSourceQEMD3"""
    return _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_cast(obj)

class itkMeshToMeshFilterQEMD2QEMD2(itkMeshSourceQEMD2):
    """


    MeshToMeshFilter is the base class for all process objects that output
    mesh data, and require mesh data as input. Specifically, this class
    defines the SetInput() method for defining the input to a filter.

    C++ includes: itkMeshToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshToMeshFilterQEMD2QEMD2_Pointer":
        """__New_orig__() -> itkMeshToMeshFilterQEMD2QEMD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshToMeshFilterQEMD2QEMD2_Pointer":
        """Clone(itkMeshToMeshFilterQEMD2QEMD2 self) -> itkMeshToMeshFilterQEMD2QEMD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_Clone(self)


    def SetInput(self, input: 'itkQuadEdgeMeshD2') -> "void":
        """SetInput(itkMeshToMeshFilterQEMD2QEMD2 self, itkQuadEdgeMeshD2 input)"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_SetInput(self, input)


    def GetInput(self, *args) -> "itkQuadEdgeMeshD2 const *":
        """
        GetInput(itkMeshToMeshFilterQEMD2QEMD2 self) -> itkQuadEdgeMeshD2
        GetInput(itkMeshToMeshFilterQEMD2QEMD2 self, unsigned int idx) -> itkQuadEdgeMeshD2

        Get the mesh input of this
        process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_GetInput(self, *args)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshToMeshFilterQEMD2QEMD2

    def cast(obj: 'itkLightObject') -> "itkMeshToMeshFilterQEMD2QEMD2 *":
        """cast(itkLightObject obj) -> itkMeshToMeshFilterQEMD2QEMD2"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterQEMD2QEMD2

        Create a new object of the class itkMeshToMeshFilterQEMD2QEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterQEMD2QEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterQEMD2QEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshToMeshFilterQEMD2QEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshToMeshFilterQEMD2QEMD2.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_Clone, None, itkMeshToMeshFilterQEMD2QEMD2)
itkMeshToMeshFilterQEMD2QEMD2.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_SetInput, None, itkMeshToMeshFilterQEMD2QEMD2)
itkMeshToMeshFilterQEMD2QEMD2.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_GetInput, None, itkMeshToMeshFilterQEMD2QEMD2)
itkMeshToMeshFilterQEMD2QEMD2_swigregister = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_swigregister
itkMeshToMeshFilterQEMD2QEMD2_swigregister(itkMeshToMeshFilterQEMD2QEMD2)

def itkMeshToMeshFilterQEMD2QEMD2___New_orig__() -> "itkMeshToMeshFilterQEMD2QEMD2_Pointer":
    """itkMeshToMeshFilterQEMD2QEMD2___New_orig__() -> itkMeshToMeshFilterQEMD2QEMD2_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2___New_orig__()

def itkMeshToMeshFilterQEMD2QEMD2_cast(obj: 'itkLightObject') -> "itkMeshToMeshFilterQEMD2QEMD2 *":
    """itkMeshToMeshFilterQEMD2QEMD2_cast(itkLightObject obj) -> itkMeshToMeshFilterQEMD2QEMD2"""
    return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_cast(obj)

class itkMeshToMeshFilterQEMD3QEMD3(itkMeshSourceQEMD3):
    """


    MeshToMeshFilter is the base class for all process objects that output
    mesh data, and require mesh data as input. Specifically, this class
    defines the SetInput() method for defining the input to a filter.

    C++ includes: itkMeshToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshToMeshFilterQEMD3QEMD3_Pointer":
        """__New_orig__() -> itkMeshToMeshFilterQEMD3QEMD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshToMeshFilterQEMD3QEMD3_Pointer":
        """Clone(itkMeshToMeshFilterQEMD3QEMD3 self) -> itkMeshToMeshFilterQEMD3QEMD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_Clone(self)


    def SetInput(self, input: 'itkQuadEdgeMeshD3') -> "void":
        """SetInput(itkMeshToMeshFilterQEMD3QEMD3 self, itkQuadEdgeMeshD3 input)"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_SetInput(self, input)


    def GetInput(self, *args) -> "itkQuadEdgeMeshD3 const *":
        """
        GetInput(itkMeshToMeshFilterQEMD3QEMD3 self) -> itkQuadEdgeMeshD3
        GetInput(itkMeshToMeshFilterQEMD3QEMD3 self, unsigned int idx) -> itkQuadEdgeMeshD3

        Get the mesh input of this
        process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_GetInput(self, *args)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshToMeshFilterQEMD3QEMD3

    def cast(obj: 'itkLightObject') -> "itkMeshToMeshFilterQEMD3QEMD3 *":
        """cast(itkLightObject obj) -> itkMeshToMeshFilterQEMD3QEMD3"""
        return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterQEMD3QEMD3

        Create a new object of the class itkMeshToMeshFilterQEMD3QEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterQEMD3QEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterQEMD3QEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshToMeshFilterQEMD3QEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshToMeshFilterQEMD3QEMD3.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_Clone, None, itkMeshToMeshFilterQEMD3QEMD3)
itkMeshToMeshFilterQEMD3QEMD3.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_SetInput, None, itkMeshToMeshFilterQEMD3QEMD3)
itkMeshToMeshFilterQEMD3QEMD3.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_GetInput, None, itkMeshToMeshFilterQEMD3QEMD3)
itkMeshToMeshFilterQEMD3QEMD3_swigregister = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_swigregister
itkMeshToMeshFilterQEMD3QEMD3_swigregister(itkMeshToMeshFilterQEMD3QEMD3)

def itkMeshToMeshFilterQEMD3QEMD3___New_orig__() -> "itkMeshToMeshFilterQEMD3QEMD3_Pointer":
    """itkMeshToMeshFilterQEMD3QEMD3___New_orig__() -> itkMeshToMeshFilterQEMD3QEMD3_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3___New_orig__()

def itkMeshToMeshFilterQEMD3QEMD3_cast(obj: 'itkLightObject') -> "itkMeshToMeshFilterQEMD3QEMD3 *":
    """itkMeshToMeshFilterQEMD3QEMD3_cast(itkLightObject obj) -> itkMeshToMeshFilterQEMD3QEMD3"""
    return _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_cast(obj)

class itkPointSetD2QEMTD2BBFF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure (
    itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2QEMTD2BBFF_Pointer":
        """__New_orig__() -> itkPointSetD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2QEMTD2BBFF_Pointer":
        """Clone(itkPointSetD2QEMTD2BBFF self) -> itkPointSetD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2QEMTD2BBFF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2QEMTD2BBFF') -> "void":
        """
        PassStructure(itkPointSetD2QEMTD2BBFF self, itkPointSetD2QEMTD2BBFF inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2QEMTD2BBFF self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULQEMPF2GQEULULBBT') -> "void":
        """
        SetPoints(itkPointSetD2QEMTD2BBFF self, itkMapContainerULQEMPF2GQEULULBBT arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULQEMPF2GQEULULBBT const *":
        """
        GetPoints(itkPointSetD2QEMTD2BBFF self) -> itkMapContainerULQEMPF2GQEULULBBT
        GetPoints(itkPointSetD2QEMTD2BBFF self) -> itkMapContainerULQEMPF2GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkQuadEdgeMeshPointF2GQEULULBBT') -> "void":
        """
        SetPoint(itkPointSetD2QEMTD2BBFF self, unsigned long arg0, itkQuadEdgeMeshPointF2GQEULULBBT arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkQuadEdgeMeshPointF2GQEULULBBT":
        """
        GetPoint(itkPointSetD2QEMTD2BBFF self, unsigned long arg0, itkQuadEdgeMeshPointF2GQEULULBBT arg1) -> bool
        GetPoint(itkPointSetD2QEMTD2BBFF self, unsigned long arg0) -> itkQuadEdgeMeshPointF2GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2QEMTD2BBFF self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD2QEMTD2BBFF self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2QEMTD2BBFF self) -> itkMapContainerULD
        GetPointData(itkPointSetD2QEMTD2BBFF self) -> itkMapContainerULD
        GetPointData(itkPointSetD2QEMTD2BBFF self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2QEMTD2BBFF self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2QEMTD2BBFF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2QEMTD2BBFF self) -> long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2QEMTD2BBFF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2QEMTD2BBFF self) -> long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetBufferedRegion(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkPointSetD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkPointSetD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkPointSetD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD2QEMTD2BBFF

        Create a new object of the class itkPointSetD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2QEMTD2BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_Clone, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetMaximumNumberOfRegions = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetMaximumNumberOfRegions, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.PassStructure = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_PassStructure, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetNumberOfPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetNumberOfPoints, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.SetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoints, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoints, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.SetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoint, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoint, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.SetPointData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPointData, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetPointData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPointData, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.SetRequestedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetRequestedRegion, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetRequestedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetRequestedRegion, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.SetBufferedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetBufferedRegion, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF.GetBufferedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetBufferedRegion, None, itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_swigregister
itkPointSetD2QEMTD2BBFF_swigregister(itkPointSetD2QEMTD2BBFF)

def itkPointSetD2QEMTD2BBFF___New_orig__() -> "itkPointSetD2QEMTD2BBFF_Pointer":
    """itkPointSetD2QEMTD2BBFF___New_orig__() -> itkPointSetD2QEMTD2BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF___New_orig__()

def itkPointSetD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkPointSetD2QEMTD2BBFF *":
    """itkPointSetD2QEMTD2BBFF_cast(itkLightObject obj) -> itkPointSetD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_cast(obj)

class itkPointSetD3QEMTD3BBFF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure (
    itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3QEMTD3BBFF_Pointer":
        """__New_orig__() -> itkPointSetD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3QEMTD3BBFF_Pointer":
        """Clone(itkPointSetD3QEMTD3BBFF self) -> itkPointSetD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3QEMTD3BBFF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3QEMTD3BBFF') -> "void":
        """
        PassStructure(itkPointSetD3QEMTD3BBFF self, itkPointSetD3QEMTD3BBFF inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3QEMTD3BBFF self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULQEMPF3GQEULULBBT') -> "void":
        """
        SetPoints(itkPointSetD3QEMTD3BBFF self, itkMapContainerULQEMPF3GQEULULBBT arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULQEMPF3GQEULULBBT const *":
        """
        GetPoints(itkPointSetD3QEMTD3BBFF self) -> itkMapContainerULQEMPF3GQEULULBBT
        GetPoints(itkPointSetD3QEMTD3BBFF self) -> itkMapContainerULQEMPF3GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkQuadEdgeMeshPointF3GQEULULBBT') -> "void":
        """
        SetPoint(itkPointSetD3QEMTD3BBFF self, unsigned long arg0, itkQuadEdgeMeshPointF3GQEULULBBT arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkQuadEdgeMeshPointF3GQEULULBBT":
        """
        GetPoint(itkPointSetD3QEMTD3BBFF self, unsigned long arg0, itkQuadEdgeMeshPointF3GQEULULBBT arg1) -> bool
        GetPoint(itkPointSetD3QEMTD3BBFF self, unsigned long arg0) -> itkQuadEdgeMeshPointF3GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3QEMTD3BBFF self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD3QEMTD3BBFF self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3QEMTD3BBFF self) -> itkMapContainerULD
        GetPointData(itkPointSetD3QEMTD3BBFF self) -> itkMapContainerULD
        GetPointData(itkPointSetD3QEMTD3BBFF self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3QEMTD3BBFF self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3QEMTD3BBFF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3QEMTD3BBFF self) -> long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3QEMTD3BBFF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3QEMTD3BBFF self) -> long"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetBufferedRegion(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkPointSetD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkPointSetD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkPointSetD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD3QEMTD3BBFF

        Create a new object of the class itkPointSetD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3QEMTD3BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_Clone, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetMaximumNumberOfRegions = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetMaximumNumberOfRegions, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.PassStructure = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_PassStructure, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetNumberOfPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetNumberOfPoints, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.SetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoints, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoints, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.SetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoint, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoint, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.SetPointData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPointData, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetPointData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPointData, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.SetRequestedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetRequestedRegion, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetRequestedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetRequestedRegion, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.SetBufferedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetBufferedRegion, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF.GetBufferedRegion = new_instancemethod(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetBufferedRegion, None, itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_swigregister
itkPointSetD3QEMTD3BBFF_swigregister(itkPointSetD3QEMTD3BBFF)

def itkPointSetD3QEMTD3BBFF___New_orig__() -> "itkPointSetD3QEMTD3BBFF_Pointer":
    """itkPointSetD3QEMTD3BBFF___New_orig__() -> itkPointSetD3QEMTD3BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF___New_orig__()

def itkPointSetD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkPointSetD3QEMTD3BBFF *":
    """itkPointSetD3QEMTD3BBFF_cast(itkLightObject obj) -> itkPointSetD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_cast(obj)

class itkImageToMeshFilterISS2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterISS2MD2QEMTD2BBFF self, unsigned int idx, itkImageSS2 input)
        SetInput(itkImageToMeshFilterISS2MD2QEMTD2BBFF self, itkImageSS2 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS2 const *":
        """
        GetInput(itkImageToMeshFilterISS2MD2QEMTD2BBFF self, unsigned int idx) -> itkImageSS2
        GetInput(itkImageToMeshFilterISS2MD2QEMTD2BBFF self) -> itkImageSS2

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD2QEMTD2BBFF *":
        """
        GetOutput(itkImageToMeshFilterISS2MD2QEMTD2BBFF self) -> itkMeshD2QEMTD2BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterISS2MD2QEMTD2BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterISS2MD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterISS2MD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterISS2MD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterISS2MD2QEMTD2BBFF

        Create a new object of the class itkImageToMeshFilterISS2MD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterISS2MD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterISS2MD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterISS2MD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterISS2MD2QEMTD2BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_SetInput, None, itkImageToMeshFilterISS2MD2QEMTD2BBFF)
itkImageToMeshFilterISS2MD2QEMTD2BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetInput, None, itkImageToMeshFilterISS2MD2QEMTD2BBFF)
itkImageToMeshFilterISS2MD2QEMTD2BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetOutput, None, itkImageToMeshFilterISS2MD2QEMTD2BBFF)
itkImageToMeshFilterISS2MD2QEMTD2BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GenerateOutputInformation, None, itkImageToMeshFilterISS2MD2QEMTD2BBFF)
itkImageToMeshFilterISS2MD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_swigregister
itkImageToMeshFilterISS2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterISS2MD2QEMTD2BBFF)

def itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterISS2MD2QEMTD2BBFF *":
    """itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterISS2MD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast(obj)

class itkImageToMeshFilterISS3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterISS3MD3QEMTD3BBFF self, unsigned int idx, itkImageSS3 input)
        SetInput(itkImageToMeshFilterISS3MD3QEMTD3BBFF self, itkImageSS3 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS3 const *":
        """
        GetInput(itkImageToMeshFilterISS3MD3QEMTD3BBFF self, unsigned int idx) -> itkImageSS3
        GetInput(itkImageToMeshFilterISS3MD3QEMTD3BBFF self) -> itkImageSS3

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD3QEMTD3BBFF *":
        """
        GetOutput(itkImageToMeshFilterISS3MD3QEMTD3BBFF self) -> itkMeshD3QEMTD3BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterISS3MD3QEMTD3BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterISS3MD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterISS3MD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterISS3MD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterISS3MD3QEMTD3BBFF

        Create a new object of the class itkImageToMeshFilterISS3MD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterISS3MD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterISS3MD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterISS3MD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterISS3MD3QEMTD3BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_SetInput, None, itkImageToMeshFilterISS3MD3QEMTD3BBFF)
itkImageToMeshFilterISS3MD3QEMTD3BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetInput, None, itkImageToMeshFilterISS3MD3QEMTD3BBFF)
itkImageToMeshFilterISS3MD3QEMTD3BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetOutput, None, itkImageToMeshFilterISS3MD3QEMTD3BBFF)
itkImageToMeshFilterISS3MD3QEMTD3BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GenerateOutputInformation, None, itkImageToMeshFilterISS3MD3QEMTD3BBFF)
itkImageToMeshFilterISS3MD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_swigregister
itkImageToMeshFilterISS3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterISS3MD3QEMTD3BBFF)

def itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterISS3MD3QEMTD3BBFF *":
    """itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterISS3MD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast(obj)

class itkImageToMeshFilterIUC2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self, unsigned int idx, itkImageUC2 input)
        SetInput(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self, itkImageUC2 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC2 const *":
        """
        GetInput(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self, unsigned int idx) -> itkImageUC2
        GetInput(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self) -> itkImageUC2

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD2QEMTD2BBFF *":
        """
        GetOutput(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self) -> itkMeshD2QEMTD2BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterIUC2MD2QEMTD2BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUC2MD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUC2MD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterIUC2MD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterIUC2MD2QEMTD2BBFF

        Create a new object of the class itkImageToMeshFilterIUC2MD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterIUC2MD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterIUC2MD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterIUC2MD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterIUC2MD2QEMTD2BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_SetInput, None, itkImageToMeshFilterIUC2MD2QEMTD2BBFF)
itkImageToMeshFilterIUC2MD2QEMTD2BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetInput, None, itkImageToMeshFilterIUC2MD2QEMTD2BBFF)
itkImageToMeshFilterIUC2MD2QEMTD2BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetOutput, None, itkImageToMeshFilterIUC2MD2QEMTD2BBFF)
itkImageToMeshFilterIUC2MD2QEMTD2BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GenerateOutputInformation, None, itkImageToMeshFilterIUC2MD2QEMTD2BBFF)
itkImageToMeshFilterIUC2MD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_swigregister
itkImageToMeshFilterIUC2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterIUC2MD2QEMTD2BBFF)

def itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUC2MD2QEMTD2BBFF *":
    """itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterIUC2MD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast(obj)

class itkImageToMeshFilterIUC3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self, unsigned int idx, itkImageUC3 input)
        SetInput(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self, itkImageUC3 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC3 const *":
        """
        GetInput(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self, unsigned int idx) -> itkImageUC3
        GetInput(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self) -> itkImageUC3

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD3QEMTD3BBFF *":
        """
        GetOutput(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self) -> itkMeshD3QEMTD3BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterIUC3MD3QEMTD3BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUC3MD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUC3MD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterIUC3MD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterIUC3MD3QEMTD3BBFF

        Create a new object of the class itkImageToMeshFilterIUC3MD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterIUC3MD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterIUC3MD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterIUC3MD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterIUC3MD3QEMTD3BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_SetInput, None, itkImageToMeshFilterIUC3MD3QEMTD3BBFF)
itkImageToMeshFilterIUC3MD3QEMTD3BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetInput, None, itkImageToMeshFilterIUC3MD3QEMTD3BBFF)
itkImageToMeshFilterIUC3MD3QEMTD3BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetOutput, None, itkImageToMeshFilterIUC3MD3QEMTD3BBFF)
itkImageToMeshFilterIUC3MD3QEMTD3BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GenerateOutputInformation, None, itkImageToMeshFilterIUC3MD3QEMTD3BBFF)
itkImageToMeshFilterIUC3MD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_swigregister
itkImageToMeshFilterIUC3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterIUC3MD3QEMTD3BBFF)

def itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUC3MD3QEMTD3BBFF *":
    """itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterIUC3MD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast(obj)

class itkImageToMeshFilterIUS2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self, unsigned int idx, itkImageUS2 input)
        SetInput(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self, itkImageUS2 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS2 const *":
        """
        GetInput(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self, unsigned int idx) -> itkImageUS2
        GetInput(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self) -> itkImageUS2

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD2QEMTD2BBFF *":
        """
        GetOutput(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self) -> itkMeshD2QEMTD2BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterIUS2MD2QEMTD2BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUS2MD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUS2MD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterIUS2MD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterIUS2MD2QEMTD2BBFF

        Create a new object of the class itkImageToMeshFilterIUS2MD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterIUS2MD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterIUS2MD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterIUS2MD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterIUS2MD2QEMTD2BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_SetInput, None, itkImageToMeshFilterIUS2MD2QEMTD2BBFF)
itkImageToMeshFilterIUS2MD2QEMTD2BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetInput, None, itkImageToMeshFilterIUS2MD2QEMTD2BBFF)
itkImageToMeshFilterIUS2MD2QEMTD2BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetOutput, None, itkImageToMeshFilterIUS2MD2QEMTD2BBFF)
itkImageToMeshFilterIUS2MD2QEMTD2BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GenerateOutputInformation, None, itkImageToMeshFilterIUS2MD2QEMTD2BBFF)
itkImageToMeshFilterIUS2MD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_swigregister
itkImageToMeshFilterIUS2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterIUS2MD2QEMTD2BBFF)

def itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUS2MD2QEMTD2BBFF *":
    """itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterIUS2MD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast(obj)

class itkImageToMeshFilterIUS3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    """


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    C++ includes: itkImageToMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self, unsigned int idx, itkImageUS3 input)
        SetInput(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self, itkImageUS3 input)
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS3 const *":
        """
        GetInput(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self, unsigned int idx) -> itkImageUS3
        GetInput(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self) -> itkImageUS3

        Get the input image of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetInput(self, *args)


    def GetOutput(self) -> "itkMeshD3QEMTD3BBFF *":
        """
        GetOutput(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self) -> itkMeshD3QEMTD3BBFF

        Get the output Mesh of
        this process object. 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetOutput(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkImageToMeshFilterIUS3MD3QEMTD3BBFF self)

        Prepare
        the output 
        """
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GenerateOutputInformation(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUS3MD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUS3MD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkImageToMeshFilterIUS3MD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToMeshFilterIUS3MD3QEMTD3BBFF

        Create a new object of the class itkImageToMeshFilterIUS3MD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToMeshFilterIUS3MD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToMeshFilterIUS3MD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToMeshFilterIUS3MD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToMeshFilterIUS3MD3QEMTD3BBFF.SetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_SetInput, None, itkImageToMeshFilterIUS3MD3QEMTD3BBFF)
itkImageToMeshFilterIUS3MD3QEMTD3BBFF.GetInput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetInput, None, itkImageToMeshFilterIUS3MD3QEMTD3BBFF)
itkImageToMeshFilterIUS3MD3QEMTD3BBFF.GetOutput = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetOutput, None, itkImageToMeshFilterIUS3MD3QEMTD3BBFF)
itkImageToMeshFilterIUS3MD3QEMTD3BBFF.GenerateOutputInformation = new_instancemethod(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GenerateOutputInformation, None, itkImageToMeshFilterIUS3MD3QEMTD3BBFF)
itkImageToMeshFilterIUS3MD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_swigregister
itkImageToMeshFilterIUS3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterIUS3MD3QEMTD3BBFF)

def itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkImageToMeshFilterIUS3MD3QEMTD3BBFF *":
    """itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast(itkLightObject obj) -> itkImageToMeshFilterIUS3MD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast(obj)

class itkMeshD2QEMTD2BBFF(itkPointSetD2QEMTD2BBFF):
    """


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces to a cell
    can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.

    C++ includes: itkMesh.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshD2QEMTD2BBFF_Pointer":
        """__New_orig__() -> itkMeshD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshD2QEMTD2BBFF_Pointer":
        """Clone(itkMeshD2QEMTD2BBFF self) -> itkMeshD2QEMTD2BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Clone(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """
        GetNumberOfCells(itkMeshD2QEMTD2BBFF self) -> unsigned long

        Mesh-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCells(self)


    def PassStructure(self, inputMesh: 'itkMeshD2QEMTD2BBFF') -> "void":
        """
        PassStructure(itkMeshD2QEMTD2BBFF self, itkMeshD2QEMTD2BBFF inputMesh)

        PointSet-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_PassStructure(self, inputMesh)


    def GetBoundingBox(self) -> "itkBoundingBoxUL2FMCULQEMPF2 const *":
        """
        GetBoundingBox(itkMeshD2QEMTD2BBFF self) -> itkBoundingBoxUL2FMCULQEMPF2

        Get the bounding box
        of the mesh. The methods return a pointer to the user-supplied
        bounding box as a convenience. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundingBox(self)


    def SetCellLinks(self, arg0: 'itkMapContainerULSIT') -> "void":
        """
        SetCellLinks(itkMeshD2QEMTD2BBFF self, itkMapContainerULSIT arg0)

        Access
        m_CellsLinksContainer, which contains parent cell links for each
        point. Since a point can be used by multiple cells, each point
        identifier accesses another container which holds the cell identifiers

        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellLinks(self, arg0)


    def GetCellLinks(self, *args) -> "itkMapContainerULSIT const *":
        """
        GetCellLinks(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULSIT
        GetCellLinks(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULSIT
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellLinks(self, *args)


    def SetCells(self, arg0: 'itkMapContainerULCIDQEMCTI2') -> "void":
        """
        SetCells(itkMeshD2QEMTD2BBFF self, itkMapContainerULCIDQEMCTI2 arg0)

        Access m_CellsContainer,
        which holds cells used by the mesh. Individual cells are accessed
        through cell identifiers. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCells(self, arg0)


    def GetCells(self, *args) -> "itkMapContainerULCIDQEMCTI2 const *":
        """
        GetCells(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULCIDQEMCTI2
        GetCells(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULCIDQEMCTI2
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCells(self, *args)


    def DeleteUnusedCellData(self) -> "void":
        """
        DeleteUnusedCellData(itkMeshD2QEMTD2BBFF self)

        Delete entries
        in m_CellDataContainer which do not have a corresponding entry in
        m_CellsContainer. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_DeleteUnusedCellData(self)


    def SetCell(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "void":
        """
        SetCell(itkMeshD2QEMTD2BBFF self, unsigned long arg0, itkCellInterfaceDQEMCTI2_AutoPointer arg1)

        Access routines to fill the
        Cells container (m_CellsContainer), and get information from it. If
        SetCell is used to overwrite a cell currently in the mesh, it is the
        caller's responsibility to release the memory for the cell currently
        at the CellIdentifier position prior to calling SetCell. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCell(self, arg0, arg1)


    def GetCell(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "bool":
        """GetCell(itkMeshD2QEMTD2BBFF self, unsigned long arg0, itkCellInterfaceDQEMCTI2_AutoPointer arg1) -> bool"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCell(self, arg0, arg1)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkMeshD2QEMTD2BBFF self, itkMapContainerULD arg0)
        SetCellData(itkMeshD2QEMTD2BBFF self, unsigned long arg0, double arg1)

        Access routines to fill
        the CellData container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULD
        GetCellData(itkMeshD2QEMTD2BBFF self) -> itkMapContainerULD
        GetCellData(itkMeshD2QEMTD2BBFF self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellData(self, *args)


    def SetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long') -> "void":
        """
        SetBoundaryAssignment(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId)

        Explicitly
        assign boundaryId as a part of the boundary of cellId. The identifiers
        boundaryId and cellId must identify cell objects already in the mesh.
        The dimension of boundaryId must be specified by dimension, and a
        unique CellFeatureIdentifier featureId must be assigned for each
        distinct boundary feature of a given dimension. CellFeatureIdentifier
        is equivalent to IdentifierType by default, and this type alias will
        not typically need to be changed. The UsingCells list of boundaryId is
        automatically updated to include cellId. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def GetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long *') -> "bool":
        """
        GetBoundaryAssignment(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) -> bool

        For the given
        cellId, get the identifier of a particular boundary feature of the
        given dimension. The featureId determines which boundary feature of
        the specified dimension is returned. For instance, if dimension is 1
        and featureId is 0, then GetBoundaryAssignment finds the 0th edge of
        the given cell. The return value indicates whether a feature of the
        appropriate dimension and featureId exists. If it does not, the
        BoundaryIdentifier pointer is left unchanged. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def RemoveBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char') -> "bool":
        """RemoveBoundaryAssignment(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long cellId, unsigned char featureId) -> bool"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_RemoveBoundaryAssignment(self, dimension, cellId, featureId)


    def GetNumberOfCellBoundaryFeatures(self, dimension: 'int', arg1: 'unsigned long') -> "unsigned char":
        """
        GetNumberOfCellBoundaryFeatures(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long arg1) -> unsigned char

        Interface to cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)


    def GetCellBoundaryFeature(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', arg3: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "bool":
        """
        GetCellBoundaryFeature(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long arg1, unsigned char arg2, itkCellInterfaceDQEMCTI2_AutoPointer arg3) -> bool

        Get the
        boundary feature of the given dimension of the given cell
        corresponding to the given feature identifier. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)


    def GetCellBoundaryFeatureNeighbors(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellBoundaryFeatureNeighbors(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long arg1, unsigned char arg2, setUL cellSet) -> unsigned long

        Get
        the set of cells neighboring the given cell across the given boundary
        feature. Returns the number of neighbors found. If cellSet is not
        nullptr, the set of cell pointers is filled in with identifiers of the
        neighboring cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)


    def GetCellNeighbors(self, cellId: 'unsigned long', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellNeighbors(itkMeshD2QEMTD2BBFF self, unsigned long cellId, setUL cellSet) -> unsigned long

        Get the set of
        cells having the given cell as part of their boundary. Returns the
        number of neighbors found. If cellSet is not nullptr, the set of cell
        pointers is filled in with identifiers of the neighboring cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellNeighbors(self, cellId, cellSet)


    def GetAssignedCellBoundaryIfOneExists(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', arg3: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "bool":
        """
        GetAssignedCellBoundaryIfOneExists(itkMeshD2QEMTD2BBFF self, int dimension, unsigned long arg1, unsigned char arg2, itkCellInterfaceDQEMCTI2_AutoPointer arg3) -> bool

        Check if there is an explicitly assigned boundary feature for the
        given dimension and cell- and cell-feature-identifiers. If there is, a
        pointer to it is given back through boundary (if boundary != nullptr)
        and true is returned. Otherwise, false is returned. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)


    def BuildCellLinks(self) -> "void":
        """
        BuildCellLinks(itkMeshD2QEMTD2BBFF self)

        Dynamically build
        the links from points back to their using cells. This information is
        stored in the cell links container, not in the points. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_BuildCellLinks(self)


    def Accept(self, mv: 'itkCellInterfaceDQEMCTI2::MultiVisitor *') -> "void":
        """
        Accept(itkMeshD2QEMTD2BBFF self, itkCellInterfaceDQEMCTI2::MultiVisitor * mv)

        This method iterates over
        all the cells in the mesh and has each cell Accept the MultiVisitor.
        See MultiVisitor for more information. (Note, this follows the Visitor
        Design Pattern.) 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Accept(self, mv)


    def SetCellsAllocationMethod(self, _arg: 'itkMeshEnums::MeshClassCellsAllocationMethod const') -> "void":
        """
        SetCellsAllocationMethod(itkMeshD2QEMTD2BBFF self, itkMeshEnums::MeshClassCellsAllocationMethod const _arg)

        Set/Get
        the identification of the method used to allocate cells WARNING:
        Failure to call this method correctly will lead to memory leaks and/or
        segmentation faults because the cell memory will not be erased or will
        be erased with an improper method. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellsAllocationMethod(self, _arg)


    def GetCellsAllocationMethod(self) -> "itkMeshEnums::MeshClassCellsAllocationMethod const &":
        """GetCellsAllocationMethod(itkMeshD2QEMTD2BBFF self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellsAllocationMethod(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshD2QEMTD2BBFF

    def cast(obj: 'itkLightObject') -> "itkMeshD2QEMTD2BBFF *":
        """cast(itkLightObject obj) -> itkMeshD2QEMTD2BBFF"""
        return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshD2QEMTD2BBFF

        Create a new object of the class itkMeshD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD2QEMTD2BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshD2QEMTD2BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshD2QEMTD2BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Clone, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetNumberOfCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCells, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.PassStructure = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_PassStructure, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetBoundingBox = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundingBox, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellLinks, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellLinks, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCells, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCells, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.DeleteUnusedCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_DeleteUnusedCellData, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCell, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCell, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellData, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellData, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetBoundaryAssignment, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundaryAssignment, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.RemoveBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_RemoveBoundaryAssignment, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetNumberOfCellBoundaryFeatures = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCellBoundaryFeatures, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellBoundaryFeature = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeature, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellBoundaryFeatureNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeatureNeighbors, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellNeighbors, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetAssignedCellBoundaryIfOneExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetAssignedCellBoundaryIfOneExists, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.BuildCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_BuildCellLinks, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.Accept = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Accept, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.SetCellsAllocationMethod = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellsAllocationMethod, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF.GetCellsAllocationMethod = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellsAllocationMethod, None, itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_swigregister
itkMeshD2QEMTD2BBFF_swigregister(itkMeshD2QEMTD2BBFF)

def itkMeshD2QEMTD2BBFF___New_orig__() -> "itkMeshD2QEMTD2BBFF_Pointer":
    """itkMeshD2QEMTD2BBFF___New_orig__() -> itkMeshD2QEMTD2BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF___New_orig__()

def itkMeshD2QEMTD2BBFF_cast(obj: 'itkLightObject') -> "itkMeshD2QEMTD2BBFF *":
    """itkMeshD2QEMTD2BBFF_cast(itkLightObject obj) -> itkMeshD2QEMTD2BBFF"""
    return _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_cast(obj)

class itkMeshD3QEMTD3BBFF(itkPointSetD3QEMTD3BBFF):
    """


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces to a cell
    can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.

    C++ includes: itkMesh.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeshD3QEMTD3BBFF_Pointer":
        """__New_orig__() -> itkMeshD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeshD3QEMTD3BBFF_Pointer":
        """Clone(itkMeshD3QEMTD3BBFF self) -> itkMeshD3QEMTD3BBFF_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Clone(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """
        GetNumberOfCells(itkMeshD3QEMTD3BBFF self) -> unsigned long

        Mesh-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCells(self)


    def PassStructure(self, inputMesh: 'itkMeshD3QEMTD3BBFF') -> "void":
        """
        PassStructure(itkMeshD3QEMTD3BBFF self, itkMeshD3QEMTD3BBFF inputMesh)

        PointSet-level
        operation interface. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_PassStructure(self, inputMesh)


    def GetBoundingBox(self) -> "itkBoundingBoxUL3FMCULQEMPF3 const *":
        """
        GetBoundingBox(itkMeshD3QEMTD3BBFF self) -> itkBoundingBoxUL3FMCULQEMPF3

        Get the bounding box
        of the mesh. The methods return a pointer to the user-supplied
        bounding box as a convenience. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundingBox(self)


    def SetCellLinks(self, arg0: 'itkMapContainerULSIT') -> "void":
        """
        SetCellLinks(itkMeshD3QEMTD3BBFF self, itkMapContainerULSIT arg0)

        Access
        m_CellsLinksContainer, which contains parent cell links for each
        point. Since a point can be used by multiple cells, each point
        identifier accesses another container which holds the cell identifiers

        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellLinks(self, arg0)


    def GetCellLinks(self, *args) -> "itkMapContainerULSIT const *":
        """
        GetCellLinks(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULSIT
        GetCellLinks(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULSIT
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellLinks(self, *args)


    def SetCells(self, arg0: 'itkMapContainerULCIDQEMCTI3') -> "void":
        """
        SetCells(itkMeshD3QEMTD3BBFF self, itkMapContainerULCIDQEMCTI3 arg0)

        Access m_CellsContainer,
        which holds cells used by the mesh. Individual cells are accessed
        through cell identifiers. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCells(self, arg0)


    def GetCells(self, *args) -> "itkMapContainerULCIDQEMCTI3 const *":
        """
        GetCells(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULCIDQEMCTI3
        GetCells(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULCIDQEMCTI3
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCells(self, *args)


    def DeleteUnusedCellData(self) -> "void":
        """
        DeleteUnusedCellData(itkMeshD3QEMTD3BBFF self)

        Delete entries
        in m_CellDataContainer which do not have a corresponding entry in
        m_CellsContainer. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_DeleteUnusedCellData(self)


    def SetCell(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "void":
        """
        SetCell(itkMeshD3QEMTD3BBFF self, unsigned long arg0, itkCellInterfaceDQEMCTI3_AutoPointer arg1)

        Access routines to fill the
        Cells container (m_CellsContainer), and get information from it. If
        SetCell is used to overwrite a cell currently in the mesh, it is the
        caller's responsibility to release the memory for the cell currently
        at the CellIdentifier position prior to calling SetCell. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCell(self, arg0, arg1)


    def GetCell(self, arg0: 'unsigned long', arg1: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "bool":
        """GetCell(itkMeshD3QEMTD3BBFF self, unsigned long arg0, itkCellInterfaceDQEMCTI3_AutoPointer arg1) -> bool"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCell(self, arg0, arg1)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkMeshD3QEMTD3BBFF self, itkMapContainerULD arg0)
        SetCellData(itkMeshD3QEMTD3BBFF self, unsigned long arg0, double arg1)

        Access routines to fill
        the CellData container, and get information from it. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULD
        GetCellData(itkMeshD3QEMTD3BBFF self) -> itkMapContainerULD
        GetCellData(itkMeshD3QEMTD3BBFF self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellData(self, *args)


    def SetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long') -> "void":
        """
        SetBoundaryAssignment(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId)

        Explicitly
        assign boundaryId as a part of the boundary of cellId. The identifiers
        boundaryId and cellId must identify cell objects already in the mesh.
        The dimension of boundaryId must be specified by dimension, and a
        unique CellFeatureIdentifier featureId must be assigned for each
        distinct boundary feature of a given dimension. CellFeatureIdentifier
        is equivalent to IdentifierType by default, and this type alias will
        not typically need to be changed. The UsingCells list of boundaryId is
        automatically updated to include cellId. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def GetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long *') -> "bool":
        """
        GetBoundaryAssignment(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) -> bool

        For the given
        cellId, get the identifier of a particular boundary feature of the
        given dimension. The featureId determines which boundary feature of
        the specified dimension is returned. For instance, if dimension is 1
        and featureId is 0, then GetBoundaryAssignment finds the 0th edge of
        the given cell. The return value indicates whether a feature of the
        appropriate dimension and featureId exists. If it does not, the
        BoundaryIdentifier pointer is left unchanged. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def RemoveBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char') -> "bool":
        """RemoveBoundaryAssignment(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long cellId, unsigned char featureId) -> bool"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_RemoveBoundaryAssignment(self, dimension, cellId, featureId)


    def GetNumberOfCellBoundaryFeatures(self, dimension: 'int', arg1: 'unsigned long') -> "unsigned char":
        """
        GetNumberOfCellBoundaryFeatures(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long arg1) -> unsigned char

        Interface to cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)


    def GetCellBoundaryFeature(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', arg3: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "bool":
        """
        GetCellBoundaryFeature(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long arg1, unsigned char arg2, itkCellInterfaceDQEMCTI3_AutoPointer arg3) -> bool

        Get the
        boundary feature of the given dimension of the given cell
        corresponding to the given feature identifier. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)


    def GetCellBoundaryFeatureNeighbors(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellBoundaryFeatureNeighbors(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long arg1, unsigned char arg2, setUL cellSet) -> unsigned long

        Get
        the set of cells neighboring the given cell across the given boundary
        feature. Returns the number of neighbors found. If cellSet is not
        nullptr, the set of cell pointers is filled in with identifiers of the
        neighboring cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)


    def GetCellNeighbors(self, cellId: 'unsigned long', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellNeighbors(itkMeshD3QEMTD3BBFF self, unsigned long cellId, setUL cellSet) -> unsigned long

        Get the set of
        cells having the given cell as part of their boundary. Returns the
        number of neighbors found. If cellSet is not nullptr, the set of cell
        pointers is filled in with identifiers of the neighboring cells. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellNeighbors(self, cellId, cellSet)


    def GetAssignedCellBoundaryIfOneExists(self, dimension: 'int', arg1: 'unsigned long', arg2: 'unsigned char', arg3: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "bool":
        """
        GetAssignedCellBoundaryIfOneExists(itkMeshD3QEMTD3BBFF self, int dimension, unsigned long arg1, unsigned char arg2, itkCellInterfaceDQEMCTI3_AutoPointer arg3) -> bool

        Check if there is an explicitly assigned boundary feature for the
        given dimension and cell- and cell-feature-identifiers. If there is, a
        pointer to it is given back through boundary (if boundary != nullptr)
        and true is returned. Otherwise, false is returned. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)


    def BuildCellLinks(self) -> "void":
        """
        BuildCellLinks(itkMeshD3QEMTD3BBFF self)

        Dynamically build
        the links from points back to their using cells. This information is
        stored in the cell links container, not in the points. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_BuildCellLinks(self)


    def Accept(self, mv: 'itkCellInterfaceDQEMCTI3::MultiVisitor *') -> "void":
        """
        Accept(itkMeshD3QEMTD3BBFF self, itkCellInterfaceDQEMCTI3::MultiVisitor * mv)

        This method iterates over
        all the cells in the mesh and has each cell Accept the MultiVisitor.
        See MultiVisitor for more information. (Note, this follows the Visitor
        Design Pattern.) 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Accept(self, mv)


    def SetCellsAllocationMethod(self, _arg: 'itkMeshEnums::MeshClassCellsAllocationMethod const') -> "void":
        """
        SetCellsAllocationMethod(itkMeshD3QEMTD3BBFF self, itkMeshEnums::MeshClassCellsAllocationMethod const _arg)

        Set/Get
        the identification of the method used to allocate cells WARNING:
        Failure to call this method correctly will lead to memory leaks and/or
        segmentation faults because the cell memory will not be erased or will
        be erased with an improper method. 
        """
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellsAllocationMethod(self, _arg)


    def GetCellsAllocationMethod(self) -> "itkMeshEnums::MeshClassCellsAllocationMethod const &":
        """GetCellsAllocationMethod(itkMeshD3QEMTD3BBFF self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellsAllocationMethod(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshD3QEMTD3BBFF

    def cast(obj: 'itkLightObject') -> "itkMeshD3QEMTD3BBFF *":
        """cast(itkLightObject obj) -> itkMeshD3QEMTD3BBFF"""
        return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeshD3QEMTD3BBFF

        Create a new object of the class itkMeshD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD3QEMTD3BBFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshD3QEMTD3BBFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeshD3QEMTD3BBFF.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Clone, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetNumberOfCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCells, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.PassStructure = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_PassStructure, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetBoundingBox = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundingBox, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellLinks, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellLinks, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCells, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCells, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.DeleteUnusedCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_DeleteUnusedCellData, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCell, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCell, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellData, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellData = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellData, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetBoundaryAssignment, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundaryAssignment, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.RemoveBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_RemoveBoundaryAssignment, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetNumberOfCellBoundaryFeatures = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCellBoundaryFeatures, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellBoundaryFeature = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeature, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellBoundaryFeatureNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeatureNeighbors, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellNeighbors, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetAssignedCellBoundaryIfOneExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetAssignedCellBoundaryIfOneExists, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.BuildCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_BuildCellLinks, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.Accept = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Accept, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.SetCellsAllocationMethod = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellsAllocationMethod, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF.GetCellsAllocationMethod = new_instancemethod(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellsAllocationMethod, None, itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF_swigregister = _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_swigregister
itkMeshD3QEMTD3BBFF_swigregister(itkMeshD3QEMTD3BBFF)

def itkMeshD3QEMTD3BBFF___New_orig__() -> "itkMeshD3QEMTD3BBFF_Pointer":
    """itkMeshD3QEMTD3BBFF___New_orig__() -> itkMeshD3QEMTD3BBFF_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF___New_orig__()

def itkMeshD3QEMTD3BBFF_cast(obj: 'itkLightObject') -> "itkMeshD3QEMTD3BBFF *":
    """itkMeshD3QEMTD3BBFF_cast(itkLightObject obj) -> itkMeshD3QEMTD3BBFF"""
    return _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_cast(obj)

class itkQuadEdgeMeshD2(itkMeshD2QEMTD2BBFF):
    """


    Mesh class for 2D manifolds embedded in ND space.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306

    C++ includes: itkQuadEdgeMesh.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkQuadEdgeMeshD2_Pointer":
        """__New_orig__() -> itkQuadEdgeMeshD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkQuadEdgeMeshD2_Pointer":
        """Clone(itkQuadEdgeMeshD2 self) -> itkQuadEdgeMeshD2_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clone(self)


    def Clear(self) -> "void":
        """
        Clear(itkQuadEdgeMeshD2 self)

        another way of deleting all
        the cells 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clear(self)


    def GetEdgeCells(self, *args) -> "itkMapContainerULCIDQEMCTI2 const *":
        """
        GetEdgeCells(itkQuadEdgeMeshD2 self) -> itkMapContainerULCIDQEMCTI2
        GetEdgeCells(itkQuadEdgeMeshD2 self) -> itkMapContainerULCIDQEMCTI2
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdgeCells(self, *args)


    def SetEdgeCells(self, edgeCells: 'itkMapContainerULCIDQEMCTI2') -> "void":
        """SetEdgeCells(itkQuadEdgeMeshD2 self, itkMapContainerULCIDQEMCTI2 edgeCells)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCells(self, edgeCells)


    def SetEdgeCell(self, cellId: 'unsigned long', cellPointer: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "void":
        """SetEdgeCell(itkQuadEdgeMeshD2 self, unsigned long cellId, itkCellInterfaceDQEMCTI2_AutoPointer cellPointer)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCell(self, cellId, cellPointer)


    def SqueezePointsIds(self) -> "void":
        """
        SqueezePointsIds(itkQuadEdgeMeshD2 self)

        squeeze the point
        container to be able to write the file properly 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SqueezePointsIds(self)


    def BuildCellLinks(self) -> "void":
        """
        BuildCellLinks(itkQuadEdgeMeshD2 self)

        overloaded method
        for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_BuildCellLinks(self)


    def SetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long') -> "void":
        """
        SetBoundaryAssignment(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId)

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def GetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long *') -> "bool":
        """
        GetBoundaryAssignment(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def RemoveBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char') -> "bool":
        """
        RemoveBoundaryAssignment(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_RemoveBoundaryAssignment(self, dimension, cellId, featureId)


    def GetCellBoundaryFeature(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellAP: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "bool":
        """
        GetCellBoundaryFeature(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI2_AutoPointer cellAP) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeature(self, dimension, cellId, featureId, cellAP)


    def GetCellBoundaryFeatureNeighbors(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellBoundaryFeatureNeighbors(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId, setUL cellSet) -> unsigned long

        overloaded method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeatureNeighbors(self, dimension, cellId, featureId, cellSet)


    def GetCellNeighbors(self, arg0: 'unsigned long', arg1: 'setUL') -> "unsigned long":
        """
        GetCellNeighbors(itkQuadEdgeMeshD2 self, unsigned long arg0, setUL arg1) -> unsigned long

        NOTE ALEX: this
        method do not use CellFeature and thus could be recoded 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellNeighbors(self, arg0, arg1)


    def GetAssignedCellBoundaryIfOneExists(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellAP: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "bool":
        """
        GetAssignedCellBoundaryIfOneExists(itkQuadEdgeMeshD2 self, int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI2_AutoPointer cellAP) -> bool

        overloaded method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetAssignedCellBoundaryIfOneExists(self, dimension, cellId, featureId, cellAP)


    def SetCell(self, cId: 'unsigned long', cell: 'itkCellInterfaceDQEMCTI2_AutoPointer') -> "void":
        """
        SetCell(itkQuadEdgeMeshD2 self, unsigned long cId, itkCellInterfaceDQEMCTI2_AutoPointer cell)

        overloaded method for
        backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetCell(self, cId, cell)


    def FindFirstUnusedPointIndex(self) -> "unsigned long":
        """
        FindFirstUnusedPointIndex(itkQuadEdgeMeshD2 self) -> unsigned long

        Methods
        to simplify point/edge insertion/search. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedPointIndex(self)


    def FindFirstUnusedCellIndex(self) -> "unsigned long":
        """FindFirstUnusedCellIndex(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedCellIndex(self)


    def PushOnContainer(self, newEdge: 'itkQuadEdgeMeshLineCellCIDQEMCTI2') -> "void":
        """PushOnContainer(itkQuadEdgeMeshD2 self, itkQuadEdgeMeshLineCellCIDQEMCTI2 newEdge)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_PushOnContainer(self, newEdge)


    def AddPoint(self, p: 'itkQuadEdgeMeshPointF2GQEULULBBT') -> "unsigned long":
        """AddPoint(itkQuadEdgeMeshD2 self, itkQuadEdgeMeshPointF2GQEULULBBT p) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddPoint(self, p)


    def AddEdge(self, orgPid: 'unsigned long const &', destPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """AddEdge(itkQuadEdgeMeshD2 self, unsigned long const & orgPid, unsigned long const & destPid) -> itkGeometricalQuadEdgeULULBBF"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdge(self, orgPid, destPid)


    def AddEdgeWithSecurePointList(self, orgPid: 'unsigned long const &', destPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """AddEdgeWithSecurePointList(itkQuadEdgeMeshD2 self, unsigned long const & orgPid, unsigned long const & destPid) -> itkGeometricalQuadEdgeULULBBF"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdgeWithSecurePointList(self, orgPid, destPid)


    def AddFace(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFace(itkQuadEdgeMeshD2 self, itkGeometricalQuadEdgeULULBBF e)
        AddFace(itkQuadEdgeMeshD2 self, vectorUL points) -> itkGeometricalQuadEdgeULULBBF

        Add a polygonal face to the
        Mesh. The list of points is expected to be ordered counter-clock wise.
        The inside of the new face will be on the left side of the edges
        formed by consecutive points in this list. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFace(self, *args)


    def AddFaceWithSecurePointList(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFaceWithSecurePointList(itkQuadEdgeMeshD2 self, vectorUL points) -> itkGeometricalQuadEdgeULULBBF
        AddFaceWithSecurePointList(itkQuadEdgeMeshD2 self, vectorUL points, bool CheckEdges) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceWithSecurePointList(self, *args)


    def AddFaceTriangle(self, aPid: 'unsigned long const &', bPid: 'unsigned long const &', cPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFaceTriangle(itkQuadEdgeMeshD2 self, unsigned long const & aPid, unsigned long const & bPid, unsigned long const & cPid) -> itkGeometricalQuadEdgeULULBBF

        Adds a triangular
        face to the Mesh 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceTriangle(self, aPid, bPid, cPid)


    def DeletePoint(self, pid: 'unsigned long const &') -> "void":
        """
        DeletePoint(itkQuadEdgeMeshD2 self, unsigned long const & pid)

        Deletion methods 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeletePoint(self, pid)


    def DeleteEdge(self, *args) -> "void":
        """
        DeleteEdge(itkQuadEdgeMeshD2 self, unsigned long const & orgPid, unsigned long const & destPid)
        DeleteEdge(itkQuadEdgeMeshD2 self, itkGeometricalQuadEdgeULULBBF e)
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteEdge(self, *args)


    def LightWeightDeleteEdge(self, *args) -> "void":
        """
        LightWeightDeleteEdge(itkQuadEdgeMeshD2 self, itkQuadEdgeMeshLineCellCIDQEMCTI2 e)
        LightWeightDeleteEdge(itkQuadEdgeMeshD2 self, itkGeometricalQuadEdgeULULBBF e)
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_LightWeightDeleteEdge(self, *args)


    def DeleteFace(self, faceToDelete: 'unsigned long') -> "void":
        """DeleteFace(itkQuadEdgeMeshD2 self, unsigned long faceToDelete)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteFace(self, faceToDelete)


    def GetPoint(self, *args) -> "itkQuadEdgeMeshPointF2GQEULULBBT":
        """
        GetPoint(itkQuadEdgeMeshD2 self, unsigned long pid, itkQuadEdgeMeshPointF2GQEULULBBT pt) -> bool
        GetPoint(itkQuadEdgeMeshD2 self, unsigned long const & pid) -> itkQuadEdgeMeshPointF2GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetPoint(self, *args)


    def GetVector(self, pid: 'unsigned long const &') -> "itkVectorF2":
        """GetVector(itkQuadEdgeMeshD2 self, unsigned long const & pid) -> itkVectorF2"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetVector(self, pid)


    def GetEdge(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        GetEdge(itkQuadEdgeMeshD2 self) -> itkGeometricalQuadEdgeULULBBF
        GetEdge(itkQuadEdgeMeshD2 self, unsigned long const & eid) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdge(self, *args)


    def FindEdge(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        FindEdge(itkQuadEdgeMeshD2 self, unsigned long const & pid0) -> itkGeometricalQuadEdgeULULBBF
        FindEdge(itkQuadEdgeMeshD2 self, unsigned long const & pid0, unsigned long const & pid1) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdge(self, *args)


    def FindEdgeCell(self, pid0: 'unsigned long const &', pid1: 'unsigned long const &') -> "itkQuadEdgeMeshLineCellCIDQEMCTI2 *":
        """FindEdgeCell(itkQuadEdgeMeshD2 self, unsigned long const & pid0, unsigned long const & pid1) -> itkQuadEdgeMeshLineCellCIDQEMCTI2"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdgeCell(self, pid0, pid1)


    def ComputeEdgeLength(self, e: 'itkGeometricalQuadEdgeULULBBF') -> "float":
        """
        ComputeEdgeLength(itkQuadEdgeMeshD2 self, itkGeometricalQuadEdgeULULBBF e) -> float

        Compute the
        euclidian length of argument edge. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeEdgeLength(self, e)


    def ComputeNumberOfPoints(self) -> "unsigned long":
        """ComputeNumberOfPoints(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfPoints(self)


    def ComputeNumberOfFaces(self) -> "unsigned long":
        """ComputeNumberOfFaces(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfFaces(self)


    def ComputeNumberOfEdges(self) -> "unsigned long":
        """ComputeNumberOfEdges(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfEdges(self)


    def Splice(self, a: 'itkGeometricalQuadEdgeULULBBF', b: 'itkGeometricalQuadEdgeULULBBF') -> "unsigned long":
        """Splice(itkQuadEdgeMeshD2 self, itkGeometricalQuadEdgeULULBBF a, itkGeometricalQuadEdgeULULBBF b) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Splice(self, a, b)


    def ClearFreePointAndCellIndexesLists(self) -> "void":
        """ClearFreePointAndCellIndexesLists(itkQuadEdgeMeshD2 self)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ClearFreePointAndCellIndexesLists(self)


    def GetNumberOfFaces(self) -> "unsigned long":
        """GetNumberOfFaces(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfFaces(self)


    def GetNumberOfEdges(self) -> "unsigned long":
        """GetNumberOfEdges(itkQuadEdgeMeshD2 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfEdges(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkQuadEdgeMeshD2

    def cast(obj: 'itkLightObject') -> "itkQuadEdgeMeshD2 *":
        """cast(itkLightObject obj) -> itkQuadEdgeMeshD2"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshD2

        Create a new object of the class itkQuadEdgeMeshD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkQuadEdgeMeshD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkQuadEdgeMeshD2.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clone, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.Clear = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clear, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetEdgeCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdgeCells, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.SetEdgeCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCells, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.SetEdgeCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCell, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.SqueezePointsIds = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SqueezePointsIds, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.BuildCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_BuildCellLinks, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.SetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetBoundaryAssignment, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetBoundaryAssignment, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.RemoveBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_RemoveBoundaryAssignment, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetCellBoundaryFeature = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeature, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetCellBoundaryFeatureNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeatureNeighbors, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetCellNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellNeighbors, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetAssignedCellBoundaryIfOneExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetAssignedCellBoundaryIfOneExists, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.SetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetCell, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.FindFirstUnusedPointIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedPointIndex, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.FindFirstUnusedCellIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedCellIndex, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.PushOnContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_PushOnContainer, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddPoint, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdge, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddEdgeWithSecurePointList = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdgeWithSecurePointList, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddFace = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFace, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddFaceWithSecurePointList = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceWithSecurePointList, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.AddFaceTriangle = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceTriangle, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.DeletePoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeletePoint, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.DeleteEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteEdge, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.LightWeightDeleteEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_LightWeightDeleteEdge, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.DeleteFace = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteFace, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetPoint, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetVector = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetVector, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdge, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.FindEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdge, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.FindEdgeCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdgeCell, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.ComputeEdgeLength = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeEdgeLength, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.ComputeNumberOfPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfPoints, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.ComputeNumberOfFaces = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfFaces, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.ComputeNumberOfEdges = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfEdges, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.Splice = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Splice, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.ClearFreePointAndCellIndexesLists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ClearFreePointAndCellIndexesLists, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetNumberOfFaces = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfFaces, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2.GetNumberOfEdges = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfEdges, None, itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2_swigregister = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_swigregister
itkQuadEdgeMeshD2_swigregister(itkQuadEdgeMeshD2)

def itkQuadEdgeMeshD2___New_orig__() -> "itkQuadEdgeMeshD2_Pointer":
    """itkQuadEdgeMeshD2___New_orig__() -> itkQuadEdgeMeshD2_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2___New_orig__()

def itkQuadEdgeMeshD2_cast(obj: 'itkLightObject') -> "itkQuadEdgeMeshD2 *":
    """itkQuadEdgeMeshD2_cast(itkLightObject obj) -> itkQuadEdgeMeshD2"""
    return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_cast(obj)

class itkQuadEdgeMeshD3(itkMeshD3QEMTD3BBFF):
    """


    Mesh class for 2D manifolds embedded in ND space.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306

    C++ includes: itkQuadEdgeMesh.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkQuadEdgeMeshD3_Pointer":
        """__New_orig__() -> itkQuadEdgeMeshD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkQuadEdgeMeshD3_Pointer":
        """Clone(itkQuadEdgeMeshD3 self) -> itkQuadEdgeMeshD3_Pointer"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clone(self)


    def Clear(self) -> "void":
        """
        Clear(itkQuadEdgeMeshD3 self)

        another way of deleting all
        the cells 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clear(self)


    def GetEdgeCells(self, *args) -> "itkMapContainerULCIDQEMCTI3 const *":
        """
        GetEdgeCells(itkQuadEdgeMeshD3 self) -> itkMapContainerULCIDQEMCTI3
        GetEdgeCells(itkQuadEdgeMeshD3 self) -> itkMapContainerULCIDQEMCTI3
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdgeCells(self, *args)


    def SetEdgeCells(self, edgeCells: 'itkMapContainerULCIDQEMCTI3') -> "void":
        """SetEdgeCells(itkQuadEdgeMeshD3 self, itkMapContainerULCIDQEMCTI3 edgeCells)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCells(self, edgeCells)


    def SetEdgeCell(self, cellId: 'unsigned long', cellPointer: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "void":
        """SetEdgeCell(itkQuadEdgeMeshD3 self, unsigned long cellId, itkCellInterfaceDQEMCTI3_AutoPointer cellPointer)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCell(self, cellId, cellPointer)


    def SqueezePointsIds(self) -> "void":
        """
        SqueezePointsIds(itkQuadEdgeMeshD3 self)

        squeeze the point
        container to be able to write the file properly 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SqueezePointsIds(self)


    def BuildCellLinks(self) -> "void":
        """
        BuildCellLinks(itkQuadEdgeMeshD3 self)

        overloaded method
        for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_BuildCellLinks(self)


    def SetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long') -> "void":
        """
        SetBoundaryAssignment(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId)

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def GetBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', boundaryId: 'unsigned long *') -> "bool":
        """
        GetBoundaryAssignment(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)


    def RemoveBoundaryAssignment(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char') -> "bool":
        """
        RemoveBoundaryAssignment(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_RemoveBoundaryAssignment(self, dimension, cellId, featureId)


    def GetCellBoundaryFeature(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellAP: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "bool":
        """
        GetCellBoundaryFeature(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI3_AutoPointer cellAP) -> bool

        overloaded
        method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeature(self, dimension, cellId, featureId, cellAP)


    def GetCellBoundaryFeatureNeighbors(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellSet: 'setUL') -> "unsigned long":
        """
        GetCellBoundaryFeatureNeighbors(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId, setUL cellSet) -> unsigned long

        overloaded method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeatureNeighbors(self, dimension, cellId, featureId, cellSet)


    def GetCellNeighbors(self, arg0: 'unsigned long', arg1: 'setUL') -> "unsigned long":
        """
        GetCellNeighbors(itkQuadEdgeMeshD3 self, unsigned long arg0, setUL arg1) -> unsigned long

        NOTE ALEX: this
        method do not use CellFeature and thus could be recoded 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellNeighbors(self, arg0, arg1)


    def GetAssignedCellBoundaryIfOneExists(self, dimension: 'int', cellId: 'unsigned long', featureId: 'unsigned char', cellAP: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "bool":
        """
        GetAssignedCellBoundaryIfOneExists(itkQuadEdgeMeshD3 self, int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI3_AutoPointer cellAP) -> bool

        overloaded method for backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetAssignedCellBoundaryIfOneExists(self, dimension, cellId, featureId, cellAP)


    def SetCell(self, cId: 'unsigned long', cell: 'itkCellInterfaceDQEMCTI3_AutoPointer') -> "void":
        """
        SetCell(itkQuadEdgeMeshD3 self, unsigned long cId, itkCellInterfaceDQEMCTI3_AutoPointer cell)

        overloaded method for
        backward compatibility 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetCell(self, cId, cell)


    def FindFirstUnusedPointIndex(self) -> "unsigned long":
        """
        FindFirstUnusedPointIndex(itkQuadEdgeMeshD3 self) -> unsigned long

        Methods
        to simplify point/edge insertion/search. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedPointIndex(self)


    def FindFirstUnusedCellIndex(self) -> "unsigned long":
        """FindFirstUnusedCellIndex(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedCellIndex(self)


    def PushOnContainer(self, newEdge: 'itkQuadEdgeMeshLineCellCIDQEMCTI3') -> "void":
        """PushOnContainer(itkQuadEdgeMeshD3 self, itkQuadEdgeMeshLineCellCIDQEMCTI3 newEdge)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_PushOnContainer(self, newEdge)


    def AddPoint(self, p: 'itkQuadEdgeMeshPointF3GQEULULBBT') -> "unsigned long":
        """AddPoint(itkQuadEdgeMeshD3 self, itkQuadEdgeMeshPointF3GQEULULBBT p) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddPoint(self, p)


    def AddEdge(self, orgPid: 'unsigned long const &', destPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """AddEdge(itkQuadEdgeMeshD3 self, unsigned long const & orgPid, unsigned long const & destPid) -> itkGeometricalQuadEdgeULULBBF"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdge(self, orgPid, destPid)


    def AddEdgeWithSecurePointList(self, orgPid: 'unsigned long const &', destPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """AddEdgeWithSecurePointList(itkQuadEdgeMeshD3 self, unsigned long const & orgPid, unsigned long const & destPid) -> itkGeometricalQuadEdgeULULBBF"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdgeWithSecurePointList(self, orgPid, destPid)


    def AddFace(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFace(itkQuadEdgeMeshD3 self, itkGeometricalQuadEdgeULULBBF e)
        AddFace(itkQuadEdgeMeshD3 self, vectorUL points) -> itkGeometricalQuadEdgeULULBBF

        Add a polygonal face to the
        Mesh. The list of points is expected to be ordered counter-clock wise.
        The inside of the new face will be on the left side of the edges
        formed by consecutive points in this list. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFace(self, *args)


    def AddFaceWithSecurePointList(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFaceWithSecurePointList(itkQuadEdgeMeshD3 self, vectorUL points) -> itkGeometricalQuadEdgeULULBBF
        AddFaceWithSecurePointList(itkQuadEdgeMeshD3 self, vectorUL points, bool CheckEdges) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceWithSecurePointList(self, *args)


    def AddFaceTriangle(self, aPid: 'unsigned long const &', bPid: 'unsigned long const &', cPid: 'unsigned long const &') -> "itkGeometricalQuadEdgeULULBBF *":
        """
        AddFaceTriangle(itkQuadEdgeMeshD3 self, unsigned long const & aPid, unsigned long const & bPid, unsigned long const & cPid) -> itkGeometricalQuadEdgeULULBBF

        Adds a triangular
        face to the Mesh 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceTriangle(self, aPid, bPid, cPid)


    def DeletePoint(self, pid: 'unsigned long const &') -> "void":
        """
        DeletePoint(itkQuadEdgeMeshD3 self, unsigned long const & pid)

        Deletion methods 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeletePoint(self, pid)


    def DeleteEdge(self, *args) -> "void":
        """
        DeleteEdge(itkQuadEdgeMeshD3 self, unsigned long const & orgPid, unsigned long const & destPid)
        DeleteEdge(itkQuadEdgeMeshD3 self, itkGeometricalQuadEdgeULULBBF e)
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteEdge(self, *args)


    def LightWeightDeleteEdge(self, *args) -> "void":
        """
        LightWeightDeleteEdge(itkQuadEdgeMeshD3 self, itkQuadEdgeMeshLineCellCIDQEMCTI3 e)
        LightWeightDeleteEdge(itkQuadEdgeMeshD3 self, itkGeometricalQuadEdgeULULBBF e)
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_LightWeightDeleteEdge(self, *args)


    def DeleteFace(self, faceToDelete: 'unsigned long') -> "void":
        """DeleteFace(itkQuadEdgeMeshD3 self, unsigned long faceToDelete)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteFace(self, faceToDelete)


    def GetPoint(self, *args) -> "itkQuadEdgeMeshPointF3GQEULULBBT":
        """
        GetPoint(itkQuadEdgeMeshD3 self, unsigned long pid, itkQuadEdgeMeshPointF3GQEULULBBT pt) -> bool
        GetPoint(itkQuadEdgeMeshD3 self, unsigned long const & pid) -> itkQuadEdgeMeshPointF3GQEULULBBT
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetPoint(self, *args)


    def GetVector(self, pid: 'unsigned long const &') -> "itkVectorF3":
        """GetVector(itkQuadEdgeMeshD3 self, unsigned long const & pid) -> itkVectorF3"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetVector(self, pid)


    def GetEdge(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        GetEdge(itkQuadEdgeMeshD3 self) -> itkGeometricalQuadEdgeULULBBF
        GetEdge(itkQuadEdgeMeshD3 self, unsigned long const & eid) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdge(self, *args)


    def FindEdge(self, *args) -> "itkGeometricalQuadEdgeULULBBF *":
        """
        FindEdge(itkQuadEdgeMeshD3 self, unsigned long const & pid0) -> itkGeometricalQuadEdgeULULBBF
        FindEdge(itkQuadEdgeMeshD3 self, unsigned long const & pid0, unsigned long const & pid1) -> itkGeometricalQuadEdgeULULBBF
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdge(self, *args)


    def FindEdgeCell(self, pid0: 'unsigned long const &', pid1: 'unsigned long const &') -> "itkQuadEdgeMeshLineCellCIDQEMCTI3 *":
        """FindEdgeCell(itkQuadEdgeMeshD3 self, unsigned long const & pid0, unsigned long const & pid1) -> itkQuadEdgeMeshLineCellCIDQEMCTI3"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdgeCell(self, pid0, pid1)


    def ComputeEdgeLength(self, e: 'itkGeometricalQuadEdgeULULBBF') -> "float":
        """
        ComputeEdgeLength(itkQuadEdgeMeshD3 self, itkGeometricalQuadEdgeULULBBF e) -> float

        Compute the
        euclidian length of argument edge. 
        """
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeEdgeLength(self, e)


    def ComputeNumberOfPoints(self) -> "unsigned long":
        """ComputeNumberOfPoints(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfPoints(self)


    def ComputeNumberOfFaces(self) -> "unsigned long":
        """ComputeNumberOfFaces(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfFaces(self)


    def ComputeNumberOfEdges(self) -> "unsigned long":
        """ComputeNumberOfEdges(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfEdges(self)


    def Splice(self, a: 'itkGeometricalQuadEdgeULULBBF', b: 'itkGeometricalQuadEdgeULULBBF') -> "unsigned long":
        """Splice(itkQuadEdgeMeshD3 self, itkGeometricalQuadEdgeULULBBF a, itkGeometricalQuadEdgeULULBBF b) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Splice(self, a, b)


    def ClearFreePointAndCellIndexesLists(self) -> "void":
        """ClearFreePointAndCellIndexesLists(itkQuadEdgeMeshD3 self)"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ClearFreePointAndCellIndexesLists(self)


    def GetNumberOfFaces(self) -> "unsigned long":
        """GetNumberOfFaces(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfFaces(self)


    def GetNumberOfEdges(self) -> "unsigned long":
        """GetNumberOfEdges(itkQuadEdgeMeshD3 self) -> unsigned long"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfEdges(self)

    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkQuadEdgeMeshD3

    def cast(obj: 'itkLightObject') -> "itkQuadEdgeMeshD3 *":
        """cast(itkLightObject obj) -> itkQuadEdgeMeshD3"""
        return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshD3

        Create a new object of the class itkQuadEdgeMeshD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkQuadEdgeMeshD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkQuadEdgeMeshD3.Clone = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clone, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.Clear = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clear, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetEdgeCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdgeCells, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.SetEdgeCells = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCells, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.SetEdgeCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCell, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.SqueezePointsIds = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SqueezePointsIds, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.BuildCellLinks = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_BuildCellLinks, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.SetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetBoundaryAssignment, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetBoundaryAssignment, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.RemoveBoundaryAssignment = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_RemoveBoundaryAssignment, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetCellBoundaryFeature = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeature, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetCellBoundaryFeatureNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeatureNeighbors, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetCellNeighbors = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellNeighbors, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetAssignedCellBoundaryIfOneExists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetAssignedCellBoundaryIfOneExists, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.SetCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetCell, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.FindFirstUnusedPointIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedPointIndex, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.FindFirstUnusedCellIndex = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedCellIndex, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.PushOnContainer = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_PushOnContainer, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddPoint, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdge, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddEdgeWithSecurePointList = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdgeWithSecurePointList, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddFace = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFace, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddFaceWithSecurePointList = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceWithSecurePointList, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.AddFaceTriangle = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceTriangle, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.DeletePoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeletePoint, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.DeleteEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteEdge, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.LightWeightDeleteEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_LightWeightDeleteEdge, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.DeleteFace = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteFace, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetPoint = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetPoint, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetVector = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetVector, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdge, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.FindEdge = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdge, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.FindEdgeCell = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdgeCell, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.ComputeEdgeLength = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeEdgeLength, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.ComputeNumberOfPoints = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfPoints, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.ComputeNumberOfFaces = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfFaces, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.ComputeNumberOfEdges = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfEdges, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.Splice = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Splice, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.ClearFreePointAndCellIndexesLists = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ClearFreePointAndCellIndexesLists, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetNumberOfFaces = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfFaces, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3.GetNumberOfEdges = new_instancemethod(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfEdges, None, itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3_swigregister = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_swigregister
itkQuadEdgeMeshD3_swigregister(itkQuadEdgeMeshD3)

def itkQuadEdgeMeshD3___New_orig__() -> "itkQuadEdgeMeshD3_Pointer":
    """itkQuadEdgeMeshD3___New_orig__() -> itkQuadEdgeMeshD3_Pointer"""
    return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3___New_orig__()

def itkQuadEdgeMeshD3_cast(obj: 'itkLightObject') -> "itkQuadEdgeMeshD3 *":
    """itkQuadEdgeMeshD3_cast(itkLightObject obj) -> itkQuadEdgeMeshD3"""
    return _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_mesh_filter(*args, **kwargs):
    """Procedural interface for ImageToMeshFilter"""
    import itk
    instance = itk.ImageToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToMeshFilter.values()[0]
    else:
        filter_object = itk.ImageToMeshFilter

    image_to_mesh_filter.__doc__ = filter_object.__doc__
    image_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    image_to_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_to_mesh_filter(*args, **kwargs):
    """Procedural interface for MeshToMeshFilter"""
    import itk
    instance = itk.MeshToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.MeshToMeshFilter.values()[0]
    else:
        filter_object = itk.MeshToMeshFilter

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__
    mesh_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_to_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    mesh_to_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_source(*args, **kwargs):
    """Procedural interface for MeshSource"""
    import itk
    instance = itk.MeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshSource, itkTemplate.itkTemplate):
        filter_object = itk.MeshSource.values()[0]
    else:
        filter_object = itk.MeshSource

    mesh_source.__doc__ = filter_object.__doc__
    mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_source.__doc__ += "Available Keyword Arguments:\n"
    mesh_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



