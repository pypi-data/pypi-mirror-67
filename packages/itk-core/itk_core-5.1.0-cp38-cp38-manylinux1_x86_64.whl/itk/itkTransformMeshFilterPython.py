# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTransformMeshFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTransformMeshFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTransformMeshFilterPython
            return _itkTransformMeshFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTransformMeshFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTransformMeshFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTransformMeshFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkTransformBasePython
import itkCovariantVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import ITKCommonBasePython
import itkArrayPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import itkOptimizerParametersPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkDiffusionTensor3DPython
import itkMeshToMeshFilterPython
import itkMeshBasePython
import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import itkContinuousIndexPython
import itkIndexPython
import itkPointSetPython
import itkBoundingBoxPython
import itkMapContainerPython
import itkMeshSourcePython

def itkTransformMeshFilterMD3MD3TF33_New():
  return itkTransformMeshFilterMD3MD3TF33.New()


def itkTransformMeshFilterMD3MD3TD33_New():
  return itkTransformMeshFilterMD3MD3TD33.New()


def itkTransformMeshFilterMF3MF3TF33_New():
  return itkTransformMeshFilterMF3MF3TF33.New()


def itkTransformMeshFilterMF3MF3TD33_New():
  return itkTransformMeshFilterMF3MF3TD33.New()


def itkTransformMeshFilterMD2MD2TF22_New():
  return itkTransformMeshFilterMD2MD2TF22.New()


def itkTransformMeshFilterMD2MD2TD22_New():
  return itkTransformMeshFilterMD2MD2TD22.New()


def itkTransformMeshFilterMF2MF2TF22_New():
  return itkTransformMeshFilterMF2MF2TF22.New()


def itkTransformMeshFilterMF2MF2TD22_New():
  return itkTransformMeshFilterMF2MF2TD22.New()

class itkTransformMeshFilterMD2MD2TD22(itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMD2MD2TD22_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMD2MD2TD22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMD2MD2TD22_Pointer":
        """Clone(itkTransformMeshFilterMD2MD2TD22 self) -> itkTransformMeshFilterMD2MD2TD22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkTransformMeshFilterMD2MD2TD22 self, itkTransformD22 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkTransformMeshFilterMD2MD2TD22 self) -> itkTransformD22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkTransformMeshFilterMD2MD2TD22 self) -> itkTransformD22
        GetTransform(itkTransformMeshFilterMD2MD2TD22 self) -> itkTransformD22
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD2MD2TD22

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD2MD2TD22 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMD2MD2TD22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD2MD2TD22

        Create a new object of the class itkTransformMeshFilterMD2MD2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD2MD2TD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD2MD2TD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMD2MD2TD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMD2MD2TD22.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_Clone, None, itkTransformMeshFilterMD2MD2TD22)
itkTransformMeshFilterMD2MD2TD22.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_SetTransform, None, itkTransformMeshFilterMD2MD2TD22)
itkTransformMeshFilterMD2MD2TD22.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetModifiableTransform, None, itkTransformMeshFilterMD2MD2TD22)
itkTransformMeshFilterMD2MD2TD22.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetTransform, None, itkTransformMeshFilterMD2MD2TD22)
itkTransformMeshFilterMD2MD2TD22_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_swigregister
itkTransformMeshFilterMD2MD2TD22_swigregister(itkTransformMeshFilterMD2MD2TD22)

def itkTransformMeshFilterMD2MD2TD22___New_orig__() -> "itkTransformMeshFilterMD2MD2TD22_Pointer":
    """itkTransformMeshFilterMD2MD2TD22___New_orig__() -> itkTransformMeshFilterMD2MD2TD22_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22___New_orig__()

def itkTransformMeshFilterMD2MD2TD22_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD2MD2TD22 *":
    """itkTransformMeshFilterMD2MD2TD22_cast(itkLightObject obj) -> itkTransformMeshFilterMD2MD2TD22"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_cast(obj)

class itkTransformMeshFilterMD2MD2TF22(itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMD2MD2TF22_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMD2MD2TF22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMD2MD2TF22_Pointer":
        """Clone(itkTransformMeshFilterMD2MD2TF22 self) -> itkTransformMeshFilterMD2MD2TF22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF22') -> "void":
        """
        SetTransform(itkTransformMeshFilterMD2MD2TF22 self, itkTransformF22 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformF22 *":
        """GetModifiableTransform(itkTransformMeshFilterMD2MD2TF22 self) -> itkTransformF22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformF22 *":
        """
        GetTransform(itkTransformMeshFilterMD2MD2TF22 self) -> itkTransformF22
        GetTransform(itkTransformMeshFilterMD2MD2TF22 self) -> itkTransformF22
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD2MD2TF22

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD2MD2TF22 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMD2MD2TF22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD2MD2TF22

        Create a new object of the class itkTransformMeshFilterMD2MD2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD2MD2TF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD2MD2TF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMD2MD2TF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMD2MD2TF22.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_Clone, None, itkTransformMeshFilterMD2MD2TF22)
itkTransformMeshFilterMD2MD2TF22.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_SetTransform, None, itkTransformMeshFilterMD2MD2TF22)
itkTransformMeshFilterMD2MD2TF22.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetModifiableTransform, None, itkTransformMeshFilterMD2MD2TF22)
itkTransformMeshFilterMD2MD2TF22.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetTransform, None, itkTransformMeshFilterMD2MD2TF22)
itkTransformMeshFilterMD2MD2TF22_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_swigregister
itkTransformMeshFilterMD2MD2TF22_swigregister(itkTransformMeshFilterMD2MD2TF22)

def itkTransformMeshFilterMD2MD2TF22___New_orig__() -> "itkTransformMeshFilterMD2MD2TF22_Pointer":
    """itkTransformMeshFilterMD2MD2TF22___New_orig__() -> itkTransformMeshFilterMD2MD2TF22_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22___New_orig__()

def itkTransformMeshFilterMD2MD2TF22_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD2MD2TF22 *":
    """itkTransformMeshFilterMD2MD2TF22_cast(itkLightObject obj) -> itkTransformMeshFilterMD2MD2TF22"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_cast(obj)

class itkTransformMeshFilterMD3MD3TD33(itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMD3MD3TD33_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMD3MD3TD33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMD3MD3TD33_Pointer":
        """Clone(itkTransformMeshFilterMD3MD3TD33 self) -> itkTransformMeshFilterMD3MD3TD33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkTransformMeshFilterMD3MD3TD33 self, itkTransformD33 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkTransformMeshFilterMD3MD3TD33 self) -> itkTransformD33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkTransformMeshFilterMD3MD3TD33 self) -> itkTransformD33
        GetTransform(itkTransformMeshFilterMD3MD3TD33 self) -> itkTransformD33
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD3MD3TD33

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD3MD3TD33 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMD3MD3TD33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD3MD3TD33

        Create a new object of the class itkTransformMeshFilterMD3MD3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD3MD3TD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD3MD3TD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMD3MD3TD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMD3MD3TD33.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_Clone, None, itkTransformMeshFilterMD3MD3TD33)
itkTransformMeshFilterMD3MD3TD33.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_SetTransform, None, itkTransformMeshFilterMD3MD3TD33)
itkTransformMeshFilterMD3MD3TD33.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetModifiableTransform, None, itkTransformMeshFilterMD3MD3TD33)
itkTransformMeshFilterMD3MD3TD33.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetTransform, None, itkTransformMeshFilterMD3MD3TD33)
itkTransformMeshFilterMD3MD3TD33_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_swigregister
itkTransformMeshFilterMD3MD3TD33_swigregister(itkTransformMeshFilterMD3MD3TD33)

def itkTransformMeshFilterMD3MD3TD33___New_orig__() -> "itkTransformMeshFilterMD3MD3TD33_Pointer":
    """itkTransformMeshFilterMD3MD3TD33___New_orig__() -> itkTransformMeshFilterMD3MD3TD33_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33___New_orig__()

def itkTransformMeshFilterMD3MD3TD33_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD3MD3TD33 *":
    """itkTransformMeshFilterMD3MD3TD33_cast(itkLightObject obj) -> itkTransformMeshFilterMD3MD3TD33"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_cast(obj)

class itkTransformMeshFilterMD3MD3TF33(itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMD3MD3TF33_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMD3MD3TF33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMD3MD3TF33_Pointer":
        """Clone(itkTransformMeshFilterMD3MD3TF33 self) -> itkTransformMeshFilterMD3MD3TF33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF33') -> "void":
        """
        SetTransform(itkTransformMeshFilterMD3MD3TF33 self, itkTransformF33 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformF33 *":
        """GetModifiableTransform(itkTransformMeshFilterMD3MD3TF33 self) -> itkTransformF33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformF33 *":
        """
        GetTransform(itkTransformMeshFilterMD3MD3TF33 self) -> itkTransformF33
        GetTransform(itkTransformMeshFilterMD3MD3TF33 self) -> itkTransformF33
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD3MD3TF33

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD3MD3TF33 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMD3MD3TF33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD3MD3TF33

        Create a new object of the class itkTransformMeshFilterMD3MD3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD3MD3TF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD3MD3TF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMD3MD3TF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMD3MD3TF33.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_Clone, None, itkTransformMeshFilterMD3MD3TF33)
itkTransformMeshFilterMD3MD3TF33.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_SetTransform, None, itkTransformMeshFilterMD3MD3TF33)
itkTransformMeshFilterMD3MD3TF33.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetModifiableTransform, None, itkTransformMeshFilterMD3MD3TF33)
itkTransformMeshFilterMD3MD3TF33.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetTransform, None, itkTransformMeshFilterMD3MD3TF33)
itkTransformMeshFilterMD3MD3TF33_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_swigregister
itkTransformMeshFilterMD3MD3TF33_swigregister(itkTransformMeshFilterMD3MD3TF33)

def itkTransformMeshFilterMD3MD3TF33___New_orig__() -> "itkTransformMeshFilterMD3MD3TF33_Pointer":
    """itkTransformMeshFilterMD3MD3TF33___New_orig__() -> itkTransformMeshFilterMD3MD3TF33_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33___New_orig__()

def itkTransformMeshFilterMD3MD3TF33_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMD3MD3TF33 *":
    """itkTransformMeshFilterMD3MD3TF33_cast(itkLightObject obj) -> itkTransformMeshFilterMD3MD3TF33"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_cast(obj)

class itkTransformMeshFilterMF2MF2TD22(itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMF2MF2TD22_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMF2MF2TD22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMF2MF2TD22_Pointer":
        """Clone(itkTransformMeshFilterMF2MF2TD22 self) -> itkTransformMeshFilterMF2MF2TD22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkTransformMeshFilterMF2MF2TD22 self, itkTransformD22 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkTransformMeshFilterMF2MF2TD22 self) -> itkTransformD22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkTransformMeshFilterMF2MF2TD22 self) -> itkTransformD22
        GetTransform(itkTransformMeshFilterMF2MF2TD22 self) -> itkTransformD22
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF2MF2TD22

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF2MF2TD22 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMF2MF2TD22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF2MF2TD22

        Create a new object of the class itkTransformMeshFilterMF2MF2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF2MF2TD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF2MF2TD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMF2MF2TD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMF2MF2TD22.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_Clone, None, itkTransformMeshFilterMF2MF2TD22)
itkTransformMeshFilterMF2MF2TD22.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_SetTransform, None, itkTransformMeshFilterMF2MF2TD22)
itkTransformMeshFilterMF2MF2TD22.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetModifiableTransform, None, itkTransformMeshFilterMF2MF2TD22)
itkTransformMeshFilterMF2MF2TD22.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetTransform, None, itkTransformMeshFilterMF2MF2TD22)
itkTransformMeshFilterMF2MF2TD22_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_swigregister
itkTransformMeshFilterMF2MF2TD22_swigregister(itkTransformMeshFilterMF2MF2TD22)

def itkTransformMeshFilterMF2MF2TD22___New_orig__() -> "itkTransformMeshFilterMF2MF2TD22_Pointer":
    """itkTransformMeshFilterMF2MF2TD22___New_orig__() -> itkTransformMeshFilterMF2MF2TD22_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22___New_orig__()

def itkTransformMeshFilterMF2MF2TD22_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF2MF2TD22 *":
    """itkTransformMeshFilterMF2MF2TD22_cast(itkLightObject obj) -> itkTransformMeshFilterMF2MF2TD22"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_cast(obj)

class itkTransformMeshFilterMF2MF2TF22(itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMF2MF2TF22_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMF2MF2TF22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMF2MF2TF22_Pointer":
        """Clone(itkTransformMeshFilterMF2MF2TF22 self) -> itkTransformMeshFilterMF2MF2TF22_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF22') -> "void":
        """
        SetTransform(itkTransformMeshFilterMF2MF2TF22 self, itkTransformF22 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformF22 *":
        """GetModifiableTransform(itkTransformMeshFilterMF2MF2TF22 self) -> itkTransformF22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformF22 *":
        """
        GetTransform(itkTransformMeshFilterMF2MF2TF22 self) -> itkTransformF22
        GetTransform(itkTransformMeshFilterMF2MF2TF22 self) -> itkTransformF22
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF2MF2TF22

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF2MF2TF22 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMF2MF2TF22"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF2MF2TF22

        Create a new object of the class itkTransformMeshFilterMF2MF2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF2MF2TF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF2MF2TF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMF2MF2TF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMF2MF2TF22.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_Clone, None, itkTransformMeshFilterMF2MF2TF22)
itkTransformMeshFilterMF2MF2TF22.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_SetTransform, None, itkTransformMeshFilterMF2MF2TF22)
itkTransformMeshFilterMF2MF2TF22.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetModifiableTransform, None, itkTransformMeshFilterMF2MF2TF22)
itkTransformMeshFilterMF2MF2TF22.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetTransform, None, itkTransformMeshFilterMF2MF2TF22)
itkTransformMeshFilterMF2MF2TF22_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_swigregister
itkTransformMeshFilterMF2MF2TF22_swigregister(itkTransformMeshFilterMF2MF2TF22)

def itkTransformMeshFilterMF2MF2TF22___New_orig__() -> "itkTransformMeshFilterMF2MF2TF22_Pointer":
    """itkTransformMeshFilterMF2MF2TF22___New_orig__() -> itkTransformMeshFilterMF2MF2TF22_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22___New_orig__()

def itkTransformMeshFilterMF2MF2TF22_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF2MF2TF22 *":
    """itkTransformMeshFilterMF2MF2TF22_cast(itkLightObject obj) -> itkTransformMeshFilterMF2MF2TF22"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_cast(obj)

class itkTransformMeshFilterMF3MF3TD33(itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMF3MF3TD33_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMF3MF3TD33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMF3MF3TD33_Pointer":
        """Clone(itkTransformMeshFilterMF3MF3TD33 self) -> itkTransformMeshFilterMF3MF3TD33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkTransformMeshFilterMF3MF3TD33 self, itkTransformD33 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkTransformMeshFilterMF3MF3TD33 self) -> itkTransformD33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkTransformMeshFilterMF3MF3TD33 self) -> itkTransformD33
        GetTransform(itkTransformMeshFilterMF3MF3TD33 self) -> itkTransformD33
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF3MF3TD33

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF3MF3TD33 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMF3MF3TD33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF3MF3TD33

        Create a new object of the class itkTransformMeshFilterMF3MF3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF3MF3TD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF3MF3TD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMF3MF3TD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMF3MF3TD33.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_Clone, None, itkTransformMeshFilterMF3MF3TD33)
itkTransformMeshFilterMF3MF3TD33.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_SetTransform, None, itkTransformMeshFilterMF3MF3TD33)
itkTransformMeshFilterMF3MF3TD33.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetModifiableTransform, None, itkTransformMeshFilterMF3MF3TD33)
itkTransformMeshFilterMF3MF3TD33.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetTransform, None, itkTransformMeshFilterMF3MF3TD33)
itkTransformMeshFilterMF3MF3TD33_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_swigregister
itkTransformMeshFilterMF3MF3TD33_swigregister(itkTransformMeshFilterMF3MF3TD33)

def itkTransformMeshFilterMF3MF3TD33___New_orig__() -> "itkTransformMeshFilterMF3MF3TD33_Pointer":
    """itkTransformMeshFilterMF3MF3TD33___New_orig__() -> itkTransformMeshFilterMF3MF3TD33_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33___New_orig__()

def itkTransformMeshFilterMF3MF3TD33_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF3MF3TD33 *":
    """itkTransformMeshFilterMF3MF3TD33_cast(itkLightObject obj) -> itkTransformMeshFilterMF3MF3TD33"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_cast(obj)

class itkTransformMeshFilterMF3MF3TF33(itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3):
    """


    TransformMeshFilter applies a transform to all the points of a mesh.

    The additional content of the mesh is passed untouched. Including the
    connectivity and the additional information contained on cells and
    points.

    Meshes that have added information like normal vector on the points,
    will have to take care of transforming this data by other means.

    C++ includes: itkTransformMeshFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTransformMeshFilterMF3MF3TF33_Pointer":
        """__New_orig__() -> itkTransformMeshFilterMF3MF3TF33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTransformMeshFilterMF3MF3TF33_Pointer":
        """Clone(itkTransformMeshFilterMF3MF3TF33 self) -> itkTransformMeshFilterMF3MF3TF33_Pointer"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF33') -> "void":
        """
        SetTransform(itkTransformMeshFilterMF3MF3TF33 self, itkTransformF33 _arg)

        Get/Set transform. 
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformF33 *":
        """GetModifiableTransform(itkTransformMeshFilterMF3MF3TF33 self) -> itkTransformF33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformF33 *":
        """
        GetTransform(itkTransformMeshFilterMF3MF3TF33 self) -> itkTransformF33
        GetTransform(itkTransformMeshFilterMF3MF3TF33 self) -> itkTransformF33
        """
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetTransform(self, *args)

    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF3MF3TF33

    def cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF3MF3TF33 *":
        """cast(itkLightObject obj) -> itkTransformMeshFilterMF3MF3TF33"""
        return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF3MF3TF33

        Create a new object of the class itkTransformMeshFilterMF3MF3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF3MF3TF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF3MF3TF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformMeshFilterMF3MF3TF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformMeshFilterMF3MF3TF33.Clone = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_Clone, None, itkTransformMeshFilterMF3MF3TF33)
itkTransformMeshFilterMF3MF3TF33.SetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_SetTransform, None, itkTransformMeshFilterMF3MF3TF33)
itkTransformMeshFilterMF3MF3TF33.GetModifiableTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetModifiableTransform, None, itkTransformMeshFilterMF3MF3TF33)
itkTransformMeshFilterMF3MF3TF33.GetTransform = new_instancemethod(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetTransform, None, itkTransformMeshFilterMF3MF3TF33)
itkTransformMeshFilterMF3MF3TF33_swigregister = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_swigregister
itkTransformMeshFilterMF3MF3TF33_swigregister(itkTransformMeshFilterMF3MF3TF33)

def itkTransformMeshFilterMF3MF3TF33___New_orig__() -> "itkTransformMeshFilterMF3MF3TF33_Pointer":
    """itkTransformMeshFilterMF3MF3TF33___New_orig__() -> itkTransformMeshFilterMF3MF3TF33_Pointer"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33___New_orig__()

def itkTransformMeshFilterMF3MF3TF33_cast(obj: 'itkLightObject') -> "itkTransformMeshFilterMF3MF3TF33 *":
    """itkTransformMeshFilterMF3MF3TF33_cast(itkLightObject obj) -> itkTransformMeshFilterMF3MF3TF33"""
    return _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def transform_mesh_filter(*args, **kwargs):
    """Procedural interface for TransformMeshFilter"""
    import itk
    instance = itk.TransformMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def transform_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TransformMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.TransformMeshFilter.values()[0]
    else:
        filter_object = itk.TransformMeshFilter

    transform_mesh_filter.__doc__ = filter_object.__doc__
    transform_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    transform_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    transform_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



