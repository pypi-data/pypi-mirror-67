# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGaussianOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGaussianOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkGaussianOperatorPython
            return _itkGaussianOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGaussianOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGaussianOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGaussianOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkNeighborhoodOperatorPython
import ITKCommonBasePython
import pyBasePython
import itkNeighborhoodPython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
class itkGaussianOperatorD2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete Gaussian kernel.

    GaussianOperator can be used to perform Gaussian blurring by taking
    its inner product with a Neighborhood (NeighborhoodIterator) that is
    swept across an image region. It is a directional operator. N
    successive applications oriented along each dimensional direction will
    effect separable, efficient, N-D Gaussian blurring of an image region.

    GaussianOperator takes two parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    GaussianOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetVariance(self, variance: 'double const &') -> "void":
        """
        SetVariance(itkGaussianOperatorD2 self, double const & variance)

        Sets the desired
        variance of the Gaussian kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetVariance(self, variance)


    def SetMaximumError(self, max_error: 'double const &') -> "void":
        """
        SetMaximumError(itkGaussianOperatorD2 self, double const & max_error)

        Sets the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value must be between 0.0 and 1.0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumError(self, max_error)


    def GetVariance(self) -> "double":
        """
        GetVariance(itkGaussianOperatorD2 self) -> double

        Returns the variance of
        the Gaussian (scale) for the operator. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetVariance(self)


    def GetMaximumError(self) -> "double":
        """
        GetMaximumError(itkGaussianOperatorD2 self) -> double

        Returns the maximum
        error of the gaussian approximation. Maximum error is the difference
        between the area under the discrete Gaussian curve and the area under
        the continuous Gaussian. Maximum error affects the Gaussian operator
        size. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianOperatorD2 self, unsigned int n)

        Sets a limit
        for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumKernelWidth(self, n)


    def GetMaximumKernelWidth(self) -> "unsigned int":
        """
        GetMaximumKernelWidth(itkGaussianOperatorD2 self) -> unsigned int

        Returns the
        maximum allowed kernel width. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumKernelWidth(self)


    def ModifiedBesselI0(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI0(itkGaussianOperatorD2 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I0(x) at a point x >= 0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI0(self, arg0)


    def ModifiedBesselI1(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI1(itkGaussianOperatorD2 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I1(x) at a point x, x real. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI1(self, arg0)


    def ModifiedBesselI(self, arg0: 'int', arg1: 'double') -> "double":
        """
        ModifiedBesselI(itkGaussianOperatorD2 self, int arg0, double arg1) -> double

        Returns the value
        of the modified Bessel function Ik(x) at a point x>=0, where k>=2. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI(self, arg0, arg1)

    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorD2

    def __init__(self, *args):
        """
        __init__(itkGaussianOperatorD2 self) -> itkGaussianOperatorD2
        __init__(itkGaussianOperatorD2 self, itkGaussianOperatorD2 arg0) -> itkGaussianOperatorD2



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete Gaussian kernel.

        GaussianOperator can be used to perform Gaussian blurring by taking
        its inner product with a Neighborhood (NeighborhoodIterator) that is
        swept across an image region. It is a directional operator. N
        successive applications oriented along each dimensional direction will
        effect separable, efficient, N-D Gaussian blurring of an image region.

        GaussianOperator takes two parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        GaussianOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianOperator.h 
        """
        _itkGaussianOperatorPython.itkGaussianOperatorD2_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorD2(*args))
itkGaussianOperatorD2.SetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_SetVariance, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.SetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumError, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.GetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_GetVariance, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.GetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumError, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.SetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumKernelWidth, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.GetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumKernelWidth, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.ModifiedBesselI0 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI0, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.ModifiedBesselI1 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI1, None, itkGaussianOperatorD2)
itkGaussianOperatorD2.ModifiedBesselI = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI, None, itkGaussianOperatorD2)
itkGaussianOperatorD2_swigregister = _itkGaussianOperatorPython.itkGaussianOperatorD2_swigregister
itkGaussianOperatorD2_swigregister(itkGaussianOperatorD2)

class itkGaussianOperatorD3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete Gaussian kernel.

    GaussianOperator can be used to perform Gaussian blurring by taking
    its inner product with a Neighborhood (NeighborhoodIterator) that is
    swept across an image region. It is a directional operator. N
    successive applications oriented along each dimensional direction will
    effect separable, efficient, N-D Gaussian blurring of an image region.

    GaussianOperator takes two parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    GaussianOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetVariance(self, variance: 'double const &') -> "void":
        """
        SetVariance(itkGaussianOperatorD3 self, double const & variance)

        Sets the desired
        variance of the Gaussian kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetVariance(self, variance)


    def SetMaximumError(self, max_error: 'double const &') -> "void":
        """
        SetMaximumError(itkGaussianOperatorD3 self, double const & max_error)

        Sets the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value must be between 0.0 and 1.0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumError(self, max_error)


    def GetVariance(self) -> "double":
        """
        GetVariance(itkGaussianOperatorD3 self) -> double

        Returns the variance of
        the Gaussian (scale) for the operator. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetVariance(self)


    def GetMaximumError(self) -> "double":
        """
        GetMaximumError(itkGaussianOperatorD3 self) -> double

        Returns the maximum
        error of the gaussian approximation. Maximum error is the difference
        between the area under the discrete Gaussian curve and the area under
        the continuous Gaussian. Maximum error affects the Gaussian operator
        size. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianOperatorD3 self, unsigned int n)

        Sets a limit
        for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumKernelWidth(self, n)


    def GetMaximumKernelWidth(self) -> "unsigned int":
        """
        GetMaximumKernelWidth(itkGaussianOperatorD3 self) -> unsigned int

        Returns the
        maximum allowed kernel width. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumKernelWidth(self)


    def ModifiedBesselI0(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI0(itkGaussianOperatorD3 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I0(x) at a point x >= 0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI0(self, arg0)


    def ModifiedBesselI1(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI1(itkGaussianOperatorD3 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I1(x) at a point x, x real. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI1(self, arg0)


    def ModifiedBesselI(self, arg0: 'int', arg1: 'double') -> "double":
        """
        ModifiedBesselI(itkGaussianOperatorD3 self, int arg0, double arg1) -> double

        Returns the value
        of the modified Bessel function Ik(x) at a point x>=0, where k>=2. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI(self, arg0, arg1)

    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorD3

    def __init__(self, *args):
        """
        __init__(itkGaussianOperatorD3 self) -> itkGaussianOperatorD3
        __init__(itkGaussianOperatorD3 self, itkGaussianOperatorD3 arg0) -> itkGaussianOperatorD3



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete Gaussian kernel.

        GaussianOperator can be used to perform Gaussian blurring by taking
        its inner product with a Neighborhood (NeighborhoodIterator) that is
        swept across an image region. It is a directional operator. N
        successive applications oriented along each dimensional direction will
        effect separable, efficient, N-D Gaussian blurring of an image region.

        GaussianOperator takes two parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        GaussianOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianOperator.h 
        """
        _itkGaussianOperatorPython.itkGaussianOperatorD3_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorD3(*args))
itkGaussianOperatorD3.SetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_SetVariance, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.SetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumError, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.GetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_GetVariance, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.GetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumError, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.SetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumKernelWidth, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.GetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumKernelWidth, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.ModifiedBesselI0 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI0, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.ModifiedBesselI1 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI1, None, itkGaussianOperatorD3)
itkGaussianOperatorD3.ModifiedBesselI = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI, None, itkGaussianOperatorD3)
itkGaussianOperatorD3_swigregister = _itkGaussianOperatorPython.itkGaussianOperatorD3_swigregister
itkGaussianOperatorD3_swigregister(itkGaussianOperatorD3)

class itkGaussianOperatorF2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete Gaussian kernel.

    GaussianOperator can be used to perform Gaussian blurring by taking
    its inner product with a Neighborhood (NeighborhoodIterator) that is
    swept across an image region. It is a directional operator. N
    successive applications oriented along each dimensional direction will
    effect separable, efficient, N-D Gaussian blurring of an image region.

    GaussianOperator takes two parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    GaussianOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetVariance(self, variance: 'double const &') -> "void":
        """
        SetVariance(itkGaussianOperatorF2 self, double const & variance)

        Sets the desired
        variance of the Gaussian kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetVariance(self, variance)


    def SetMaximumError(self, max_error: 'double const &') -> "void":
        """
        SetMaximumError(itkGaussianOperatorF2 self, double const & max_error)

        Sets the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value must be between 0.0 and 1.0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumError(self, max_error)


    def GetVariance(self) -> "double":
        """
        GetVariance(itkGaussianOperatorF2 self) -> double

        Returns the variance of
        the Gaussian (scale) for the operator. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetVariance(self)


    def GetMaximumError(self) -> "double":
        """
        GetMaximumError(itkGaussianOperatorF2 self) -> double

        Returns the maximum
        error of the gaussian approximation. Maximum error is the difference
        between the area under the discrete Gaussian curve and the area under
        the continuous Gaussian. Maximum error affects the Gaussian operator
        size. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianOperatorF2 self, unsigned int n)

        Sets a limit
        for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumKernelWidth(self, n)


    def GetMaximumKernelWidth(self) -> "unsigned int":
        """
        GetMaximumKernelWidth(itkGaussianOperatorF2 self) -> unsigned int

        Returns the
        maximum allowed kernel width. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumKernelWidth(self)


    def ModifiedBesselI0(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI0(itkGaussianOperatorF2 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I0(x) at a point x >= 0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI0(self, arg0)


    def ModifiedBesselI1(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI1(itkGaussianOperatorF2 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I1(x) at a point x, x real. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI1(self, arg0)


    def ModifiedBesselI(self, arg0: 'int', arg1: 'double') -> "double":
        """
        ModifiedBesselI(itkGaussianOperatorF2 self, int arg0, double arg1) -> double

        Returns the value
        of the modified Bessel function Ik(x) at a point x>=0, where k>=2. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI(self, arg0, arg1)

    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorF2

    def __init__(self, *args):
        """
        __init__(itkGaussianOperatorF2 self) -> itkGaussianOperatorF2
        __init__(itkGaussianOperatorF2 self, itkGaussianOperatorF2 arg0) -> itkGaussianOperatorF2



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete Gaussian kernel.

        GaussianOperator can be used to perform Gaussian blurring by taking
        its inner product with a Neighborhood (NeighborhoodIterator) that is
        swept across an image region. It is a directional operator. N
        successive applications oriented along each dimensional direction will
        effect separable, efficient, N-D Gaussian blurring of an image region.

        GaussianOperator takes two parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        GaussianOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianOperator.h 
        """
        _itkGaussianOperatorPython.itkGaussianOperatorF2_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorF2(*args))
itkGaussianOperatorF2.SetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_SetVariance, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.SetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumError, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.GetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_GetVariance, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.GetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumError, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.SetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumKernelWidth, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.GetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumKernelWidth, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.ModifiedBesselI0 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI0, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.ModifiedBesselI1 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI1, None, itkGaussianOperatorF2)
itkGaussianOperatorF2.ModifiedBesselI = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI, None, itkGaussianOperatorF2)
itkGaussianOperatorF2_swigregister = _itkGaussianOperatorPython.itkGaussianOperatorF2_swigregister
itkGaussianOperatorF2_swigregister(itkGaussianOperatorF2)

class itkGaussianOperatorF3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    """


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete Gaussian kernel.

    GaussianOperator can be used to perform Gaussian blurring by taking
    its inner product with a Neighborhood (NeighborhoodIterator) that is
    swept across an image region. It is a directional operator. N
    successive applications oriented along each dimensional direction will
    effect separable, efficient, N-D Gaussian blurring of an image region.

    GaussianOperator takes two parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    GaussianOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood

    C++ includes: itkGaussianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetVariance(self, variance: 'double const &') -> "void":
        """
        SetVariance(itkGaussianOperatorF3 self, double const & variance)

        Sets the desired
        variance of the Gaussian kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetVariance(self, variance)


    def SetMaximumError(self, max_error: 'double const &') -> "void":
        """
        SetMaximumError(itkGaussianOperatorF3 self, double const & max_error)

        Sets the desired
        maximum error of the gaussian approximation. Maximum error is the
        difference between the area under the discrete Gaussian curve and the
        area under the continuous Gaussian. Maximum error affects the Gaussian
        operator size. The value must be between 0.0 and 1.0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumError(self, max_error)


    def GetVariance(self) -> "double":
        """
        GetVariance(itkGaussianOperatorF3 self) -> double

        Returns the variance of
        the Gaussian (scale) for the operator. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetVariance(self)


    def GetMaximumError(self) -> "double":
        """
        GetMaximumError(itkGaussianOperatorF3 self) -> double

        Returns the maximum
        error of the gaussian approximation. Maximum error is the difference
        between the area under the discrete Gaussian curve and the area under
        the continuous Gaussian. Maximum error affects the Gaussian operator
        size. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumError(self)


    def SetMaximumKernelWidth(self, n: 'unsigned int') -> "void":
        """
        SetMaximumKernelWidth(itkGaussianOperatorF3 self, unsigned int n)

        Sets a limit
        for growth of the kernel. Small maximum error values with large
        variances will yield very large kernel sizes. This value can be used
        to truncate a kernel in such instances. A warning will be given on
        truncation of the kernel. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumKernelWidth(self, n)


    def GetMaximumKernelWidth(self) -> "unsigned int":
        """
        GetMaximumKernelWidth(itkGaussianOperatorF3 self) -> unsigned int

        Returns the
        maximum allowed kernel width. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumKernelWidth(self)


    def ModifiedBesselI0(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI0(itkGaussianOperatorF3 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I0(x) at a point x >= 0. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI0(self, arg0)


    def ModifiedBesselI1(self, arg0: 'double') -> "double":
        """
        ModifiedBesselI1(itkGaussianOperatorF3 self, double arg0) -> double

        Returns the value
        of the modified Bessel function I1(x) at a point x, x real. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI1(self, arg0)


    def ModifiedBesselI(self, arg0: 'int', arg1: 'double') -> "double":
        """
        ModifiedBesselI(itkGaussianOperatorF3 self, int arg0, double arg1) -> double

        Returns the value
        of the modified Bessel function Ik(x) at a point x>=0, where k>=2. 
        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI(self, arg0, arg1)

    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorF3

    def __init__(self, *args):
        """
        __init__(itkGaussianOperatorF3 self) -> itkGaussianOperatorF3
        __init__(itkGaussianOperatorF3 self, itkGaussianOperatorF3 arg0) -> itkGaussianOperatorF3



        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete Gaussian kernel.

        GaussianOperator can be used to perform Gaussian blurring by taking
        its inner product with a Neighborhood (NeighborhoodIterator) that is
        swept across an image region. It is a directional operator. N
        successive applications oriented along each dimensional direction will
        effect separable, efficient, N-D Gaussian blurring of an image region.

        GaussianOperator takes two parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        GaussianOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood

        C++ includes: itkGaussianOperator.h 
        """
        _itkGaussianOperatorPython.itkGaussianOperatorF3_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorF3(*args))
itkGaussianOperatorF3.SetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_SetVariance, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.SetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumError, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.GetVariance = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_GetVariance, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.GetMaximumError = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumError, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.SetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumKernelWidth, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.GetMaximumKernelWidth = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumKernelWidth, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.ModifiedBesselI0 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI0, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.ModifiedBesselI1 = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI1, None, itkGaussianOperatorF3)
itkGaussianOperatorF3.ModifiedBesselI = new_instancemethod(_itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI, None, itkGaussianOperatorF3)
itkGaussianOperatorF3_swigregister = _itkGaussianOperatorPython.itkGaussianOperatorF3_swigregister
itkGaussianOperatorF3_swigregister(itkGaussianOperatorF3)



