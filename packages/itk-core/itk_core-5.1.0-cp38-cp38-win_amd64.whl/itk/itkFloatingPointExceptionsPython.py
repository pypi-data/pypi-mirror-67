# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFloatingPointExceptionsPython
else:
    import _itkFloatingPointExceptionsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFloatingPointExceptionsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFloatingPointExceptionsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import pyBasePython
class itkFloatingPointExceptions(object):
    r"""Proxy of C++ itkFloatingPointExceptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(itkFloatingPointExceptions self) -> itkFloatingPointExceptions"""
        _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_swiginit(self, _itkFloatingPointExceptionsPython.new_itkFloatingPointExceptions())
    __swig_destroy__ = _itkFloatingPointExceptionsPython.delete_itkFloatingPointExceptions
    Enable = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_Enable)
    Disable = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_Disable)
    GetEnabled = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_GetEnabled)
    SetEnabled = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_SetEnabled)
    SetExceptionAction = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_SetExceptionAction)
    GetExceptionAction = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_GetExceptionAction)
    HasFloatingPointExceptionsSupport = _swig_new_static_method(_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_HasFloatingPointExceptionsSupport)

# Register itkFloatingPointExceptions in _itkFloatingPointExceptionsPython:
_itkFloatingPointExceptionsPython.itkFloatingPointExceptions_swigregister(itkFloatingPointExceptions)
itkFloatingPointExceptions_Enable = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_Enable
itkFloatingPointExceptions_Disable = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_Disable
itkFloatingPointExceptions_GetEnabled = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_GetEnabled
itkFloatingPointExceptions_SetEnabled = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_SetEnabled
itkFloatingPointExceptions_SetExceptionAction = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_SetExceptionAction
itkFloatingPointExceptions_GetExceptionAction = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_GetExceptionAction
itkFloatingPointExceptions_HasFloatingPointExceptionsSupport = _itkFloatingPointExceptionsPython.itkFloatingPointExceptions_HasFloatingPointExceptionsSupport

class itkFloatingPointExceptionsEnums(object):
    r"""Proxy of C++ itkFloatingPointExceptionsEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ExceptionAction_ABORT = _itkFloatingPointExceptionsPython.itkFloatingPointExceptionsEnums_ExceptionAction_ABORT
    
    ExceptionAction_EXIT = _itkFloatingPointExceptionsPython.itkFloatingPointExceptionsEnums_ExceptionAction_EXIT
    

    def __init__(self, *args):
        r"""
        __init__(itkFloatingPointExceptionsEnums self) -> itkFloatingPointExceptionsEnums
        __init__(itkFloatingPointExceptionsEnums self, itkFloatingPointExceptionsEnums arg0) -> itkFloatingPointExceptionsEnums
        """
        _itkFloatingPointExceptionsPython.itkFloatingPointExceptionsEnums_swiginit(self, _itkFloatingPointExceptionsPython.new_itkFloatingPointExceptionsEnums(*args))
    __swig_destroy__ = _itkFloatingPointExceptionsPython.delete_itkFloatingPointExceptionsEnums

# Register itkFloatingPointExceptionsEnums in _itkFloatingPointExceptionsPython:
_itkFloatingPointExceptionsPython.itkFloatingPointExceptionsEnums_swigregister(itkFloatingPointExceptionsEnums)



