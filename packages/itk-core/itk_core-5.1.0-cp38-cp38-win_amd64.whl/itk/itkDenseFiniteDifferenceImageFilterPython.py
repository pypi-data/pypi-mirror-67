# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDenseFiniteDifferenceImageFilterPython
else:
    import _itkDenseFiniteDifferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDenseFiniteDifferenceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDenseFiniteDifferenceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkImagePython
import itkMatrixPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython
import itkFiniteDifferenceFunctionPython

def itkDenseFiniteDifferenceImageFilterICVF43ICVF43_New():
  return itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New()


def itkDenseFiniteDifferenceImageFilterICVF42ICVF42_New():
  return itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New()


def itkDenseFiniteDifferenceImageFilterICVF33ICVF33_New():
  return itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New()


def itkDenseFiniteDifferenceImageFilterICVF32ICVF32_New():
  return itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New()


def itkDenseFiniteDifferenceImageFilterICVF23ICVF23_New():
  return itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New()


def itkDenseFiniteDifferenceImageFilterICVF22ICVF22_New():
  return itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New()


def itkDenseFiniteDifferenceImageFilterIVF43IVF43_New():
  return itkDenseFiniteDifferenceImageFilterIVF43IVF43.New()


def itkDenseFiniteDifferenceImageFilterIVF42IVF42_New():
  return itkDenseFiniteDifferenceImageFilterIVF42IVF42.New()


def itkDenseFiniteDifferenceImageFilterIVF33IVF33_New():
  return itkDenseFiniteDifferenceImageFilterIVF33IVF33.New()


def itkDenseFiniteDifferenceImageFilterIVF32IVF32_New():
  return itkDenseFiniteDifferenceImageFilterIVF32IVF32.New()


def itkDenseFiniteDifferenceImageFilterIVF23IVF23_New():
  return itkDenseFiniteDifferenceImageFilterIVF23IVF23.New()


def itkDenseFiniteDifferenceImageFilterIVF22IVF22_New():
  return itkDenseFiniteDifferenceImageFilterIVF22IVF22.New()


def itkDenseFiniteDifferenceImageFilterID3ID3_New():
  return itkDenseFiniteDifferenceImageFilterID3ID3.New()


def itkDenseFiniteDifferenceImageFilterID2ID2_New():
  return itkDenseFiniteDifferenceImageFilterID2ID2.New()


def itkDenseFiniteDifferenceImageFilterIF3IF3_New():
  return itkDenseFiniteDifferenceImageFilterIF3IF3.New()


def itkDenseFiniteDifferenceImageFilterIF2IF2_New():
  return itkDenseFiniteDifferenceImageFilterIF2IF2.New()

class itkDenseFiniteDifferenceImageFilterICVF22ICVF22(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF22ICVF22):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF22ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF22ICVF22

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF22ICVF22 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_swigregister(itkDenseFiniteDifferenceImageFilterICVF22ICVF22)
itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast

class itkDenseFiniteDifferenceImageFilterICVF23ICVF23(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF23ICVF23):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF23ICVF23

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF23ICVF23 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_swigregister(itkDenseFiniteDifferenceImageFilterICVF23ICVF23)
itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast

class itkDenseFiniteDifferenceImageFilterICVF32ICVF32(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF32ICVF32):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF32ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF32ICVF32

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF32ICVF32 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_swigregister(itkDenseFiniteDifferenceImageFilterICVF32ICVF32)
itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast

class itkDenseFiniteDifferenceImageFilterICVF33ICVF33(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF33ICVF33):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF33ICVF33

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF33ICVF33 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_swigregister(itkDenseFiniteDifferenceImageFilterICVF33ICVF33)
itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast

class itkDenseFiniteDifferenceImageFilterICVF42ICVF42(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF42ICVF42):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF42ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF42ICVF42

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF42ICVF42 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_swigregister(itkDenseFiniteDifferenceImageFilterICVF42ICVF42)
itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast

class itkDenseFiniteDifferenceImageFilterICVF43ICVF43(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF43ICVF43):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF43ICVF43

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterICVF43ICVF43 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_swigregister(itkDenseFiniteDifferenceImageFilterICVF43ICVF43)
itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast

class itkDenseFiniteDifferenceImageFilterID2ID2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID2ID2):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterID2ID2
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterID2ID2

        Create a new object of the class itkDenseFiniteDifferenceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterID2ID2 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_swigregister(itkDenseFiniteDifferenceImageFilterID2ID2)
itkDenseFiniteDifferenceImageFilterID2ID2_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2_cast

class itkDenseFiniteDifferenceImageFilterID3ID3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID3ID3):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterID3ID3
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterID3ID3

        Create a new object of the class itkDenseFiniteDifferenceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterID3ID3 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_swigregister(itkDenseFiniteDifferenceImageFilterID3ID3)
itkDenseFiniteDifferenceImageFilterID3ID3_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3_cast

class itkDenseFiniteDifferenceImageFilterIF2IF2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIF2IF2

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIF2IF2 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_swigregister(itkDenseFiniteDifferenceImageFilterIF2IF2)
itkDenseFiniteDifferenceImageFilterIF2IF2_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_cast

class itkDenseFiniteDifferenceImageFilterIF3IF3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIF3IF3

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIF3IF3 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_swigregister(itkDenseFiniteDifferenceImageFilterIF3IF3)
itkDenseFiniteDifferenceImageFilterIF3IF3_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_cast

class itkDenseFiniteDifferenceImageFilterIVF22IVF22(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF22IVF22):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF22IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF22IVF22

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF22IVF22 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_swigregister(itkDenseFiniteDifferenceImageFilterIVF22IVF22)
itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast

class itkDenseFiniteDifferenceImageFilterIVF23IVF23(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF23IVF23):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF23IVF23

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF23IVF23 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_swigregister(itkDenseFiniteDifferenceImageFilterIVF23IVF23)
itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast

class itkDenseFiniteDifferenceImageFilterIVF32IVF32(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF32IVF32):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF32IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF32IVF32

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF32IVF32 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_swigregister(itkDenseFiniteDifferenceImageFilterIVF32IVF32)
itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast

class itkDenseFiniteDifferenceImageFilterIVF33IVF33(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF33IVF33):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF33IVF33

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF33IVF33 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_swigregister(itkDenseFiniteDifferenceImageFilterIVF33IVF33)
itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast

class itkDenseFiniteDifferenceImageFilterIVF42IVF42(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF42IVF42):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF42IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF42IVF42

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF42IVF42 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_swigregister(itkDenseFiniteDifferenceImageFilterIVF42IVF42)
itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast

class itkDenseFiniteDifferenceImageFilterIVF43IVF43(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF43IVF43):
    r"""Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputTimesDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputAdditiveOperatorsCheck
    
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputAdditiveAndAssignOperatorsCheck
    
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF43IVF43

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDenseFiniteDifferenceImageFilterIVF43IVF43 in _itkDenseFiniteDifferenceImageFilterPython:
_itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_swigregister(itkDenseFiniteDifferenceImageFilterIVF43IVF43)
itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def dense_finite_difference_image_filter(*args, **kwargs):
    """Procedural interface for DenseFiniteDifferenceImageFilter"""
    import itk
    instance = itk.DenseFiniteDifferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def dense_finite_difference_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DenseFiniteDifferenceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DenseFiniteDifferenceImageFilter.values()[0]
    else:
        filter_object = itk.DenseFiniteDifferenceImageFilter

    dense_finite_difference_image_filter.__doc__ = filter_object.__doc__
    dense_finite_difference_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    dense_finite_difference_image_filter.__doc__ += "Available Keyword Arguments:\n"
    dense_finite_difference_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



