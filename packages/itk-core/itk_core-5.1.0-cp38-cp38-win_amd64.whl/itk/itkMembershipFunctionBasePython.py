# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMembershipFunctionBasePython
else:
    import _itkMembershipFunctionBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMembershipFunctionBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMembershipFunctionBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkFunctionBasePython
import ITKCommonBasePython
import pyBasePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkArrayPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython

def itkMembershipFunctionBaseVF3_New():
  return itkMembershipFunctionBaseVF3.New()


def itkMembershipFunctionBaseVF2_New():
  return itkMembershipFunctionBaseVF2.New()

class itkMembershipFunctionBaseVF2(itkFunctionBasePython.itkFunctionBaseVF2D):
    r"""Proxy of C++ itkMembershipFunctionBaseVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMeasurementVectorSize = _swig_new_instance_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkMembershipFunctionBasePython.delete_itkMembershipFunctionBaseVF2
    cast = _swig_new_static_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF2_cast)

    def New(*args, **kargs):
        """New() -> itkMembershipFunctionBaseVF2

        Create a new object of the class itkMembershipFunctionBaseVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMembershipFunctionBaseVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMembershipFunctionBaseVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMembershipFunctionBaseVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMembershipFunctionBaseVF2 in _itkMembershipFunctionBasePython:
_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF2_swigregister(itkMembershipFunctionBaseVF2)
itkMembershipFunctionBaseVF2_cast = _itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF2_cast

class itkMembershipFunctionBaseVF3(itkFunctionBasePython.itkFunctionBaseVF3D):
    r"""Proxy of C++ itkMembershipFunctionBaseVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMeasurementVectorSize = _swig_new_instance_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkMembershipFunctionBasePython.delete_itkMembershipFunctionBaseVF3
    cast = _swig_new_static_method(_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF3_cast)

    def New(*args, **kargs):
        """New() -> itkMembershipFunctionBaseVF3

        Create a new object of the class itkMembershipFunctionBaseVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMembershipFunctionBaseVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMembershipFunctionBaseVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMembershipFunctionBaseVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMembershipFunctionBaseVF3 in _itkMembershipFunctionBasePython:
_itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF3_swigregister(itkMembershipFunctionBaseVF3)
itkMembershipFunctionBaseVF3_cast = _itkMembershipFunctionBasePython.itkMembershipFunctionBaseVF3_cast



