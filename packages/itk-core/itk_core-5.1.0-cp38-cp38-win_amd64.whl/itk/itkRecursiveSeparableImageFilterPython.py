# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRecursiveSeparableImageFilterPython
else:
    import _itkRecursiveSeparableImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRecursiveSeparableImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRecursiveSeparableImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython

def itkRecursiveSeparableImageFilterID3ID3_New():
  return itkRecursiveSeparableImageFilterID3ID3.New()


def itkRecursiveSeparableImageFilterID2ID2_New():
  return itkRecursiveSeparableImageFilterID2ID2.New()


def itkRecursiveSeparableImageFilterIF3IF3_New():
  return itkRecursiveSeparableImageFilterIF3IF3.New()


def itkRecursiveSeparableImageFilterIF2IF2_New():
  return itkRecursiveSeparableImageFilterIF2IF2.New()


def itkRecursiveSeparableImageFilterIUS3IUS3_New():
  return itkRecursiveSeparableImageFilterIUS3IUS3.New()


def itkRecursiveSeparableImageFilterIUS2IUS2_New():
  return itkRecursiveSeparableImageFilterIUS2IUS2.New()


def itkRecursiveSeparableImageFilterIUC3IUC3_New():
  return itkRecursiveSeparableImageFilterIUC3IUC3.New()


def itkRecursiveSeparableImageFilterIUC2IUC2_New():
  return itkRecursiveSeparableImageFilterIUC2IUC2.New()


def itkRecursiveSeparableImageFilterISS3ISS3_New():
  return itkRecursiveSeparableImageFilterISS3ISS3.New()


def itkRecursiveSeparableImageFilterISS2ISS2_New():
  return itkRecursiveSeparableImageFilterISS2ISS2.New()

class itkRecursiveSeparableImageFilterID2ID2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterID2ID2
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterID2ID2

        Create a new object of the class itkRecursiveSeparableImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterID2ID2 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_swigregister(itkRecursiveSeparableImageFilterID2ID2)
itkRecursiveSeparableImageFilterID2ID2_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2_cast

class itkRecursiveSeparableImageFilterID3ID3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterID3ID3
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterID3ID3

        Create a new object of the class itkRecursiveSeparableImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterID3ID3 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_swigregister(itkRecursiveSeparableImageFilterID3ID3)
itkRecursiveSeparableImageFilterID3ID3_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3_cast

class itkRecursiveSeparableImageFilterIF2IF2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIF2IF2
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIF2IF2

        Create a new object of the class itkRecursiveSeparableImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIF2IF2 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_swigregister(itkRecursiveSeparableImageFilterIF2IF2)
itkRecursiveSeparableImageFilterIF2IF2_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2_cast

class itkRecursiveSeparableImageFilterIF3IF3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIF3IF3
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIF3IF3

        Create a new object of the class itkRecursiveSeparableImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIF3IF3 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_swigregister(itkRecursiveSeparableImageFilterIF3IF3)
itkRecursiveSeparableImageFilterIF3IF3_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3_cast

class itkRecursiveSeparableImageFilterISS2ISS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterISS2ISS2

        Create a new object of the class itkRecursiveSeparableImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterISS2ISS2 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_swigregister(itkRecursiveSeparableImageFilterISS2ISS2)
itkRecursiveSeparableImageFilterISS2ISS2_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2_cast

class itkRecursiveSeparableImageFilterISS3ISS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterISS3ISS3

        Create a new object of the class itkRecursiveSeparableImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterISS3ISS3 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_swigregister(itkRecursiveSeparableImageFilterISS3ISS3)
itkRecursiveSeparableImageFilterISS3ISS3_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3_cast

class itkRecursiveSeparableImageFilterIUC2IUC2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIUC2IUC2

        Create a new object of the class itkRecursiveSeparableImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIUC2IUC2 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_swigregister(itkRecursiveSeparableImageFilterIUC2IUC2)
itkRecursiveSeparableImageFilterIUC2IUC2_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2_cast

class itkRecursiveSeparableImageFilterIUC3IUC3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIUC3IUC3

        Create a new object of the class itkRecursiveSeparableImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIUC3IUC3 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_swigregister(itkRecursiveSeparableImageFilterIUC3IUC3)
itkRecursiveSeparableImageFilterIUC3IUC3_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3_cast

class itkRecursiveSeparableImageFilterIUS2IUS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIUS2IUS2

        Create a new object of the class itkRecursiveSeparableImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIUS2IUS2 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_swigregister(itkRecursiveSeparableImageFilterIUS2IUS2)
itkRecursiveSeparableImageFilterIUS2IUS2_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2_cast

class itkRecursiveSeparableImageFilterIUS3IUS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkRecursiveSeparableImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_SetDirection)
    SetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_GetInputImage)
    __swig_destroy__ = _itkRecursiveSeparableImageFilterPython.delete_itkRecursiveSeparableImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveSeparableImageFilterIUS3IUS3

        Create a new object of the class itkRecursiveSeparableImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveSeparableImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveSeparableImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveSeparableImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveSeparableImageFilterIUS3IUS3 in _itkRecursiveSeparableImageFilterPython:
_itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_swigregister(itkRecursiveSeparableImageFilterIUS3IUS3)
itkRecursiveSeparableImageFilterIUS3IUS3_cast = _itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def recursive_separable_image_filter(*args, **kwargs):
    """Procedural interface for RecursiveSeparableImageFilter"""
    import itk
    instance = itk.RecursiveSeparableImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def recursive_separable_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RecursiveSeparableImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RecursiveSeparableImageFilter.values()[0]
    else:
        filter_object = itk.RecursiveSeparableImageFilter

    recursive_separable_image_filter.__doc__ = filter_object.__doc__
    recursive_separable_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    recursive_separable_image_filter.__doc__ += "Available Keyword Arguments:\n"
    recursive_separable_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



