# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterBPython
else:
    import _itkImageToImageFilterBPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageToImageFilterBPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageToImageFilterBPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkImageToImageFilterCommonPython
import pyBasePython
import ITKCommonBasePython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import itkPointPython
import vnl_matrix_fixedPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkImageToImageFilterID3ICVD33_New():
  return itkImageToImageFilterID3ICVD33.New()


def itkImageToImageFilterIF3ICVD33_New():
  return itkImageToImageFilterIF3ICVD33.New()


def itkImageToImageFilterID2ICVD22_New():
  return itkImageToImageFilterID2ICVD22.New()


def itkImageToImageFilterIF2ICVD22_New():
  return itkImageToImageFilterIF2ICVD22.New()


def itkImageToImageFilterICF3ICF2_New():
  return itkImageToImageFilterICF3ICF2.New()


def itkImageToImageFilterIRGBUC3IRGBUC2_New():
  return itkImageToImageFilterIRGBUC3IRGBUC2.New()


def itkImageToImageFilterID3ID2_New():
  return itkImageToImageFilterID3ID2.New()


def itkImageToImageFilterIF3IF2_New():
  return itkImageToImageFilterIF3IF2.New()


def itkImageToImageFilterIUS3IUS2_New():
  return itkImageToImageFilterIUS3IUS2.New()


def itkImageToImageFilterIUC3IUC2_New():
  return itkImageToImageFilterIUC3IUC2.New()


def itkImageToImageFilterISS3ISS2_New():
  return itkImageToImageFilterISS3ISS2.New()


def itkImageToImageFilterICF2ICF3_New():
  return itkImageToImageFilterICF2ICF3.New()


def itkImageToImageFilterIRGBUC2IRGBUC3_New():
  return itkImageToImageFilterIRGBUC2IRGBUC3.New()


def itkImageToImageFilterID2ID3_New():
  return itkImageToImageFilterID2ID3.New()


def itkImageToImageFilterIF2IF3_New():
  return itkImageToImageFilterIF2IF3.New()


def itkImageToImageFilterIUS2IUS3_New():
  return itkImageToImageFilterIUS2IUS3.New()


def itkImageToImageFilterIUC2IUC3_New():
  return itkImageToImageFilterIUC2IUC3.New()


def itkImageToImageFilterISS2ISS3_New():
  return itkImageToImageFilterISS2ISS3.New()


def itkImageToImageFilterISSRTD33ISSRTD33_New():
  return itkImageToImageFilterISSRTD33ISSRTD33.New()


def itkImageToImageFilterISSRTD33ID3_New():
  return itkImageToImageFilterISSRTD33ID3.New()


def itkImageToImageFilterID3ISSRTD33_New():
  return itkImageToImageFilterID3ISSRTD33.New()


def itkImageToImageFilterISSRTD33IF3_New():
  return itkImageToImageFilterISSRTD33IF3.New()


def itkImageToImageFilterIF3ISSRTD33_New():
  return itkImageToImageFilterIF3ISSRTD33.New()


def itkImageToImageFilterISSRTD33IUS3_New():
  return itkImageToImageFilterISSRTD33IUS3.New()


def itkImageToImageFilterIUS3ISSRTD33_New():
  return itkImageToImageFilterIUS3ISSRTD33.New()


def itkImageToImageFilterISSRTD33IUC3_New():
  return itkImageToImageFilterISSRTD33IUC3.New()


def itkImageToImageFilterIUC3ISSRTD33_New():
  return itkImageToImageFilterIUC3ISSRTD33.New()


def itkImageToImageFilterISSRTD33ISS3_New():
  return itkImageToImageFilterISSRTD33ISS3.New()


def itkImageToImageFilterISS3ISSRTD33_New():
  return itkImageToImageFilterISS3ISSRTD33.New()


def itkImageToImageFilterISSRTD22ISSRTD22_New():
  return itkImageToImageFilterISSRTD22ISSRTD22.New()


def itkImageToImageFilterISSRTD22ID2_New():
  return itkImageToImageFilterISSRTD22ID2.New()


def itkImageToImageFilterID2ISSRTD22_New():
  return itkImageToImageFilterID2ISSRTD22.New()


def itkImageToImageFilterISSRTD22IF2_New():
  return itkImageToImageFilterISSRTD22IF2.New()


def itkImageToImageFilterIF2ISSRTD22_New():
  return itkImageToImageFilterIF2ISSRTD22.New()


def itkImageToImageFilterISSRTD22IUS2_New():
  return itkImageToImageFilterISSRTD22IUS2.New()


def itkImageToImageFilterIUS2ISSRTD22_New():
  return itkImageToImageFilterIUS2ISSRTD22.New()


def itkImageToImageFilterISSRTD22IUC2_New():
  return itkImageToImageFilterISSRTD22IUC2.New()


def itkImageToImageFilterIUC2ISSRTD22_New():
  return itkImageToImageFilterIUC2ISSRTD22.New()


def itkImageToImageFilterISSRTD22ISS2_New():
  return itkImageToImageFilterISSRTD22ISS2.New()


def itkImageToImageFilterISS2ISSRTD22_New():
  return itkImageToImageFilterISS2ISSRTD22.New()


def itkImageToImageFilterICF3ID3_New():
  return itkImageToImageFilterICF3ID3.New()


def itkImageToImageFilterICF2ID2_New():
  return itkImageToImageFilterICF2ID2.New()


def itkImageToImageFilterICF3IF3_New():
  return itkImageToImageFilterICF3IF3.New()


def itkImageToImageFilterICF2IF2_New():
  return itkImageToImageFilterICF2IF2.New()


def itkImageToImageFilterICF3IUS3_New():
  return itkImageToImageFilterICF3IUS3.New()


def itkImageToImageFilterICF2IUS2_New():
  return itkImageToImageFilterICF2IUS2.New()


def itkImageToImageFilterICF3IUC3_New():
  return itkImageToImageFilterICF3IUC3.New()


def itkImageToImageFilterICF2IUC2_New():
  return itkImageToImageFilterICF2IUC2.New()


def itkImageToImageFilterICF3ISS3_New():
  return itkImageToImageFilterICF3ISS3.New()


def itkImageToImageFilterICF2ISS2_New():
  return itkImageToImageFilterICF2ISS2.New()


def itkImageToImageFilterID3ICF3_New():
  return itkImageToImageFilterID3ICF3.New()


def itkImageToImageFilterID2ICF2_New():
  return itkImageToImageFilterID2ICF2.New()


def itkImageToImageFilterIF3ICF3_New():
  return itkImageToImageFilterIF3ICF3.New()


def itkImageToImageFilterIF2ICF2_New():
  return itkImageToImageFilterIF2ICF2.New()


def itkImageToImageFilterIUS3ICF3_New():
  return itkImageToImageFilterIUS3ICF3.New()


def itkImageToImageFilterIUS2ICF2_New():
  return itkImageToImageFilterIUS2ICF2.New()


def itkImageToImageFilterIUC3ICF3_New():
  return itkImageToImageFilterIUC3ICF3.New()


def itkImageToImageFilterIUC2ICF2_New():
  return itkImageToImageFilterIUC2ICF2.New()


def itkImageToImageFilterISS3ICF3_New():
  return itkImageToImageFilterISS3ICF3.New()


def itkImageToImageFilterISS2ICF2_New():
  return itkImageToImageFilterISS2ICF2.New()


def itkImageToImageFilterICF3ICF3_New():
  return itkImageToImageFilterICF3ICF3.New()


def itkImageToImageFilterICF2ICF2_New():
  return itkImageToImageFilterICF2ICF2.New()


def itkImageToImageFilterID3ICVF43_New():
  return itkImageToImageFilterID3ICVF43.New()


def itkImageToImageFilterID2ICVF42_New():
  return itkImageToImageFilterID2ICVF42.New()


def itkImageToImageFilterID3ICVF33_New():
  return itkImageToImageFilterID3ICVF33.New()


def itkImageToImageFilterID2ICVF32_New():
  return itkImageToImageFilterID2ICVF32.New()


def itkImageToImageFilterID3ICVF23_New():
  return itkImageToImageFilterID3ICVF23.New()


def itkImageToImageFilterID2ICVF22_New():
  return itkImageToImageFilterID2ICVF22.New()


def itkImageToImageFilterID3IVF43_New():
  return itkImageToImageFilterID3IVF43.New()


def itkImageToImageFilterID2IVF42_New():
  return itkImageToImageFilterID2IVF42.New()


def itkImageToImageFilterID3IVF33_New():
  return itkImageToImageFilterID3IVF33.New()


def itkImageToImageFilterID2IVF32_New():
  return itkImageToImageFilterID2IVF32.New()


def itkImageToImageFilterID3IVF23_New():
  return itkImageToImageFilterID3IVF23.New()


def itkImageToImageFilterID2IVF22_New():
  return itkImageToImageFilterID2IVF22.New()


def itkImageToImageFilterIF3ICVF43_New():
  return itkImageToImageFilterIF3ICVF43.New()


def itkImageToImageFilterIF2ICVF42_New():
  return itkImageToImageFilterIF2ICVF42.New()


def itkImageToImageFilterIF3ICVF33_New():
  return itkImageToImageFilterIF3ICVF33.New()


def itkImageToImageFilterIF2ICVF32_New():
  return itkImageToImageFilterIF2ICVF32.New()


def itkImageToImageFilterIF3ICVF23_New():
  return itkImageToImageFilterIF3ICVF23.New()


def itkImageToImageFilterIF2ICVF22_New():
  return itkImageToImageFilterIF2ICVF22.New()


def itkImageToImageFilterIF3IVF43_New():
  return itkImageToImageFilterIF3IVF43.New()


def itkImageToImageFilterIF2IVF42_New():
  return itkImageToImageFilterIF2IVF42.New()


def itkImageToImageFilterIF3IVF33_New():
  return itkImageToImageFilterIF3IVF33.New()


def itkImageToImageFilterIF2IVF32_New():
  return itkImageToImageFilterIF2IVF32.New()


def itkImageToImageFilterIF3IVF23_New():
  return itkImageToImageFilterIF3IVF23.New()


def itkImageToImageFilterIF2IVF22_New():
  return itkImageToImageFilterIF2IVF22.New()


def itkImageToImageFilterIUS3ICVF43_New():
  return itkImageToImageFilterIUS3ICVF43.New()


def itkImageToImageFilterIUS2ICVF42_New():
  return itkImageToImageFilterIUS2ICVF42.New()


def itkImageToImageFilterIUS3ICVF33_New():
  return itkImageToImageFilterIUS3ICVF33.New()


def itkImageToImageFilterIUS2ICVF32_New():
  return itkImageToImageFilterIUS2ICVF32.New()


def itkImageToImageFilterIUS3ICVF23_New():
  return itkImageToImageFilterIUS3ICVF23.New()


def itkImageToImageFilterIUS2ICVF22_New():
  return itkImageToImageFilterIUS2ICVF22.New()


def itkImageToImageFilterIUS3IVF43_New():
  return itkImageToImageFilterIUS3IVF43.New()


def itkImageToImageFilterIUS2IVF42_New():
  return itkImageToImageFilterIUS2IVF42.New()


def itkImageToImageFilterIUS3IVF33_New():
  return itkImageToImageFilterIUS3IVF33.New()


def itkImageToImageFilterIUS2IVF32_New():
  return itkImageToImageFilterIUS2IVF32.New()


def itkImageToImageFilterIUS3IVF23_New():
  return itkImageToImageFilterIUS3IVF23.New()


def itkImageToImageFilterIUS2IVF22_New():
  return itkImageToImageFilterIUS2IVF22.New()


def itkImageToImageFilterIUC3ICVF43_New():
  return itkImageToImageFilterIUC3ICVF43.New()


def itkImageToImageFilterIUC2ICVF42_New():
  return itkImageToImageFilterIUC2ICVF42.New()


def itkImageToImageFilterIUC3ICVF33_New():
  return itkImageToImageFilterIUC3ICVF33.New()


def itkImageToImageFilterIUC2ICVF32_New():
  return itkImageToImageFilterIUC2ICVF32.New()


def itkImageToImageFilterIUC3ICVF23_New():
  return itkImageToImageFilterIUC3ICVF23.New()


def itkImageToImageFilterIUC2ICVF22_New():
  return itkImageToImageFilterIUC2ICVF22.New()


def itkImageToImageFilterIUC3IVF43_New():
  return itkImageToImageFilterIUC3IVF43.New()


def itkImageToImageFilterIUC2IVF42_New():
  return itkImageToImageFilterIUC2IVF42.New()


def itkImageToImageFilterIUC3IVF33_New():
  return itkImageToImageFilterIUC3IVF33.New()


def itkImageToImageFilterIUC2IVF32_New():
  return itkImageToImageFilterIUC2IVF32.New()


def itkImageToImageFilterIUC3IVF23_New():
  return itkImageToImageFilterIUC3IVF23.New()


def itkImageToImageFilterIUC2IVF22_New():
  return itkImageToImageFilterIUC2IVF22.New()


def itkImageToImageFilterISS3ICVF43_New():
  return itkImageToImageFilterISS3ICVF43.New()


def itkImageToImageFilterISS2ICVF42_New():
  return itkImageToImageFilterISS2ICVF42.New()


def itkImageToImageFilterISS3ICVF33_New():
  return itkImageToImageFilterISS3ICVF33.New()


def itkImageToImageFilterISS2ICVF32_New():
  return itkImageToImageFilterISS2ICVF32.New()


def itkImageToImageFilterISS3ICVF23_New():
  return itkImageToImageFilterISS3ICVF23.New()


def itkImageToImageFilterISS2ICVF22_New():
  return itkImageToImageFilterISS2ICVF22.New()


def itkImageToImageFilterISS3IVF43_New():
  return itkImageToImageFilterISS3IVF43.New()


def itkImageToImageFilterISS2IVF42_New():
  return itkImageToImageFilterISS2IVF42.New()


def itkImageToImageFilterISS3IVF33_New():
  return itkImageToImageFilterISS3IVF33.New()


def itkImageToImageFilterISS2IVF32_New():
  return itkImageToImageFilterISS2IVF32.New()


def itkImageToImageFilterISS3IVF23_New():
  return itkImageToImageFilterISS3IVF23.New()


def itkImageToImageFilterISS2IVF22_New():
  return itkImageToImageFilterISS2IVF22.New()


def itkImageToImageFilterICVF43ID3_New():
  return itkImageToImageFilterICVF43ID3.New()


def itkImageToImageFilterICVF42ID2_New():
  return itkImageToImageFilterICVF42ID2.New()


def itkImageToImageFilterICVF33ID3_New():
  return itkImageToImageFilterICVF33ID3.New()


def itkImageToImageFilterICVF32ID2_New():
  return itkImageToImageFilterICVF32ID2.New()


def itkImageToImageFilterICVF23ID3_New():
  return itkImageToImageFilterICVF23ID3.New()


def itkImageToImageFilterICVF22ID2_New():
  return itkImageToImageFilterICVF22ID2.New()


def itkImageToImageFilterICVF43IF3_New():
  return itkImageToImageFilterICVF43IF3.New()


def itkImageToImageFilterICVF42IF2_New():
  return itkImageToImageFilterICVF42IF2.New()


def itkImageToImageFilterICVF33IF3_New():
  return itkImageToImageFilterICVF33IF3.New()


def itkImageToImageFilterICVF32IF2_New():
  return itkImageToImageFilterICVF32IF2.New()


def itkImageToImageFilterICVF23IF3_New():
  return itkImageToImageFilterICVF23IF3.New()


def itkImageToImageFilterICVF22IF2_New():
  return itkImageToImageFilterICVF22IF2.New()


def itkImageToImageFilterICVF43IUS3_New():
  return itkImageToImageFilterICVF43IUS3.New()


def itkImageToImageFilterICVF42IUS2_New():
  return itkImageToImageFilterICVF42IUS2.New()


def itkImageToImageFilterICVF33IUS3_New():
  return itkImageToImageFilterICVF33IUS3.New()


def itkImageToImageFilterICVF32IUS2_New():
  return itkImageToImageFilterICVF32IUS2.New()


def itkImageToImageFilterICVF23IUS3_New():
  return itkImageToImageFilterICVF23IUS3.New()


def itkImageToImageFilterICVF22IUS2_New():
  return itkImageToImageFilterICVF22IUS2.New()


def itkImageToImageFilterICVF43IUC3_New():
  return itkImageToImageFilterICVF43IUC3.New()


def itkImageToImageFilterICVF42IUC2_New():
  return itkImageToImageFilterICVF42IUC2.New()


def itkImageToImageFilterICVF33IUC3_New():
  return itkImageToImageFilterICVF33IUC3.New()


def itkImageToImageFilterICVF32IUC2_New():
  return itkImageToImageFilterICVF32IUC2.New()


def itkImageToImageFilterICVF23IUC3_New():
  return itkImageToImageFilterICVF23IUC3.New()


def itkImageToImageFilterICVF22IUC2_New():
  return itkImageToImageFilterICVF22IUC2.New()


def itkImageToImageFilterICVF43ISS3_New():
  return itkImageToImageFilterICVF43ISS3.New()


def itkImageToImageFilterICVF42ISS2_New():
  return itkImageToImageFilterICVF42ISS2.New()


def itkImageToImageFilterICVF33ISS3_New():
  return itkImageToImageFilterICVF33ISS3.New()


def itkImageToImageFilterICVF32ISS2_New():
  return itkImageToImageFilterICVF32ISS2.New()


def itkImageToImageFilterICVF23ISS3_New():
  return itkImageToImageFilterICVF23ISS3.New()


def itkImageToImageFilterICVF22ISS2_New():
  return itkImageToImageFilterICVF22ISS2.New()


def itkImageToImageFilterIVF43ID3_New():
  return itkImageToImageFilterIVF43ID3.New()


def itkImageToImageFilterIVF42ID2_New():
  return itkImageToImageFilterIVF42ID2.New()


def itkImageToImageFilterIVF33ID3_New():
  return itkImageToImageFilterIVF33ID3.New()


def itkImageToImageFilterIVF32ID2_New():
  return itkImageToImageFilterIVF32ID2.New()


def itkImageToImageFilterIVF23ID3_New():
  return itkImageToImageFilterIVF23ID3.New()


def itkImageToImageFilterIVF22ID2_New():
  return itkImageToImageFilterIVF22ID2.New()


def itkImageToImageFilterIVF43IF3_New():
  return itkImageToImageFilterIVF43IF3.New()


def itkImageToImageFilterIVF42IF2_New():
  return itkImageToImageFilterIVF42IF2.New()


def itkImageToImageFilterIVF33IF3_New():
  return itkImageToImageFilterIVF33IF3.New()


def itkImageToImageFilterIVF32IF2_New():
  return itkImageToImageFilterIVF32IF2.New()


def itkImageToImageFilterIVF23IF3_New():
  return itkImageToImageFilterIVF23IF3.New()


def itkImageToImageFilterIVF22IF2_New():
  return itkImageToImageFilterIVF22IF2.New()


def itkImageToImageFilterIVF43IUS3_New():
  return itkImageToImageFilterIVF43IUS3.New()


def itkImageToImageFilterIVF42IUS2_New():
  return itkImageToImageFilterIVF42IUS2.New()


def itkImageToImageFilterIVF33IUS3_New():
  return itkImageToImageFilterIVF33IUS3.New()


def itkImageToImageFilterIVF32IUS2_New():
  return itkImageToImageFilterIVF32IUS2.New()


def itkImageToImageFilterIVF23IUS3_New():
  return itkImageToImageFilterIVF23IUS3.New()


def itkImageToImageFilterIVF22IUS2_New():
  return itkImageToImageFilterIVF22IUS2.New()


def itkImageToImageFilterIVF43IUC3_New():
  return itkImageToImageFilterIVF43IUC3.New()


def itkImageToImageFilterIVF42IUC2_New():
  return itkImageToImageFilterIVF42IUC2.New()


def itkImageToImageFilterIVF33IUC3_New():
  return itkImageToImageFilterIVF33IUC3.New()


def itkImageToImageFilterIVF32IUC2_New():
  return itkImageToImageFilterIVF32IUC2.New()


def itkImageToImageFilterIVF23IUC3_New():
  return itkImageToImageFilterIVF23IUC3.New()


def itkImageToImageFilterIVF22IUC2_New():
  return itkImageToImageFilterIVF22IUC2.New()


def itkImageToImageFilterIVF43ISS3_New():
  return itkImageToImageFilterIVF43ISS3.New()


def itkImageToImageFilterIVF42ISS2_New():
  return itkImageToImageFilterIVF42ISS2.New()


def itkImageToImageFilterIVF33ISS3_New():
  return itkImageToImageFilterIVF33ISS3.New()


def itkImageToImageFilterIVF32ISS2_New():
  return itkImageToImageFilterIVF32ISS2.New()


def itkImageToImageFilterIVF23ISS3_New():
  return itkImageToImageFilterIVF23ISS3.New()


def itkImageToImageFilterIVF22ISS2_New():
  return itkImageToImageFilterIVF22ISS2.New()


def itkImageToImageFilterID3VID3_New():
  return itkImageToImageFilterID3VID3.New()


def itkImageToImageFilterVID3ID3_New():
  return itkImageToImageFilterVID3ID3.New()


def itkImageToImageFilterIF3VID3_New():
  return itkImageToImageFilterIF3VID3.New()


def itkImageToImageFilterVID3IF3_New():
  return itkImageToImageFilterVID3IF3.New()


def itkImageToImageFilterIUS3VID3_New():
  return itkImageToImageFilterIUS3VID3.New()


def itkImageToImageFilterVID3IUS3_New():
  return itkImageToImageFilterVID3IUS3.New()


def itkImageToImageFilterISS3VID3_New():
  return itkImageToImageFilterISS3VID3.New()


def itkImageToImageFilterVID3ISS3_New():
  return itkImageToImageFilterVID3ISS3.New()


def itkImageToImageFilterIUC3VID3_New():
  return itkImageToImageFilterIUC3VID3.New()


def itkImageToImageFilterVID3IUC3_New():
  return itkImageToImageFilterVID3IUC3.New()


def itkImageToImageFilterID3VIF3_New():
  return itkImageToImageFilterID3VIF3.New()


def itkImageToImageFilterVIF3ID3_New():
  return itkImageToImageFilterVIF3ID3.New()


def itkImageToImageFilterIF3VIF3_New():
  return itkImageToImageFilterIF3VIF3.New()


def itkImageToImageFilterVIF3IF3_New():
  return itkImageToImageFilterVIF3IF3.New()


def itkImageToImageFilterIUS3VIF3_New():
  return itkImageToImageFilterIUS3VIF3.New()


def itkImageToImageFilterVIF3IUS3_New():
  return itkImageToImageFilterVIF3IUS3.New()


def itkImageToImageFilterISS3VIF3_New():
  return itkImageToImageFilterISS3VIF3.New()


def itkImageToImageFilterVIF3ISS3_New():
  return itkImageToImageFilterVIF3ISS3.New()


def itkImageToImageFilterIUC3VIF3_New():
  return itkImageToImageFilterIUC3VIF3.New()


def itkImageToImageFilterVIF3IUC3_New():
  return itkImageToImageFilterVIF3IUC3.New()


def itkImageToImageFilterID3VIUS3_New():
  return itkImageToImageFilterID3VIUS3.New()


def itkImageToImageFilterVIUS3ID3_New():
  return itkImageToImageFilterVIUS3ID3.New()


def itkImageToImageFilterIF3VIUS3_New():
  return itkImageToImageFilterIF3VIUS3.New()


def itkImageToImageFilterVIUS3IF3_New():
  return itkImageToImageFilterVIUS3IF3.New()


def itkImageToImageFilterIUS3VIUS3_New():
  return itkImageToImageFilterIUS3VIUS3.New()


def itkImageToImageFilterVIUS3IUS3_New():
  return itkImageToImageFilterVIUS3IUS3.New()


def itkImageToImageFilterISS3VIUS3_New():
  return itkImageToImageFilterISS3VIUS3.New()


def itkImageToImageFilterVIUS3ISS3_New():
  return itkImageToImageFilterVIUS3ISS3.New()


def itkImageToImageFilterIUC3VIUS3_New():
  return itkImageToImageFilterIUC3VIUS3.New()


def itkImageToImageFilterVIUS3IUC3_New():
  return itkImageToImageFilterVIUS3IUC3.New()


def itkImageToImageFilterID3VISS3_New():
  return itkImageToImageFilterID3VISS3.New()


def itkImageToImageFilterVISS3ID3_New():
  return itkImageToImageFilterVISS3ID3.New()


def itkImageToImageFilterIF3VISS3_New():
  return itkImageToImageFilterIF3VISS3.New()


def itkImageToImageFilterVISS3IF3_New():
  return itkImageToImageFilterVISS3IF3.New()


def itkImageToImageFilterIUS3VISS3_New():
  return itkImageToImageFilterIUS3VISS3.New()


def itkImageToImageFilterVISS3IUS3_New():
  return itkImageToImageFilterVISS3IUS3.New()


def itkImageToImageFilterISS3VISS3_New():
  return itkImageToImageFilterISS3VISS3.New()


def itkImageToImageFilterVISS3ISS3_New():
  return itkImageToImageFilterVISS3ISS3.New()


def itkImageToImageFilterIUC3VISS3_New():
  return itkImageToImageFilterIUC3VISS3.New()


def itkImageToImageFilterVISS3IUC3_New():
  return itkImageToImageFilterVISS3IUC3.New()


def itkImageToImageFilterID3VIUC3_New():
  return itkImageToImageFilterID3VIUC3.New()


def itkImageToImageFilterVIUC3ID3_New():
  return itkImageToImageFilterVIUC3ID3.New()


def itkImageToImageFilterIF3VIUC3_New():
  return itkImageToImageFilterIF3VIUC3.New()


def itkImageToImageFilterVIUC3IF3_New():
  return itkImageToImageFilterVIUC3IF3.New()


def itkImageToImageFilterIUS3VIUC3_New():
  return itkImageToImageFilterIUS3VIUC3.New()


def itkImageToImageFilterVIUC3IUS3_New():
  return itkImageToImageFilterVIUC3IUS3.New()


def itkImageToImageFilterISS3VIUC3_New():
  return itkImageToImageFilterISS3VIUC3.New()


def itkImageToImageFilterVIUC3ISS3_New():
  return itkImageToImageFilterVIUC3ISS3.New()


def itkImageToImageFilterIUC3VIUC3_New():
  return itkImageToImageFilterIUC3VIUC3.New()


def itkImageToImageFilterVIUC3IUC3_New():
  return itkImageToImageFilterVIUC3IUC3.New()


def itkImageToImageFilterID2VID2_New():
  return itkImageToImageFilterID2VID2.New()


def itkImageToImageFilterVID2ID2_New():
  return itkImageToImageFilterVID2ID2.New()


def itkImageToImageFilterIF2VID2_New():
  return itkImageToImageFilterIF2VID2.New()


def itkImageToImageFilterVID2IF2_New():
  return itkImageToImageFilterVID2IF2.New()


def itkImageToImageFilterIUS2VID2_New():
  return itkImageToImageFilterIUS2VID2.New()


def itkImageToImageFilterVID2IUS2_New():
  return itkImageToImageFilterVID2IUS2.New()


def itkImageToImageFilterISS2VID2_New():
  return itkImageToImageFilterISS2VID2.New()


def itkImageToImageFilterVID2ISS2_New():
  return itkImageToImageFilterVID2ISS2.New()


def itkImageToImageFilterIUC2VID2_New():
  return itkImageToImageFilterIUC2VID2.New()


def itkImageToImageFilterVID2IUC2_New():
  return itkImageToImageFilterVID2IUC2.New()


def itkImageToImageFilterID2VIF2_New():
  return itkImageToImageFilterID2VIF2.New()


def itkImageToImageFilterVIF2ID2_New():
  return itkImageToImageFilterVIF2ID2.New()


def itkImageToImageFilterIF2VIF2_New():
  return itkImageToImageFilterIF2VIF2.New()


def itkImageToImageFilterVIF2IF2_New():
  return itkImageToImageFilterVIF2IF2.New()


def itkImageToImageFilterIUS2VIF2_New():
  return itkImageToImageFilterIUS2VIF2.New()


def itkImageToImageFilterVIF2IUS2_New():
  return itkImageToImageFilterVIF2IUS2.New()


def itkImageToImageFilterISS2VIF2_New():
  return itkImageToImageFilterISS2VIF2.New()


def itkImageToImageFilterVIF2ISS2_New():
  return itkImageToImageFilterVIF2ISS2.New()


def itkImageToImageFilterIUC2VIF2_New():
  return itkImageToImageFilterIUC2VIF2.New()


def itkImageToImageFilterVIF2IUC2_New():
  return itkImageToImageFilterVIF2IUC2.New()


def itkImageToImageFilterID2VIUS2_New():
  return itkImageToImageFilterID2VIUS2.New()


def itkImageToImageFilterVIUS2ID2_New():
  return itkImageToImageFilterVIUS2ID2.New()


def itkImageToImageFilterIF2VIUS2_New():
  return itkImageToImageFilterIF2VIUS2.New()


def itkImageToImageFilterVIUS2IF2_New():
  return itkImageToImageFilterVIUS2IF2.New()


def itkImageToImageFilterIUS2VIUS2_New():
  return itkImageToImageFilterIUS2VIUS2.New()


def itkImageToImageFilterVIUS2IUS2_New():
  return itkImageToImageFilterVIUS2IUS2.New()


def itkImageToImageFilterISS2VIUS2_New():
  return itkImageToImageFilterISS2VIUS2.New()


def itkImageToImageFilterVIUS2ISS2_New():
  return itkImageToImageFilterVIUS2ISS2.New()


def itkImageToImageFilterIUC2VIUS2_New():
  return itkImageToImageFilterIUC2VIUS2.New()


def itkImageToImageFilterVIUS2IUC2_New():
  return itkImageToImageFilterVIUS2IUC2.New()


def itkImageToImageFilterID2VISS2_New():
  return itkImageToImageFilterID2VISS2.New()


def itkImageToImageFilterVISS2ID2_New():
  return itkImageToImageFilterVISS2ID2.New()


def itkImageToImageFilterIF2VISS2_New():
  return itkImageToImageFilterIF2VISS2.New()


def itkImageToImageFilterVISS2IF2_New():
  return itkImageToImageFilterVISS2IF2.New()


def itkImageToImageFilterIUS2VISS2_New():
  return itkImageToImageFilterIUS2VISS2.New()


def itkImageToImageFilterVISS2IUS2_New():
  return itkImageToImageFilterVISS2IUS2.New()


def itkImageToImageFilterISS2VISS2_New():
  return itkImageToImageFilterISS2VISS2.New()


def itkImageToImageFilterVISS2ISS2_New():
  return itkImageToImageFilterVISS2ISS2.New()


def itkImageToImageFilterIUC2VISS2_New():
  return itkImageToImageFilterIUC2VISS2.New()


def itkImageToImageFilterVISS2IUC2_New():
  return itkImageToImageFilterVISS2IUC2.New()


def itkImageToImageFilterID2VIUC2_New():
  return itkImageToImageFilterID2VIUC2.New()


def itkImageToImageFilterVIUC2ID2_New():
  return itkImageToImageFilterVIUC2ID2.New()


def itkImageToImageFilterIF2VIUC2_New():
  return itkImageToImageFilterIF2VIUC2.New()


def itkImageToImageFilterVIUC2IF2_New():
  return itkImageToImageFilterVIUC2IF2.New()


def itkImageToImageFilterIUS2VIUC2_New():
  return itkImageToImageFilterIUS2VIUC2.New()


def itkImageToImageFilterVIUC2IUS2_New():
  return itkImageToImageFilterVIUC2IUS2.New()


def itkImageToImageFilterISS2VIUC2_New():
  return itkImageToImageFilterISS2VIUC2.New()


def itkImageToImageFilterVIUC2ISS2_New():
  return itkImageToImageFilterVIUC2ISS2.New()


def itkImageToImageFilterIUC2VIUC2_New():
  return itkImageToImageFilterIUC2VIUC2.New()


def itkImageToImageFilterVIUC2IUC2_New():
  return itkImageToImageFilterVIUC2IUC2.New()


def itkImageToImageFilterIRGBAUC3ID3_New():
  return itkImageToImageFilterIRGBAUC3ID3.New()


def itkImageToImageFilterIRGBAUC2ID2_New():
  return itkImageToImageFilterIRGBAUC2ID2.New()


def itkImageToImageFilterIRGBAUC3IF3_New():
  return itkImageToImageFilterIRGBAUC3IF3.New()


def itkImageToImageFilterIRGBAUC2IF2_New():
  return itkImageToImageFilterIRGBAUC2IF2.New()


def itkImageToImageFilterIRGBAUC3IUS3_New():
  return itkImageToImageFilterIRGBAUC3IUS3.New()


def itkImageToImageFilterIRGBAUC2IUS2_New():
  return itkImageToImageFilterIRGBAUC2IUS2.New()


def itkImageToImageFilterIRGBAUC3IUC3_New():
  return itkImageToImageFilterIRGBAUC3IUC3.New()


def itkImageToImageFilterIRGBAUC2IUC2_New():
  return itkImageToImageFilterIRGBAUC2IUC2.New()


def itkImageToImageFilterIRGBAUC3ISS3_New():
  return itkImageToImageFilterIRGBAUC3ISS3.New()


def itkImageToImageFilterIRGBAUC2ISS2_New():
  return itkImageToImageFilterIRGBAUC2ISS2.New()


def itkImageToImageFilterIRGBAUC3IUL3_New():
  return itkImageToImageFilterIRGBAUC3IUL3.New()


def itkImageToImageFilterIRGBAUC2IUL2_New():
  return itkImageToImageFilterIRGBAUC2IUL2.New()


def itkImageToImageFilterIRGBAUC3IULL3_New():
  return itkImageToImageFilterIRGBAUC3IULL3.New()


def itkImageToImageFilterIRGBAUC2IULL2_New():
  return itkImageToImageFilterIRGBAUC2IULL2.New()


def itkImageToImageFilterID3IRGBAUC3_New():
  return itkImageToImageFilterID3IRGBAUC3.New()


def itkImageToImageFilterID2IRGBAUC2_New():
  return itkImageToImageFilterID2IRGBAUC2.New()


def itkImageToImageFilterIF3IRGBAUC3_New():
  return itkImageToImageFilterIF3IRGBAUC3.New()


def itkImageToImageFilterIF2IRGBAUC2_New():
  return itkImageToImageFilterIF2IRGBAUC2.New()


def itkImageToImageFilterIUS3IRGBAUC3_New():
  return itkImageToImageFilterIUS3IRGBAUC3.New()


def itkImageToImageFilterIUS2IRGBAUC2_New():
  return itkImageToImageFilterIUS2IRGBAUC2.New()


def itkImageToImageFilterIUC3IRGBAUC3_New():
  return itkImageToImageFilterIUC3IRGBAUC3.New()


def itkImageToImageFilterIUC2IRGBAUC2_New():
  return itkImageToImageFilterIUC2IRGBAUC2.New()


def itkImageToImageFilterISS3IRGBAUC3_New():
  return itkImageToImageFilterISS3IRGBAUC3.New()


def itkImageToImageFilterISS2IRGBAUC2_New():
  return itkImageToImageFilterISS2IRGBAUC2.New()


def itkImageToImageFilterIUL3IRGBAUC3_New():
  return itkImageToImageFilterIUL3IRGBAUC3.New()


def itkImageToImageFilterIUL2IRGBAUC2_New():
  return itkImageToImageFilterIUL2IRGBAUC2.New()


def itkImageToImageFilterIULL3IRGBAUC3_New():
  return itkImageToImageFilterIULL3IRGBAUC3.New()


def itkImageToImageFilterIULL2IRGBAUC2_New():
  return itkImageToImageFilterIULL2IRGBAUC2.New()


def itkImageToImageFilterIRGBUC3ID3_New():
  return itkImageToImageFilterIRGBUC3ID3.New()


def itkImageToImageFilterIRGBUC2ID2_New():
  return itkImageToImageFilterIRGBUC2ID2.New()


def itkImageToImageFilterIRGBUC3IF3_New():
  return itkImageToImageFilterIRGBUC3IF3.New()


def itkImageToImageFilterIRGBUC2IF2_New():
  return itkImageToImageFilterIRGBUC2IF2.New()


def itkImageToImageFilterIRGBUC3IUS3_New():
  return itkImageToImageFilterIRGBUC3IUS3.New()


def itkImageToImageFilterIRGBUC2IUS2_New():
  return itkImageToImageFilterIRGBUC2IUS2.New()


def itkImageToImageFilterIRGBUC3IUC3_New():
  return itkImageToImageFilterIRGBUC3IUC3.New()


def itkImageToImageFilterIRGBUC2IUC2_New():
  return itkImageToImageFilterIRGBUC2IUC2.New()


def itkImageToImageFilterIRGBUC3ISS3_New():
  return itkImageToImageFilterIRGBUC3ISS3.New()


def itkImageToImageFilterIRGBUC2ISS2_New():
  return itkImageToImageFilterIRGBUC2ISS2.New()


def itkImageToImageFilterIRGBUC3IUL3_New():
  return itkImageToImageFilterIRGBUC3IUL3.New()


def itkImageToImageFilterIRGBUC2IUL2_New():
  return itkImageToImageFilterIRGBUC2IUL2.New()


def itkImageToImageFilterIRGBUC3IULL3_New():
  return itkImageToImageFilterIRGBUC3IULL3.New()


def itkImageToImageFilterIRGBUC2IULL2_New():
  return itkImageToImageFilterIRGBUC2IULL2.New()


def itkImageToImageFilterID3IRGBUC3_New():
  return itkImageToImageFilterID3IRGBUC3.New()


def itkImageToImageFilterID2IRGBUC2_New():
  return itkImageToImageFilterID2IRGBUC2.New()


def itkImageToImageFilterIF3IRGBUC3_New():
  return itkImageToImageFilterIF3IRGBUC3.New()


def itkImageToImageFilterIF2IRGBUC2_New():
  return itkImageToImageFilterIF2IRGBUC2.New()


def itkImageToImageFilterIUS3IRGBUC3_New():
  return itkImageToImageFilterIUS3IRGBUC3.New()


def itkImageToImageFilterIUS2IRGBUC2_New():
  return itkImageToImageFilterIUS2IRGBUC2.New()


def itkImageToImageFilterIUC3IRGBUC3_New():
  return itkImageToImageFilterIUC3IRGBUC3.New()


def itkImageToImageFilterIUC2IRGBUC2_New():
  return itkImageToImageFilterIUC2IRGBUC2.New()


def itkImageToImageFilterISS3IRGBUC3_New():
  return itkImageToImageFilterISS3IRGBUC3.New()


def itkImageToImageFilterISS2IRGBUC2_New():
  return itkImageToImageFilterISS2IRGBUC2.New()


def itkImageToImageFilterIUL3IRGBUC3_New():
  return itkImageToImageFilterIUL3IRGBUC3.New()


def itkImageToImageFilterIUL2IRGBUC2_New():
  return itkImageToImageFilterIUL2IRGBUC2.New()


def itkImageToImageFilterIULL3IRGBUC3_New():
  return itkImageToImageFilterIULL3IRGBUC3.New()


def itkImageToImageFilterIULL2IRGBUC2_New():
  return itkImageToImageFilterIULL2IRGBUC2.New()

class itkImageToImageFilterICF2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2ICF2

        Create a new object of the class itkImageToImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_swigregister(itkImageToImageFilterICF2ICF2)
itkImageToImageFilterICF2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_cast

class itkImageToImageFilterICF2ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICF2ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2ICF3

        Create a new object of the class itkImageToImageFilterICF2ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_swigregister(itkImageToImageFilterICF2ICF3)
itkImageToImageFilterICF2ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_cast

class itkImageToImageFilterICF2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2ID2

        Create a new object of the class itkImageToImageFilterICF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_swigregister(itkImageToImageFilterICF2ID2)
itkImageToImageFilterICF2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_cast

class itkImageToImageFilterICF2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2IF2

        Create a new object of the class itkImageToImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_swigregister(itkImageToImageFilterICF2IF2)
itkImageToImageFilterICF2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_cast

class itkImageToImageFilterICF2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2ISS2

        Create a new object of the class itkImageToImageFilterICF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_swigregister(itkImageToImageFilterICF2ISS2)
itkImageToImageFilterICF2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_cast

class itkImageToImageFilterICF2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2IUC2

        Create a new object of the class itkImageToImageFilterICF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_swigregister(itkImageToImageFilterICF2IUC2)
itkImageToImageFilterICF2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_cast

class itkImageToImageFilterICF2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF2IUS2

        Create a new object of the class itkImageToImageFilterICF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_swigregister(itkImageToImageFilterICF2IUS2)
itkImageToImageFilterICF2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_cast

class itkImageToImageFilterICF3ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICF3ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3ICF2

        Create a new object of the class itkImageToImageFilterICF3ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_swigregister(itkImageToImageFilterICF3ICF2)
itkImageToImageFilterICF3ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_cast

class itkImageToImageFilterICF3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3ICF3

        Create a new object of the class itkImageToImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_swigregister(itkImageToImageFilterICF3ICF3)
itkImageToImageFilterICF3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_cast

class itkImageToImageFilterICF3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3ID3

        Create a new object of the class itkImageToImageFilterICF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_swigregister(itkImageToImageFilterICF3ID3)
itkImageToImageFilterICF3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_cast

class itkImageToImageFilterICF3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3IF3

        Create a new object of the class itkImageToImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_swigregister(itkImageToImageFilterICF3IF3)
itkImageToImageFilterICF3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_cast

class itkImageToImageFilterICF3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3ISS3

        Create a new object of the class itkImageToImageFilterICF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_swigregister(itkImageToImageFilterICF3ISS3)
itkImageToImageFilterICF3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_cast

class itkImageToImageFilterICF3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3IUC3

        Create a new object of the class itkImageToImageFilterICF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_swigregister(itkImageToImageFilterICF3IUC3)
itkImageToImageFilterICF3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_cast

class itkImageToImageFilterICF3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICF3IUS3

        Create a new object of the class itkImageToImageFilterICF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICF3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICF3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICF3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_swigregister(itkImageToImageFilterICF3IUS3)
itkImageToImageFilterICF3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_cast

class itkImageToImageFilterICVF22ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF22ID2

        Create a new object of the class itkImageToImageFilterICVF22ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF22ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF22ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF22ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_swigregister(itkImageToImageFilterICVF22ID2)
itkImageToImageFilterICVF22ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_cast

class itkImageToImageFilterICVF22IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF22IF2

        Create a new object of the class itkImageToImageFilterICVF22IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF22IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF22IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF22IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_swigregister(itkImageToImageFilterICVF22IF2)
itkImageToImageFilterICVF22IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_cast

class itkImageToImageFilterICVF22ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF22ISS2

        Create a new object of the class itkImageToImageFilterICVF22ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF22ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF22ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF22ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_swigregister(itkImageToImageFilterICVF22ISS2)
itkImageToImageFilterICVF22ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_cast

class itkImageToImageFilterICVF22IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF22IUC2

        Create a new object of the class itkImageToImageFilterICVF22IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF22IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF22IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF22IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_swigregister(itkImageToImageFilterICVF22IUC2)
itkImageToImageFilterICVF22IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_cast

class itkImageToImageFilterICVF22IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF22IUS2

        Create a new object of the class itkImageToImageFilterICVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF22IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF22IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF22IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_swigregister(itkImageToImageFilterICVF22IUS2)
itkImageToImageFilterICVF22IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_cast

class itkImageToImageFilterICVF23ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF23ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF23ID3

        Create a new object of the class itkImageToImageFilterICVF23ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF23ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF23ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF23ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF23ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_swigregister(itkImageToImageFilterICVF23ID3)
itkImageToImageFilterICVF23ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_cast

class itkImageToImageFilterICVF23IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF23IF3

        Create a new object of the class itkImageToImageFilterICVF23IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF23IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF23IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF23IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF23IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_swigregister(itkImageToImageFilterICVF23IF3)
itkImageToImageFilterICVF23IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_cast

class itkImageToImageFilterICVF23ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF23ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF23ISS3

        Create a new object of the class itkImageToImageFilterICVF23ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF23ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF23ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF23ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF23ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_swigregister(itkImageToImageFilterICVF23ISS3)
itkImageToImageFilterICVF23ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_cast

class itkImageToImageFilterICVF23IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF23IUC3

        Create a new object of the class itkImageToImageFilterICVF23IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF23IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF23IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF23IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF23IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_swigregister(itkImageToImageFilterICVF23IUC3)
itkImageToImageFilterICVF23IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_cast

class itkImageToImageFilterICVF23IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF23IUS3

        Create a new object of the class itkImageToImageFilterICVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF23IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF23IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF23IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF23IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_swigregister(itkImageToImageFilterICVF23IUS3)
itkImageToImageFilterICVF23IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_cast

class itkImageToImageFilterICVF32ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF32ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF32ID2

        Create a new object of the class itkImageToImageFilterICVF32ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF32ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF32ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF32ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF32ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_swigregister(itkImageToImageFilterICVF32ID2)
itkImageToImageFilterICVF32ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_cast

class itkImageToImageFilterICVF32IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF32IF2

        Create a new object of the class itkImageToImageFilterICVF32IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF32IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF32IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF32IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF32IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_swigregister(itkImageToImageFilterICVF32IF2)
itkImageToImageFilterICVF32IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_cast

class itkImageToImageFilterICVF32ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF32ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF32ISS2

        Create a new object of the class itkImageToImageFilterICVF32ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF32ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF32ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF32ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF32ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_swigregister(itkImageToImageFilterICVF32ISS2)
itkImageToImageFilterICVF32ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_cast

class itkImageToImageFilterICVF32IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF32IUC2

        Create a new object of the class itkImageToImageFilterICVF32IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF32IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF32IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF32IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF32IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_swigregister(itkImageToImageFilterICVF32IUC2)
itkImageToImageFilterICVF32IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_cast

class itkImageToImageFilterICVF32IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF32IUS2

        Create a new object of the class itkImageToImageFilterICVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF32IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF32IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF32IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF32IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_swigregister(itkImageToImageFilterICVF32IUS2)
itkImageToImageFilterICVF32IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_cast

class itkImageToImageFilterICVF33ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF33ID3

        Create a new object of the class itkImageToImageFilterICVF33ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF33ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF33ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF33ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_swigregister(itkImageToImageFilterICVF33ID3)
itkImageToImageFilterICVF33ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_cast

class itkImageToImageFilterICVF33IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF33IF3

        Create a new object of the class itkImageToImageFilterICVF33IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF33IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF33IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF33IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_swigregister(itkImageToImageFilterICVF33IF3)
itkImageToImageFilterICVF33IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_cast

class itkImageToImageFilterICVF33ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF33ISS3

        Create a new object of the class itkImageToImageFilterICVF33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF33ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF33ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF33ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_swigregister(itkImageToImageFilterICVF33ISS3)
itkImageToImageFilterICVF33ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_cast

class itkImageToImageFilterICVF33IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF33IUC3

        Create a new object of the class itkImageToImageFilterICVF33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF33IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF33IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF33IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_swigregister(itkImageToImageFilterICVF33IUC3)
itkImageToImageFilterICVF33IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_cast

class itkImageToImageFilterICVF33IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF33IUS3

        Create a new object of the class itkImageToImageFilterICVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF33IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF33IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF33IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_swigregister(itkImageToImageFilterICVF33IUS3)
itkImageToImageFilterICVF33IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_cast

class itkImageToImageFilterICVF42ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF42ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF42ID2

        Create a new object of the class itkImageToImageFilterICVF42ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF42ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF42ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF42ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF42ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_swigregister(itkImageToImageFilterICVF42ID2)
itkImageToImageFilterICVF42ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_cast

class itkImageToImageFilterICVF42IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF42IF2

        Create a new object of the class itkImageToImageFilterICVF42IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF42IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF42IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF42IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF42IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_swigregister(itkImageToImageFilterICVF42IF2)
itkImageToImageFilterICVF42IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_cast

class itkImageToImageFilterICVF42ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF42ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF42ISS2

        Create a new object of the class itkImageToImageFilterICVF42ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF42ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF42ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF42ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF42ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_swigregister(itkImageToImageFilterICVF42ISS2)
itkImageToImageFilterICVF42ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_cast

class itkImageToImageFilterICVF42IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF42IUC2

        Create a new object of the class itkImageToImageFilterICVF42IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF42IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF42IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF42IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF42IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_swigregister(itkImageToImageFilterICVF42IUC2)
itkImageToImageFilterICVF42IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_cast

class itkImageToImageFilterICVF42IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF42IUS2

        Create a new object of the class itkImageToImageFilterICVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF42IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF42IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF42IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF42IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_swigregister(itkImageToImageFilterICVF42IUS2)
itkImageToImageFilterICVF42IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_cast

class itkImageToImageFilterICVF43ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF43ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF43ID3

        Create a new object of the class itkImageToImageFilterICVF43ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF43ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF43ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF43ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF43ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_swigregister(itkImageToImageFilterICVF43ID3)
itkImageToImageFilterICVF43ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_cast

class itkImageToImageFilterICVF43IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF43IF3

        Create a new object of the class itkImageToImageFilterICVF43IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF43IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF43IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF43IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF43IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_swigregister(itkImageToImageFilterICVF43IF3)
itkImageToImageFilterICVF43IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_cast

class itkImageToImageFilterICVF43ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF43ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF43ISS3

        Create a new object of the class itkImageToImageFilterICVF43ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF43ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF43ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF43ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF43ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_swigregister(itkImageToImageFilterICVF43ISS3)
itkImageToImageFilterICVF43ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_cast

class itkImageToImageFilterICVF43IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF43IUC3

        Create a new object of the class itkImageToImageFilterICVF43IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF43IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF43IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF43IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF43IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_swigregister(itkImageToImageFilterICVF43IUC3)
itkImageToImageFilterICVF43IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_cast

class itkImageToImageFilterICVF43IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVF43IUS3

        Create a new object of the class itkImageToImageFilterICVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVF43IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVF43IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVF43IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterICVF43IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_swigregister(itkImageToImageFilterICVF43IUS3)
itkImageToImageFilterICVF43IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_cast

class itkImageToImageFilterID2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterID2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ICF2

        Create a new object of the class itkImageToImageFilterID2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_swigregister(itkImageToImageFilterID2ICF2)
itkImageToImageFilterID2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_cast

class itkImageToImageFilterID2ICVD22(itkImageSourcePython.itkImageSourceICVD22):
    r"""Proxy of C++ itkImageToImageFilterID2ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ICVD22

        Create a new object of the class itkImageToImageFilterID2ICVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ICVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ICVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ICVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ICVD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_swigregister(itkImageToImageFilterID2ICVD22)
itkImageToImageFilterID2ICVD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_cast

class itkImageToImageFilterID2ICVF22(itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ICVF22

        Create a new object of the class itkImageToImageFilterID2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_swigregister(itkImageToImageFilterID2ICVF22)
itkImageToImageFilterID2ICVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_cast

class itkImageToImageFilterID2ICVF32(itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ICVF32

        Create a new object of the class itkImageToImageFilterID2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_swigregister(itkImageToImageFilterID2ICVF32)
itkImageToImageFilterID2ICVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_cast

class itkImageToImageFilterID2ICVF42(itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ICVF42

        Create a new object of the class itkImageToImageFilterID2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_swigregister(itkImageToImageFilterID2ICVF42)
itkImageToImageFilterID2ICVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_cast

class itkImageToImageFilterID2ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterID2ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ID3

        Create a new object of the class itkImageToImageFilterID2ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_swigregister(itkImageToImageFilterID2ID3)
itkImageToImageFilterID2ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_cast

class itkImageToImageFilterID2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterID2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2IRGBAUC2

        Create a new object of the class itkImageToImageFilterID2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_swigregister(itkImageToImageFilterID2IRGBAUC2)
itkImageToImageFilterID2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_cast

class itkImageToImageFilterID2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterID2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2IRGBUC2

        Create a new object of the class itkImageToImageFilterID2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_swigregister(itkImageToImageFilterID2IRGBUC2)
itkImageToImageFilterID2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_cast

class itkImageToImageFilterID2ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterID2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2ISSRTD22

        Create a new object of the class itkImageToImageFilterID2ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_swigregister(itkImageToImageFilterID2ISSRTD22)
itkImageToImageFilterID2ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_cast

class itkImageToImageFilterID2IVF22(itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterID2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2IVF22

        Create a new object of the class itkImageToImageFilterID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_swigregister(itkImageToImageFilterID2IVF22)
itkImageToImageFilterID2IVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_cast

class itkImageToImageFilterID2IVF32(itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterID2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2IVF32

        Create a new object of the class itkImageToImageFilterID2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_swigregister(itkImageToImageFilterID2IVF32)
itkImageToImageFilterID2IVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_cast

class itkImageToImageFilterID2IVF42(itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterID2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2IVF42

        Create a new object of the class itkImageToImageFilterID2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_swigregister(itkImageToImageFilterID2IVF42)
itkImageToImageFilterID2IVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_cast

class itkImageToImageFilterID2VID2(itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterID2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2VID2

        Create a new object of the class itkImageToImageFilterID2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_swigregister(itkImageToImageFilterID2VID2)
itkImageToImageFilterID2VID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_cast

class itkImageToImageFilterID2VIF2(itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterID2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2VIF2

        Create a new object of the class itkImageToImageFilterID2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_swigregister(itkImageToImageFilterID2VIF2)
itkImageToImageFilterID2VIF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_cast

class itkImageToImageFilterID2VISS2(itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterID2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2VISS2

        Create a new object of the class itkImageToImageFilterID2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_swigregister(itkImageToImageFilterID2VISS2)
itkImageToImageFilterID2VISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_cast

class itkImageToImageFilterID2VIUC2(itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterID2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2VIUC2

        Create a new object of the class itkImageToImageFilterID2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_swigregister(itkImageToImageFilterID2VIUC2)
itkImageToImageFilterID2VIUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_cast

class itkImageToImageFilterID2VIUS2(itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterID2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2VIUS2

        Create a new object of the class itkImageToImageFilterID2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_swigregister(itkImageToImageFilterID2VIUS2)
itkImageToImageFilterID2VIUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_cast

class itkImageToImageFilterID3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterID3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ICF3

        Create a new object of the class itkImageToImageFilterID3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_swigregister(itkImageToImageFilterID3ICF3)
itkImageToImageFilterID3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_cast

class itkImageToImageFilterID3ICVD33(itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterID3ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ICVD33

        Create a new object of the class itkImageToImageFilterID3ICVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ICVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ICVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ICVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ICVD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_swigregister(itkImageToImageFilterID3ICVD33)
itkImageToImageFilterID3ICVD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_cast

class itkImageToImageFilterID3ICVF23(itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ICVF23

        Create a new object of the class itkImageToImageFilterID3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_swigregister(itkImageToImageFilterID3ICVF23)
itkImageToImageFilterID3ICVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_cast

class itkImageToImageFilterID3ICVF33(itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ICVF33

        Create a new object of the class itkImageToImageFilterID3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_swigregister(itkImageToImageFilterID3ICVF33)
itkImageToImageFilterID3ICVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_cast

class itkImageToImageFilterID3ICVF43(itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ICVF43

        Create a new object of the class itkImageToImageFilterID3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_swigregister(itkImageToImageFilterID3ICVF43)
itkImageToImageFilterID3ICVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_cast

class itkImageToImageFilterID3ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterID3ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ID2

        Create a new object of the class itkImageToImageFilterID3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_swigregister(itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_cast

class itkImageToImageFilterID3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterID3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3IRGBAUC3

        Create a new object of the class itkImageToImageFilterID3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_swigregister(itkImageToImageFilterID3IRGBAUC3)
itkImageToImageFilterID3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_cast

class itkImageToImageFilterID3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterID3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3IRGBUC3

        Create a new object of the class itkImageToImageFilterID3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_swigregister(itkImageToImageFilterID3IRGBUC3)
itkImageToImageFilterID3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_cast

class itkImageToImageFilterID3ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterID3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ISSRTD33

        Create a new object of the class itkImageToImageFilterID3ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_swigregister(itkImageToImageFilterID3ISSRTD33)
itkImageToImageFilterID3ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_cast

class itkImageToImageFilterID3IVF23(itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterID3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3IVF23

        Create a new object of the class itkImageToImageFilterID3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_swigregister(itkImageToImageFilterID3IVF23)
itkImageToImageFilterID3IVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_cast

class itkImageToImageFilterID3IVF33(itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterID3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3IVF33

        Create a new object of the class itkImageToImageFilterID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_swigregister(itkImageToImageFilterID3IVF33)
itkImageToImageFilterID3IVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_cast

class itkImageToImageFilterID3IVF43(itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterID3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3IVF43

        Create a new object of the class itkImageToImageFilterID3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_swigregister(itkImageToImageFilterID3IVF43)
itkImageToImageFilterID3IVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_cast

class itkImageToImageFilterID3VID3(itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterID3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3VID3

        Create a new object of the class itkImageToImageFilterID3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_swigregister(itkImageToImageFilterID3VID3)
itkImageToImageFilterID3VID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_cast

class itkImageToImageFilterID3VIF3(itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterID3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3VIF3

        Create a new object of the class itkImageToImageFilterID3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_swigregister(itkImageToImageFilterID3VIF3)
itkImageToImageFilterID3VIF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_cast

class itkImageToImageFilterID3VISS3(itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterID3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3VISS3

        Create a new object of the class itkImageToImageFilterID3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_swigregister(itkImageToImageFilterID3VISS3)
itkImageToImageFilterID3VISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_cast

class itkImageToImageFilterID3VIUC3(itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterID3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3VIUC3

        Create a new object of the class itkImageToImageFilterID3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_swigregister(itkImageToImageFilterID3VIUC3)
itkImageToImageFilterID3VIUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_cast

class itkImageToImageFilterID3VIUS3(itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterID3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3VIUS3

        Create a new object of the class itkImageToImageFilterID3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_swigregister(itkImageToImageFilterID3VIUS3)
itkImageToImageFilterID3VIUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_cast

class itkImageToImageFilterIF2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ICF2

        Create a new object of the class itkImageToImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_swigregister(itkImageToImageFilterIF2ICF2)
itkImageToImageFilterIF2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_cast

class itkImageToImageFilterIF2ICVD22(itkImageSourcePython.itkImageSourceICVD22):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ICVD22

        Create a new object of the class itkImageToImageFilterIF2ICVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ICVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ICVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ICVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ICVD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_swigregister(itkImageToImageFilterIF2ICVD22)
itkImageToImageFilterIF2ICVD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_cast

class itkImageToImageFilterIF2ICVF22(itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ICVF22

        Create a new object of the class itkImageToImageFilterIF2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_swigregister(itkImageToImageFilterIF2ICVF22)
itkImageToImageFilterIF2ICVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_cast

class itkImageToImageFilterIF2ICVF32(itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ICVF32

        Create a new object of the class itkImageToImageFilterIF2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_swigregister(itkImageToImageFilterIF2ICVF32)
itkImageToImageFilterIF2ICVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_cast

class itkImageToImageFilterIF2ICVF42(itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ICVF42

        Create a new object of the class itkImageToImageFilterIF2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_swigregister(itkImageToImageFilterIF2ICVF42)
itkImageToImageFilterIF2ICVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_cast

class itkImageToImageFilterIF2IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIF2IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IF3

        Create a new object of the class itkImageToImageFilterIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_swigregister(itkImageToImageFilterIF2IF3)
itkImageToImageFilterIF2IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_cast

class itkImageToImageFilterIF2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IRGBAUC2

        Create a new object of the class itkImageToImageFilterIF2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_swigregister(itkImageToImageFilterIF2IRGBAUC2)
itkImageToImageFilterIF2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_cast

class itkImageToImageFilterIF2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IRGBUC2

        Create a new object of the class itkImageToImageFilterIF2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_swigregister(itkImageToImageFilterIF2IRGBUC2)
itkImageToImageFilterIF2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_cast

class itkImageToImageFilterIF2ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIF2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2ISSRTD22

        Create a new object of the class itkImageToImageFilterIF2ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_swigregister(itkImageToImageFilterIF2ISSRTD22)
itkImageToImageFilterIF2ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_cast

class itkImageToImageFilterIF2IVF22(itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IVF22

        Create a new object of the class itkImageToImageFilterIF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_swigregister(itkImageToImageFilterIF2IVF22)
itkImageToImageFilterIF2IVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_cast

class itkImageToImageFilterIF2IVF32(itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IVF32

        Create a new object of the class itkImageToImageFilterIF2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_swigregister(itkImageToImageFilterIF2IVF32)
itkImageToImageFilterIF2IVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_cast

class itkImageToImageFilterIF2IVF42(itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IVF42

        Create a new object of the class itkImageToImageFilterIF2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_swigregister(itkImageToImageFilterIF2IVF42)
itkImageToImageFilterIF2IVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_cast

class itkImageToImageFilterIF2VID2(itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIF2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VID2

        Create a new object of the class itkImageToImageFilterIF2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_swigregister(itkImageToImageFilterIF2VID2)
itkImageToImageFilterIF2VID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_cast

class itkImageToImageFilterIF2VIF2(itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VIF2

        Create a new object of the class itkImageToImageFilterIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_swigregister(itkImageToImageFilterIF2VIF2)
itkImageToImageFilterIF2VIF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_cast

class itkImageToImageFilterIF2VISS2(itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIF2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VISS2

        Create a new object of the class itkImageToImageFilterIF2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_swigregister(itkImageToImageFilterIF2VISS2)
itkImageToImageFilterIF2VISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_cast

class itkImageToImageFilterIF2VIUC2(itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VIUC2

        Create a new object of the class itkImageToImageFilterIF2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_swigregister(itkImageToImageFilterIF2VIUC2)
itkImageToImageFilterIF2VIUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_cast

class itkImageToImageFilterIF2VIUS2(itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VIUS2

        Create a new object of the class itkImageToImageFilterIF2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_swigregister(itkImageToImageFilterIF2VIUS2)
itkImageToImageFilterIF2VIUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_cast

class itkImageToImageFilterIF3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ICF3

        Create a new object of the class itkImageToImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_swigregister(itkImageToImageFilterIF3ICF3)
itkImageToImageFilterIF3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_cast

class itkImageToImageFilterIF3ICVD33(itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ICVD33

        Create a new object of the class itkImageToImageFilterIF3ICVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ICVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ICVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ICVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ICVD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_swigregister(itkImageToImageFilterIF3ICVD33)
itkImageToImageFilterIF3ICVD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_cast

class itkImageToImageFilterIF3ICVF23(itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ICVF23

        Create a new object of the class itkImageToImageFilterIF3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_swigregister(itkImageToImageFilterIF3ICVF23)
itkImageToImageFilterIF3ICVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_cast

class itkImageToImageFilterIF3ICVF33(itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ICVF33

        Create a new object of the class itkImageToImageFilterIF3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_swigregister(itkImageToImageFilterIF3ICVF33)
itkImageToImageFilterIF3ICVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_cast

class itkImageToImageFilterIF3ICVF43(itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ICVF43

        Create a new object of the class itkImageToImageFilterIF3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_swigregister(itkImageToImageFilterIF3ICVF43)
itkImageToImageFilterIF3ICVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_cast

class itkImageToImageFilterIF3IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIF3IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IF2

        Create a new object of the class itkImageToImageFilterIF3IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_swigregister(itkImageToImageFilterIF3IF2)
itkImageToImageFilterIF3IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_cast

class itkImageToImageFilterIF3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IRGBAUC3

        Create a new object of the class itkImageToImageFilterIF3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_swigregister(itkImageToImageFilterIF3IRGBAUC3)
itkImageToImageFilterIF3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_cast

class itkImageToImageFilterIF3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IRGBUC3

        Create a new object of the class itkImageToImageFilterIF3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_swigregister(itkImageToImageFilterIF3IRGBUC3)
itkImageToImageFilterIF3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_cast

class itkImageToImageFilterIF3ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIF3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ISSRTD33

        Create a new object of the class itkImageToImageFilterIF3ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_swigregister(itkImageToImageFilterIF3ISSRTD33)
itkImageToImageFilterIF3ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_cast

class itkImageToImageFilterIF3IVF23(itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IVF23

        Create a new object of the class itkImageToImageFilterIF3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_swigregister(itkImageToImageFilterIF3IVF23)
itkImageToImageFilterIF3IVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_cast

class itkImageToImageFilterIF3IVF33(itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IVF33

        Create a new object of the class itkImageToImageFilterIF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_swigregister(itkImageToImageFilterIF3IVF33)
itkImageToImageFilterIF3IVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_cast

class itkImageToImageFilterIF3IVF43(itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3IVF43

        Create a new object of the class itkImageToImageFilterIF3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_swigregister(itkImageToImageFilterIF3IVF43)
itkImageToImageFilterIF3IVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_cast

class itkImageToImageFilterIF3VID3(itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIF3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VID3

        Create a new object of the class itkImageToImageFilterIF3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_swigregister(itkImageToImageFilterIF3VID3)
itkImageToImageFilterIF3VID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_cast

class itkImageToImageFilterIF3VIF3(itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VIF3

        Create a new object of the class itkImageToImageFilterIF3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_swigregister(itkImageToImageFilterIF3VIF3)
itkImageToImageFilterIF3VIF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_cast

class itkImageToImageFilterIF3VISS3(itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIF3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VISS3

        Create a new object of the class itkImageToImageFilterIF3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_swigregister(itkImageToImageFilterIF3VISS3)
itkImageToImageFilterIF3VISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_cast

class itkImageToImageFilterIF3VIUC3(itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VIUC3

        Create a new object of the class itkImageToImageFilterIF3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_swigregister(itkImageToImageFilterIF3VIUC3)
itkImageToImageFilterIF3VIUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_cast

class itkImageToImageFilterIF3VIUS3(itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VIUS3

        Create a new object of the class itkImageToImageFilterIF3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_swigregister(itkImageToImageFilterIF3VIUS3)
itkImageToImageFilterIF3VIUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_cast

class itkImageToImageFilterIRGBAUC2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2ID2

        Create a new object of the class itkImageToImageFilterIRGBAUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_swigregister(itkImageToImageFilterIRGBAUC2ID2)
itkImageToImageFilterIRGBAUC2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_cast

class itkImageToImageFilterIRGBAUC2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2IF2

        Create a new object of the class itkImageToImageFilterIRGBAUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_swigregister(itkImageToImageFilterIRGBAUC2IF2)
itkImageToImageFilterIRGBAUC2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_cast

class itkImageToImageFilterIRGBAUC2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2ISS2

        Create a new object of the class itkImageToImageFilterIRGBAUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_swigregister(itkImageToImageFilterIRGBAUC2ISS2)
itkImageToImageFilterIRGBAUC2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_cast

class itkImageToImageFilterIRGBAUC2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2IUC2

        Create a new object of the class itkImageToImageFilterIRGBAUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_swigregister(itkImageToImageFilterIRGBAUC2IUC2)
itkImageToImageFilterIRGBAUC2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_cast

class itkImageToImageFilterIRGBAUC2IUL2(itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUL2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2IUL2

        Create a new object of the class itkImageToImageFilterIRGBAUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2IUL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_swigregister(itkImageToImageFilterIRGBAUC2IUL2)
itkImageToImageFilterIRGBAUC2IUL2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_cast

class itkImageToImageFilterIRGBAUC2IULL2(itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IULL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IULL2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2IULL2

        Create a new object of the class itkImageToImageFilterIRGBAUC2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2IULL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2IULL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2IULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2IULL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_swigregister(itkImageToImageFilterIRGBAUC2IULL2)
itkImageToImageFilterIRGBAUC2IULL2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IULL2_cast

class itkImageToImageFilterIRGBAUC2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC2IUS2

        Create a new object of the class itkImageToImageFilterIRGBAUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_swigregister(itkImageToImageFilterIRGBAUC2IUS2)
itkImageToImageFilterIRGBAUC2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_cast

class itkImageToImageFilterIRGBAUC3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3ID3

        Create a new object of the class itkImageToImageFilterIRGBAUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_swigregister(itkImageToImageFilterIRGBAUC3ID3)
itkImageToImageFilterIRGBAUC3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_cast

class itkImageToImageFilterIRGBAUC3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3IF3

        Create a new object of the class itkImageToImageFilterIRGBAUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_swigregister(itkImageToImageFilterIRGBAUC3IF3)
itkImageToImageFilterIRGBAUC3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_cast

class itkImageToImageFilterIRGBAUC3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3ISS3

        Create a new object of the class itkImageToImageFilterIRGBAUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_swigregister(itkImageToImageFilterIRGBAUC3ISS3)
itkImageToImageFilterIRGBAUC3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_cast

class itkImageToImageFilterIRGBAUC3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3IUC3

        Create a new object of the class itkImageToImageFilterIRGBAUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_swigregister(itkImageToImageFilterIRGBAUC3IUC3)
itkImageToImageFilterIRGBAUC3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_cast

class itkImageToImageFilterIRGBAUC3IUL3(itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUL3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3IUL3

        Create a new object of the class itkImageToImageFilterIRGBAUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3IUL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_swigregister(itkImageToImageFilterIRGBAUC3IUL3)
itkImageToImageFilterIRGBAUC3IUL3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_cast

class itkImageToImageFilterIRGBAUC3IULL3(itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IULL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IULL3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3IULL3

        Create a new object of the class itkImageToImageFilterIRGBAUC3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3IULL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3IULL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3IULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3IULL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_swigregister(itkImageToImageFilterIRGBAUC3IULL3)
itkImageToImageFilterIRGBAUC3IULL3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IULL3_cast

class itkImageToImageFilterIRGBAUC3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBAUC3IUS3

        Create a new object of the class itkImageToImageFilterIRGBAUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBAUC3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBAUC3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBAUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBAUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_swigregister(itkImageToImageFilterIRGBAUC3IUS3)
itkImageToImageFilterIRGBAUC3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_cast

class itkImageToImageFilterIRGBUC2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2ID2

        Create a new object of the class itkImageToImageFilterIRGBUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_swigregister(itkImageToImageFilterIRGBUC2ID2)
itkImageToImageFilterIRGBUC2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_cast

class itkImageToImageFilterIRGBUC2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IF2

        Create a new object of the class itkImageToImageFilterIRGBUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_swigregister(itkImageToImageFilterIRGBUC2IF2)
itkImageToImageFilterIRGBUC2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_cast

class itkImageToImageFilterIRGBUC2IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IRGBUC3

        Create a new object of the class itkImageToImageFilterIRGBUC2IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_swigregister(itkImageToImageFilterIRGBUC2IRGBUC3)
itkImageToImageFilterIRGBUC2IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_cast

class itkImageToImageFilterIRGBUC2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2ISS2

        Create a new object of the class itkImageToImageFilterIRGBUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_swigregister(itkImageToImageFilterIRGBUC2ISS2)
itkImageToImageFilterIRGBUC2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_cast

class itkImageToImageFilterIRGBUC2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IUC2

        Create a new object of the class itkImageToImageFilterIRGBUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_swigregister(itkImageToImageFilterIRGBUC2IUC2)
itkImageToImageFilterIRGBUC2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_cast

class itkImageToImageFilterIRGBUC2IUL2(itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUL2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IUL2

        Create a new object of the class itkImageToImageFilterIRGBUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IUL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_swigregister(itkImageToImageFilterIRGBUC2IUL2)
itkImageToImageFilterIRGBUC2IUL2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_cast

class itkImageToImageFilterIRGBUC2IULL2(itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IULL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IULL2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IULL2

        Create a new object of the class itkImageToImageFilterIRGBUC2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IULL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IULL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IULL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_swigregister(itkImageToImageFilterIRGBUC2IULL2)
itkImageToImageFilterIRGBUC2IULL2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IULL2_cast

class itkImageToImageFilterIRGBUC2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC2IUS2

        Create a new object of the class itkImageToImageFilterIRGBUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_swigregister(itkImageToImageFilterIRGBUC2IUS2)
itkImageToImageFilterIRGBUC2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_cast

class itkImageToImageFilterIRGBUC3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3ID3

        Create a new object of the class itkImageToImageFilterIRGBUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_swigregister(itkImageToImageFilterIRGBUC3ID3)
itkImageToImageFilterIRGBUC3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_cast

class itkImageToImageFilterIRGBUC3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IF3

        Create a new object of the class itkImageToImageFilterIRGBUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_swigregister(itkImageToImageFilterIRGBUC3IF3)
itkImageToImageFilterIRGBUC3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_cast

class itkImageToImageFilterIRGBUC3IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IRGBUC2

        Create a new object of the class itkImageToImageFilterIRGBUC3IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_swigregister(itkImageToImageFilterIRGBUC3IRGBUC2)
itkImageToImageFilterIRGBUC3IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_cast

class itkImageToImageFilterIRGBUC3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3ISS3

        Create a new object of the class itkImageToImageFilterIRGBUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_swigregister(itkImageToImageFilterIRGBUC3ISS3)
itkImageToImageFilterIRGBUC3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_cast

class itkImageToImageFilterIRGBUC3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IUC3

        Create a new object of the class itkImageToImageFilterIRGBUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_swigregister(itkImageToImageFilterIRGBUC3IUC3)
itkImageToImageFilterIRGBUC3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_cast

class itkImageToImageFilterIRGBUC3IUL3(itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUL3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IUL3

        Create a new object of the class itkImageToImageFilterIRGBUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IUL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_swigregister(itkImageToImageFilterIRGBUC3IUL3)
itkImageToImageFilterIRGBUC3IUL3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_cast

class itkImageToImageFilterIRGBUC3IULL3(itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IULL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IULL3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IULL3

        Create a new object of the class itkImageToImageFilterIRGBUC3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IULL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IULL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IULL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_swigregister(itkImageToImageFilterIRGBUC3IULL3)
itkImageToImageFilterIRGBUC3IULL3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IULL3_cast

class itkImageToImageFilterIRGBUC3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIRGBUC3IUS3

        Create a new object of the class itkImageToImageFilterIRGBUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIRGBUC3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIRGBUC3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIRGBUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIRGBUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_swigregister(itkImageToImageFilterIRGBUC3IUS3)
itkImageToImageFilterIRGBUC3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_cast

class itkImageToImageFilterISS2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterISS2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ICF2

        Create a new object of the class itkImageToImageFilterISS2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_swigregister(itkImageToImageFilterISS2ICF2)
itkImageToImageFilterISS2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_cast

class itkImageToImageFilterISS2ICVF22(itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ICVF22

        Create a new object of the class itkImageToImageFilterISS2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_swigregister(itkImageToImageFilterISS2ICVF22)
itkImageToImageFilterISS2ICVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_cast

class itkImageToImageFilterISS2ICVF32(itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ICVF32

        Create a new object of the class itkImageToImageFilterISS2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_swigregister(itkImageToImageFilterISS2ICVF32)
itkImageToImageFilterISS2ICVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_cast

class itkImageToImageFilterISS2ICVF42(itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ICVF42

        Create a new object of the class itkImageToImageFilterISS2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_swigregister(itkImageToImageFilterISS2ICVF42)
itkImageToImageFilterISS2ICVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_cast

class itkImageToImageFilterISS2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2IRGBAUC2

        Create a new object of the class itkImageToImageFilterISS2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_swigregister(itkImageToImageFilterISS2IRGBAUC2)
itkImageToImageFilterISS2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_cast

class itkImageToImageFilterISS2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2IRGBUC2

        Create a new object of the class itkImageToImageFilterISS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_swigregister(itkImageToImageFilterISS2IRGBUC2)
itkImageToImageFilterISS2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_cast

class itkImageToImageFilterISS2ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISS2ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ISS3

        Create a new object of the class itkImageToImageFilterISS2ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_swigregister(itkImageToImageFilterISS2ISS3)
itkImageToImageFilterISS2ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_cast

class itkImageToImageFilterISS2ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterISS2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2ISSRTD22

        Create a new object of the class itkImageToImageFilterISS2ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_swigregister(itkImageToImageFilterISS2ISSRTD22)
itkImageToImageFilterISS2ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_cast

class itkImageToImageFilterISS2IVF22(itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2IVF22

        Create a new object of the class itkImageToImageFilterISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_swigregister(itkImageToImageFilterISS2IVF22)
itkImageToImageFilterISS2IVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_cast

class itkImageToImageFilterISS2IVF32(itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2IVF32

        Create a new object of the class itkImageToImageFilterISS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_swigregister(itkImageToImageFilterISS2IVF32)
itkImageToImageFilterISS2IVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_cast

class itkImageToImageFilterISS2IVF42(itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2IVF42

        Create a new object of the class itkImageToImageFilterISS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_swigregister(itkImageToImageFilterISS2IVF42)
itkImageToImageFilterISS2IVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_cast

class itkImageToImageFilterISS2VID2(itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterISS2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2VID2

        Create a new object of the class itkImageToImageFilterISS2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_swigregister(itkImageToImageFilterISS2VID2)
itkImageToImageFilterISS2VID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_cast

class itkImageToImageFilterISS2VIF2(itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2VIF2

        Create a new object of the class itkImageToImageFilterISS2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_swigregister(itkImageToImageFilterISS2VIF2)
itkImageToImageFilterISS2VIF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_cast

class itkImageToImageFilterISS2VISS2(itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterISS2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2VISS2

        Create a new object of the class itkImageToImageFilterISS2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_swigregister(itkImageToImageFilterISS2VISS2)
itkImageToImageFilterISS2VISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_cast

class itkImageToImageFilterISS2VIUC2(itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2VIUC2

        Create a new object of the class itkImageToImageFilterISS2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_swigregister(itkImageToImageFilterISS2VIUC2)
itkImageToImageFilterISS2VIUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_cast

class itkImageToImageFilterISS2VIUS2(itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2VIUS2

        Create a new object of the class itkImageToImageFilterISS2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_swigregister(itkImageToImageFilterISS2VIUS2)
itkImageToImageFilterISS2VIUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_cast

class itkImageToImageFilterISS3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterISS3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ICF3

        Create a new object of the class itkImageToImageFilterISS3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_swigregister(itkImageToImageFilterISS3ICF3)
itkImageToImageFilterISS3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_cast

class itkImageToImageFilterISS3ICVF23(itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ICVF23

        Create a new object of the class itkImageToImageFilterISS3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_swigregister(itkImageToImageFilterISS3ICVF23)
itkImageToImageFilterISS3ICVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_cast

class itkImageToImageFilterISS3ICVF33(itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ICVF33

        Create a new object of the class itkImageToImageFilterISS3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_swigregister(itkImageToImageFilterISS3ICVF33)
itkImageToImageFilterISS3ICVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_cast

class itkImageToImageFilterISS3ICVF43(itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ICVF43

        Create a new object of the class itkImageToImageFilterISS3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_swigregister(itkImageToImageFilterISS3ICVF43)
itkImageToImageFilterISS3ICVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_cast

class itkImageToImageFilterISS3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3IRGBAUC3

        Create a new object of the class itkImageToImageFilterISS3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_swigregister(itkImageToImageFilterISS3IRGBAUC3)
itkImageToImageFilterISS3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_cast

class itkImageToImageFilterISS3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3IRGBUC3

        Create a new object of the class itkImageToImageFilterISS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_swigregister(itkImageToImageFilterISS3IRGBUC3)
itkImageToImageFilterISS3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_cast

class itkImageToImageFilterISS3ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISS3ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ISS2

        Create a new object of the class itkImageToImageFilterISS3ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_swigregister(itkImageToImageFilterISS3ISS2)
itkImageToImageFilterISS3ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_cast

class itkImageToImageFilterISS3ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterISS3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3ISSRTD33

        Create a new object of the class itkImageToImageFilterISS3ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_swigregister(itkImageToImageFilterISS3ISSRTD33)
itkImageToImageFilterISS3ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_cast

class itkImageToImageFilterISS3IVF23(itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3IVF23

        Create a new object of the class itkImageToImageFilterISS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_swigregister(itkImageToImageFilterISS3IVF23)
itkImageToImageFilterISS3IVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_cast

class itkImageToImageFilterISS3IVF33(itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3IVF33

        Create a new object of the class itkImageToImageFilterISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_swigregister(itkImageToImageFilterISS3IVF33)
itkImageToImageFilterISS3IVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_cast

class itkImageToImageFilterISS3IVF43(itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3IVF43

        Create a new object of the class itkImageToImageFilterISS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_swigregister(itkImageToImageFilterISS3IVF43)
itkImageToImageFilterISS3IVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_cast

class itkImageToImageFilterISS3VID3(itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterISS3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3VID3

        Create a new object of the class itkImageToImageFilterISS3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_swigregister(itkImageToImageFilterISS3VID3)
itkImageToImageFilterISS3VID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_cast

class itkImageToImageFilterISS3VIF3(itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3VIF3

        Create a new object of the class itkImageToImageFilterISS3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_swigregister(itkImageToImageFilterISS3VIF3)
itkImageToImageFilterISS3VIF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_cast

class itkImageToImageFilterISS3VISS3(itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterISS3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3VISS3

        Create a new object of the class itkImageToImageFilterISS3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_swigregister(itkImageToImageFilterISS3VISS3)
itkImageToImageFilterISS3VISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_cast

class itkImageToImageFilterISS3VIUC3(itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3VIUC3

        Create a new object of the class itkImageToImageFilterISS3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_swigregister(itkImageToImageFilterISS3VIUC3)
itkImageToImageFilterISS3VIUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_cast

class itkImageToImageFilterISS3VIUS3(itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3VIUS3

        Create a new object of the class itkImageToImageFilterISS3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_swigregister(itkImageToImageFilterISS3VIUS3)
itkImageToImageFilterISS3VIUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_cast

class itkImageToImageFilterISSRTD22ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22ID2

        Create a new object of the class itkImageToImageFilterISSRTD22ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_swigregister(itkImageToImageFilterISSRTD22ID2)
itkImageToImageFilterISSRTD22ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_cast

class itkImageToImageFilterISSRTD22IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22IF2

        Create a new object of the class itkImageToImageFilterISSRTD22IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_swigregister(itkImageToImageFilterISSRTD22IF2)
itkImageToImageFilterISSRTD22IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_cast

class itkImageToImageFilterISSRTD22ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22ISS2

        Create a new object of the class itkImageToImageFilterISSRTD22ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_swigregister(itkImageToImageFilterISSRTD22ISS2)
itkImageToImageFilterISSRTD22ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_cast

class itkImageToImageFilterISSRTD22ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22ISSRTD22

        Create a new object of the class itkImageToImageFilterISSRTD22ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_swigregister(itkImageToImageFilterISSRTD22ISSRTD22)
itkImageToImageFilterISSRTD22ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_cast

class itkImageToImageFilterISSRTD22IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22IUC2

        Create a new object of the class itkImageToImageFilterISSRTD22IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_swigregister(itkImageToImageFilterISSRTD22IUC2)
itkImageToImageFilterISSRTD22IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_cast

class itkImageToImageFilterISSRTD22IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD22IUS2

        Create a new object of the class itkImageToImageFilterISSRTD22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD22IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD22IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD22IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_swigregister(itkImageToImageFilterISSRTD22IUS2)
itkImageToImageFilterISSRTD22IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_cast

class itkImageToImageFilterISSRTD33ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33ID3

        Create a new object of the class itkImageToImageFilterISSRTD33ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_swigregister(itkImageToImageFilterISSRTD33ID3)
itkImageToImageFilterISSRTD33ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_cast

class itkImageToImageFilterISSRTD33IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33IF3

        Create a new object of the class itkImageToImageFilterISSRTD33IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_swigregister(itkImageToImageFilterISSRTD33IF3)
itkImageToImageFilterISSRTD33IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_cast

class itkImageToImageFilterISSRTD33ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33ISS3

        Create a new object of the class itkImageToImageFilterISSRTD33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_swigregister(itkImageToImageFilterISSRTD33ISS3)
itkImageToImageFilterISSRTD33ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_cast

class itkImageToImageFilterISSRTD33ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33ISSRTD33

        Create a new object of the class itkImageToImageFilterISSRTD33ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_swigregister(itkImageToImageFilterISSRTD33ISSRTD33)
itkImageToImageFilterISSRTD33ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_cast

class itkImageToImageFilterISSRTD33IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33IUC3

        Create a new object of the class itkImageToImageFilterISSRTD33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_swigregister(itkImageToImageFilterISSRTD33IUC3)
itkImageToImageFilterISSRTD33IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_cast

class itkImageToImageFilterISSRTD33IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISSRTD33IUS3

        Create a new object of the class itkImageToImageFilterISSRTD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISSRTD33IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISSRTD33IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISSRTD33IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISSRTD33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_swigregister(itkImageToImageFilterISSRTD33IUS3)
itkImageToImageFilterISSRTD33IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_cast

class itkImageToImageFilterIUC2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2ICF2

        Create a new object of the class itkImageToImageFilterIUC2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_swigregister(itkImageToImageFilterIUC2ICF2)
itkImageToImageFilterIUC2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_cast

class itkImageToImageFilterIUC2ICVF22(itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2ICVF22

        Create a new object of the class itkImageToImageFilterIUC2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_swigregister(itkImageToImageFilterIUC2ICVF22)
itkImageToImageFilterIUC2ICVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_cast

class itkImageToImageFilterIUC2ICVF32(itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2ICVF32

        Create a new object of the class itkImageToImageFilterIUC2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_swigregister(itkImageToImageFilterIUC2ICVF32)
itkImageToImageFilterIUC2ICVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_cast

class itkImageToImageFilterIUC2ICVF42(itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2ICVF42

        Create a new object of the class itkImageToImageFilterIUC2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_swigregister(itkImageToImageFilterIUC2ICVF42)
itkImageToImageFilterIUC2ICVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_cast

class itkImageToImageFilterIUC2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IRGBAUC2

        Create a new object of the class itkImageToImageFilterIUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_swigregister(itkImageToImageFilterIUC2IRGBAUC2)
itkImageToImageFilterIUC2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_cast

class itkImageToImageFilterIUC2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IRGBUC2

        Create a new object of the class itkImageToImageFilterIUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_swigregister(itkImageToImageFilterIUC2IRGBUC2)
itkImageToImageFilterIUC2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_cast

class itkImageToImageFilterIUC2ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIUC2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2ISSRTD22

        Create a new object of the class itkImageToImageFilterIUC2ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_swigregister(itkImageToImageFilterIUC2ISSRTD22)
itkImageToImageFilterIUC2ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_cast

class itkImageToImageFilterIUC2IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IUC3

        Create a new object of the class itkImageToImageFilterIUC2IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_swigregister(itkImageToImageFilterIUC2IUC3)
itkImageToImageFilterIUC2IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_cast

class itkImageToImageFilterIUC2IVF22(itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IVF22

        Create a new object of the class itkImageToImageFilterIUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_swigregister(itkImageToImageFilterIUC2IVF22)
itkImageToImageFilterIUC2IVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_cast

class itkImageToImageFilterIUC2IVF32(itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IVF32

        Create a new object of the class itkImageToImageFilterIUC2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_swigregister(itkImageToImageFilterIUC2IVF32)
itkImageToImageFilterIUC2IVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_cast

class itkImageToImageFilterIUC2IVF42(itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2IVF42

        Create a new object of the class itkImageToImageFilterIUC2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_swigregister(itkImageToImageFilterIUC2IVF42)
itkImageToImageFilterIUC2IVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_cast

class itkImageToImageFilterIUC2VID2(itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2VID2

        Create a new object of the class itkImageToImageFilterIUC2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_swigregister(itkImageToImageFilterIUC2VID2)
itkImageToImageFilterIUC2VID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_cast

class itkImageToImageFilterIUC2VIF2(itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2VIF2

        Create a new object of the class itkImageToImageFilterIUC2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_swigregister(itkImageToImageFilterIUC2VIF2)
itkImageToImageFilterIUC2VIF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_cast

class itkImageToImageFilterIUC2VISS2(itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2VISS2

        Create a new object of the class itkImageToImageFilterIUC2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_swigregister(itkImageToImageFilterIUC2VISS2)
itkImageToImageFilterIUC2VISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_cast

class itkImageToImageFilterIUC2VIUC2(itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2VIUC2

        Create a new object of the class itkImageToImageFilterIUC2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_swigregister(itkImageToImageFilterIUC2VIUC2)
itkImageToImageFilterIUC2VIUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_cast

class itkImageToImageFilterIUC2VIUS2(itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2VIUS2

        Create a new object of the class itkImageToImageFilterIUC2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_swigregister(itkImageToImageFilterIUC2VIUS2)
itkImageToImageFilterIUC2VIUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_cast

class itkImageToImageFilterIUC3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3ICF3

        Create a new object of the class itkImageToImageFilterIUC3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_swigregister(itkImageToImageFilterIUC3ICF3)
itkImageToImageFilterIUC3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_cast

class itkImageToImageFilterIUC3ICVF23(itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3ICVF23

        Create a new object of the class itkImageToImageFilterIUC3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_swigregister(itkImageToImageFilterIUC3ICVF23)
itkImageToImageFilterIUC3ICVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_cast

class itkImageToImageFilterIUC3ICVF33(itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3ICVF33

        Create a new object of the class itkImageToImageFilterIUC3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_swigregister(itkImageToImageFilterIUC3ICVF33)
itkImageToImageFilterIUC3ICVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_cast

class itkImageToImageFilterIUC3ICVF43(itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3ICVF43

        Create a new object of the class itkImageToImageFilterIUC3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_swigregister(itkImageToImageFilterIUC3ICVF43)
itkImageToImageFilterIUC3ICVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_cast

class itkImageToImageFilterIUC3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IRGBAUC3

        Create a new object of the class itkImageToImageFilterIUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_swigregister(itkImageToImageFilterIUC3IRGBAUC3)
itkImageToImageFilterIUC3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_cast

class itkImageToImageFilterIUC3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IRGBUC3

        Create a new object of the class itkImageToImageFilterIUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_swigregister(itkImageToImageFilterIUC3IRGBUC3)
itkImageToImageFilterIUC3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_cast

class itkImageToImageFilterIUC3ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIUC3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3ISSRTD33

        Create a new object of the class itkImageToImageFilterIUC3ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_swigregister(itkImageToImageFilterIUC3ISSRTD33)
itkImageToImageFilterIUC3ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_cast

class itkImageToImageFilterIUC3IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IUC2

        Create a new object of the class itkImageToImageFilterIUC3IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_swigregister(itkImageToImageFilterIUC3IUC2)
itkImageToImageFilterIUC3IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_cast

class itkImageToImageFilterIUC3IVF23(itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IVF23

        Create a new object of the class itkImageToImageFilterIUC3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_swigregister(itkImageToImageFilterIUC3IVF23)
itkImageToImageFilterIUC3IVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_cast

class itkImageToImageFilterIUC3IVF33(itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IVF33

        Create a new object of the class itkImageToImageFilterIUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_swigregister(itkImageToImageFilterIUC3IVF33)
itkImageToImageFilterIUC3IVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_cast

class itkImageToImageFilterIUC3IVF43(itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3IVF43

        Create a new object of the class itkImageToImageFilterIUC3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_swigregister(itkImageToImageFilterIUC3IVF43)
itkImageToImageFilterIUC3IVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_cast

class itkImageToImageFilterIUC3VID3(itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3VID3

        Create a new object of the class itkImageToImageFilterIUC3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_swigregister(itkImageToImageFilterIUC3VID3)
itkImageToImageFilterIUC3VID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_cast

class itkImageToImageFilterIUC3VIF3(itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3VIF3

        Create a new object of the class itkImageToImageFilterIUC3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_swigregister(itkImageToImageFilterIUC3VIF3)
itkImageToImageFilterIUC3VIF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_cast

class itkImageToImageFilterIUC3VISS3(itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3VISS3

        Create a new object of the class itkImageToImageFilterIUC3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_swigregister(itkImageToImageFilterIUC3VISS3)
itkImageToImageFilterIUC3VISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_cast

class itkImageToImageFilterIUC3VIUC3(itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3VIUC3

        Create a new object of the class itkImageToImageFilterIUC3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_swigregister(itkImageToImageFilterIUC3VIUC3)
itkImageToImageFilterIUC3VIUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_cast

class itkImageToImageFilterIUC3VIUS3(itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3VIUS3

        Create a new object of the class itkImageToImageFilterIUC3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_swigregister(itkImageToImageFilterIUC3VIUS3)
itkImageToImageFilterIUC3VIUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_cast

class itkImageToImageFilterIUL2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUL2IRGBAUC2

        Create a new object of the class itkImageToImageFilterIUL2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUL2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUL2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUL2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUL2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_swigregister(itkImageToImageFilterIUL2IRGBAUC2)
itkImageToImageFilterIUL2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_cast

class itkImageToImageFilterIUL2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUL2IRGBUC2

        Create a new object of the class itkImageToImageFilterIUL2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUL2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUL2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUL2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUL2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_swigregister(itkImageToImageFilterIUL2IRGBUC2)
itkImageToImageFilterIUL2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_cast

class itkImageToImageFilterIUL3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUL3IRGBAUC3

        Create a new object of the class itkImageToImageFilterIUL3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUL3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUL3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUL3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUL3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_swigregister(itkImageToImageFilterIUL3IRGBAUC3)
itkImageToImageFilterIUL3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_cast

class itkImageToImageFilterIUL3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUL3IRGBUC3

        Create a new object of the class itkImageToImageFilterIUL3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUL3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUL3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUL3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUL3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_swigregister(itkImageToImageFilterIUL3IRGBUC3)
itkImageToImageFilterIUL3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_cast

class itkImageToImageFilterIULL2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIULL2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIULL2IRGBAUC2

        Create a new object of the class itkImageToImageFilterIULL2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIULL2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIULL2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIULL2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIULL2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_swigregister(itkImageToImageFilterIULL2IRGBAUC2)
itkImageToImageFilterIULL2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBAUC2_cast

class itkImageToImageFilterIULL2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIULL2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIULL2IRGBUC2

        Create a new object of the class itkImageToImageFilterIULL2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIULL2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIULL2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIULL2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIULL2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_swigregister(itkImageToImageFilterIULL2IRGBUC2)
itkImageToImageFilterIULL2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIULL2IRGBUC2_cast

class itkImageToImageFilterIULL3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIULL3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIULL3IRGBAUC3

        Create a new object of the class itkImageToImageFilterIULL3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIULL3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIULL3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIULL3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIULL3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_swigregister(itkImageToImageFilterIULL3IRGBAUC3)
itkImageToImageFilterIULL3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBAUC3_cast

class itkImageToImageFilterIULL3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIULL3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIULL3IRGBUC3

        Create a new object of the class itkImageToImageFilterIULL3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIULL3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIULL3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIULL3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIULL3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_swigregister(itkImageToImageFilterIULL3IRGBUC3)
itkImageToImageFilterIULL3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIULL3IRGBUC3_cast

class itkImageToImageFilterIUS2ICF2(itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2ICF2

        Create a new object of the class itkImageToImageFilterIUS2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_swigregister(itkImageToImageFilterIUS2ICF2)
itkImageToImageFilterIUS2ICF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_cast

class itkImageToImageFilterIUS2ICVF22(itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2ICVF22

        Create a new object of the class itkImageToImageFilterIUS2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_swigregister(itkImageToImageFilterIUS2ICVF22)
itkImageToImageFilterIUS2ICVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_cast

class itkImageToImageFilterIUS2ICVF32(itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2ICVF32

        Create a new object of the class itkImageToImageFilterIUS2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_swigregister(itkImageToImageFilterIUS2ICVF32)
itkImageToImageFilterIUS2ICVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_cast

class itkImageToImageFilterIUS2ICVF42(itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2ICVF42

        Create a new object of the class itkImageToImageFilterIUS2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_swigregister(itkImageToImageFilterIUS2ICVF42)
itkImageToImageFilterIUS2ICVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_cast

class itkImageToImageFilterIUS2IRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IRGBAUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IRGBAUC2

        Create a new object of the class itkImageToImageFilterIUS2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_swigregister(itkImageToImageFilterIUS2IRGBAUC2)
itkImageToImageFilterIUS2IRGBAUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_cast

class itkImageToImageFilterIUS2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IRGBUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IRGBUC2

        Create a new object of the class itkImageToImageFilterIUS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_swigregister(itkImageToImageFilterIUS2IRGBUC2)
itkImageToImageFilterIUS2IRGBUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_cast

class itkImageToImageFilterIUS2ISSRTD22(itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIUS2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ISSRTD22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2ISSRTD22

        Create a new object of the class itkImageToImageFilterIUS2ISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2ISSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2ISSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2ISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_swigregister(itkImageToImageFilterIUS2ISSRTD22)
itkImageToImageFilterIUS2ISSRTD22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_cast

class itkImageToImageFilterIUS2IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IUS3

        Create a new object of the class itkImageToImageFilterIUS2IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_swigregister(itkImageToImageFilterIUS2IUS3)
itkImageToImageFilterIUS2IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_cast

class itkImageToImageFilterIUS2IVF22(itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF22
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IVF22

        Create a new object of the class itkImageToImageFilterIUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_swigregister(itkImageToImageFilterIUS2IVF22)
itkImageToImageFilterIUS2IVF22_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_cast

class itkImageToImageFilterIUS2IVF32(itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF32
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IVF32

        Create a new object of the class itkImageToImageFilterIUS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_swigregister(itkImageToImageFilterIUS2IVF32)
itkImageToImageFilterIUS2IVF32_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_cast

class itkImageToImageFilterIUS2IVF42(itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF42
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2IVF42

        Create a new object of the class itkImageToImageFilterIUS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_swigregister(itkImageToImageFilterIUS2IVF42)
itkImageToImageFilterIUS2IVF42_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_cast

class itkImageToImageFilterIUS2VID2(itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2VID2

        Create a new object of the class itkImageToImageFilterIUS2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_swigregister(itkImageToImageFilterIUS2VID2)
itkImageToImageFilterIUS2VID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_cast

class itkImageToImageFilterIUS2VIF2(itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2VIF2

        Create a new object of the class itkImageToImageFilterIUS2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_swigregister(itkImageToImageFilterIUS2VIF2)
itkImageToImageFilterIUS2VIF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_cast

class itkImageToImageFilterIUS2VISS2(itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2VISS2

        Create a new object of the class itkImageToImageFilterIUS2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_swigregister(itkImageToImageFilterIUS2VISS2)
itkImageToImageFilterIUS2VISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_cast

class itkImageToImageFilterIUS2VIUC2(itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2VIUC2

        Create a new object of the class itkImageToImageFilterIUS2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_swigregister(itkImageToImageFilterIUS2VIUC2)
itkImageToImageFilterIUS2VIUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_cast

class itkImageToImageFilterIUS2VIUS2(itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2VIUS2

        Create a new object of the class itkImageToImageFilterIUS2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_swigregister(itkImageToImageFilterIUS2VIUS2)
itkImageToImageFilterIUS2VIUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_cast

class itkImageToImageFilterIUS3ICF3(itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3ICF3

        Create a new object of the class itkImageToImageFilterIUS3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_swigregister(itkImageToImageFilterIUS3ICF3)
itkImageToImageFilterIUS3ICF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_cast

class itkImageToImageFilterIUS3ICVF23(itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3ICVF23

        Create a new object of the class itkImageToImageFilterIUS3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_swigregister(itkImageToImageFilterIUS3ICVF23)
itkImageToImageFilterIUS3ICVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_cast

class itkImageToImageFilterIUS3ICVF33(itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3ICVF33

        Create a new object of the class itkImageToImageFilterIUS3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_swigregister(itkImageToImageFilterIUS3ICVF33)
itkImageToImageFilterIUS3ICVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_cast

class itkImageToImageFilterIUS3ICVF43(itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3ICVF43

        Create a new object of the class itkImageToImageFilterIUS3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_swigregister(itkImageToImageFilterIUS3ICVF43)
itkImageToImageFilterIUS3ICVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_cast

class itkImageToImageFilterIUS3IRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IRGBAUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IRGBAUC3

        Create a new object of the class itkImageToImageFilterIUS3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_swigregister(itkImageToImageFilterIUS3IRGBAUC3)
itkImageToImageFilterIUS3IRGBAUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_cast

class itkImageToImageFilterIUS3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IRGBUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IRGBUC3

        Create a new object of the class itkImageToImageFilterIUS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_swigregister(itkImageToImageFilterIUS3IRGBUC3)
itkImageToImageFilterIUS3IRGBUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_cast

class itkImageToImageFilterIUS3ISSRTD33(itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIUS3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ISSRTD33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3ISSRTD33

        Create a new object of the class itkImageToImageFilterIUS3ISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3ISSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3ISSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3ISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_swigregister(itkImageToImageFilterIUS3ISSRTD33)
itkImageToImageFilterIUS3ISSRTD33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_cast

class itkImageToImageFilterIUS3IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IUS2

        Create a new object of the class itkImageToImageFilterIUS3IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_swigregister(itkImageToImageFilterIUS3IUS2)
itkImageToImageFilterIUS3IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_cast

class itkImageToImageFilterIUS3IVF23(itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF23
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IVF23

        Create a new object of the class itkImageToImageFilterIUS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_swigregister(itkImageToImageFilterIUS3IVF23)
itkImageToImageFilterIUS3IVF23_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_cast

class itkImageToImageFilterIUS3IVF33(itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF33
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IVF33

        Create a new object of the class itkImageToImageFilterIUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_swigregister(itkImageToImageFilterIUS3IVF33)
itkImageToImageFilterIUS3IVF33_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_cast

class itkImageToImageFilterIUS3IVF43(itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF43
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3IVF43

        Create a new object of the class itkImageToImageFilterIUS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_swigregister(itkImageToImageFilterIUS3IVF43)
itkImageToImageFilterIUS3IVF43_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_cast

class itkImageToImageFilterIUS3VID3(itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3VID3

        Create a new object of the class itkImageToImageFilterIUS3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_swigregister(itkImageToImageFilterIUS3VID3)
itkImageToImageFilterIUS3VID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_cast

class itkImageToImageFilterIUS3VIF3(itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3VIF3

        Create a new object of the class itkImageToImageFilterIUS3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_swigregister(itkImageToImageFilterIUS3VIF3)
itkImageToImageFilterIUS3VIF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_cast

class itkImageToImageFilterIUS3VISS3(itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3VISS3

        Create a new object of the class itkImageToImageFilterIUS3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_swigregister(itkImageToImageFilterIUS3VISS3)
itkImageToImageFilterIUS3VISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_cast

class itkImageToImageFilterIUS3VIUC3(itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3VIUC3

        Create a new object of the class itkImageToImageFilterIUS3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_swigregister(itkImageToImageFilterIUS3VIUC3)
itkImageToImageFilterIUS3VIUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_cast

class itkImageToImageFilterIUS3VIUS3(itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3VIUS3

        Create a new object of the class itkImageToImageFilterIUS3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_swigregister(itkImageToImageFilterIUS3VIUS3)
itkImageToImageFilterIUS3VIUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_cast

class itkImageToImageFilterIVF22ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF22ID2

        Create a new object of the class itkImageToImageFilterIVF22ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF22ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF22ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF22ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_swigregister(itkImageToImageFilterIVF22ID2)
itkImageToImageFilterIVF22ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_cast

class itkImageToImageFilterIVF22IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF22IF2

        Create a new object of the class itkImageToImageFilterIVF22IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF22IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF22IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF22IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_swigregister(itkImageToImageFilterIVF22IF2)
itkImageToImageFilterIVF22IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_cast

class itkImageToImageFilterIVF22ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF22ISS2

        Create a new object of the class itkImageToImageFilterIVF22ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF22ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF22ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF22ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_swigregister(itkImageToImageFilterIVF22ISS2)
itkImageToImageFilterIVF22ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_cast

class itkImageToImageFilterIVF22IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF22IUC2

        Create a new object of the class itkImageToImageFilterIVF22IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF22IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF22IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF22IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_swigregister(itkImageToImageFilterIVF22IUC2)
itkImageToImageFilterIVF22IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_cast

class itkImageToImageFilterIVF22IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF22IUS2

        Create a new object of the class itkImageToImageFilterIVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF22IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF22IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF22IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_swigregister(itkImageToImageFilterIVF22IUS2)
itkImageToImageFilterIVF22IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_cast

class itkImageToImageFilterIVF23ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF23ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF23ID3

        Create a new object of the class itkImageToImageFilterIVF23ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF23ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF23ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF23ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF23ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_swigregister(itkImageToImageFilterIVF23ID3)
itkImageToImageFilterIVF23ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_cast

class itkImageToImageFilterIVF23IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF23IF3

        Create a new object of the class itkImageToImageFilterIVF23IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF23IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF23IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF23IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF23IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_swigregister(itkImageToImageFilterIVF23IF3)
itkImageToImageFilterIVF23IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_cast

class itkImageToImageFilterIVF23ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF23ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF23ISS3

        Create a new object of the class itkImageToImageFilterIVF23ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF23ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF23ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF23ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF23ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_swigregister(itkImageToImageFilterIVF23ISS3)
itkImageToImageFilterIVF23ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_cast

class itkImageToImageFilterIVF23IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF23IUC3

        Create a new object of the class itkImageToImageFilterIVF23IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF23IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF23IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF23IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF23IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_swigregister(itkImageToImageFilterIVF23IUC3)
itkImageToImageFilterIVF23IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_cast

class itkImageToImageFilterIVF23IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF23IUS3

        Create a new object of the class itkImageToImageFilterIVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF23IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF23IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF23IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF23IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_swigregister(itkImageToImageFilterIVF23IUS3)
itkImageToImageFilterIVF23IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_cast

class itkImageToImageFilterIVF32ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF32ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF32ID2

        Create a new object of the class itkImageToImageFilterIVF32ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF32ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF32ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF32ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF32ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_swigregister(itkImageToImageFilterIVF32ID2)
itkImageToImageFilterIVF32ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_cast

class itkImageToImageFilterIVF32IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF32IF2

        Create a new object of the class itkImageToImageFilterIVF32IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF32IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF32IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF32IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF32IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_swigregister(itkImageToImageFilterIVF32IF2)
itkImageToImageFilterIVF32IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_cast

class itkImageToImageFilterIVF32ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF32ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF32ISS2

        Create a new object of the class itkImageToImageFilterIVF32ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF32ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF32ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF32ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF32ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_swigregister(itkImageToImageFilterIVF32ISS2)
itkImageToImageFilterIVF32ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_cast

class itkImageToImageFilterIVF32IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF32IUC2

        Create a new object of the class itkImageToImageFilterIVF32IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF32IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF32IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF32IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF32IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_swigregister(itkImageToImageFilterIVF32IUC2)
itkImageToImageFilterIVF32IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_cast

class itkImageToImageFilterIVF32IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF32IUS2

        Create a new object of the class itkImageToImageFilterIVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF32IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF32IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF32IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF32IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_swigregister(itkImageToImageFilterIVF32IUS2)
itkImageToImageFilterIVF32IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_cast

class itkImageToImageFilterIVF33ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33ID3

        Create a new object of the class itkImageToImageFilterIVF33ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_swigregister(itkImageToImageFilterIVF33ID3)
itkImageToImageFilterIVF33ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_cast

class itkImageToImageFilterIVF33IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33IF3

        Create a new object of the class itkImageToImageFilterIVF33IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_swigregister(itkImageToImageFilterIVF33IF3)
itkImageToImageFilterIVF33IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_cast

class itkImageToImageFilterIVF33ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33ISS3

        Create a new object of the class itkImageToImageFilterIVF33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_swigregister(itkImageToImageFilterIVF33ISS3)
itkImageToImageFilterIVF33ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_cast

class itkImageToImageFilterIVF33IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33IUC3

        Create a new object of the class itkImageToImageFilterIVF33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_swigregister(itkImageToImageFilterIVF33IUC3)
itkImageToImageFilterIVF33IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_cast

class itkImageToImageFilterIVF33IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33IUS3

        Create a new object of the class itkImageToImageFilterIVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_swigregister(itkImageToImageFilterIVF33IUS3)
itkImageToImageFilterIVF33IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_cast

class itkImageToImageFilterIVF42ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF42ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF42ID2

        Create a new object of the class itkImageToImageFilterIVF42ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF42ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF42ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF42ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF42ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_swigregister(itkImageToImageFilterIVF42ID2)
itkImageToImageFilterIVF42ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_cast

class itkImageToImageFilterIVF42IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF42IF2

        Create a new object of the class itkImageToImageFilterIVF42IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF42IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF42IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF42IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF42IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_swigregister(itkImageToImageFilterIVF42IF2)
itkImageToImageFilterIVF42IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_cast

class itkImageToImageFilterIVF42ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF42ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF42ISS2

        Create a new object of the class itkImageToImageFilterIVF42ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF42ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF42ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF42ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF42ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_swigregister(itkImageToImageFilterIVF42ISS2)
itkImageToImageFilterIVF42ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_cast

class itkImageToImageFilterIVF42IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF42IUC2

        Create a new object of the class itkImageToImageFilterIVF42IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF42IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF42IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF42IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF42IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_swigregister(itkImageToImageFilterIVF42IUC2)
itkImageToImageFilterIVF42IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_cast

class itkImageToImageFilterIVF42IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF42IUS2

        Create a new object of the class itkImageToImageFilterIVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF42IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF42IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF42IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF42IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_swigregister(itkImageToImageFilterIVF42IUS2)
itkImageToImageFilterIVF42IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_cast

class itkImageToImageFilterIVF43ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF43ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF43ID3

        Create a new object of the class itkImageToImageFilterIVF43ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF43ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF43ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF43ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF43ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_swigregister(itkImageToImageFilterIVF43ID3)
itkImageToImageFilterIVF43ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_cast

class itkImageToImageFilterIVF43IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF43IF3

        Create a new object of the class itkImageToImageFilterIVF43IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF43IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF43IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF43IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF43IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_swigregister(itkImageToImageFilterIVF43IF3)
itkImageToImageFilterIVF43IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_cast

class itkImageToImageFilterIVF43ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF43ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF43ISS3

        Create a new object of the class itkImageToImageFilterIVF43ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF43ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF43ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF43ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF43ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_swigregister(itkImageToImageFilterIVF43ISS3)
itkImageToImageFilterIVF43ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_cast

class itkImageToImageFilterIVF43IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF43IUC3

        Create a new object of the class itkImageToImageFilterIVF43IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF43IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF43IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF43IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF43IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_swigregister(itkImageToImageFilterIVF43IUC3)
itkImageToImageFilterIVF43IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_cast

class itkImageToImageFilterIVF43IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF43IUS3

        Create a new object of the class itkImageToImageFilterIVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF43IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF43IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF43IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIVF43IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_swigregister(itkImageToImageFilterIVF43IUS3)
itkImageToImageFilterIVF43IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_cast

class itkImageToImageFilterVID2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID2ID2

        Create a new object of the class itkImageToImageFilterVID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_swigregister(itkImageToImageFilterVID2ID2)
itkImageToImageFilterVID2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_cast

class itkImageToImageFilterVID2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVID2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID2IF2

        Create a new object of the class itkImageToImageFilterVID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_swigregister(itkImageToImageFilterVID2IF2)
itkImageToImageFilterVID2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_cast

class itkImageToImageFilterVID2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID2ISS2

        Create a new object of the class itkImageToImageFilterVID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_swigregister(itkImageToImageFilterVID2ISS2)
itkImageToImageFilterVID2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_cast

class itkImageToImageFilterVID2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID2IUC2

        Create a new object of the class itkImageToImageFilterVID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_swigregister(itkImageToImageFilterVID2IUC2)
itkImageToImageFilterVID2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_cast

class itkImageToImageFilterVID2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID2IUS2

        Create a new object of the class itkImageToImageFilterVID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_swigregister(itkImageToImageFilterVID2IUS2)
itkImageToImageFilterVID2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_cast

class itkImageToImageFilterVID3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID3ID3

        Create a new object of the class itkImageToImageFilterVID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_swigregister(itkImageToImageFilterVID3ID3)
itkImageToImageFilterVID3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_cast

class itkImageToImageFilterVID3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID3IF3

        Create a new object of the class itkImageToImageFilterVID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_swigregister(itkImageToImageFilterVID3IF3)
itkImageToImageFilterVID3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_cast

class itkImageToImageFilterVID3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID3ISS3

        Create a new object of the class itkImageToImageFilterVID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_swigregister(itkImageToImageFilterVID3ISS3)
itkImageToImageFilterVID3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_cast

class itkImageToImageFilterVID3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID3IUC3

        Create a new object of the class itkImageToImageFilterVID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_swigregister(itkImageToImageFilterVID3IUC3)
itkImageToImageFilterVID3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_cast

class itkImageToImageFilterVID3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVID3IUS3

        Create a new object of the class itkImageToImageFilterVID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVID3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVID3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVID3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_swigregister(itkImageToImageFilterVID3IUS3)
itkImageToImageFilterVID3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_cast

class itkImageToImageFilterVIF2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2ID2

        Create a new object of the class itkImageToImageFilterVIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_swigregister(itkImageToImageFilterVIF2ID2)
itkImageToImageFilterVIF2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_cast

class itkImageToImageFilterVIF2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2IF2

        Create a new object of the class itkImageToImageFilterVIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_swigregister(itkImageToImageFilterVIF2IF2)
itkImageToImageFilterVIF2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_cast

class itkImageToImageFilterVIF2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2ISS2

        Create a new object of the class itkImageToImageFilterVIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_swigregister(itkImageToImageFilterVIF2ISS2)
itkImageToImageFilterVIF2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_cast

class itkImageToImageFilterVIF2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2IUC2

        Create a new object of the class itkImageToImageFilterVIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_swigregister(itkImageToImageFilterVIF2IUC2)
itkImageToImageFilterVIF2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_cast

class itkImageToImageFilterVIF2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2IUS2

        Create a new object of the class itkImageToImageFilterVIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_swigregister(itkImageToImageFilterVIF2IUS2)
itkImageToImageFilterVIF2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_cast

class itkImageToImageFilterVIF3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3ID3

        Create a new object of the class itkImageToImageFilterVIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_swigregister(itkImageToImageFilterVIF3ID3)
itkImageToImageFilterVIF3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_cast

class itkImageToImageFilterVIF3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3IF3

        Create a new object of the class itkImageToImageFilterVIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_swigregister(itkImageToImageFilterVIF3IF3)
itkImageToImageFilterVIF3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_cast

class itkImageToImageFilterVIF3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3ISS3

        Create a new object of the class itkImageToImageFilterVIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_swigregister(itkImageToImageFilterVIF3ISS3)
itkImageToImageFilterVIF3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_cast

class itkImageToImageFilterVIF3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3IUC3

        Create a new object of the class itkImageToImageFilterVIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_swigregister(itkImageToImageFilterVIF3IUC3)
itkImageToImageFilterVIF3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_cast

class itkImageToImageFilterVIF3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3IUS3

        Create a new object of the class itkImageToImageFilterVIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIF3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_swigregister(itkImageToImageFilterVIF3IUS3)
itkImageToImageFilterVIF3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_cast

class itkImageToImageFilterVISS2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVISS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS2ID2

        Create a new object of the class itkImageToImageFilterVISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_swigregister(itkImageToImageFilterVISS2ID2)
itkImageToImageFilterVISS2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_cast

class itkImageToImageFilterVISS2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS2IF2

        Create a new object of the class itkImageToImageFilterVISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_swigregister(itkImageToImageFilterVISS2IF2)
itkImageToImageFilterVISS2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_cast

class itkImageToImageFilterVISS2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS2ISS2

        Create a new object of the class itkImageToImageFilterVISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_swigregister(itkImageToImageFilterVISS2ISS2)
itkImageToImageFilterVISS2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_cast

class itkImageToImageFilterVISS2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS2IUC2

        Create a new object of the class itkImageToImageFilterVISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_swigregister(itkImageToImageFilterVISS2IUC2)
itkImageToImageFilterVISS2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_cast

class itkImageToImageFilterVISS2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS2IUS2

        Create a new object of the class itkImageToImageFilterVISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_swigregister(itkImageToImageFilterVISS2IUS2)
itkImageToImageFilterVISS2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_cast

class itkImageToImageFilterVISS3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS3ID3

        Create a new object of the class itkImageToImageFilterVISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_swigregister(itkImageToImageFilterVISS3ID3)
itkImageToImageFilterVISS3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_cast

class itkImageToImageFilterVISS3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS3IF3

        Create a new object of the class itkImageToImageFilterVISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_swigregister(itkImageToImageFilterVISS3IF3)
itkImageToImageFilterVISS3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_cast

class itkImageToImageFilterVISS3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS3ISS3

        Create a new object of the class itkImageToImageFilterVISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_swigregister(itkImageToImageFilterVISS3ISS3)
itkImageToImageFilterVISS3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_cast

class itkImageToImageFilterVISS3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS3IUC3

        Create a new object of the class itkImageToImageFilterVISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_swigregister(itkImageToImageFilterVISS3IUC3)
itkImageToImageFilterVISS3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_cast

class itkImageToImageFilterVISS3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVISS3IUS3

        Create a new object of the class itkImageToImageFilterVISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVISS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVISS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVISS3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_swigregister(itkImageToImageFilterVISS3IUS3)
itkImageToImageFilterVISS3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_cast

class itkImageToImageFilterVIUC2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC2ID2

        Create a new object of the class itkImageToImageFilterVIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_swigregister(itkImageToImageFilterVIUC2ID2)
itkImageToImageFilterVIUC2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_cast

class itkImageToImageFilterVIUC2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC2IF2

        Create a new object of the class itkImageToImageFilterVIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_swigregister(itkImageToImageFilterVIUC2IF2)
itkImageToImageFilterVIUC2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_cast

class itkImageToImageFilterVIUC2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC2ISS2

        Create a new object of the class itkImageToImageFilterVIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_swigregister(itkImageToImageFilterVIUC2ISS2)
itkImageToImageFilterVIUC2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_cast

class itkImageToImageFilterVIUC2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC2IUC2

        Create a new object of the class itkImageToImageFilterVIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_swigregister(itkImageToImageFilterVIUC2IUC2)
itkImageToImageFilterVIUC2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_cast

class itkImageToImageFilterVIUC2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC2IUS2

        Create a new object of the class itkImageToImageFilterVIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_swigregister(itkImageToImageFilterVIUC2IUS2)
itkImageToImageFilterVIUC2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_cast

class itkImageToImageFilterVIUC3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC3ID3

        Create a new object of the class itkImageToImageFilterVIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_swigregister(itkImageToImageFilterVIUC3ID3)
itkImageToImageFilterVIUC3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_cast

class itkImageToImageFilterVIUC3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC3IF3

        Create a new object of the class itkImageToImageFilterVIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_swigregister(itkImageToImageFilterVIUC3IF3)
itkImageToImageFilterVIUC3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_cast

class itkImageToImageFilterVIUC3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC3ISS3

        Create a new object of the class itkImageToImageFilterVIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_swigregister(itkImageToImageFilterVIUC3ISS3)
itkImageToImageFilterVIUC3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_cast

class itkImageToImageFilterVIUC3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC3IUC3

        Create a new object of the class itkImageToImageFilterVIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_swigregister(itkImageToImageFilterVIUC3IUC3)
itkImageToImageFilterVIUC3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_cast

class itkImageToImageFilterVIUC3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUC3IUS3

        Create a new object of the class itkImageToImageFilterVIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUC3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUC3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_swigregister(itkImageToImageFilterVIUC3IUS3)
itkImageToImageFilterVIUC3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_cast

class itkImageToImageFilterVIUS2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2ID2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS2ID2

        Create a new object of the class itkImageToImageFilterVIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_swigregister(itkImageToImageFilterVIUS2ID2)
itkImageToImageFilterVIUS2ID2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_cast

class itkImageToImageFilterVIUS2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IF2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS2IF2

        Create a new object of the class itkImageToImageFilterVIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_swigregister(itkImageToImageFilterVIUS2IF2)
itkImageToImageFilterVIUS2IF2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_cast

class itkImageToImageFilterVIUS2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2ISS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS2ISS2

        Create a new object of the class itkImageToImageFilterVIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_swigregister(itkImageToImageFilterVIUS2ISS2)
itkImageToImageFilterVIUS2ISS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_cast

class itkImageToImageFilterVIUS2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IUC2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS2IUC2

        Create a new object of the class itkImageToImageFilterVIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_swigregister(itkImageToImageFilterVIUS2IUC2)
itkImageToImageFilterVIUS2IUC2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_cast

class itkImageToImageFilterVIUS2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IUS2
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS2IUS2

        Create a new object of the class itkImageToImageFilterVIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_swigregister(itkImageToImageFilterVIUS2IUS2)
itkImageToImageFilterVIUS2IUS2_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_cast

class itkImageToImageFilterVIUS3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3ID3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS3ID3

        Create a new object of the class itkImageToImageFilterVIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_swigregister(itkImageToImageFilterVIUS3ID3)
itkImageToImageFilterVIUS3ID3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_cast

class itkImageToImageFilterVIUS3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IF3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS3IF3

        Create a new object of the class itkImageToImageFilterVIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_swigregister(itkImageToImageFilterVIUS3IF3)
itkImageToImageFilterVIUS3IF3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_cast

class itkImageToImageFilterVIUS3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3ISS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS3ISS3

        Create a new object of the class itkImageToImageFilterVIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_swigregister(itkImageToImageFilterVIUS3ISS3)
itkImageToImageFilterVIUS3ISS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_cast

class itkImageToImageFilterVIUS3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IUC3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS3IUC3

        Create a new object of the class itkImageToImageFilterVIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_swigregister(itkImageToImageFilterVIUS3IUC3)
itkImageToImageFilterVIUS3IUC3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_cast

class itkImageToImageFilterVIUS3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IUS3
    cast = _swig_new_static_method(_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIUS3IUS3

        Create a new object of the class itkImageToImageFilterVIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterVIUS3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_swigregister(itkImageToImageFilterVIUS3IUS3)
itkImageToImageFilterVIUS3IUS3_cast = _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "Available Keyword Arguments:\n"
    image_to_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



