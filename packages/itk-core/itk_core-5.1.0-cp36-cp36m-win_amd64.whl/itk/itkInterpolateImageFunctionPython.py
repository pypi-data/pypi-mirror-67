# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInterpolateImageFunctionPython
else:
    import _itkInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkCovariantVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkVectorPython
import itkRGBPixelPython
import itkPointPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkImageRegionPython

def itkInterpolateImageFunctionIRGBAUC3D_New():
  return itkInterpolateImageFunctionIRGBAUC3D.New()


def itkInterpolateImageFunctionIRGBUC3D_New():
  return itkInterpolateImageFunctionIRGBUC3D.New()


def itkInterpolateImageFunctionICVF33D_New():
  return itkInterpolateImageFunctionICVF33D.New()


def itkInterpolateImageFunctionIVF33D_New():
  return itkInterpolateImageFunctionIVF33D.New()


def itkInterpolateImageFunctionID3F_New():
  return itkInterpolateImageFunctionID3F.New()


def itkInterpolateImageFunctionID3D_New():
  return itkInterpolateImageFunctionID3D.New()


def itkInterpolateImageFunctionIF3F_New():
  return itkInterpolateImageFunctionIF3F.New()


def itkInterpolateImageFunctionIF3D_New():
  return itkInterpolateImageFunctionIF3D.New()


def itkInterpolateImageFunctionIUS3F_New():
  return itkInterpolateImageFunctionIUS3F.New()


def itkInterpolateImageFunctionIUS3D_New():
  return itkInterpolateImageFunctionIUS3D.New()


def itkInterpolateImageFunctionIUC3F_New():
  return itkInterpolateImageFunctionIUC3F.New()


def itkInterpolateImageFunctionIUC3D_New():
  return itkInterpolateImageFunctionIUC3D.New()


def itkInterpolateImageFunctionISS3F_New():
  return itkInterpolateImageFunctionISS3F.New()


def itkInterpolateImageFunctionISS3D_New():
  return itkInterpolateImageFunctionISS3D.New()


def itkInterpolateImageFunctionIRGBAUC2D_New():
  return itkInterpolateImageFunctionIRGBAUC2D.New()


def itkInterpolateImageFunctionIRGBUC2D_New():
  return itkInterpolateImageFunctionIRGBUC2D.New()


def itkInterpolateImageFunctionICVF22D_New():
  return itkInterpolateImageFunctionICVF22D.New()


def itkInterpolateImageFunctionIVF22D_New():
  return itkInterpolateImageFunctionIVF22D.New()


def itkInterpolateImageFunctionID2F_New():
  return itkInterpolateImageFunctionID2F.New()


def itkInterpolateImageFunctionID2D_New():
  return itkInterpolateImageFunctionID2D.New()


def itkInterpolateImageFunctionIF2F_New():
  return itkInterpolateImageFunctionIF2F.New()


def itkInterpolateImageFunctionIF2D_New():
  return itkInterpolateImageFunctionIF2D.New()


def itkInterpolateImageFunctionIUS2F_New():
  return itkInterpolateImageFunctionIUS2F.New()


def itkInterpolateImageFunctionIUS2D_New():
  return itkInterpolateImageFunctionIUS2D.New()


def itkInterpolateImageFunctionIUC2F_New():
  return itkInterpolateImageFunctionIUC2F.New()


def itkInterpolateImageFunctionIUC2D_New():
  return itkInterpolateImageFunctionIUC2D.New()


def itkInterpolateImageFunctionISS2F_New():
  return itkInterpolateImageFunctionISS2F.New()


def itkInterpolateImageFunctionISS2D_New():
  return itkInterpolateImageFunctionISS2D.New()

class itkInterpolateImageFunctionICVF22D(itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D):
    r"""Proxy of C++ itkInterpolateImageFunctionICVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionICVF22D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionICVF22D

        Create a new object of the class itkInterpolateImageFunctionICVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionICVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionICVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionICVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionICVF22D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_swigregister(itkInterpolateImageFunctionICVF22D)
itkInterpolateImageFunctionICVF22D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_cast

class itkInterpolateImageFunctionICVF33D(itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D):
    r"""Proxy of C++ itkInterpolateImageFunctionICVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionICVF33D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionICVF33D

        Create a new object of the class itkInterpolateImageFunctionICVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionICVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionICVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionICVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionICVF33D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_swigregister(itkInterpolateImageFunctionICVF33D)
itkInterpolateImageFunctionICVF33D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_cast

class itkInterpolateImageFunctionID2D(itkImageFunctionBasePython.itkImageFunctionID2DD):
    r"""Proxy of C++ itkInterpolateImageFunctionID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID2D

        Create a new object of the class itkInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionID2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_swigregister(itkInterpolateImageFunctionID2D)
itkInterpolateImageFunctionID2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_cast

class itkInterpolateImageFunctionID2F(itkImageFunctionBasePython.itkImageFunctionID2DF):
    r"""Proxy of C++ itkInterpolateImageFunctionID2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID2F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID2F

        Create a new object of the class itkInterpolateImageFunctionID2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionID2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionID2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionID2F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_swigregister(itkInterpolateImageFunctionID2F)
itkInterpolateImageFunctionID2F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_cast

class itkInterpolateImageFunctionID3D(itkImageFunctionBasePython.itkImageFunctionID3DD):
    r"""Proxy of C++ itkInterpolateImageFunctionID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID3D

        Create a new object of the class itkInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionID3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_swigregister(itkInterpolateImageFunctionID3D)
itkInterpolateImageFunctionID3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_cast

class itkInterpolateImageFunctionID3F(itkImageFunctionBasePython.itkImageFunctionID3DF):
    r"""Proxy of C++ itkInterpolateImageFunctionID3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID3F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID3F

        Create a new object of the class itkInterpolateImageFunctionID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionID3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionID3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionID3F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_swigregister(itkInterpolateImageFunctionID3F)
itkInterpolateImageFunctionID3F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_cast

class itkInterpolateImageFunctionIF2D(itkImageFunctionBasePython.itkImageFunctionIF2DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIF2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2D

        Create a new object of the class itkInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIF2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_swigregister(itkInterpolateImageFunctionIF2D)
itkInterpolateImageFunctionIF2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast

class itkInterpolateImageFunctionIF2F(itkImageFunctionBasePython.itkImageFunctionIF2DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIF2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2F

        Create a new object of the class itkInterpolateImageFunctionIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIF2F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_swigregister(itkInterpolateImageFunctionIF2F)
itkInterpolateImageFunctionIF2F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast

class itkInterpolateImageFunctionIF3D(itkImageFunctionBasePython.itkImageFunctionIF3DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3D

        Create a new object of the class itkInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIF3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_swigregister(itkInterpolateImageFunctionIF3D)
itkInterpolateImageFunctionIF3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast

class itkInterpolateImageFunctionIF3F(itkImageFunctionBasePython.itkImageFunctionIF3DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3F

        Create a new object of the class itkInterpolateImageFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIF3F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_swigregister(itkInterpolateImageFunctionIF3F)
itkInterpolateImageFunctionIF3F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast

class itkInterpolateImageFunctionIRGBAUC2D(itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD):
    r"""Proxy of C++ itkInterpolateImageFunctionIRGBAUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBAUC2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBAUC2D

        Create a new object of the class itkInterpolateImageFunctionIRGBAUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBAUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBAUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBAUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIRGBAUC2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_swigregister(itkInterpolateImageFunctionIRGBAUC2D)
itkInterpolateImageFunctionIRGBAUC2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_cast

class itkInterpolateImageFunctionIRGBAUC3D(itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD):
    r"""Proxy of C++ itkInterpolateImageFunctionIRGBAUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBAUC3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBAUC3D

        Create a new object of the class itkInterpolateImageFunctionIRGBAUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBAUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBAUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBAUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIRGBAUC3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_swigregister(itkInterpolateImageFunctionIRGBAUC3D)
itkInterpolateImageFunctionIRGBAUC3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_cast

class itkInterpolateImageFunctionIRGBUC2D(itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD):
    r"""Proxy of C++ itkInterpolateImageFunctionIRGBUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBUC2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBUC2D

        Create a new object of the class itkInterpolateImageFunctionIRGBUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIRGBUC2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_swigregister(itkInterpolateImageFunctionIRGBUC2D)
itkInterpolateImageFunctionIRGBUC2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_cast

class itkInterpolateImageFunctionIRGBUC3D(itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD):
    r"""Proxy of C++ itkInterpolateImageFunctionIRGBUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBUC3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBUC3D

        Create a new object of the class itkInterpolateImageFunctionIRGBUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIRGBUC3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_swigregister(itkInterpolateImageFunctionIRGBUC3D)
itkInterpolateImageFunctionIRGBUC3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_cast

class itkInterpolateImageFunctionISS2D(itkImageFunctionBasePython.itkImageFunctionISS2DD):
    r"""Proxy of C++ itkInterpolateImageFunctionISS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS2D

        Create a new object of the class itkInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionISS2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_swigregister(itkInterpolateImageFunctionISS2D)
itkInterpolateImageFunctionISS2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_cast

class itkInterpolateImageFunctionISS2F(itkImageFunctionBasePython.itkImageFunctionISS2DF):
    r"""Proxy of C++ itkInterpolateImageFunctionISS2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS2F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS2F

        Create a new object of the class itkInterpolateImageFunctionISS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionISS2F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_swigregister(itkInterpolateImageFunctionISS2F)
itkInterpolateImageFunctionISS2F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_cast

class itkInterpolateImageFunctionISS3D(itkImageFunctionBasePython.itkImageFunctionISS3DD):
    r"""Proxy of C++ itkInterpolateImageFunctionISS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS3D

        Create a new object of the class itkInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionISS3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_swigregister(itkInterpolateImageFunctionISS3D)
itkInterpolateImageFunctionISS3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_cast

class itkInterpolateImageFunctionISS3F(itkImageFunctionBasePython.itkImageFunctionISS3DF):
    r"""Proxy of C++ itkInterpolateImageFunctionISS3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS3F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS3F

        Create a new object of the class itkInterpolateImageFunctionISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionISS3F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_swigregister(itkInterpolateImageFunctionISS3F)
itkInterpolateImageFunctionISS3F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_cast

class itkInterpolateImageFunctionIUC2D(itkImageFunctionBasePython.itkImageFunctionIUC2DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2D

        Create a new object of the class itkInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUC2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_swigregister(itkInterpolateImageFunctionIUC2D)
itkInterpolateImageFunctionIUC2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast

class itkInterpolateImageFunctionIUC2F(itkImageFunctionBasePython.itkImageFunctionIUC2DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIUC2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2F

        Create a new object of the class itkInterpolateImageFunctionIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUC2F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_swigregister(itkInterpolateImageFunctionIUC2F)
itkInterpolateImageFunctionIUC2F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast

class itkInterpolateImageFunctionIUC3D(itkImageFunctionBasePython.itkImageFunctionIUC3DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3D

        Create a new object of the class itkInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUC3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_swigregister(itkInterpolateImageFunctionIUC3D)
itkInterpolateImageFunctionIUC3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast

class itkInterpolateImageFunctionIUC3F(itkImageFunctionBasePython.itkImageFunctionIUC3DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIUC3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3F

        Create a new object of the class itkInterpolateImageFunctionIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUC3F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_swigregister(itkInterpolateImageFunctionIUC3F)
itkInterpolateImageFunctionIUC3F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast

class itkInterpolateImageFunctionIUS2D(itkImageFunctionBasePython.itkImageFunctionIUS2DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIUS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2D

        Create a new object of the class itkInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUS2D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_swigregister(itkInterpolateImageFunctionIUS2D)
itkInterpolateImageFunctionIUS2D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast

class itkInterpolateImageFunctionIUS2F(itkImageFunctionBasePython.itkImageFunctionIUS2DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIUS2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2F

        Create a new object of the class itkInterpolateImageFunctionIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUS2F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_swigregister(itkInterpolateImageFunctionIUS2F)
itkInterpolateImageFunctionIUS2F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast

class itkInterpolateImageFunctionIUS3D(itkImageFunctionBasePython.itkImageFunctionIUS3DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIUS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3D

        Create a new object of the class itkInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUS3D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_swigregister(itkInterpolateImageFunctionIUS3D)
itkInterpolateImageFunctionIUS3D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast

class itkInterpolateImageFunctionIUS3F(itkImageFunctionBasePython.itkImageFunctionIUS3DF):
    r"""Proxy of C++ itkInterpolateImageFunctionIUS3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3F
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3F

        Create a new object of the class itkInterpolateImageFunctionIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIUS3F in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_swigregister(itkInterpolateImageFunctionIUS3F)
itkInterpolateImageFunctionIUS3F_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast

class itkInterpolateImageFunctionIVF22D(itkImageFunctionBasePython.itkImageFunctionIVF22DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIVF22D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIVF22D

        Create a new object of the class itkInterpolateImageFunctionIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIVF22D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_swigregister(itkInterpolateImageFunctionIVF22D)
itkInterpolateImageFunctionIVF22D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_cast

class itkInterpolateImageFunctionIVF33D(itkImageFunctionBasePython.itkImageFunctionIVF33DD):
    r"""Proxy of C++ itkInterpolateImageFunctionIVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetRadius = _swig_new_instance_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_GetRadius)
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIVF33D
    cast = _swig_new_static_method(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIVF33D

        Create a new object of the class itkInterpolateImageFunctionIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFunctionIVF33D in _itkInterpolateImageFunctionPython:
_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_swigregister(itkInterpolateImageFunctionIVF33D)
itkInterpolateImageFunctionIVF33D_cast = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_cast



