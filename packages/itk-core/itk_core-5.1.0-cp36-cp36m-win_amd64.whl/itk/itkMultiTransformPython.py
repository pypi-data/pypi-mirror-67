# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiTransformPython
else:
    import _itkMultiTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMultiTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMultiTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import ITKCommonBasePython
import itkTransformBasePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import vnl_matrix_fixedPython
import itkDiffusionTensor3DPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkOptimizerParametersPython

def itkMultiTransformD33_New():
  return itkMultiTransformD33.New()


def itkMultiTransformD22_New():
  return itkMultiTransformD22.New()

class itkMultiTransformD22(itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkMultiTransformD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    AddTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_AddTransform)
    AppendTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_AppendTransform)
    PrependTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_PrependTransform)
    RemoveTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_RemoveTransform)
    GetFrontTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetFrontTransform)
    GetBackTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetBackTransform)
    GetNthTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetNthTransform)
    GetNthTransformModifiablePointer = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetNthTransformModifiablePointer)
    GetNthTransformConstPointer = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetNthTransformConstPointer)
    GetTransformQueue = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetTransformQueue)
    IsTransformQueueEmpty = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_IsTransformQueueEmpty)
    GetNumberOfTransforms = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetNumberOfTransforms)
    ClearTransformQueue = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_ClearTransformQueue)
    UpdateTransformParameters = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_UpdateTransformParameters)
    GetInverse = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD22_GetInverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformD22
    cast = _swig_new_static_method(_itkMultiTransformPython.itkMultiTransformD22_cast)

    def New(*args, **kargs):
        """New() -> itkMultiTransformD22

        Create a new object of the class itkMultiTransformD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiTransformD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiTransformD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiTransformD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiTransformD22 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformD22_swigregister(itkMultiTransformD22)
itkMultiTransformD22_cast = _itkMultiTransformPython.itkMultiTransformD22_cast

class itkMultiTransformD33(itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkMultiTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    AddTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_AddTransform)
    AppendTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_AppendTransform)
    PrependTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_PrependTransform)
    RemoveTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_RemoveTransform)
    GetFrontTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetFrontTransform)
    GetBackTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetBackTransform)
    GetNthTransform = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetNthTransform)
    GetNthTransformModifiablePointer = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetNthTransformModifiablePointer)
    GetNthTransformConstPointer = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetNthTransformConstPointer)
    GetTransformQueue = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetTransformQueue)
    IsTransformQueueEmpty = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_IsTransformQueueEmpty)
    GetNumberOfTransforms = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetNumberOfTransforms)
    ClearTransformQueue = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_ClearTransformQueue)
    UpdateTransformParameters = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_UpdateTransformParameters)
    GetInverse = _swig_new_instance_method(_itkMultiTransformPython.itkMultiTransformD33_GetInverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformD33
    cast = _swig_new_static_method(_itkMultiTransformPython.itkMultiTransformD33_cast)

    def New(*args, **kargs):
        """New() -> itkMultiTransformD33

        Create a new object of the class itkMultiTransformD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiTransformD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiTransformD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiTransformD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiTransformD33 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformD33_swigregister(itkMultiTransformD33)
itkMultiTransformD33_cast = _itkMultiTransformPython.itkMultiTransformD33_cast



