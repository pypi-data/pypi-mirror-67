# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAnnulusOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAnnulusOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkAnnulusOperatorPython
            return _itkAnnulusOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAnnulusOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAnnulusOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAnnulusOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import ITKCommonBasePython
import itkNeighborhoodOperatorPython
import itkSizePython
import itkNeighborhoodPython
import itkRGBPixelPython
import itkOffsetPython
import itkCovariantVectorPython
class itkAnnulusOperatorD2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    """


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood

    C++ includes: itkAnnulusOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkAnnulusOperatorD2 self)

        This function is
        called to create the operator. The radius of the operator is determine
        automatically. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_CreateOperator(self)


    def SetInnerRadius(self, r: 'double') -> "void":
        """
        SetInnerRadius(itkAnnulusOperatorD2 self, double r)

        Set/Get the inner
        radius of the annulus. Radius is specified in physical units (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInnerRadius(self, r)


    def GetInnerRadius(self) -> "double":
        """GetInnerRadius(itkAnnulusOperatorD2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInnerRadius(self)


    def SetThickness(self, t: 'double') -> "void":
        """
        SetThickness(itkAnnulusOperatorD2 self, double t)

        Set/Get the thickness
        of the annulus. The outer radius of the annulus is defined as r =
        InnerRadius + Thickness. Thickness is specified in physical units
        (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetThickness(self, t)


    def GetThickness(self) -> "double":
        """GetThickness(itkAnnulusOperatorD2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetThickness(self)


    def SetSpacing(self, s: 'itkVectorD2') -> "void":
        """
        SetSpacing(itkAnnulusOperatorD2 self, itkVectorD2 s)

        Set/Get the pixel
        spacings. Setting these ensures the annulus is round in physical
        space. Defaults to 1. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetSpacing(self, s)


    def GetSpacing(self) -> "itkVectorD2 const &":
        """GetSpacing(itkAnnulusOperatorD2 self) -> itkVectorD2"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetSpacing(self)


    def SetNormalize(self, b: 'bool') -> "void":
        """
        SetNormalize(itkAnnulusOperatorD2 self, bool b)

        Set/Get whether kernel
        values are computed automatically or specified manually 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetNormalize(self, b)


    def GetNormalize(self) -> "bool":
        """GetNormalize(itkAnnulusOperatorD2 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetNormalize(self)


    def NormalizeOn(self) -> "void":
        """NormalizeOn(itkAnnulusOperatorD2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOn(self)


    def NormalizeOff(self) -> "void":
        """NormalizeOff(itkAnnulusOperatorD2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOff(self)


    def SetBrightCenter(self, b: 'bool') -> "void":
        """
        SetBrightCenter(itkAnnulusOperatorD2 self, bool b)

        If Normalize is on,
        you define the annulus to have a bright center or a dark center. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetBrightCenter(self, b)


    def GetBrightCenter(self) -> "bool":
        """GetBrightCenter(itkAnnulusOperatorD2 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetBrightCenter(self)


    def BrightCenterOn(self) -> "void":
        """BrightCenterOn(itkAnnulusOperatorD2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOn(self)


    def BrightCenterOff(self) -> "void":
        """BrightCenterOff(itkAnnulusOperatorD2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOff(self)


    def SetInteriorValue(self, v: 'double') -> "void":
        """
        SetInteriorValue(itkAnnulusOperatorD2 self, double v)

        If Normalize is
        off, the interior to annulus, the annulus (region between the two
        circles), and the region exterior to the annulus to be defined
        manually. Defauls are 0, 1, 0 respectively. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInteriorValue(self, v)


    def GetInteriorValue(self) -> "double":
        """GetInteriorValue(itkAnnulusOperatorD2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInteriorValue(self)


    def SetAnnulusValue(self, v: 'double') -> "void":
        """SetAnnulusValue(itkAnnulusOperatorD2 self, double v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetAnnulusValue(self, v)


    def GetAnnulusValue(self) -> "double":
        """GetAnnulusValue(itkAnnulusOperatorD2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetAnnulusValue(self)


    def SetExteriorValue(self, v: 'double') -> "void":
        """SetExteriorValue(itkAnnulusOperatorD2 self, double v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetExteriorValue(self, v)


    def GetExteriorValue(self) -> "double":
        """GetExteriorValue(itkAnnulusOperatorD2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetExteriorValue(self)

    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorD2

    def __init__(self, *args):
        """
        __init__(itkAnnulusOperatorD2 self, itkAnnulusOperatorD2 arg0) -> itkAnnulusOperatorD2
        __init__(itkAnnulusOperatorD2 self) -> itkAnnulusOperatorD2



        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood

        C++ includes: itkAnnulusOperator.h 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorD2_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorD2(*args))
itkAnnulusOperatorD2.CreateOperator = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_CreateOperator, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInnerRadius, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInnerRadius, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetThickness, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetThickness, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetSpacing, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetSpacing, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetNormalize, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetNormalize, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.NormalizeOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOn, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.NormalizeOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOff, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetBrightCenter, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetBrightCenter, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.BrightCenterOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOn, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.BrightCenterOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOff, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInteriorValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInteriorValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetAnnulusValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetAnnulusValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.SetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetExteriorValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2.GetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetExteriorValue, None, itkAnnulusOperatorD2)
itkAnnulusOperatorD2_swigregister = _itkAnnulusOperatorPython.itkAnnulusOperatorD2_swigregister
itkAnnulusOperatorD2_swigregister(itkAnnulusOperatorD2)

class itkAnnulusOperatorD3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    """


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood

    C++ includes: itkAnnulusOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkAnnulusOperatorD3 self)

        This function is
        called to create the operator. The radius of the operator is determine
        automatically. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_CreateOperator(self)


    def SetInnerRadius(self, r: 'double') -> "void":
        """
        SetInnerRadius(itkAnnulusOperatorD3 self, double r)

        Set/Get the inner
        radius of the annulus. Radius is specified in physical units (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInnerRadius(self, r)


    def GetInnerRadius(self) -> "double":
        """GetInnerRadius(itkAnnulusOperatorD3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInnerRadius(self)


    def SetThickness(self, t: 'double') -> "void":
        """
        SetThickness(itkAnnulusOperatorD3 self, double t)

        Set/Get the thickness
        of the annulus. The outer radius of the annulus is defined as r =
        InnerRadius + Thickness. Thickness is specified in physical units
        (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetThickness(self, t)


    def GetThickness(self) -> "double":
        """GetThickness(itkAnnulusOperatorD3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetThickness(self)


    def SetSpacing(self, s: 'itkVectorD3') -> "void":
        """
        SetSpacing(itkAnnulusOperatorD3 self, itkVectorD3 s)

        Set/Get the pixel
        spacings. Setting these ensures the annulus is round in physical
        space. Defaults to 1. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetSpacing(self, s)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkAnnulusOperatorD3 self) -> itkVectorD3"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetSpacing(self)


    def SetNormalize(self, b: 'bool') -> "void":
        """
        SetNormalize(itkAnnulusOperatorD3 self, bool b)

        Set/Get whether kernel
        values are computed automatically or specified manually 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetNormalize(self, b)


    def GetNormalize(self) -> "bool":
        """GetNormalize(itkAnnulusOperatorD3 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetNormalize(self)


    def NormalizeOn(self) -> "void":
        """NormalizeOn(itkAnnulusOperatorD3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOn(self)


    def NormalizeOff(self) -> "void":
        """NormalizeOff(itkAnnulusOperatorD3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOff(self)


    def SetBrightCenter(self, b: 'bool') -> "void":
        """
        SetBrightCenter(itkAnnulusOperatorD3 self, bool b)

        If Normalize is on,
        you define the annulus to have a bright center or a dark center. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetBrightCenter(self, b)


    def GetBrightCenter(self) -> "bool":
        """GetBrightCenter(itkAnnulusOperatorD3 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetBrightCenter(self)


    def BrightCenterOn(self) -> "void":
        """BrightCenterOn(itkAnnulusOperatorD3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOn(self)


    def BrightCenterOff(self) -> "void":
        """BrightCenterOff(itkAnnulusOperatorD3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOff(self)


    def SetInteriorValue(self, v: 'double') -> "void":
        """
        SetInteriorValue(itkAnnulusOperatorD3 self, double v)

        If Normalize is
        off, the interior to annulus, the annulus (region between the two
        circles), and the region exterior to the annulus to be defined
        manually. Defauls are 0, 1, 0 respectively. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInteriorValue(self, v)


    def GetInteriorValue(self) -> "double":
        """GetInteriorValue(itkAnnulusOperatorD3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInteriorValue(self)


    def SetAnnulusValue(self, v: 'double') -> "void":
        """SetAnnulusValue(itkAnnulusOperatorD3 self, double v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetAnnulusValue(self, v)


    def GetAnnulusValue(self) -> "double":
        """GetAnnulusValue(itkAnnulusOperatorD3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetAnnulusValue(self)


    def SetExteriorValue(self, v: 'double') -> "void":
        """SetExteriorValue(itkAnnulusOperatorD3 self, double v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetExteriorValue(self, v)


    def GetExteriorValue(self) -> "double":
        """GetExteriorValue(itkAnnulusOperatorD3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetExteriorValue(self)

    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorD3

    def __init__(self, *args):
        """
        __init__(itkAnnulusOperatorD3 self, itkAnnulusOperatorD3 arg0) -> itkAnnulusOperatorD3
        __init__(itkAnnulusOperatorD3 self) -> itkAnnulusOperatorD3



        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood

        C++ includes: itkAnnulusOperator.h 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorD3_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorD3(*args))
itkAnnulusOperatorD3.CreateOperator = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_CreateOperator, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInnerRadius, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInnerRadius, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetThickness, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetThickness, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetSpacing, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetSpacing, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetNormalize, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetNormalize, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.NormalizeOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOn, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.NormalizeOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOff, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetBrightCenter, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetBrightCenter, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.BrightCenterOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOn, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.BrightCenterOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOff, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInteriorValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInteriorValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetAnnulusValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetAnnulusValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.SetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetExteriorValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3.GetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetExteriorValue, None, itkAnnulusOperatorD3)
itkAnnulusOperatorD3_swigregister = _itkAnnulusOperatorPython.itkAnnulusOperatorD3_swigregister
itkAnnulusOperatorD3_swigregister(itkAnnulusOperatorD3)

class itkAnnulusOperatorF2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    """


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood

    C++ includes: itkAnnulusOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkAnnulusOperatorF2 self)

        This function is
        called to create the operator. The radius of the operator is determine
        automatically. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_CreateOperator(self)


    def SetInnerRadius(self, r: 'double') -> "void":
        """
        SetInnerRadius(itkAnnulusOperatorF2 self, double r)

        Set/Get the inner
        radius of the annulus. Radius is specified in physical units (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInnerRadius(self, r)


    def GetInnerRadius(self) -> "double":
        """GetInnerRadius(itkAnnulusOperatorF2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInnerRadius(self)


    def SetThickness(self, t: 'double') -> "void":
        """
        SetThickness(itkAnnulusOperatorF2 self, double t)

        Set/Get the thickness
        of the annulus. The outer radius of the annulus is defined as r =
        InnerRadius + Thickness. Thickness is specified in physical units
        (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetThickness(self, t)


    def GetThickness(self) -> "double":
        """GetThickness(itkAnnulusOperatorF2 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetThickness(self)


    def SetSpacing(self, s: 'itkVectorD2') -> "void":
        """
        SetSpacing(itkAnnulusOperatorF2 self, itkVectorD2 s)

        Set/Get the pixel
        spacings. Setting these ensures the annulus is round in physical
        space. Defaults to 1. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetSpacing(self, s)


    def GetSpacing(self) -> "itkVectorD2 const &":
        """GetSpacing(itkAnnulusOperatorF2 self) -> itkVectorD2"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetSpacing(self)


    def SetNormalize(self, b: 'bool') -> "void":
        """
        SetNormalize(itkAnnulusOperatorF2 self, bool b)

        Set/Get whether kernel
        values are computed automatically or specified manually 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetNormalize(self, b)


    def GetNormalize(self) -> "bool":
        """GetNormalize(itkAnnulusOperatorF2 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetNormalize(self)


    def NormalizeOn(self) -> "void":
        """NormalizeOn(itkAnnulusOperatorF2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOn(self)


    def NormalizeOff(self) -> "void":
        """NormalizeOff(itkAnnulusOperatorF2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOff(self)


    def SetBrightCenter(self, b: 'bool') -> "void":
        """
        SetBrightCenter(itkAnnulusOperatorF2 self, bool b)

        If Normalize is on,
        you define the annulus to have a bright center or a dark center. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetBrightCenter(self, b)


    def GetBrightCenter(self) -> "bool":
        """GetBrightCenter(itkAnnulusOperatorF2 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetBrightCenter(self)


    def BrightCenterOn(self) -> "void":
        """BrightCenterOn(itkAnnulusOperatorF2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOn(self)


    def BrightCenterOff(self) -> "void":
        """BrightCenterOff(itkAnnulusOperatorF2 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOff(self)


    def SetInteriorValue(self, v: 'float') -> "void":
        """
        SetInteriorValue(itkAnnulusOperatorF2 self, float v)

        If Normalize is
        off, the interior to annulus, the annulus (region between the two
        circles), and the region exterior to the annulus to be defined
        manually. Defauls are 0, 1, 0 respectively. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInteriorValue(self, v)


    def GetInteriorValue(self) -> "float":
        """GetInteriorValue(itkAnnulusOperatorF2 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInteriorValue(self)


    def SetAnnulusValue(self, v: 'float') -> "void":
        """SetAnnulusValue(itkAnnulusOperatorF2 self, float v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetAnnulusValue(self, v)


    def GetAnnulusValue(self) -> "float":
        """GetAnnulusValue(itkAnnulusOperatorF2 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetAnnulusValue(self)


    def SetExteriorValue(self, v: 'float') -> "void":
        """SetExteriorValue(itkAnnulusOperatorF2 self, float v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetExteriorValue(self, v)


    def GetExteriorValue(self) -> "float":
        """GetExteriorValue(itkAnnulusOperatorF2 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetExteriorValue(self)

    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorF2

    def __init__(self, *args):
        """
        __init__(itkAnnulusOperatorF2 self, itkAnnulusOperatorF2 arg0) -> itkAnnulusOperatorF2
        __init__(itkAnnulusOperatorF2 self) -> itkAnnulusOperatorF2



        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood

        C++ includes: itkAnnulusOperator.h 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorF2_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorF2(*args))
itkAnnulusOperatorF2.CreateOperator = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_CreateOperator, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInnerRadius, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInnerRadius, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetThickness, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetThickness, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetSpacing, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetSpacing, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetNormalize, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetNormalize, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.NormalizeOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOn, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.NormalizeOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOff, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetBrightCenter, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetBrightCenter, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.BrightCenterOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOn, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.BrightCenterOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOff, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInteriorValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInteriorValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetAnnulusValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetAnnulusValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.SetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetExteriorValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2.GetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetExteriorValue, None, itkAnnulusOperatorF2)
itkAnnulusOperatorF2_swigregister = _itkAnnulusOperatorPython.itkAnnulusOperatorF2_swigregister
itkAnnulusOperatorF2_swigregister(itkAnnulusOperatorF2)

class itkAnnulusOperatorF3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    """


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood

    C++ includes: itkAnnulusOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkAnnulusOperatorF3 self)

        This function is
        called to create the operator. The radius of the operator is determine
        automatically. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_CreateOperator(self)


    def SetInnerRadius(self, r: 'double') -> "void":
        """
        SetInnerRadius(itkAnnulusOperatorF3 self, double r)

        Set/Get the inner
        radius of the annulus. Radius is specified in physical units (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInnerRadius(self, r)


    def GetInnerRadius(self) -> "double":
        """GetInnerRadius(itkAnnulusOperatorF3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInnerRadius(self)


    def SetThickness(self, t: 'double') -> "void":
        """
        SetThickness(itkAnnulusOperatorF3 self, double t)

        Set/Get the thickness
        of the annulus. The outer radius of the annulus is defined as r =
        InnerRadius + Thickness. Thickness is specified in physical units
        (mm). 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetThickness(self, t)


    def GetThickness(self) -> "double":
        """GetThickness(itkAnnulusOperatorF3 self) -> double"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetThickness(self)


    def SetSpacing(self, s: 'itkVectorD3') -> "void":
        """
        SetSpacing(itkAnnulusOperatorF3 self, itkVectorD3 s)

        Set/Get the pixel
        spacings. Setting these ensures the annulus is round in physical
        space. Defaults to 1. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetSpacing(self, s)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkAnnulusOperatorF3 self) -> itkVectorD3"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetSpacing(self)


    def SetNormalize(self, b: 'bool') -> "void":
        """
        SetNormalize(itkAnnulusOperatorF3 self, bool b)

        Set/Get whether kernel
        values are computed automatically or specified manually 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetNormalize(self, b)


    def GetNormalize(self) -> "bool":
        """GetNormalize(itkAnnulusOperatorF3 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetNormalize(self)


    def NormalizeOn(self) -> "void":
        """NormalizeOn(itkAnnulusOperatorF3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOn(self)


    def NormalizeOff(self) -> "void":
        """NormalizeOff(itkAnnulusOperatorF3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOff(self)


    def SetBrightCenter(self, b: 'bool') -> "void":
        """
        SetBrightCenter(itkAnnulusOperatorF3 self, bool b)

        If Normalize is on,
        you define the annulus to have a bright center or a dark center. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetBrightCenter(self, b)


    def GetBrightCenter(self) -> "bool":
        """GetBrightCenter(itkAnnulusOperatorF3 self) -> bool"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetBrightCenter(self)


    def BrightCenterOn(self) -> "void":
        """BrightCenterOn(itkAnnulusOperatorF3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOn(self)


    def BrightCenterOff(self) -> "void":
        """BrightCenterOff(itkAnnulusOperatorF3 self)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOff(self)


    def SetInteriorValue(self, v: 'float') -> "void":
        """
        SetInteriorValue(itkAnnulusOperatorF3 self, float v)

        If Normalize is
        off, the interior to annulus, the annulus (region between the two
        circles), and the region exterior to the annulus to be defined
        manually. Defauls are 0, 1, 0 respectively. 
        """
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInteriorValue(self, v)


    def GetInteriorValue(self) -> "float":
        """GetInteriorValue(itkAnnulusOperatorF3 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInteriorValue(self)


    def SetAnnulusValue(self, v: 'float') -> "void":
        """SetAnnulusValue(itkAnnulusOperatorF3 self, float v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetAnnulusValue(self, v)


    def GetAnnulusValue(self) -> "float":
        """GetAnnulusValue(itkAnnulusOperatorF3 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetAnnulusValue(self)


    def SetExteriorValue(self, v: 'float') -> "void":
        """SetExteriorValue(itkAnnulusOperatorF3 self, float v)"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetExteriorValue(self, v)


    def GetExteriorValue(self) -> "float":
        """GetExteriorValue(itkAnnulusOperatorF3 self) -> float"""
        return _itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetExteriorValue(self)

    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorF3

    def __init__(self, *args):
        """
        __init__(itkAnnulusOperatorF3 self, itkAnnulusOperatorF3 arg0) -> itkAnnulusOperatorF3
        __init__(itkAnnulusOperatorF3 self) -> itkAnnulusOperatorF3



        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood

        C++ includes: itkAnnulusOperator.h 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorF3_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorF3(*args))
itkAnnulusOperatorF3.CreateOperator = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_CreateOperator, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInnerRadius, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetInnerRadius = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInnerRadius, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetThickness, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetThickness = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetThickness, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetSpacing, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetSpacing = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetSpacing, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetNormalize, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetNormalize = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetNormalize, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.NormalizeOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOn, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.NormalizeOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOff, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetBrightCenter, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetBrightCenter = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetBrightCenter, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.BrightCenterOn = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOn, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.BrightCenterOff = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOff, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInteriorValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetInteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInteriorValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetAnnulusValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetAnnulusValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetAnnulusValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.SetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetExteriorValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3.GetExteriorValue = new_instancemethod(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetExteriorValue, None, itkAnnulusOperatorF3)
itkAnnulusOperatorF3_swigregister = _itkAnnulusOperatorPython.itkAnnulusOperatorF3_swigregister
itkAnnulusOperatorF3_swigregister(itkAnnulusOperatorF3)



