# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTriangleMeshToBinaryImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTriangleMeshToBinaryImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTriangleMeshToBinaryImageFilterPython
            return _itkTriangleMeshToBinaryImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTriangleMeshToBinaryImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTriangleMeshToBinaryImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTriangleMeshToBinaryImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkMeshBasePython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkMapContainerPython
import itkPointSetPython
import itkArrayPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourceCommonPython

def itkTriangleMeshToBinaryImageFilterMD3ID3_New():
  return itkTriangleMeshToBinaryImageFilterMD3ID3.New()


def itkTriangleMeshToBinaryImageFilterMF3IF3_New():
  return itkTriangleMeshToBinaryImageFilterMF3IF3.New()


def itkTriangleMeshToBinaryImageFilterMUS3IUS3_New():
  return itkTriangleMeshToBinaryImageFilterMUS3IUS3.New()


def itkTriangleMeshToBinaryImageFilterMUC3IUC3_New():
  return itkTriangleMeshToBinaryImageFilterMUC3IUC3.New()


def itkTriangleMeshToBinaryImageFilterMSS3ISS3_New():
  return itkTriangleMeshToBinaryImageFilterMSS3ISS3.New()

class itkPoint1D(object):
    """Proxy of C++ itkPoint1D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkPoint1D self) -> itkPoint1D
        __init__(itkPoint1D self, double const p, int const s) -> itkPoint1D
        __init__(itkPoint1D self, itkPoint1D point) -> itkPoint1D
        """
        _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_swiginit(self, _itkTriangleMeshToBinaryImageFilterPython.new_itkPoint1D(*args))

    def getX(self) -> "double":
        """getX(itkPoint1D self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getX(self)


    def getSign(self) -> "int":
        """getSign(itkPoint1D self) -> int"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getSign(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkPoint1D
itkPoint1D.getX = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getX, None, itkPoint1D)
itkPoint1D.getSign = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getSign, None, itkPoint1D)
itkPoint1D_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_swigregister
itkPoint1D_swigregister(itkPoint1D)

class itkTriangleMeshToBinaryImageFilterMD3ID3(itkImageSourcePython.itkImageSourceID3):
    """


    3D Rasterization algorithm Courtesy of Dr David Gobbi of Atamai Inc.

    Leila Baghdadi, MICe, Hospital for Sick Childern, Toronto, Canada,

    C++ includes: itkTriangleMeshToBinaryImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer":
        """__New_orig__() -> itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer":
        """Clone(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_Clone(self)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkVectorD3 _arg)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMD3ID3 self, double const * spacing)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMD3ID3 self, float const * spacing)

        Spacing (size of a
        pixel) of the output image. The spacing is the geometric distance
        between image samples. It is stored internally as double, but may be
        set from float. See:  GetSpacing() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSpacing(self, *args)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSpacing(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkMatrixD33 _arg)

        The Direction is a
        matix of direction cosines that specify the direction between samples.

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetDirection(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetDirection(self)


    def SetInsideValue(self, _arg: 'double const') -> "void":
        """
        SetInsideValue(itkTriangleMeshToBinaryImageFilterMD3ID3 self, double const _arg)

        Set/Get the value
        for pixels inside the spatial object. By default, this filter will
        return an image If this "inside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInsideValue(self, _arg)


    def GetInsideValue(self) -> "double":
        """GetInsideValue(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInsideValue(self)


    def SetOutsideValue(self, _arg: 'double const') -> "void":
        """
        SetOutsideValue(itkTriangleMeshToBinaryImageFilterMD3ID3 self, double const _arg)

        Set/Get the value
        for pixels outside the spatial object. By default, this filter will
        return an image If this "outside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOutsideValue(self, _arg)


    def GetOutsideValue(self) -> "double":
        """GetOutsideValue(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOutsideValue(self)


    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkPointD3 _arg)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMD3ID3 self, double const * origin)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMD3ID3 self, float const * origin)

        The origin of the output
        image. The origin is the geometric coordinates of the index
        (0,0,...,0). It is stored internally as double but may be set from
        float. See:  GetOrigin() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOrigin(self, *args)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOrigin(self)


    def SetIndex(self, _arg: 'itkIndex3') -> "void":
        """
        SetIndex(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkIndex3 _arg)

        Set/Get Index 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetIndex(self, _arg)


    def GetIndex(self) -> "itkIndex3":
        """GetIndex(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetIndex(self)


    def SetSize(self, _arg: 'itkSize3') -> "void":
        """
        SetSize(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkSize3 _arg)

        Set/Get Size 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSize(self, _arg)


    def GetSize(self) -> "itkSize3":
        """GetSize(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSize(self)


    def SetInput(self, input: 'itkMeshD3') -> "void":
        """SetInput(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkMeshD3 input)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInput(self, input)


    def SetInfoImage(self, InfoImage: 'itkImageD3') -> "void":
        """SetInfoImage(itkTriangleMeshToBinaryImageFilterMD3ID3 self, itkImageD3 InfoImage)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInfoImage(self, InfoImage)


    def GetInput(self, *args) -> "itkMeshD3 *":
        """
        GetInput(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> itkMeshD3
        GetInput(itkTriangleMeshToBinaryImageFilterMD3ID3 self, unsigned int idx) -> itkMeshD3

        Get the mesh input of this
        process object. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInput(self, *args)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """SetTolerance(itkTriangleMeshToBinaryImageFilterMD3ID3 self, double const _arg)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkTriangleMeshToBinaryImageFilterMD3ID3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetTolerance(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMD3ID3

    def cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMD3ID3 *":
        """cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMD3ID3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMD3ID3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMD3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMD3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMD3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleMeshToBinaryImageFilterMD3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleMeshToBinaryImageFilterMD3ID3.Clone = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_Clone, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSpacing, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSpacing, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetDirection, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetDirection, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInsideValue, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInsideValue, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOrigin, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOrigin, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetIndex, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetIndex, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSize, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSize, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInput, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetInfoImage = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInfoImage, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInput, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.SetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetTolerance, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3.GetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetTolerance, None, itkTriangleMeshToBinaryImageFilterMD3ID3)
itkTriangleMeshToBinaryImageFilterMD3ID3_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_swigregister
itkTriangleMeshToBinaryImageFilterMD3ID3_swigregister(itkTriangleMeshToBinaryImageFilterMD3ID3)

def itkTriangleMeshToBinaryImageFilterMD3ID3___New_orig__() -> "itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer":
    """itkTriangleMeshToBinaryImageFilterMD3ID3___New_orig__() -> itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3___New_orig__()

def itkTriangleMeshToBinaryImageFilterMD3ID3_cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMD3ID3 *":
    """itkTriangleMeshToBinaryImageFilterMD3ID3_cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMD3ID3"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_cast(obj)

class itkTriangleMeshToBinaryImageFilterMF3IF3(itkImageSourcePython.itkImageSourceIF3):
    """


    3D Rasterization algorithm Courtesy of Dr David Gobbi of Atamai Inc.

    Leila Baghdadi, MICe, Hospital for Sick Childern, Toronto, Canada,

    C++ includes: itkTriangleMeshToBinaryImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer":
        """__New_orig__() -> itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer":
        """Clone(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_Clone(self)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkVectorD3 _arg)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMF3IF3 self, double const * spacing)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMF3IF3 self, float const * spacing)

        Spacing (size of a
        pixel) of the output image. The spacing is the geometric distance
        between image samples. It is stored internally as double, but may be
        set from float. See:  GetSpacing() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSpacing(self, *args)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSpacing(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkMatrixD33 _arg)

        The Direction is a
        matix of direction cosines that specify the direction between samples.

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetDirection(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetDirection(self)


    def SetInsideValue(self, _arg: 'float const') -> "void":
        """
        SetInsideValue(itkTriangleMeshToBinaryImageFilterMF3IF3 self, float const _arg)

        Set/Get the value
        for pixels inside the spatial object. By default, this filter will
        return an image If this "inside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInsideValue(self, _arg)


    def GetInsideValue(self) -> "float":
        """GetInsideValue(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> float"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInsideValue(self)


    def SetOutsideValue(self, _arg: 'float const') -> "void":
        """
        SetOutsideValue(itkTriangleMeshToBinaryImageFilterMF3IF3 self, float const _arg)

        Set/Get the value
        for pixels outside the spatial object. By default, this filter will
        return an image If this "outside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOutsideValue(self, _arg)


    def GetOutsideValue(self) -> "float":
        """GetOutsideValue(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> float"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOutsideValue(self)


    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkPointD3 _arg)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMF3IF3 self, double const * origin)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMF3IF3 self, float const * origin)

        The origin of the output
        image. The origin is the geometric coordinates of the index
        (0,0,...,0). It is stored internally as double but may be set from
        float. See:  GetOrigin() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOrigin(self, *args)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOrigin(self)


    def SetIndex(self, _arg: 'itkIndex3') -> "void":
        """
        SetIndex(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkIndex3 _arg)

        Set/Get Index 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetIndex(self, _arg)


    def GetIndex(self) -> "itkIndex3":
        """GetIndex(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetIndex(self)


    def SetSize(self, _arg: 'itkSize3') -> "void":
        """
        SetSize(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkSize3 _arg)

        Set/Get Size 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSize(self, _arg)


    def GetSize(self) -> "itkSize3":
        """GetSize(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSize(self)


    def SetInput(self, input: 'itkMeshF3') -> "void":
        """SetInput(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkMeshF3 input)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInput(self, input)


    def SetInfoImage(self, InfoImage: 'itkImageF3') -> "void":
        """SetInfoImage(itkTriangleMeshToBinaryImageFilterMF3IF3 self, itkImageF3 InfoImage)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInfoImage(self, InfoImage)


    def GetInput(self, *args) -> "itkMeshF3 *":
        """
        GetInput(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> itkMeshF3
        GetInput(itkTriangleMeshToBinaryImageFilterMF3IF3 self, unsigned int idx) -> itkMeshF3

        Get the mesh input of this
        process object. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInput(self, *args)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """SetTolerance(itkTriangleMeshToBinaryImageFilterMF3IF3 self, double const _arg)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkTriangleMeshToBinaryImageFilterMF3IF3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetTolerance(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMF3IF3

    def cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMF3IF3 *":
        """cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMF3IF3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMF3IF3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleMeshToBinaryImageFilterMF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleMeshToBinaryImageFilterMF3IF3.Clone = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_Clone, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSpacing, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSpacing, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetDirection, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetDirection, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInsideValue, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInsideValue, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOrigin, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOrigin, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetIndex, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetIndex, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSize, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSize, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInput, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetInfoImage = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInfoImage, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInput, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.SetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetTolerance, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3.GetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetTolerance, None, itkTriangleMeshToBinaryImageFilterMF3IF3)
itkTriangleMeshToBinaryImageFilterMF3IF3_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_swigregister
itkTriangleMeshToBinaryImageFilterMF3IF3_swigregister(itkTriangleMeshToBinaryImageFilterMF3IF3)

def itkTriangleMeshToBinaryImageFilterMF3IF3___New_orig__() -> "itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer":
    """itkTriangleMeshToBinaryImageFilterMF3IF3___New_orig__() -> itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3___New_orig__()

def itkTriangleMeshToBinaryImageFilterMF3IF3_cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMF3IF3 *":
    """itkTriangleMeshToBinaryImageFilterMF3IF3_cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMF3IF3"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_cast(obj)

class itkTriangleMeshToBinaryImageFilterMSS3ISS3(itkImageSourcePython.itkImageSourceISS3):
    """


    3D Rasterization algorithm Courtesy of Dr David Gobbi of Atamai Inc.

    Leila Baghdadi, MICe, Hospital for Sick Childern, Toronto, Canada,

    C++ includes: itkTriangleMeshToBinaryImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer":
        """__New_orig__() -> itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer":
        """Clone(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_Clone(self)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkVectorD3 _arg)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, double const * spacing)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, float const * spacing)

        Spacing (size of a
        pixel) of the output image. The spacing is the geometric distance
        between image samples. It is stored internally as double, but may be
        set from float. See:  GetSpacing() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSpacing(self, *args)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSpacing(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkMatrixD33 _arg)

        The Direction is a
        matix of direction cosines that specify the direction between samples.

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetDirection(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetDirection(self)


    def SetInsideValue(self, _arg: 'short const') -> "void":
        """
        SetInsideValue(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, short const _arg)

        Set/Get the value
        for pixels inside the spatial object. By default, this filter will
        return an image If this "inside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInsideValue(self, _arg)


    def GetInsideValue(self) -> "short":
        """GetInsideValue(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInsideValue(self)


    def SetOutsideValue(self, _arg: 'short const') -> "void":
        """
        SetOutsideValue(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, short const _arg)

        Set/Get the value
        for pixels outside the spatial object. By default, this filter will
        return an image If this "outside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOutsideValue(self, _arg)


    def GetOutsideValue(self) -> "short":
        """GetOutsideValue(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOutsideValue(self)


    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkPointD3 _arg)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, double const * origin)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, float const * origin)

        The origin of the output
        image. The origin is the geometric coordinates of the index
        (0,0,...,0). It is stored internally as double but may be set from
        float. See:  GetOrigin() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOrigin(self, *args)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOrigin(self)


    def SetIndex(self, _arg: 'itkIndex3') -> "void":
        """
        SetIndex(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkIndex3 _arg)

        Set/Get Index 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetIndex(self, _arg)


    def GetIndex(self) -> "itkIndex3":
        """GetIndex(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetIndex(self)


    def SetSize(self, _arg: 'itkSize3') -> "void":
        """
        SetSize(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkSize3 _arg)

        Set/Get Size 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSize(self, _arg)


    def GetSize(self) -> "itkSize3":
        """GetSize(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSize(self)


    def SetInput(self, input: 'itkMeshSS3') -> "void":
        """SetInput(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkMeshSS3 input)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInput(self, input)


    def SetInfoImage(self, InfoImage: 'itkImageSS3') -> "void":
        """SetInfoImage(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, itkImageSS3 InfoImage)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInfoImage(self, InfoImage)


    def GetInput(self, *args) -> "itkMeshSS3 *":
        """
        GetInput(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> itkMeshSS3
        GetInput(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, unsigned int idx) -> itkMeshSS3

        Get the mesh input of this
        process object. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInput(self, *args)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """SetTolerance(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self, double const _arg)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkTriangleMeshToBinaryImageFilterMSS3ISS3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetTolerance(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMSS3ISS3

    def cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMSS3ISS3 *":
        """cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMSS3ISS3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMSS3ISS3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMSS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMSS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMSS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleMeshToBinaryImageFilterMSS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleMeshToBinaryImageFilterMSS3ISS3.Clone = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_Clone, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSpacing, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSpacing, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetDirection, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetDirection, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInsideValue, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInsideValue, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOrigin, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOrigin, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetIndex, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetIndex, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSize, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSize, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInput, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetInfoImage = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInfoImage, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInput, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.SetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetTolerance, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3.GetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetTolerance, None, itkTriangleMeshToBinaryImageFilterMSS3ISS3)
itkTriangleMeshToBinaryImageFilterMSS3ISS3_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_swigregister
itkTriangleMeshToBinaryImageFilterMSS3ISS3_swigregister(itkTriangleMeshToBinaryImageFilterMSS3ISS3)

def itkTriangleMeshToBinaryImageFilterMSS3ISS3___New_orig__() -> "itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer":
    """itkTriangleMeshToBinaryImageFilterMSS3ISS3___New_orig__() -> itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3___New_orig__()

def itkTriangleMeshToBinaryImageFilterMSS3ISS3_cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMSS3ISS3 *":
    """itkTriangleMeshToBinaryImageFilterMSS3ISS3_cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMSS3ISS3"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_cast(obj)

class itkTriangleMeshToBinaryImageFilterMUC3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    """


    3D Rasterization algorithm Courtesy of Dr David Gobbi of Atamai Inc.

    Leila Baghdadi, MICe, Hospital for Sick Childern, Toronto, Canada,

    C++ includes: itkTriangleMeshToBinaryImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer":
        """__New_orig__() -> itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer":
        """Clone(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_Clone(self)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkVectorD3 _arg)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, double const * spacing)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, float const * spacing)

        Spacing (size of a
        pixel) of the output image. The spacing is the geometric distance
        between image samples. It is stored internally as double, but may be
        set from float. See:  GetSpacing() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSpacing(self, *args)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSpacing(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkMatrixD33 _arg)

        The Direction is a
        matix of direction cosines that specify the direction between samples.

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetDirection(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetDirection(self)


    def SetInsideValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetInsideValue(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, unsigned char const _arg)

        Set/Get the value
        for pixels inside the spatial object. By default, this filter will
        return an image If this "inside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInsideValue(self, _arg)


    def GetInsideValue(self) -> "unsigned char":
        """GetInsideValue(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> unsigned char"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInsideValue(self)


    def SetOutsideValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetOutsideValue(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, unsigned char const _arg)

        Set/Get the value
        for pixels outside the spatial object. By default, this filter will
        return an image If this "outside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOutsideValue(self, _arg)


    def GetOutsideValue(self) -> "unsigned char":
        """GetOutsideValue(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> unsigned char"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOutsideValue(self)


    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkPointD3 _arg)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, double const * origin)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, float const * origin)

        The origin of the output
        image. The origin is the geometric coordinates of the index
        (0,0,...,0). It is stored internally as double but may be set from
        float. See:  GetOrigin() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOrigin(self, *args)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOrigin(self)


    def SetIndex(self, _arg: 'itkIndex3') -> "void":
        """
        SetIndex(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkIndex3 _arg)

        Set/Get Index 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetIndex(self, _arg)


    def GetIndex(self) -> "itkIndex3":
        """GetIndex(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetIndex(self)


    def SetSize(self, _arg: 'itkSize3') -> "void":
        """
        SetSize(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkSize3 _arg)

        Set/Get Size 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSize(self, _arg)


    def GetSize(self) -> "itkSize3":
        """GetSize(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSize(self)


    def SetInput(self, input: 'itkMeshUC3') -> "void":
        """SetInput(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkMeshUC3 input)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInput(self, input)


    def SetInfoImage(self, InfoImage: 'itkImageUC3') -> "void":
        """SetInfoImage(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, itkImageUC3 InfoImage)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInfoImage(self, InfoImage)


    def GetInput(self, *args) -> "itkMeshUC3 *":
        """
        GetInput(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> itkMeshUC3
        GetInput(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, unsigned int idx) -> itkMeshUC3

        Get the mesh input of this
        process object. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInput(self, *args)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """SetTolerance(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self, double const _arg)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkTriangleMeshToBinaryImageFilterMUC3IUC3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetTolerance(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMUC3IUC3 *":
        """cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMUC3IUC3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMUC3IUC3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleMeshToBinaryImageFilterMUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleMeshToBinaryImageFilterMUC3IUC3.Clone = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_Clone, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSpacing, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSpacing, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetDirection, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetDirection, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInsideValue, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInsideValue, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOrigin, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOrigin, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetIndex, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetIndex, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSize, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSize, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInput, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetInfoImage = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInfoImage, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInput, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.SetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetTolerance, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3.GetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetTolerance, None, itkTriangleMeshToBinaryImageFilterMUC3IUC3)
itkTriangleMeshToBinaryImageFilterMUC3IUC3_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_swigregister
itkTriangleMeshToBinaryImageFilterMUC3IUC3_swigregister(itkTriangleMeshToBinaryImageFilterMUC3IUC3)

def itkTriangleMeshToBinaryImageFilterMUC3IUC3___New_orig__() -> "itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer":
    """itkTriangleMeshToBinaryImageFilterMUC3IUC3___New_orig__() -> itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3___New_orig__()

def itkTriangleMeshToBinaryImageFilterMUC3IUC3_cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMUC3IUC3 *":
    """itkTriangleMeshToBinaryImageFilterMUC3IUC3_cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMUC3IUC3"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_cast(obj)

class itkTriangleMeshToBinaryImageFilterMUS3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    """


    3D Rasterization algorithm Courtesy of Dr David Gobbi of Atamai Inc.

    Leila Baghdadi, MICe, Hospital for Sick Childern, Toronto, Canada,

    C++ includes: itkTriangleMeshToBinaryImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer":
        """__New_orig__() -> itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer":
        """Clone(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_Clone(self)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkVectorD3 _arg)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, double const * spacing)
        SetSpacing(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, float const * spacing)

        Spacing (size of a
        pixel) of the output image. The spacing is the geometric distance
        between image samples. It is stored internally as double, but may be
        set from float. See:  GetSpacing() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSpacing(self, *args)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSpacing(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkMatrixD33 _arg)

        The Direction is a
        matix of direction cosines that specify the direction between samples.

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetDirection(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetDirection(self)


    def SetInsideValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetInsideValue(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, unsigned short const _arg)

        Set/Get the value
        for pixels inside the spatial object. By default, this filter will
        return an image If this "inside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInsideValue(self, _arg)


    def GetInsideValue(self) -> "unsigned short":
        """GetInsideValue(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> unsigned short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInsideValue(self)


    def SetOutsideValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetOutsideValue(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, unsigned short const _arg)

        Set/Get the value
        for pixels outside the spatial object. By default, this filter will
        return an image If this "outside" value is changed to a non-null
        value, the output produced by this filter will be a mask with
        inside/outside values specified by the user. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOutsideValue(self, _arg)


    def GetOutsideValue(self) -> "unsigned short":
        """GetOutsideValue(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> unsigned short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOutsideValue(self)


    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkPointD3 _arg)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, double const * origin)
        SetOrigin(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, float const * origin)

        The origin of the output
        image. The origin is the geometric coordinates of the index
        (0,0,...,0). It is stored internally as double but may be set from
        float. See:  GetOrigin() 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOrigin(self, *args)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOrigin(self)


    def SetIndex(self, _arg: 'itkIndex3') -> "void":
        """
        SetIndex(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkIndex3 _arg)

        Set/Get Index 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetIndex(self, _arg)


    def GetIndex(self) -> "itkIndex3":
        """GetIndex(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetIndex(self)


    def SetSize(self, _arg: 'itkSize3') -> "void":
        """
        SetSize(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkSize3 _arg)

        Set/Get Size 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSize(self, _arg)


    def GetSize(self) -> "itkSize3":
        """GetSize(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSize(self)


    def SetInput(self, input: 'itkMeshUS3') -> "void":
        """SetInput(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkMeshUS3 input)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInput(self, input)


    def SetInfoImage(self, InfoImage: 'itkImageUS3') -> "void":
        """SetInfoImage(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, itkImageUS3 InfoImage)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInfoImage(self, InfoImage)


    def GetInput(self, *args) -> "itkMeshUS3 *":
        """
        GetInput(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> itkMeshUS3
        GetInput(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, unsigned int idx) -> itkMeshUS3

        Get the mesh input of this
        process object. 
        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInput(self, *args)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """SetTolerance(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self, double const _arg)"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkTriangleMeshToBinaryImageFilterMUS3IUS3 self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetTolerance(self)

    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMUS3IUS3 *":
        """cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMUS3IUS3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMUS3IUS3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleMeshToBinaryImageFilterMUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleMeshToBinaryImageFilterMUS3IUS3.Clone = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_Clone, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSpacing, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetSpacing = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSpacing, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetDirection, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetDirection = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetDirection, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInsideValue, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetInsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInsideValue, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetOutsideValue = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOutsideValue, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOrigin, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetOrigin = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOrigin, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetIndex, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetIndex = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetIndex, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSize, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetSize = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSize, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInput, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetInfoImage = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInfoImage, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetInput = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInput, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.SetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetTolerance, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3.GetTolerance = new_instancemethod(_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetTolerance, None, itkTriangleMeshToBinaryImageFilterMUS3IUS3)
itkTriangleMeshToBinaryImageFilterMUS3IUS3_swigregister = _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_swigregister
itkTriangleMeshToBinaryImageFilterMUS3IUS3_swigregister(itkTriangleMeshToBinaryImageFilterMUS3IUS3)

def itkTriangleMeshToBinaryImageFilterMUS3IUS3___New_orig__() -> "itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer":
    """itkTriangleMeshToBinaryImageFilterMUS3IUS3___New_orig__() -> itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3___New_orig__()

def itkTriangleMeshToBinaryImageFilterMUS3IUS3_cast(obj: 'itkLightObject') -> "itkTriangleMeshToBinaryImageFilterMUS3IUS3 *":
    """itkTriangleMeshToBinaryImageFilterMUS3IUS3_cast(itkLightObject obj) -> itkTriangleMeshToBinaryImageFilterMUS3IUS3"""
    return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def triangle_mesh_to_binary_image_filter(*args, **kwargs):
    """Procedural interface for TriangleMeshToBinaryImageFilter"""
    import itk
    instance = itk.TriangleMeshToBinaryImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def triangle_mesh_to_binary_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TriangleMeshToBinaryImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TriangleMeshToBinaryImageFilter.values()[0]
    else:
        filter_object = itk.TriangleMeshToBinaryImageFilter

    triangle_mesh_to_binary_image_filter.__doc__ = filter_object.__doc__
    triangle_mesh_to_binary_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    triangle_mesh_to_binary_image_filter.__doc__ += "Available Keyword Arguments:\n"
    triangle_mesh_to_binary_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



