# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLaplacianOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLaplacianOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkLaplacianOperatorPython
            return _itkLaplacianOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLaplacianOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLaplacianOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLaplacianOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkNeighborhoodOperatorPython
import itkSizePython
import itkNeighborhoodPython
import itkRGBPixelPython
import itkFixedArrayPython
import itkOffsetPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
class itkLaplacianOperatorD2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    """


    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel.

    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel. The LaplacianOperator's coefficients are a tightest-fitting
    convolution kernel.

    For example, the simplest Laplacian Operator for 2D has the form:

    The LaplacianOperator is a non-directional NeighborhoodOperator that
    should be applied to a Neighborhood or NeighborhoodIterator using an
    inner product method (itkNeighborhoodInnerProduct). To initialize the
    operator, you need call CreateOperator() before using it.

    By default the operator will be created for an isotropic image, but
    you can modify the operator to handle different pixel spacings by
    calling SetDerivativeScalings. The argument to SetDerivativeScalings
    is an array of doubles that is of length VDimension (the
    dimensionality of the image). Make sure to use 1/pixel_spacing to
    properly scale derivatives.

    LaplacianOperator does not have any user-declared "special member
    function" for copy, move, or destruction, following the C++ Rule of
    Zero: the compiler will generate them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood  \\sphinx
    \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
    Kernel} \\endsphinx

    C++ includes: itkLaplacianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkLaplacianOperatorD2 self)

        This function is
        called to create the operator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorD2_CreateOperator(self)


    def SetDerivativeScalings(self, s: 'double const *') -> "void":
        """
        SetDerivativeScalings(itkLaplacianOperatorD2 self, double const * s)

        Sets the
        weights that are applied to the derivative in each axial direction
        when the kernel is computed. These weights are all 1.0 by default.
        This method must be called BEFORE CreateOperator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorD2_SetDerivativeScalings(self, s)

    __swig_destroy__ = _itkLaplacianOperatorPython.delete_itkLaplacianOperatorD2

    def __init__(self, *args):
        """
        __init__(itkLaplacianOperatorD2 self) -> itkLaplacianOperatorD2
        __init__(itkLaplacianOperatorD2 self, itkLaplacianOperatorD2 arg0) -> itkLaplacianOperatorD2



        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel.

        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel. The LaplacianOperator's coefficients are a tightest-fitting
        convolution kernel.

        For example, the simplest Laplacian Operator for 2D has the form:

        The LaplacianOperator is a non-directional NeighborhoodOperator that
        should be applied to a Neighborhood or NeighborhoodIterator using an
        inner product method (itkNeighborhoodInnerProduct). To initialize the
        operator, you need call CreateOperator() before using it.

        By default the operator will be created for an isotropic image, but
        you can modify the operator to handle different pixel spacings by
        calling SetDerivativeScalings. The argument to SetDerivativeScalings
        is an array of doubles that is of length VDimension (the
        dimensionality of the image). Make sure to use 1/pixel_spacing to
        properly scale derivatives.

        LaplacianOperator does not have any user-declared "special member
        function" for copy, move, or destruction, following the C++ Rule of
        Zero: the compiler will generate them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood  \\sphinx
        \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
        Kernel} \\endsphinx

        C++ includes: itkLaplacianOperator.h 
        """
        _itkLaplacianOperatorPython.itkLaplacianOperatorD2_swiginit(self, _itkLaplacianOperatorPython.new_itkLaplacianOperatorD2(*args))
itkLaplacianOperatorD2.CreateOperator = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorD2_CreateOperator, None, itkLaplacianOperatorD2)
itkLaplacianOperatorD2.SetDerivativeScalings = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorD2_SetDerivativeScalings, None, itkLaplacianOperatorD2)
itkLaplacianOperatorD2_swigregister = _itkLaplacianOperatorPython.itkLaplacianOperatorD2_swigregister
itkLaplacianOperatorD2_swigregister(itkLaplacianOperatorD2)

class itkLaplacianOperatorD3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    """


    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel.

    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel. The LaplacianOperator's coefficients are a tightest-fitting
    convolution kernel.

    For example, the simplest Laplacian Operator for 2D has the form:

    The LaplacianOperator is a non-directional NeighborhoodOperator that
    should be applied to a Neighborhood or NeighborhoodIterator using an
    inner product method (itkNeighborhoodInnerProduct). To initialize the
    operator, you need call CreateOperator() before using it.

    By default the operator will be created for an isotropic image, but
    you can modify the operator to handle different pixel spacings by
    calling SetDerivativeScalings. The argument to SetDerivativeScalings
    is an array of doubles that is of length VDimension (the
    dimensionality of the image). Make sure to use 1/pixel_spacing to
    properly scale derivatives.

    LaplacianOperator does not have any user-declared "special member
    function" for copy, move, or destruction, following the C++ Rule of
    Zero: the compiler will generate them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood  \\sphinx
    \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
    Kernel} \\endsphinx

    C++ includes: itkLaplacianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkLaplacianOperatorD3 self)

        This function is
        called to create the operator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorD3_CreateOperator(self)


    def SetDerivativeScalings(self, s: 'double const *') -> "void":
        """
        SetDerivativeScalings(itkLaplacianOperatorD3 self, double const * s)

        Sets the
        weights that are applied to the derivative in each axial direction
        when the kernel is computed. These weights are all 1.0 by default.
        This method must be called BEFORE CreateOperator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorD3_SetDerivativeScalings(self, s)

    __swig_destroy__ = _itkLaplacianOperatorPython.delete_itkLaplacianOperatorD3

    def __init__(self, *args):
        """
        __init__(itkLaplacianOperatorD3 self) -> itkLaplacianOperatorD3
        __init__(itkLaplacianOperatorD3 self, itkLaplacianOperatorD3 arg0) -> itkLaplacianOperatorD3



        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel.

        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel. The LaplacianOperator's coefficients are a tightest-fitting
        convolution kernel.

        For example, the simplest Laplacian Operator for 2D has the form:

        The LaplacianOperator is a non-directional NeighborhoodOperator that
        should be applied to a Neighborhood or NeighborhoodIterator using an
        inner product method (itkNeighborhoodInnerProduct). To initialize the
        operator, you need call CreateOperator() before using it.

        By default the operator will be created for an isotropic image, but
        you can modify the operator to handle different pixel spacings by
        calling SetDerivativeScalings. The argument to SetDerivativeScalings
        is an array of doubles that is of length VDimension (the
        dimensionality of the image). Make sure to use 1/pixel_spacing to
        properly scale derivatives.

        LaplacianOperator does not have any user-declared "special member
        function" for copy, move, or destruction, following the C++ Rule of
        Zero: the compiler will generate them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood  \\sphinx
        \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
        Kernel} \\endsphinx

        C++ includes: itkLaplacianOperator.h 
        """
        _itkLaplacianOperatorPython.itkLaplacianOperatorD3_swiginit(self, _itkLaplacianOperatorPython.new_itkLaplacianOperatorD3(*args))
itkLaplacianOperatorD3.CreateOperator = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorD3_CreateOperator, None, itkLaplacianOperatorD3)
itkLaplacianOperatorD3.SetDerivativeScalings = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorD3_SetDerivativeScalings, None, itkLaplacianOperatorD3)
itkLaplacianOperatorD3_swigregister = _itkLaplacianOperatorPython.itkLaplacianOperatorD3_swigregister
itkLaplacianOperatorD3_swigregister(itkLaplacianOperatorD3)

class itkLaplacianOperatorF2(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    """


    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel.

    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel. The LaplacianOperator's coefficients are a tightest-fitting
    convolution kernel.

    For example, the simplest Laplacian Operator for 2D has the form:

    The LaplacianOperator is a non-directional NeighborhoodOperator that
    should be applied to a Neighborhood or NeighborhoodIterator using an
    inner product method (itkNeighborhoodInnerProduct). To initialize the
    operator, you need call CreateOperator() before using it.

    By default the operator will be created for an isotropic image, but
    you can modify the operator to handle different pixel spacings by
    calling SetDerivativeScalings. The argument to SetDerivativeScalings
    is an array of doubles that is of length VDimension (the
    dimensionality of the image). Make sure to use 1/pixel_spacing to
    properly scale derivatives.

    LaplacianOperator does not have any user-declared "special member
    function" for copy, move, or destruction, following the C++ Rule of
    Zero: the compiler will generate them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood  \\sphinx
    \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
    Kernel} \\endsphinx

    C++ includes: itkLaplacianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkLaplacianOperatorF2 self)

        This function is
        called to create the operator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorF2_CreateOperator(self)


    def SetDerivativeScalings(self, s: 'double const *') -> "void":
        """
        SetDerivativeScalings(itkLaplacianOperatorF2 self, double const * s)

        Sets the
        weights that are applied to the derivative in each axial direction
        when the kernel is computed. These weights are all 1.0 by default.
        This method must be called BEFORE CreateOperator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorF2_SetDerivativeScalings(self, s)

    __swig_destroy__ = _itkLaplacianOperatorPython.delete_itkLaplacianOperatorF2

    def __init__(self, *args):
        """
        __init__(itkLaplacianOperatorF2 self) -> itkLaplacianOperatorF2
        __init__(itkLaplacianOperatorF2 self, itkLaplacianOperatorF2 arg0) -> itkLaplacianOperatorF2



        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel.

        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel. The LaplacianOperator's coefficients are a tightest-fitting
        convolution kernel.

        For example, the simplest Laplacian Operator for 2D has the form:

        The LaplacianOperator is a non-directional NeighborhoodOperator that
        should be applied to a Neighborhood or NeighborhoodIterator using an
        inner product method (itkNeighborhoodInnerProduct). To initialize the
        operator, you need call CreateOperator() before using it.

        By default the operator will be created for an isotropic image, but
        you can modify the operator to handle different pixel spacings by
        calling SetDerivativeScalings. The argument to SetDerivativeScalings
        is an array of doubles that is of length VDimension (the
        dimensionality of the image). Make sure to use 1/pixel_spacing to
        properly scale derivatives.

        LaplacianOperator does not have any user-declared "special member
        function" for copy, move, or destruction, following the C++ Rule of
        Zero: the compiler will generate them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood  \\sphinx
        \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
        Kernel} \\endsphinx

        C++ includes: itkLaplacianOperator.h 
        """
        _itkLaplacianOperatorPython.itkLaplacianOperatorF2_swiginit(self, _itkLaplacianOperatorPython.new_itkLaplacianOperatorF2(*args))
itkLaplacianOperatorF2.CreateOperator = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorF2_CreateOperator, None, itkLaplacianOperatorF2)
itkLaplacianOperatorF2.SetDerivativeScalings = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorF2_SetDerivativeScalings, None, itkLaplacianOperatorF2)
itkLaplacianOperatorF2_swigregister = _itkLaplacianOperatorPython.itkLaplacianOperatorF2_swigregister
itkLaplacianOperatorF2_swigregister(itkLaplacianOperatorF2)

class itkLaplacianOperatorF3(itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    """


    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel.

    A NeighborhoodOperator for use in calculating the Laplacian at a
    pixel. The LaplacianOperator's coefficients are a tightest-fitting
    convolution kernel.

    For example, the simplest Laplacian Operator for 2D has the form:

    The LaplacianOperator is a non-directional NeighborhoodOperator that
    should be applied to a Neighborhood or NeighborhoodIterator using an
    inner product method (itkNeighborhoodInnerProduct). To initialize the
    operator, you need call CreateOperator() before using it.

    By default the operator will be created for an isotropic image, but
    you can modify the operator to handle different pixel spacings by
    calling SetDerivativeScalings. The argument to SetDerivativeScalings
    is an array of doubles that is of length VDimension (the
    dimensionality of the image). Make sure to use 1/pixel_spacing to
    properly scale derivatives.

    LaplacianOperator does not have any user-declared "special member
    function" for copy, move, or destruction, following the C++ Rule of
    Zero: the compiler will generate them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood  \\sphinx
    \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
    Kernel} \\endsphinx

    C++ includes: itkLaplacianOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateOperator(self) -> "void":
        """
        CreateOperator(itkLaplacianOperatorF3 self)

        This function is
        called to create the operator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorF3_CreateOperator(self)


    def SetDerivativeScalings(self, s: 'double const *') -> "void":
        """
        SetDerivativeScalings(itkLaplacianOperatorF3 self, double const * s)

        Sets the
        weights that are applied to the derivative in each axial direction
        when the kernel is computed. These weights are all 1.0 by default.
        This method must be called BEFORE CreateOperator 
        """
        return _itkLaplacianOperatorPython.itkLaplacianOperatorF3_SetDerivativeScalings(self, s)

    __swig_destroy__ = _itkLaplacianOperatorPython.delete_itkLaplacianOperatorF3

    def __init__(self, *args):
        """
        __init__(itkLaplacianOperatorF3 self) -> itkLaplacianOperatorF3
        __init__(itkLaplacianOperatorF3 self, itkLaplacianOperatorF3 arg0) -> itkLaplacianOperatorF3



        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel.

        A NeighborhoodOperator for use in calculating the Laplacian at a
        pixel. The LaplacianOperator's coefficients are a tightest-fitting
        convolution kernel.

        For example, the simplest Laplacian Operator for 2D has the form:

        The LaplacianOperator is a non-directional NeighborhoodOperator that
        should be applied to a Neighborhood or NeighborhoodIterator using an
        inner product method (itkNeighborhoodInnerProduct). To initialize the
        operator, you need call CreateOperator() before using it.

        By default the operator will be created for an isotropic image, but
        you can modify the operator to handle different pixel spacings by
        calling SetDerivativeScalings. The argument to SetDerivativeScalings
        is an array of doubles that is of length VDimension (the
        dimensionality of the image). Make sure to use 1/pixel_spacing to
        properly scale derivatives.

        LaplacianOperator does not have any user-declared "special member
        function" for copy, move, or destruction, following the C++ Rule of
        Zero: the compiler will generate them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood  \\sphinx
        \\sphinxexample{Core/Common/CreateLaplacianKernel,Create Laplacian
        Kernel} \\endsphinx

        C++ includes: itkLaplacianOperator.h 
        """
        _itkLaplacianOperatorPython.itkLaplacianOperatorF3_swiginit(self, _itkLaplacianOperatorPython.new_itkLaplacianOperatorF3(*args))
itkLaplacianOperatorF3.CreateOperator = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorF3_CreateOperator, None, itkLaplacianOperatorF3)
itkLaplacianOperatorF3.SetDerivativeScalings = new_instancemethod(_itkLaplacianOperatorPython.itkLaplacianOperatorF3_SetDerivativeScalings, None, itkLaplacianOperatorF3)
itkLaplacianOperatorF3_swigregister = _itkLaplacianOperatorPython.itkLaplacianOperatorF3_swigregister
itkLaplacianOperatorF3_swigregister(itkLaplacianOperatorF3)



