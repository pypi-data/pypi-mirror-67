# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNeighborhoodOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNeighborhoodOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkNeighborhoodOperatorPython
            return _itkNeighborhoodOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNeighborhoodOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNeighborhoodOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNeighborhoodOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSizePython
import itkNeighborhoodPython
import itkRGBPixelPython
import itkFixedArrayPython
import itkOffsetPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
class itkNeighborhoodOperatorD2(itkNeighborhoodPython.itkNeighborhoodD2):
    """


    Virtual class that defines a common interface to all neighborhood
    operator subtypes.

    A NeighborhoodOperator is a set of pixel values that can be applied to
    a Neighborhood to perform a user-defined operation (i.e. convolution
    kernel, morphological structuring element). A NeighborhoodOperator is
    itself a specialized Neighborhood, with functionality to generate its
    coefficients according to user- defined parameters. Because the
    operator is a subclass of Neighborhood, it is a valid operand in any
    of the operations defined on the Neighborhood object (convolution,
    inner product, etc.).

    NeighborhoodOperator is a pure virtual object that must be subclassed
    to be used. A user's subclass must implement two methods:

    (1) GenerateCoefficients the algorithm that computes the scalar
    coefficients of the operator.

    (2) Fill the algorithm that places the scalar coefficients into the
    memory buffer of the operator (arranges them spatially in the
    neighborhood).

    NeighborhoodOperator supports the concept of a "directional
    operator." A directional operator is defined in this context to be an
    operator that is applied along a single dimension. Examples of this
    type of operator are directional derivatives and the individual,
    directional components of separable processes such as Gaussian
    smoothing.

    How a NeighborhoodOperator is applied to data is up to the user who
    defines it. One possible use of an operator would be to take its inner
    product with a neighborhood of values to produce a scalar result. This
    process effects convolution when applied to successive neighborhoods
    across a region of interest in an image.

    NeighborhoodOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.  \\sphinx
    \\sphinxexample{Core/Common/DemonstrateAllOperators,Demonstrate All
    Operators} \\endsphinx

    C++ includes: itkNeighborhoodOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetDirection(self, direction: 'unsigned long const &') -> "void":
        """
        SetDirection(itkNeighborhoodOperatorD2 self, unsigned long const & direction)

        Sets the dimensional
        direction of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_SetDirection(self, direction)


    def GetDirection(self) -> "unsigned long":
        """
        GetDirection(itkNeighborhoodOperatorD2 self) -> unsigned long

        Returns the direction
        (dimension number) of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_GetDirection(self)


    def CreateDirectional(self) -> "void":
        """
        CreateDirectional(itkNeighborhoodOperatorD2 self)

        Creates the
        operator with length only in the specified direction. The radius of
        the operator will be 0 except along the axis on which the operator
        will work. See:   CreateToRadius

        See:   FillCenteredDirectional

        See:   SetDirection()

        See:   GetDirection() 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_CreateDirectional(self)


    def CreateToRadius(self, *args) -> "void":
        """
        CreateToRadius(itkNeighborhoodOperatorD2 self, itkSize2 arg0)
        CreateToRadius(itkNeighborhoodOperatorD2 self, unsigned long const arg0)

        Creates the operator
        with a specified radius ("square", same length on each side). The
        spatial location of the coefficients within the operator is defined by
        the subclass implementation of the Fill method. See:
        CreateDirectional

        See:   Fill 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_CreateToRadius(self, *args)


    def FlipAxes(self) -> "void":
        """
        FlipAxes(itkNeighborhoodOperatorD2 self)

        Reverses the direction of
        all axes of the operator by reversing the order of the coefficients.

        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_FlipAxes(self)


    def PrintSelf(self, os: 'ostream', i: 'itkIndent') -> "void":
        """
        PrintSelf(itkNeighborhoodOperatorD2 self, ostream os, itkIndent i)

        Prints some debugging
        information. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_PrintSelf(self, os, i)


    def ScaleCoefficients(self, arg0: 'double') -> "void":
        """
        ScaleCoefficients(itkNeighborhoodOperatorD2 self, double arg0)

        Multiplies all of
        the coefficients of the kernel by a single scalar value. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_ScaleCoefficients(self, arg0)

    __swig_destroy__ = _itkNeighborhoodOperatorPython.delete_itkNeighborhoodOperatorD2
itkNeighborhoodOperatorD2.SetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_SetDirection, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.GetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_GetDirection, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.CreateDirectional = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_CreateDirectional, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.CreateToRadius = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_CreateToRadius, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.FlipAxes = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_FlipAxes, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.PrintSelf = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_PrintSelf, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2.ScaleCoefficients = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_ScaleCoefficients, None, itkNeighborhoodOperatorD2)
itkNeighborhoodOperatorD2_swigregister = _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2_swigregister
itkNeighborhoodOperatorD2_swigregister(itkNeighborhoodOperatorD2)

class itkNeighborhoodOperatorD3(itkNeighborhoodPython.itkNeighborhoodD3):
    """


    Virtual class that defines a common interface to all neighborhood
    operator subtypes.

    A NeighborhoodOperator is a set of pixel values that can be applied to
    a Neighborhood to perform a user-defined operation (i.e. convolution
    kernel, morphological structuring element). A NeighborhoodOperator is
    itself a specialized Neighborhood, with functionality to generate its
    coefficients according to user- defined parameters. Because the
    operator is a subclass of Neighborhood, it is a valid operand in any
    of the operations defined on the Neighborhood object (convolution,
    inner product, etc.).

    NeighborhoodOperator is a pure virtual object that must be subclassed
    to be used. A user's subclass must implement two methods:

    (1) GenerateCoefficients the algorithm that computes the scalar
    coefficients of the operator.

    (2) Fill the algorithm that places the scalar coefficients into the
    memory buffer of the operator (arranges them spatially in the
    neighborhood).

    NeighborhoodOperator supports the concept of a "directional
    operator." A directional operator is defined in this context to be an
    operator that is applied along a single dimension. Examples of this
    type of operator are directional derivatives and the individual,
    directional components of separable processes such as Gaussian
    smoothing.

    How a NeighborhoodOperator is applied to data is up to the user who
    defines it. One possible use of an operator would be to take its inner
    product with a neighborhood of values to produce a scalar result. This
    process effects convolution when applied to successive neighborhoods
    across a region of interest in an image.

    NeighborhoodOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.  \\sphinx
    \\sphinxexample{Core/Common/DemonstrateAllOperators,Demonstrate All
    Operators} \\endsphinx

    C++ includes: itkNeighborhoodOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetDirection(self, direction: 'unsigned long const &') -> "void":
        """
        SetDirection(itkNeighborhoodOperatorD3 self, unsigned long const & direction)

        Sets the dimensional
        direction of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_SetDirection(self, direction)


    def GetDirection(self) -> "unsigned long":
        """
        GetDirection(itkNeighborhoodOperatorD3 self) -> unsigned long

        Returns the direction
        (dimension number) of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_GetDirection(self)


    def CreateDirectional(self) -> "void":
        """
        CreateDirectional(itkNeighborhoodOperatorD3 self)

        Creates the
        operator with length only in the specified direction. The radius of
        the operator will be 0 except along the axis on which the operator
        will work. See:   CreateToRadius

        See:   FillCenteredDirectional

        See:   SetDirection()

        See:   GetDirection() 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_CreateDirectional(self)


    def CreateToRadius(self, *args) -> "void":
        """
        CreateToRadius(itkNeighborhoodOperatorD3 self, itkSize3 arg0)
        CreateToRadius(itkNeighborhoodOperatorD3 self, unsigned long const arg0)

        Creates the operator
        with a specified radius ("square", same length on each side). The
        spatial location of the coefficients within the operator is defined by
        the subclass implementation of the Fill method. See:
        CreateDirectional

        See:   Fill 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_CreateToRadius(self, *args)


    def FlipAxes(self) -> "void":
        """
        FlipAxes(itkNeighborhoodOperatorD3 self)

        Reverses the direction of
        all axes of the operator by reversing the order of the coefficients.

        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_FlipAxes(self)


    def PrintSelf(self, os: 'ostream', i: 'itkIndent') -> "void":
        """
        PrintSelf(itkNeighborhoodOperatorD3 self, ostream os, itkIndent i)

        Prints some debugging
        information. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_PrintSelf(self, os, i)


    def ScaleCoefficients(self, arg0: 'double') -> "void":
        """
        ScaleCoefficients(itkNeighborhoodOperatorD3 self, double arg0)

        Multiplies all of
        the coefficients of the kernel by a single scalar value. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_ScaleCoefficients(self, arg0)

    __swig_destroy__ = _itkNeighborhoodOperatorPython.delete_itkNeighborhoodOperatorD3
itkNeighborhoodOperatorD3.SetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_SetDirection, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.GetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_GetDirection, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.CreateDirectional = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_CreateDirectional, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.CreateToRadius = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_CreateToRadius, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.FlipAxes = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_FlipAxes, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.PrintSelf = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_PrintSelf, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3.ScaleCoefficients = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_ScaleCoefficients, None, itkNeighborhoodOperatorD3)
itkNeighborhoodOperatorD3_swigregister = _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3_swigregister
itkNeighborhoodOperatorD3_swigregister(itkNeighborhoodOperatorD3)

class itkNeighborhoodOperatorF2(itkNeighborhoodPython.itkNeighborhoodF2):
    """


    Virtual class that defines a common interface to all neighborhood
    operator subtypes.

    A NeighborhoodOperator is a set of pixel values that can be applied to
    a Neighborhood to perform a user-defined operation (i.e. convolution
    kernel, morphological structuring element). A NeighborhoodOperator is
    itself a specialized Neighborhood, with functionality to generate its
    coefficients according to user- defined parameters. Because the
    operator is a subclass of Neighborhood, it is a valid operand in any
    of the operations defined on the Neighborhood object (convolution,
    inner product, etc.).

    NeighborhoodOperator is a pure virtual object that must be subclassed
    to be used. A user's subclass must implement two methods:

    (1) GenerateCoefficients the algorithm that computes the scalar
    coefficients of the operator.

    (2) Fill the algorithm that places the scalar coefficients into the
    memory buffer of the operator (arranges them spatially in the
    neighborhood).

    NeighborhoodOperator supports the concept of a "directional
    operator." A directional operator is defined in this context to be an
    operator that is applied along a single dimension. Examples of this
    type of operator are directional derivatives and the individual,
    directional components of separable processes such as Gaussian
    smoothing.

    How a NeighborhoodOperator is applied to data is up to the user who
    defines it. One possible use of an operator would be to take its inner
    product with a neighborhood of values to produce a scalar result. This
    process effects convolution when applied to successive neighborhoods
    across a region of interest in an image.

    NeighborhoodOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.  \\sphinx
    \\sphinxexample{Core/Common/DemonstrateAllOperators,Demonstrate All
    Operators} \\endsphinx

    C++ includes: itkNeighborhoodOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetDirection(self, direction: 'unsigned long const &') -> "void":
        """
        SetDirection(itkNeighborhoodOperatorF2 self, unsigned long const & direction)

        Sets the dimensional
        direction of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_SetDirection(self, direction)


    def GetDirection(self) -> "unsigned long":
        """
        GetDirection(itkNeighborhoodOperatorF2 self) -> unsigned long

        Returns the direction
        (dimension number) of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_GetDirection(self)


    def CreateDirectional(self) -> "void":
        """
        CreateDirectional(itkNeighborhoodOperatorF2 self)

        Creates the
        operator with length only in the specified direction. The radius of
        the operator will be 0 except along the axis on which the operator
        will work. See:   CreateToRadius

        See:   FillCenteredDirectional

        See:   SetDirection()

        See:   GetDirection() 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_CreateDirectional(self)


    def CreateToRadius(self, *args) -> "void":
        """
        CreateToRadius(itkNeighborhoodOperatorF2 self, itkSize2 arg0)
        CreateToRadius(itkNeighborhoodOperatorF2 self, unsigned long const arg0)

        Creates the operator
        with a specified radius ("square", same length on each side). The
        spatial location of the coefficients within the operator is defined by
        the subclass implementation of the Fill method. See:
        CreateDirectional

        See:   Fill 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_CreateToRadius(self, *args)


    def FlipAxes(self) -> "void":
        """
        FlipAxes(itkNeighborhoodOperatorF2 self)

        Reverses the direction of
        all axes of the operator by reversing the order of the coefficients.

        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_FlipAxes(self)


    def PrintSelf(self, os: 'ostream', i: 'itkIndent') -> "void":
        """
        PrintSelf(itkNeighborhoodOperatorF2 self, ostream os, itkIndent i)

        Prints some debugging
        information. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_PrintSelf(self, os, i)


    def ScaleCoefficients(self, arg0: 'double') -> "void":
        """
        ScaleCoefficients(itkNeighborhoodOperatorF2 self, double arg0)

        Multiplies all of
        the coefficients of the kernel by a single scalar value. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_ScaleCoefficients(self, arg0)

    __swig_destroy__ = _itkNeighborhoodOperatorPython.delete_itkNeighborhoodOperatorF2
itkNeighborhoodOperatorF2.SetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_SetDirection, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.GetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_GetDirection, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.CreateDirectional = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_CreateDirectional, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.CreateToRadius = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_CreateToRadius, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.FlipAxes = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_FlipAxes, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.PrintSelf = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_PrintSelf, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2.ScaleCoefficients = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_ScaleCoefficients, None, itkNeighborhoodOperatorF2)
itkNeighborhoodOperatorF2_swigregister = _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2_swigregister
itkNeighborhoodOperatorF2_swigregister(itkNeighborhoodOperatorF2)

class itkNeighborhoodOperatorF3(itkNeighborhoodPython.itkNeighborhoodF3):
    """


    Virtual class that defines a common interface to all neighborhood
    operator subtypes.

    A NeighborhoodOperator is a set of pixel values that can be applied to
    a Neighborhood to perform a user-defined operation (i.e. convolution
    kernel, morphological structuring element). A NeighborhoodOperator is
    itself a specialized Neighborhood, with functionality to generate its
    coefficients according to user- defined parameters. Because the
    operator is a subclass of Neighborhood, it is a valid operand in any
    of the operations defined on the Neighborhood object (convolution,
    inner product, etc.).

    NeighborhoodOperator is a pure virtual object that must be subclassed
    to be used. A user's subclass must implement two methods:

    (1) GenerateCoefficients the algorithm that computes the scalar
    coefficients of the operator.

    (2) Fill the algorithm that places the scalar coefficients into the
    memory buffer of the operator (arranges them spatially in the
    neighborhood).

    NeighborhoodOperator supports the concept of a "directional
    operator." A directional operator is defined in this context to be an
    operator that is applied along a single dimension. Examples of this
    type of operator are directional derivatives and the individual,
    directional components of separable processes such as Gaussian
    smoothing.

    How a NeighborhoodOperator is applied to data is up to the user who
    defines it. One possible use of an operator would be to take its inner
    product with a neighborhood of values to produce a scalar result. This
    process effects convolution when applied to successive neighborhoods
    across a region of interest in an image.

    NeighborhoodOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.  \\sphinx
    \\sphinxexample{Core/Common/DemonstrateAllOperators,Demonstrate All
    Operators} \\endsphinx

    C++ includes: itkNeighborhoodOperator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetDirection(self, direction: 'unsigned long const &') -> "void":
        """
        SetDirection(itkNeighborhoodOperatorF3 self, unsigned long const & direction)

        Sets the dimensional
        direction of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_SetDirection(self, direction)


    def GetDirection(self) -> "unsigned long":
        """
        GetDirection(itkNeighborhoodOperatorF3 self) -> unsigned long

        Returns the direction
        (dimension number) of a directional operator. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_GetDirection(self)


    def CreateDirectional(self) -> "void":
        """
        CreateDirectional(itkNeighborhoodOperatorF3 self)

        Creates the
        operator with length only in the specified direction. The radius of
        the operator will be 0 except along the axis on which the operator
        will work. See:   CreateToRadius

        See:   FillCenteredDirectional

        See:   SetDirection()

        See:   GetDirection() 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_CreateDirectional(self)


    def CreateToRadius(self, *args) -> "void":
        """
        CreateToRadius(itkNeighborhoodOperatorF3 self, itkSize3 arg0)
        CreateToRadius(itkNeighborhoodOperatorF3 self, unsigned long const arg0)

        Creates the operator
        with a specified radius ("square", same length on each side). The
        spatial location of the coefficients within the operator is defined by
        the subclass implementation of the Fill method. See:
        CreateDirectional

        See:   Fill 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_CreateToRadius(self, *args)


    def FlipAxes(self) -> "void":
        """
        FlipAxes(itkNeighborhoodOperatorF3 self)

        Reverses the direction of
        all axes of the operator by reversing the order of the coefficients.

        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_FlipAxes(self)


    def PrintSelf(self, os: 'ostream', i: 'itkIndent') -> "void":
        """
        PrintSelf(itkNeighborhoodOperatorF3 self, ostream os, itkIndent i)

        Prints some debugging
        information. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_PrintSelf(self, os, i)


    def ScaleCoefficients(self, arg0: 'double') -> "void":
        """
        ScaleCoefficients(itkNeighborhoodOperatorF3 self, double arg0)

        Multiplies all of
        the coefficients of the kernel by a single scalar value. 
        """
        return _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_ScaleCoefficients(self, arg0)

    __swig_destroy__ = _itkNeighborhoodOperatorPython.delete_itkNeighborhoodOperatorF3
itkNeighborhoodOperatorF3.SetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_SetDirection, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.GetDirection = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_GetDirection, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.CreateDirectional = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_CreateDirectional, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.CreateToRadius = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_CreateToRadius, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.FlipAxes = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_FlipAxes, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.PrintSelf = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_PrintSelf, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3.ScaleCoefficients = new_instancemethod(_itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_ScaleCoefficients, None, itkNeighborhoodOperatorF3)
itkNeighborhoodOperatorF3_swigregister = _itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3_swigregister
itkNeighborhoodOperatorF3_swigregister(itkNeighborhoodOperatorF3)



