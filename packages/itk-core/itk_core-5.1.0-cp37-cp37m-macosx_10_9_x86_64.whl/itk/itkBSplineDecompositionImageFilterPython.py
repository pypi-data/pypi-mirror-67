# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBSplineDecompositionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBSplineDecompositionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBSplineDecompositionImageFilterPython
            return _itkBSplineDecompositionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBSplineDecompositionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBSplineDecompositionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBSplineDecompositionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkBSplineDecompositionImageFilterID3ID3_New():
  return itkBSplineDecompositionImageFilterID3ID3.New()


def itkBSplineDecompositionImageFilterID2ID2_New():
  return itkBSplineDecompositionImageFilterID2ID2.New()


def itkBSplineDecompositionImageFilterIF3IF3_New():
  return itkBSplineDecompositionImageFilterIF3IF3.New()


def itkBSplineDecompositionImageFilterIF2IF2_New():
  return itkBSplineDecompositionImageFilterIF2IF2.New()


def itkBSplineDecompositionImageFilterIUS3IUS3_New():
  return itkBSplineDecompositionImageFilterIUS3IUS3.New()


def itkBSplineDecompositionImageFilterIUS2IUS2_New():
  return itkBSplineDecompositionImageFilterIUS2IUS2.New()


def itkBSplineDecompositionImageFilterIUC3IUC3_New():
  return itkBSplineDecompositionImageFilterIUC3IUC3.New()


def itkBSplineDecompositionImageFilterIUC2IUC2_New():
  return itkBSplineDecompositionImageFilterIUC2IUC2.New()


def itkBSplineDecompositionImageFilterISS3ISS3_New():
  return itkBSplineDecompositionImageFilterISS3ISS3.New()


def itkBSplineDecompositionImageFilterISS2ISS2_New():
  return itkBSplineDecompositionImageFilterISS2ISS2.New()

class itkBSplineDecompositionImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterID2ID2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterID2ID2_Pointer":
        """Clone(itkBSplineDecompositionImageFilterID2ID2 self) -> itkBSplineDecompositionImageFilterID2ID2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterID2ID2 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterID2ID2 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterID2ID2 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterID2ID2 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterID2ID2"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterID2ID2

        Create a new object of the class itkBSplineDecompositionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterID2ID2.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_Clone, None, itkBSplineDecompositionImageFilterID2ID2)
itkBSplineDecompositionImageFilterID2ID2.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_SetSplineOrder, None, itkBSplineDecompositionImageFilterID2ID2)
itkBSplineDecompositionImageFilterID2ID2.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplineOrder, None, itkBSplineDecompositionImageFilterID2ID2)
itkBSplineDecompositionImageFilterID2ID2.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplinePoles, None, itkBSplineDecompositionImageFilterID2ID2)
itkBSplineDecompositionImageFilterID2ID2.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterID2ID2)
itkBSplineDecompositionImageFilterID2ID2_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_swigregister
itkBSplineDecompositionImageFilterID2ID2_swigregister(itkBSplineDecompositionImageFilterID2ID2)

def itkBSplineDecompositionImageFilterID2ID2___New_orig__() -> "itkBSplineDecompositionImageFilterID2ID2_Pointer":
    """itkBSplineDecompositionImageFilterID2ID2___New_orig__() -> itkBSplineDecompositionImageFilterID2ID2_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2___New_orig__()

def itkBSplineDecompositionImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterID2ID2 *":
    """itkBSplineDecompositionImageFilterID2ID2_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterID2ID2"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_cast(obj)

class itkBSplineDecompositionImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterID3ID3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterID3ID3_Pointer":
        """Clone(itkBSplineDecompositionImageFilterID3ID3 self) -> itkBSplineDecompositionImageFilterID3ID3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterID3ID3 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterID3ID3 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterID3ID3 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterID3ID3 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterID3ID3"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterID3ID3

        Create a new object of the class itkBSplineDecompositionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterID3ID3.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_Clone, None, itkBSplineDecompositionImageFilterID3ID3)
itkBSplineDecompositionImageFilterID3ID3.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_SetSplineOrder, None, itkBSplineDecompositionImageFilterID3ID3)
itkBSplineDecompositionImageFilterID3ID3.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplineOrder, None, itkBSplineDecompositionImageFilterID3ID3)
itkBSplineDecompositionImageFilterID3ID3.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplinePoles, None, itkBSplineDecompositionImageFilterID3ID3)
itkBSplineDecompositionImageFilterID3ID3.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterID3ID3)
itkBSplineDecompositionImageFilterID3ID3_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_swigregister
itkBSplineDecompositionImageFilterID3ID3_swigregister(itkBSplineDecompositionImageFilterID3ID3)

def itkBSplineDecompositionImageFilterID3ID3___New_orig__() -> "itkBSplineDecompositionImageFilterID3ID3_Pointer":
    """itkBSplineDecompositionImageFilterID3ID3___New_orig__() -> itkBSplineDecompositionImageFilterID3ID3_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3___New_orig__()

def itkBSplineDecompositionImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterID3ID3 *":
    """itkBSplineDecompositionImageFilterID3ID3_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterID3ID3"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_cast(obj)

class itkBSplineDecompositionImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIF2IF2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIF2IF2_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIF2IF2 self) -> itkBSplineDecompositionImageFilterIF2IF2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIF2IF2 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIF2IF2 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIF2IF2 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIF2IF2 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIF2IF2"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIF2IF2

        Create a new object of the class itkBSplineDecompositionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIF2IF2.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_Clone, None, itkBSplineDecompositionImageFilterIF2IF2)
itkBSplineDecompositionImageFilterIF2IF2.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_SetSplineOrder, None, itkBSplineDecompositionImageFilterIF2IF2)
itkBSplineDecompositionImageFilterIF2IF2.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplineOrder, None, itkBSplineDecompositionImageFilterIF2IF2)
itkBSplineDecompositionImageFilterIF2IF2.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplinePoles, None, itkBSplineDecompositionImageFilterIF2IF2)
itkBSplineDecompositionImageFilterIF2IF2.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIF2IF2)
itkBSplineDecompositionImageFilterIF2IF2_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_swigregister
itkBSplineDecompositionImageFilterIF2IF2_swigregister(itkBSplineDecompositionImageFilterIF2IF2)

def itkBSplineDecompositionImageFilterIF2IF2___New_orig__() -> "itkBSplineDecompositionImageFilterIF2IF2_Pointer":
    """itkBSplineDecompositionImageFilterIF2IF2___New_orig__() -> itkBSplineDecompositionImageFilterIF2IF2_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2___New_orig__()

def itkBSplineDecompositionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIF2IF2 *":
    """itkBSplineDecompositionImageFilterIF2IF2_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIF2IF2"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_cast(obj)

class itkBSplineDecompositionImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIF3IF3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIF3IF3_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIF3IF3 self) -> itkBSplineDecompositionImageFilterIF3IF3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIF3IF3 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIF3IF3 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIF3IF3 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIF3IF3 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIF3IF3"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIF3IF3

        Create a new object of the class itkBSplineDecompositionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIF3IF3.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_Clone, None, itkBSplineDecompositionImageFilterIF3IF3)
itkBSplineDecompositionImageFilterIF3IF3.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_SetSplineOrder, None, itkBSplineDecompositionImageFilterIF3IF3)
itkBSplineDecompositionImageFilterIF3IF3.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplineOrder, None, itkBSplineDecompositionImageFilterIF3IF3)
itkBSplineDecompositionImageFilterIF3IF3.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplinePoles, None, itkBSplineDecompositionImageFilterIF3IF3)
itkBSplineDecompositionImageFilterIF3IF3.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIF3IF3)
itkBSplineDecompositionImageFilterIF3IF3_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_swigregister
itkBSplineDecompositionImageFilterIF3IF3_swigregister(itkBSplineDecompositionImageFilterIF3IF3)

def itkBSplineDecompositionImageFilterIF3IF3___New_orig__() -> "itkBSplineDecompositionImageFilterIF3IF3_Pointer":
    """itkBSplineDecompositionImageFilterIF3IF3___New_orig__() -> itkBSplineDecompositionImageFilterIF3IF3_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3___New_orig__()

def itkBSplineDecompositionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIF3IF3 *":
    """itkBSplineDecompositionImageFilterIF3IF3_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIF3IF3"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_cast(obj)

class itkBSplineDecompositionImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterISS2ISS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterISS2ISS2_Pointer":
        """Clone(itkBSplineDecompositionImageFilterISS2ISS2 self) -> itkBSplineDecompositionImageFilterISS2ISS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterISS2ISS2 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterISS2ISS2 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterISS2ISS2 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterISS2ISS2 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterISS2ISS2"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterISS2ISS2

        Create a new object of the class itkBSplineDecompositionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterISS2ISS2.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_Clone, None, itkBSplineDecompositionImageFilterISS2ISS2)
itkBSplineDecompositionImageFilterISS2ISS2.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_SetSplineOrder, None, itkBSplineDecompositionImageFilterISS2ISS2)
itkBSplineDecompositionImageFilterISS2ISS2.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplineOrder, None, itkBSplineDecompositionImageFilterISS2ISS2)
itkBSplineDecompositionImageFilterISS2ISS2.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplinePoles, None, itkBSplineDecompositionImageFilterISS2ISS2)
itkBSplineDecompositionImageFilterISS2ISS2.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterISS2ISS2)
itkBSplineDecompositionImageFilterISS2ISS2_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_swigregister
itkBSplineDecompositionImageFilterISS2ISS2_swigregister(itkBSplineDecompositionImageFilterISS2ISS2)

def itkBSplineDecompositionImageFilterISS2ISS2___New_orig__() -> "itkBSplineDecompositionImageFilterISS2ISS2_Pointer":
    """itkBSplineDecompositionImageFilterISS2ISS2___New_orig__() -> itkBSplineDecompositionImageFilterISS2ISS2_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2___New_orig__()

def itkBSplineDecompositionImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterISS2ISS2 *":
    """itkBSplineDecompositionImageFilterISS2ISS2_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterISS2ISS2"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_cast(obj)

class itkBSplineDecompositionImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterISS3ISS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterISS3ISS3_Pointer":
        """Clone(itkBSplineDecompositionImageFilterISS3ISS3 self) -> itkBSplineDecompositionImageFilterISS3ISS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterISS3ISS3 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterISS3ISS3 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterISS3ISS3 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterISS3ISS3 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterISS3ISS3"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterISS3ISS3

        Create a new object of the class itkBSplineDecompositionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterISS3ISS3.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_Clone, None, itkBSplineDecompositionImageFilterISS3ISS3)
itkBSplineDecompositionImageFilterISS3ISS3.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_SetSplineOrder, None, itkBSplineDecompositionImageFilterISS3ISS3)
itkBSplineDecompositionImageFilterISS3ISS3.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplineOrder, None, itkBSplineDecompositionImageFilterISS3ISS3)
itkBSplineDecompositionImageFilterISS3ISS3.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplinePoles, None, itkBSplineDecompositionImageFilterISS3ISS3)
itkBSplineDecompositionImageFilterISS3ISS3.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterISS3ISS3)
itkBSplineDecompositionImageFilterISS3ISS3_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_swigregister
itkBSplineDecompositionImageFilterISS3ISS3_swigregister(itkBSplineDecompositionImageFilterISS3ISS3)

def itkBSplineDecompositionImageFilterISS3ISS3___New_orig__() -> "itkBSplineDecompositionImageFilterISS3ISS3_Pointer":
    """itkBSplineDecompositionImageFilterISS3ISS3___New_orig__() -> itkBSplineDecompositionImageFilterISS3ISS3_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3___New_orig__()

def itkBSplineDecompositionImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterISS3ISS3 *":
    """itkBSplineDecompositionImageFilterISS3ISS3_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterISS3ISS3"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_cast(obj)

class itkBSplineDecompositionImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIUC2IUC2_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIUC2IUC2 self) -> itkBSplineDecompositionImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIUC2IUC2 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIUC2IUC2 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIUC2IUC2 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIUC2IUC2 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUC2IUC2"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUC2IUC2

        Create a new object of the class itkBSplineDecompositionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIUC2IUC2.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_Clone, None, itkBSplineDecompositionImageFilterIUC2IUC2)
itkBSplineDecompositionImageFilterIUC2IUC2.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_SetSplineOrder, None, itkBSplineDecompositionImageFilterIUC2IUC2)
itkBSplineDecompositionImageFilterIUC2IUC2.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplineOrder, None, itkBSplineDecompositionImageFilterIUC2IUC2)
itkBSplineDecompositionImageFilterIUC2IUC2.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplinePoles, None, itkBSplineDecompositionImageFilterIUC2IUC2)
itkBSplineDecompositionImageFilterIUC2IUC2.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIUC2IUC2)
itkBSplineDecompositionImageFilterIUC2IUC2_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_swigregister
itkBSplineDecompositionImageFilterIUC2IUC2_swigregister(itkBSplineDecompositionImageFilterIUC2IUC2)

def itkBSplineDecompositionImageFilterIUC2IUC2___New_orig__() -> "itkBSplineDecompositionImageFilterIUC2IUC2_Pointer":
    """itkBSplineDecompositionImageFilterIUC2IUC2___New_orig__() -> itkBSplineDecompositionImageFilterIUC2IUC2_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2___New_orig__()

def itkBSplineDecompositionImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUC2IUC2 *":
    """itkBSplineDecompositionImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUC2IUC2"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_cast(obj)

class itkBSplineDecompositionImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIUC3IUC3_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIUC3IUC3 self) -> itkBSplineDecompositionImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIUC3IUC3 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIUC3IUC3 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIUC3IUC3 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIUC3IUC3 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUC3IUC3"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUC3IUC3

        Create a new object of the class itkBSplineDecompositionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIUC3IUC3.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_Clone, None, itkBSplineDecompositionImageFilterIUC3IUC3)
itkBSplineDecompositionImageFilterIUC3IUC3.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_SetSplineOrder, None, itkBSplineDecompositionImageFilterIUC3IUC3)
itkBSplineDecompositionImageFilterIUC3IUC3.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplineOrder, None, itkBSplineDecompositionImageFilterIUC3IUC3)
itkBSplineDecompositionImageFilterIUC3IUC3.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplinePoles, None, itkBSplineDecompositionImageFilterIUC3IUC3)
itkBSplineDecompositionImageFilterIUC3IUC3.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIUC3IUC3)
itkBSplineDecompositionImageFilterIUC3IUC3_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_swigregister
itkBSplineDecompositionImageFilterIUC3IUC3_swigregister(itkBSplineDecompositionImageFilterIUC3IUC3)

def itkBSplineDecompositionImageFilterIUC3IUC3___New_orig__() -> "itkBSplineDecompositionImageFilterIUC3IUC3_Pointer":
    """itkBSplineDecompositionImageFilterIUC3IUC3___New_orig__() -> itkBSplineDecompositionImageFilterIUC3IUC3_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3___New_orig__()

def itkBSplineDecompositionImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUC3IUC3 *":
    """itkBSplineDecompositionImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUC3IUC3"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_cast(obj)

class itkBSplineDecompositionImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIUS2IUS2_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIUS2IUS2 self) -> itkBSplineDecompositionImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIUS2IUS2 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIUS2IUS2 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIUS2IUS2 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIUS2IUS2 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUS2IUS2"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUS2IUS2

        Create a new object of the class itkBSplineDecompositionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIUS2IUS2.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_Clone, None, itkBSplineDecompositionImageFilterIUS2IUS2)
itkBSplineDecompositionImageFilterIUS2IUS2.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_SetSplineOrder, None, itkBSplineDecompositionImageFilterIUS2IUS2)
itkBSplineDecompositionImageFilterIUS2IUS2.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplineOrder, None, itkBSplineDecompositionImageFilterIUS2IUS2)
itkBSplineDecompositionImageFilterIUS2IUS2.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplinePoles, None, itkBSplineDecompositionImageFilterIUS2IUS2)
itkBSplineDecompositionImageFilterIUS2IUS2.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIUS2IUS2)
itkBSplineDecompositionImageFilterIUS2IUS2_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_swigregister
itkBSplineDecompositionImageFilterIUS2IUS2_swigregister(itkBSplineDecompositionImageFilterIUS2IUS2)

def itkBSplineDecompositionImageFilterIUS2IUS2___New_orig__() -> "itkBSplineDecompositionImageFilterIUS2IUS2_Pointer":
    """itkBSplineDecompositionImageFilterIUS2IUS2___New_orig__() -> itkBSplineDecompositionImageFilterIUS2IUS2_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2___New_orig__()

def itkBSplineDecompositionImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUS2IUS2 *":
    """itkBSplineDecompositionImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUS2IUS2"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_cast(obj)

class itkBSplineDecompositionImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Calculates the B-Spline coefficients of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on: [1] M. Unser, "Splines: A Perfect Fit for Signal and Image
    Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38, November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory," IEEE Transactions on
    Signal Processing, vol. 41, no. 2, pp. 821-832, February 1993. [3] M.
    Unser, A. Aldroubi and M. Eden, "B-Spline Signal Processing: Part II
    --Efficient Design and Applications," IEEE Transactions on Signal
    Processing, vol. 41, no. 2, pp. 834-848, February 1993. And code
    obtained from bigwww.epfl.ch by Philippe Thevenaz

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Can only process
    LargestPossibleRegion

    See:   BSplineResampleImageFunction

    C++ includes: itkBSplineDecompositionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineDecompositionImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkBSplineDecompositionImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineDecompositionImageFilterIUS3IUS3_Pointer":
        """Clone(itkBSplineDecompositionImageFilterIUS3IUS3 self) -> itkBSplineDecompositionImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_Clone(self)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """
        SetSplineOrder(itkBSplineDecompositionImageFilterIUS3IUS3 self, unsigned int SplineOrder)

        Get/Sets the Spline
        Order, supports 0th - 5th order splines. The default is a 3rd order
        spline. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineDecompositionImageFilterIUS3IUS3 self) -> int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplineOrder(self)


    def GetSplinePoles(self) -> "std::vector< double,std::allocator< double > >":
        """
        GetSplinePoles(itkBSplineDecompositionImageFilterIUS3IUS3 self) -> vectorD

        Get the poles
        calculated for a given spline order. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplinePoles(self)


    def GetNumberOfPoles(self) -> "int":
        """
        GetNumberOfPoles(itkBSplineDecompositionImageFilterIUS3IUS3 self) -> int

        Get the number of
        poles. 
        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetNumberOfPoles(self)

    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_DimensionCheck
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUS3IUS3"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUS3IUS3

        Create a new object of the class itkBSplineDecompositionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineDecompositionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineDecompositionImageFilterIUS3IUS3.Clone = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_Clone, None, itkBSplineDecompositionImageFilterIUS3IUS3)
itkBSplineDecompositionImageFilterIUS3IUS3.SetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_SetSplineOrder, None, itkBSplineDecompositionImageFilterIUS3IUS3)
itkBSplineDecompositionImageFilterIUS3IUS3.GetSplineOrder = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplineOrder, None, itkBSplineDecompositionImageFilterIUS3IUS3)
itkBSplineDecompositionImageFilterIUS3IUS3.GetSplinePoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplinePoles, None, itkBSplineDecompositionImageFilterIUS3IUS3)
itkBSplineDecompositionImageFilterIUS3IUS3.GetNumberOfPoles = new_instancemethod(_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetNumberOfPoles, None, itkBSplineDecompositionImageFilterIUS3IUS3)
itkBSplineDecompositionImageFilterIUS3IUS3_swigregister = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_swigregister
itkBSplineDecompositionImageFilterIUS3IUS3_swigregister(itkBSplineDecompositionImageFilterIUS3IUS3)

def itkBSplineDecompositionImageFilterIUS3IUS3___New_orig__() -> "itkBSplineDecompositionImageFilterIUS3IUS3_Pointer":
    """itkBSplineDecompositionImageFilterIUS3IUS3___New_orig__() -> itkBSplineDecompositionImageFilterIUS3IUS3_Pointer"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3___New_orig__()

def itkBSplineDecompositionImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkBSplineDecompositionImageFilterIUS3IUS3 *":
    """itkBSplineDecompositionImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkBSplineDecompositionImageFilterIUS3IUS3"""
    return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def b_spline_decomposition_image_filter(*args, **kwargs):
    """Procedural interface for BSplineDecompositionImageFilter"""
    import itk
    instance = itk.BSplineDecompositionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def b_spline_decomposition_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BSplineDecompositionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BSplineDecompositionImageFilter.values()[0]
    else:
        filter_object = itk.BSplineDecompositionImageFilter

    b_spline_decomposition_image_filter.__doc__ = filter_object.__doc__
    b_spline_decomposition_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    b_spline_decomposition_image_filter.__doc__ += "Available Keyword Arguments:\n"
    b_spline_decomposition_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



