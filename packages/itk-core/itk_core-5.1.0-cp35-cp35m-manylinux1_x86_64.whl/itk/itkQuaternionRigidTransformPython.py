# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkQuaternionRigidTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkQuaternionRigidTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkQuaternionRigidTransformPython
            return _itkQuaternionRigidTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkQuaternionRigidTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkQuaternionRigidTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkQuaternionRigidTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRigid3DTransformPython
import ITKCommonBasePython
import itkMatrixOffsetTransformBasePython
import itkSymmetricSecondRankTensorPython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkTransformBasePython
import itkArrayPython
import itkArray2DPython
import itkOptimizerParametersPython

def itkQuaternionRigidTransformD_New():
  return itkQuaternionRigidTransformD.New()

class itkQuaternionRigidTransformD(itkRigid3DTransformPython.itkRigid3DTransformD):
    """


    QuaternionRigidTransform of a vector space (e.g. space coordinates).

    This transform applies a rotation and translation to the space given a
    quaternion and a 3D translation. Rotation is about a user specified
    center.

    The parameters for this transform can be set either using individual
    Set methods or in serialized form using SetParameters() and
    SetFixedParameters().

    The serialization of the optimizable parameters is an array of 7
    elements. The first 4 elements are the components of the quaternion
    representation of 3D rotation. The last 3 parameters defines the
    translation in each dimension.

    The serialization of the fixed parameters is an array of 3 elements
    defining the center of rotation.

    C++ includes: itkQuaternionRigidTransform.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkQuaternionRigidTransformD_Pointer":
        """__New_orig__() -> itkQuaternionRigidTransformD_Pointer"""
        return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkQuaternionRigidTransformD_Pointer":
        """Clone(itkQuaternionRigidTransformD self) -> itkQuaternionRigidTransformD_Pointer"""
        return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_Clone(self)


    def SetRotation(self, rotation: 'vnl_quaternion< double > const &') -> "void":
        """
        SetRotation(itkQuaternionRigidTransformD self, vnl_quaternion< double > const & rotation)

        Compute the Jacobian
        Matrix of the transformation at one point Set the rotation of the
        rigid transform. This method sets the rotation of a
        QuaternionRigidTransform to a value specified by the user. 
        """
        return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_SetRotation(self, rotation)


    def GetRotation(self) -> "vnl_quaternion< double > const &":
        """
        GetRotation(itkQuaternionRigidTransformD self) -> vnl_quaternion< double > const &

        Get the rotation from
        an QuaternionRigidTransform. This method returns the value of the
        rotation of the QuaternionRigidTransform. 
        """
        return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_GetRotation(self)

    __swig_destroy__ = _itkQuaternionRigidTransformPython.delete_itkQuaternionRigidTransformD

    def cast(obj: 'itkLightObject') -> "itkQuaternionRigidTransformD *":
        """cast(itkLightObject obj) -> itkQuaternionRigidTransformD"""
        return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkQuaternionRigidTransformD

        Create a new object of the class itkQuaternionRigidTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuaternionRigidTransformD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkQuaternionRigidTransformD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkQuaternionRigidTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkQuaternionRigidTransformD.Clone = new_instancemethod(_itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_Clone, None, itkQuaternionRigidTransformD)
itkQuaternionRigidTransformD.SetRotation = new_instancemethod(_itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_SetRotation, None, itkQuaternionRigidTransformD)
itkQuaternionRigidTransformD.GetRotation = new_instancemethod(_itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_GetRotation, None, itkQuaternionRigidTransformD)
itkQuaternionRigidTransformD_swigregister = _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_swigregister
itkQuaternionRigidTransformD_swigregister(itkQuaternionRigidTransformD)

def itkQuaternionRigidTransformD___New_orig__() -> "itkQuaternionRigidTransformD_Pointer":
    """itkQuaternionRigidTransformD___New_orig__() -> itkQuaternionRigidTransformD_Pointer"""
    return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD___New_orig__()

def itkQuaternionRigidTransformD_cast(obj: 'itkLightObject') -> "itkQuaternionRigidTransformD *":
    """itkQuaternionRigidTransformD_cast(itkLightObject obj) -> itkQuaternionRigidTransformD"""
    return _itkQuaternionRigidTransformPython.itkQuaternionRigidTransformD_cast(obj)



