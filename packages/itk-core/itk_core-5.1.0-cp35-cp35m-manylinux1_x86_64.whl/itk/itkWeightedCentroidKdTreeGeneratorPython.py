# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkWeightedCentroidKdTreeGeneratorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkWeightedCentroidKdTreeGeneratorPython', [dirname(__file__)])
        except ImportError:
            import _itkWeightedCentroidKdTreeGeneratorPython
            return _itkWeightedCentroidKdTreeGeneratorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkWeightedCentroidKdTreeGeneratorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkWeightedCentroidKdTreeGeneratorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkWeightedCentroidKdTreeGeneratorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkKdTreePython
import itkListSamplePython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkSamplePython
import itkArrayPython
import itkEuclideanDistanceMetricPython
import itkDistanceMetricPython
import itkFunctionBasePython
import itkRGBPixelPython
import itkPointPython
import itkCovariantVectorPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkContinuousIndexPython
import itkKdTreeGeneratorPython

def itkWeightedCentroidKdTreeGeneratorLSVF3_New():
  return itkWeightedCentroidKdTreeGeneratorLSVF3.New()


def itkWeightedCentroidKdTreeGeneratorLSVF2_New():
  return itkWeightedCentroidKdTreeGeneratorLSVF2.New()

class itkWeightedCentroidKdTreeGeneratorLSVF2(itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2):
    """


    This class generates a KdTree object with centroid information.

    The KdTree object stores measurement vectors in a k-d tree structure
    that is a binary tree. The partition value is the median value of one
    of the k dimension (partition dimension). The partition dimension is
    determined by the spread of measurement values in each dimension. The
    partition dimension is the dimension has the widest spread. Our
    implementation of k-d tree doesn't have any construction or insertion
    logic. Users should use this class or the KdTreeGenerator class.

    This class is derived from the KdTreeGenerator class. The only
    difference between this class and the KdTreeGenerator class is that
    the nonterminal node type of this class is
    KdTreeWeightedCentroidNonterminalNode and that of the KdTreeGenerator
    is KdTreeNonterminalNode. Therefore, the public interface is identical
    to each other. The nonterminal node generation routines differ.

    To run this generator, users should provides the bucket size
    (SetBucketSize method) and the input sample (SetSample method). The
    Update method will run this generator. To get the resulting KdTree
    object, call the GetOutput method.

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. It is
    now obtained from the sample set as input. You may query this length
    using the function GetMeasurementVectorSize().

    See:   KdTree, KdTreeNode, KdTreeWeightedCentroidNonterminalNode,
    KdTreeTerminalNode, KdTreeGenerator

    C++ includes: itkWeightedCentroidKdTreeGenerator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer":
        """__New_orig__() -> itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer":
        """Clone(itkWeightedCentroidKdTreeGeneratorLSVF2 self) -> itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2_Clone(self)

    __swig_destroy__ = _itkWeightedCentroidKdTreeGeneratorPython.delete_itkWeightedCentroidKdTreeGeneratorLSVF2

    def cast(obj: 'itkLightObject') -> "itkWeightedCentroidKdTreeGeneratorLSVF2 *":
        """cast(itkLightObject obj) -> itkWeightedCentroidKdTreeGeneratorLSVF2"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedCentroidKdTreeGeneratorLSVF2

        Create a new object of the class itkWeightedCentroidKdTreeGeneratorLSVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedCentroidKdTreeGeneratorLSVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedCentroidKdTreeGeneratorLSVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedCentroidKdTreeGeneratorLSVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedCentroidKdTreeGeneratorLSVF2.Clone = new_instancemethod(_itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2_Clone, None, itkWeightedCentroidKdTreeGeneratorLSVF2)
itkWeightedCentroidKdTreeGeneratorLSVF2_swigregister = _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2_swigregister
itkWeightedCentroidKdTreeGeneratorLSVF2_swigregister(itkWeightedCentroidKdTreeGeneratorLSVF2)

def itkWeightedCentroidKdTreeGeneratorLSVF2___New_orig__() -> "itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer":
    """itkWeightedCentroidKdTreeGeneratorLSVF2___New_orig__() -> itkWeightedCentroidKdTreeGeneratorLSVF2_Pointer"""
    return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2___New_orig__()

def itkWeightedCentroidKdTreeGeneratorLSVF2_cast(obj: 'itkLightObject') -> "itkWeightedCentroidKdTreeGeneratorLSVF2 *":
    """itkWeightedCentroidKdTreeGeneratorLSVF2_cast(itkLightObject obj) -> itkWeightedCentroidKdTreeGeneratorLSVF2"""
    return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF2_cast(obj)

class itkWeightedCentroidKdTreeGeneratorLSVF3(itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3):
    """


    This class generates a KdTree object with centroid information.

    The KdTree object stores measurement vectors in a k-d tree structure
    that is a binary tree. The partition value is the median value of one
    of the k dimension (partition dimension). The partition dimension is
    determined by the spread of measurement values in each dimension. The
    partition dimension is the dimension has the widest spread. Our
    implementation of k-d tree doesn't have any construction or insertion
    logic. Users should use this class or the KdTreeGenerator class.

    This class is derived from the KdTreeGenerator class. The only
    difference between this class and the KdTreeGenerator class is that
    the nonterminal node type of this class is
    KdTreeWeightedCentroidNonterminalNode and that of the KdTreeGenerator
    is KdTreeNonterminalNode. Therefore, the public interface is identical
    to each other. The nonterminal node generation routines differ.

    To run this generator, users should provides the bucket size
    (SetBucketSize method) and the input sample (SetSample method). The
    Update method will run this generator. To get the resulting KdTree
    object, call the GetOutput method.

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. It is
    now obtained from the sample set as input. You may query this length
    using the function GetMeasurementVectorSize().

    See:   KdTree, KdTreeNode, KdTreeWeightedCentroidNonterminalNode,
    KdTreeTerminalNode, KdTreeGenerator

    C++ includes: itkWeightedCentroidKdTreeGenerator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer":
        """__New_orig__() -> itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer":
        """Clone(itkWeightedCentroidKdTreeGeneratorLSVF3 self) -> itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3_Clone(self)

    __swig_destroy__ = _itkWeightedCentroidKdTreeGeneratorPython.delete_itkWeightedCentroidKdTreeGeneratorLSVF3

    def cast(obj: 'itkLightObject') -> "itkWeightedCentroidKdTreeGeneratorLSVF3 *":
        """cast(itkLightObject obj) -> itkWeightedCentroidKdTreeGeneratorLSVF3"""
        return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedCentroidKdTreeGeneratorLSVF3

        Create a new object of the class itkWeightedCentroidKdTreeGeneratorLSVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedCentroidKdTreeGeneratorLSVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedCentroidKdTreeGeneratorLSVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedCentroidKdTreeGeneratorLSVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedCentroidKdTreeGeneratorLSVF3.Clone = new_instancemethod(_itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3_Clone, None, itkWeightedCentroidKdTreeGeneratorLSVF3)
itkWeightedCentroidKdTreeGeneratorLSVF3_swigregister = _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3_swigregister
itkWeightedCentroidKdTreeGeneratorLSVF3_swigregister(itkWeightedCentroidKdTreeGeneratorLSVF3)

def itkWeightedCentroidKdTreeGeneratorLSVF3___New_orig__() -> "itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer":
    """itkWeightedCentroidKdTreeGeneratorLSVF3___New_orig__() -> itkWeightedCentroidKdTreeGeneratorLSVF3_Pointer"""
    return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3___New_orig__()

def itkWeightedCentroidKdTreeGeneratorLSVF3_cast(obj: 'itkLightObject') -> "itkWeightedCentroidKdTreeGeneratorLSVF3 *":
    """itkWeightedCentroidKdTreeGeneratorLSVF3_cast(itkLightObject obj) -> itkWeightedCentroidKdTreeGeneratorLSVF3"""
    return _itkWeightedCentroidKdTreeGeneratorPython.itkWeightedCentroidKdTreeGeneratorLSVF3_cast(obj)



