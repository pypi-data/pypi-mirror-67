# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGaussianInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGaussianInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkGaussianInterpolateImageFunctionPython
            return _itkGaussianInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGaussianInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGaussianInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGaussianInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSizePython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkImageRegionPython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkContinuousIndexPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython

def itkGaussianInterpolateImageFunctionID3D_New():
  return itkGaussianInterpolateImageFunctionID3D.New()


def itkGaussianInterpolateImageFunctionIF3D_New():
  return itkGaussianInterpolateImageFunctionIF3D.New()


def itkGaussianInterpolateImageFunctionIUS3D_New():
  return itkGaussianInterpolateImageFunctionIUS3D.New()


def itkGaussianInterpolateImageFunctionIUC3D_New():
  return itkGaussianInterpolateImageFunctionIUC3D.New()


def itkGaussianInterpolateImageFunctionISS3D_New():
  return itkGaussianInterpolateImageFunctionISS3D.New()


def itkGaussianInterpolateImageFunctionID2D_New():
  return itkGaussianInterpolateImageFunctionID2D.New()


def itkGaussianInterpolateImageFunctionIF2D_New():
  return itkGaussianInterpolateImageFunctionIF2D.New()


def itkGaussianInterpolateImageFunctionIUS2D_New():
  return itkGaussianInterpolateImageFunctionIUS2D.New()


def itkGaussianInterpolateImageFunctionIUC2D_New():
  return itkGaussianInterpolateImageFunctionIUC2D.New()


def itkGaussianInterpolateImageFunctionISS2D_New():
  return itkGaussianInterpolateImageFunctionISS2D.New()

class itkGaussianInterpolateImageFunctionID2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionID2D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionID2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionID2D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionID2D self) -> itkGaussianInterpolateImageFunctionID2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionID2D self, itkFixedArrayD2 s)
        SetSigma(itkGaussianInterpolateImageFunctionID2D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD2":
        """GetSigma(itkGaussianInterpolateImageFunctionID2D self) -> itkFixedArrayD2"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionID2D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionID2D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionID2D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionID2D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionID2D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionID2D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionID2D

        Create a new object of the class itkGaussianInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionID2D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_Clone, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetSigma, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetSigma, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetAlpha, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetAlpha, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetParameters, None, itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_swigregister
itkGaussianInterpolateImageFunctionID2D_swigregister(itkGaussianInterpolateImageFunctionID2D)

def itkGaussianInterpolateImageFunctionID2D___New_orig__() -> "itkGaussianInterpolateImageFunctionID2D_Pointer":
    """itkGaussianInterpolateImageFunctionID2D___New_orig__() -> itkGaussianInterpolateImageFunctionID2D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D___New_orig__()

def itkGaussianInterpolateImageFunctionID2D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionID2D *":
    """itkGaussianInterpolateImageFunctionID2D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionID2D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_cast(obj)

class itkGaussianInterpolateImageFunctionID3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionID3D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionID3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionID3D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionID3D self) -> itkGaussianInterpolateImageFunctionID3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionID3D self, itkFixedArrayD3 s)
        SetSigma(itkGaussianInterpolateImageFunctionID3D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD3":
        """GetSigma(itkGaussianInterpolateImageFunctionID3D self) -> itkFixedArrayD3"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionID3D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionID3D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionID3D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionID3D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionID3D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionID3D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionID3D

        Create a new object of the class itkGaussianInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionID3D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_Clone, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetSigma, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetSigma, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetAlpha, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetAlpha, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetParameters, None, itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_swigregister
itkGaussianInterpolateImageFunctionID3D_swigregister(itkGaussianInterpolateImageFunctionID3D)

def itkGaussianInterpolateImageFunctionID3D___New_orig__() -> "itkGaussianInterpolateImageFunctionID3D_Pointer":
    """itkGaussianInterpolateImageFunctionID3D___New_orig__() -> itkGaussianInterpolateImageFunctionID3D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D___New_orig__()

def itkGaussianInterpolateImageFunctionID3D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionID3D *":
    """itkGaussianInterpolateImageFunctionID3D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionID3D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_cast(obj)

class itkGaussianInterpolateImageFunctionIF2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIF2D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIF2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIF2D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIF2D self) -> itkGaussianInterpolateImageFunctionIF2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIF2D self, itkFixedArrayD2 s)
        SetSigma(itkGaussianInterpolateImageFunctionIF2D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD2":
        """GetSigma(itkGaussianInterpolateImageFunctionIF2D self) -> itkFixedArrayD2"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIF2D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIF2D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIF2D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIF2D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIF2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIF2D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_Clone, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetSigma, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetSigma, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetAlpha, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetAlpha, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetParameters, None, itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_swigregister
itkGaussianInterpolateImageFunctionIF2D_swigregister(itkGaussianInterpolateImageFunctionIF2D)

def itkGaussianInterpolateImageFunctionIF2D___New_orig__() -> "itkGaussianInterpolateImageFunctionIF2D_Pointer":
    """itkGaussianInterpolateImageFunctionIF2D___New_orig__() -> itkGaussianInterpolateImageFunctionIF2D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D___New_orig__()

def itkGaussianInterpolateImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIF2D *":
    """itkGaussianInterpolateImageFunctionIF2D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIF2D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_cast(obj)

class itkGaussianInterpolateImageFunctionIF3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIF3D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIF3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIF3D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIF3D self) -> itkGaussianInterpolateImageFunctionIF3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIF3D self, itkFixedArrayD3 s)
        SetSigma(itkGaussianInterpolateImageFunctionIF3D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD3":
        """GetSigma(itkGaussianInterpolateImageFunctionIF3D self) -> itkFixedArrayD3"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIF3D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIF3D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIF3D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIF3D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIF3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIF3D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_Clone, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetSigma, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetSigma, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetAlpha, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetAlpha, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetParameters, None, itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_swigregister
itkGaussianInterpolateImageFunctionIF3D_swigregister(itkGaussianInterpolateImageFunctionIF3D)

def itkGaussianInterpolateImageFunctionIF3D___New_orig__() -> "itkGaussianInterpolateImageFunctionIF3D_Pointer":
    """itkGaussianInterpolateImageFunctionIF3D___New_orig__() -> itkGaussianInterpolateImageFunctionIF3D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D___New_orig__()

def itkGaussianInterpolateImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIF3D *":
    """itkGaussianInterpolateImageFunctionIF3D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIF3D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_cast(obj)

class itkGaussianInterpolateImageFunctionISS2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionISS2D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionISS2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionISS2D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionISS2D self) -> itkGaussianInterpolateImageFunctionISS2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionISS2D self, itkFixedArrayD2 s)
        SetSigma(itkGaussianInterpolateImageFunctionISS2D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD2":
        """GetSigma(itkGaussianInterpolateImageFunctionISS2D self) -> itkFixedArrayD2"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionISS2D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionISS2D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionISS2D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionISS2D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionISS2D

        Create a new object of the class itkGaussianInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionISS2D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_Clone, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetSigma, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetSigma, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetAlpha, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetAlpha, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetParameters, None, itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_swigregister
itkGaussianInterpolateImageFunctionISS2D_swigregister(itkGaussianInterpolateImageFunctionISS2D)

def itkGaussianInterpolateImageFunctionISS2D___New_orig__() -> "itkGaussianInterpolateImageFunctionISS2D_Pointer":
    """itkGaussianInterpolateImageFunctionISS2D___New_orig__() -> itkGaussianInterpolateImageFunctionISS2D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D___New_orig__()

def itkGaussianInterpolateImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionISS2D *":
    """itkGaussianInterpolateImageFunctionISS2D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionISS2D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_cast(obj)

class itkGaussianInterpolateImageFunctionISS3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionISS3D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionISS3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionISS3D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionISS3D self) -> itkGaussianInterpolateImageFunctionISS3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionISS3D self, itkFixedArrayD3 s)
        SetSigma(itkGaussianInterpolateImageFunctionISS3D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD3":
        """GetSigma(itkGaussianInterpolateImageFunctionISS3D self) -> itkFixedArrayD3"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionISS3D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionISS3D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionISS3D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionISS3D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionISS3D

        Create a new object of the class itkGaussianInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionISS3D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_Clone, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetSigma, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetSigma, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetAlpha, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetAlpha, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetParameters, None, itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_swigregister
itkGaussianInterpolateImageFunctionISS3D_swigregister(itkGaussianInterpolateImageFunctionISS3D)

def itkGaussianInterpolateImageFunctionISS3D___New_orig__() -> "itkGaussianInterpolateImageFunctionISS3D_Pointer":
    """itkGaussianInterpolateImageFunctionISS3D___New_orig__() -> itkGaussianInterpolateImageFunctionISS3D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D___New_orig__()

def itkGaussianInterpolateImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionISS3D *":
    """itkGaussianInterpolateImageFunctionISS3D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionISS3D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_cast(obj)

class itkGaussianInterpolateImageFunctionIUC2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIUC2D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIUC2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIUC2D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIUC2D self) -> itkGaussianInterpolateImageFunctionIUC2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIUC2D self, itkFixedArrayD2 s)
        SetSigma(itkGaussianInterpolateImageFunctionIUC2D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD2":
        """GetSigma(itkGaussianInterpolateImageFunctionIUC2D self) -> itkFixedArrayD2"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIUC2D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIUC2D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIUC2D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUC2D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUC2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIUC2D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_Clone, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetSigma, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetSigma, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetAlpha, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetAlpha, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetParameters, None, itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_swigregister
itkGaussianInterpolateImageFunctionIUC2D_swigregister(itkGaussianInterpolateImageFunctionIUC2D)

def itkGaussianInterpolateImageFunctionIUC2D___New_orig__() -> "itkGaussianInterpolateImageFunctionIUC2D_Pointer":
    """itkGaussianInterpolateImageFunctionIUC2D___New_orig__() -> itkGaussianInterpolateImageFunctionIUC2D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D___New_orig__()

def itkGaussianInterpolateImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUC2D *":
    """itkGaussianInterpolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUC2D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_cast(obj)

class itkGaussianInterpolateImageFunctionIUC3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIUC3D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIUC3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIUC3D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIUC3D self) -> itkGaussianInterpolateImageFunctionIUC3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIUC3D self, itkFixedArrayD3 s)
        SetSigma(itkGaussianInterpolateImageFunctionIUC3D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD3":
        """GetSigma(itkGaussianInterpolateImageFunctionIUC3D self) -> itkFixedArrayD3"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIUC3D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIUC3D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIUC3D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUC3D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUC3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIUC3D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_Clone, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetSigma, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetSigma, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetAlpha, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetAlpha, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetParameters, None, itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_swigregister
itkGaussianInterpolateImageFunctionIUC3D_swigregister(itkGaussianInterpolateImageFunctionIUC3D)

def itkGaussianInterpolateImageFunctionIUC3D___New_orig__() -> "itkGaussianInterpolateImageFunctionIUC3D_Pointer":
    """itkGaussianInterpolateImageFunctionIUC3D___New_orig__() -> itkGaussianInterpolateImageFunctionIUC3D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D___New_orig__()

def itkGaussianInterpolateImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUC3D *":
    """itkGaussianInterpolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUC3D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_cast(obj)

class itkGaussianInterpolateImageFunctionIUS2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIUS2D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIUS2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIUS2D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIUS2D self) -> itkGaussianInterpolateImageFunctionIUS2D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIUS2D self, itkFixedArrayD2 s)
        SetSigma(itkGaussianInterpolateImageFunctionIUS2D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD2":
        """GetSigma(itkGaussianInterpolateImageFunctionIUS2D self) -> itkFixedArrayD2"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIUS2D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIUS2D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIUS2D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUS2D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUS2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIUS2D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_Clone, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetSigma, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetSigma, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetAlpha, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetAlpha, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetParameters, None, itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_swigregister
itkGaussianInterpolateImageFunctionIUS2D_swigregister(itkGaussianInterpolateImageFunctionIUS2D)

def itkGaussianInterpolateImageFunctionIUS2D___New_orig__() -> "itkGaussianInterpolateImageFunctionIUS2D_Pointer":
    """itkGaussianInterpolateImageFunctionIUS2D___New_orig__() -> itkGaussianInterpolateImageFunctionIUS2D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D___New_orig__()

def itkGaussianInterpolateImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUS2D *":
    """itkGaussianInterpolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUS2D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_cast(obj)

class itkGaussianInterpolateImageFunctionIUS3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    """


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison

    C++ includes: itkGaussianInterpolateImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianInterpolateImageFunctionIUS3D_Pointer":
        """__New_orig__() -> itkGaussianInterpolateImageFunctionIUS3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianInterpolateImageFunctionIUS3D_Pointer":
        """Clone(itkGaussianInterpolateImageFunctionIUS3D self) -> itkGaussianInterpolateImageFunctionIUS3D_Pointer"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_Clone(self)


    def SetSigma(self, *args) -> "void":
        """
        SetSigma(itkGaussianInterpolateImageFunctionIUS3D self, itkFixedArrayD3 s)
        SetSigma(itkGaussianInterpolateImageFunctionIUS3D self, double * s)

        Set/Get sigma. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetSigma(self, *args)


    def GetSigma(self) -> "itkFixedArrayD3":
        """GetSigma(itkGaussianInterpolateImageFunctionIUS3D self) -> itkFixedArrayD3"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetSigma(self)


    def SetAlpha(self, a: 'double const') -> "void":
        """
        SetAlpha(itkGaussianInterpolateImageFunctionIUS3D self, double const a)

        Set/Get alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetAlpha(self, a)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkGaussianInterpolateImageFunctionIUS3D self) -> double"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetAlpha(self)


    def SetParameters(self, sigma: 'double *', alpha: 'double') -> "void":
        """
        SetParameters(itkGaussianInterpolateImageFunctionIUS3D self, double * sigma, double alpha)

        Set/Get sigma and
        alpha. 
        """
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetParameters(self, sigma, alpha)

    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUS3D"""
        return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUS3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianInterpolateImageFunctionIUS3D.Clone = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_Clone, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D.SetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetSigma, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D.GetSigma = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetSigma, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D.SetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetAlpha, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D.GetAlpha = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetAlpha, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D.SetParameters = new_instancemethod(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetParameters, None, itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D_swigregister = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_swigregister
itkGaussianInterpolateImageFunctionIUS3D_swigregister(itkGaussianInterpolateImageFunctionIUS3D)

def itkGaussianInterpolateImageFunctionIUS3D___New_orig__() -> "itkGaussianInterpolateImageFunctionIUS3D_Pointer":
    """itkGaussianInterpolateImageFunctionIUS3D___New_orig__() -> itkGaussianInterpolateImageFunctionIUS3D_Pointer"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D___New_orig__()

def itkGaussianInterpolateImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkGaussianInterpolateImageFunctionIUS3D *":
    """itkGaussianInterpolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkGaussianInterpolateImageFunctionIUS3D"""
    return _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_cast(obj)



