# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkStreamingImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkStreamingImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkStreamingImageFilterPython
            return _itkStreamingImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkStreamingImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkStreamingImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkStreamingImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import ITKCommonBasePython
import pyBasePython
import itkImageSourcePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageSourceCommonPython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython

def itkStreamingImageFilterIVF43IVF43_New():
  return itkStreamingImageFilterIVF43IVF43.New()


def itkStreamingImageFilterIVF42IVF42_New():
  return itkStreamingImageFilterIVF42IVF42.New()


def itkStreamingImageFilterIVF33IVF33_New():
  return itkStreamingImageFilterIVF33IVF33.New()


def itkStreamingImageFilterIVF32IVF32_New():
  return itkStreamingImageFilterIVF32IVF32.New()


def itkStreamingImageFilterIVF23IVF23_New():
  return itkStreamingImageFilterIVF23IVF23.New()


def itkStreamingImageFilterIVF22IVF22_New():
  return itkStreamingImageFilterIVF22IVF22.New()


def itkStreamingImageFilterID3ID3_New():
  return itkStreamingImageFilterID3ID3.New()


def itkStreamingImageFilterID2ID2_New():
  return itkStreamingImageFilterID2ID2.New()


def itkStreamingImageFilterIF3IF3_New():
  return itkStreamingImageFilterIF3IF3.New()


def itkStreamingImageFilterIF2IF2_New():
  return itkStreamingImageFilterIF2IF2.New()


def itkStreamingImageFilterIUS3IUS3_New():
  return itkStreamingImageFilterIUS3IUS3.New()


def itkStreamingImageFilterIUS2IUS2_New():
  return itkStreamingImageFilterIUS2IUS2.New()


def itkStreamingImageFilterIUC3IUC3_New():
  return itkStreamingImageFilterIUC3IUC3.New()


def itkStreamingImageFilterIUC2IUC2_New():
  return itkStreamingImageFilterIUC2IUC2.New()


def itkStreamingImageFilterISS3ISS3_New():
  return itkStreamingImageFilterISS3ISS3.New()


def itkStreamingImageFilterISS2ISS2_New():
  return itkStreamingImageFilterISS2ISS2.New()

class itkStreamingImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkStreamingImageFilterID2ID2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterID2ID2_Pointer":
        """Clone(itkStreamingImageFilterID2ID2 self) -> itkStreamingImageFilterID2ID2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterID2ID2 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterID2ID2 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterID2ID2 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterID2ID2 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterID2ID2 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterID2ID2 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterID2ID2"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterID2ID2

        Create a new object of the class itkStreamingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterID2ID2.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_Clone, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetNumberOfStreamDivisions, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetNumberOfStreamDivisions, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetRegionSplitter, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetModifiableRegionSplitter, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetRegionSplitter, None, itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_swigregister
itkStreamingImageFilterID2ID2_swigregister(itkStreamingImageFilterID2ID2)

def itkStreamingImageFilterID2ID2___New_orig__() -> "itkStreamingImageFilterID2ID2_Pointer":
    """itkStreamingImageFilterID2ID2___New_orig__() -> itkStreamingImageFilterID2ID2_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2___New_orig__()

def itkStreamingImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterID2ID2 *":
    """itkStreamingImageFilterID2ID2_cast(itkLightObject obj) -> itkStreamingImageFilterID2ID2"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_cast(obj)

class itkStreamingImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkStreamingImageFilterID3ID3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterID3ID3_Pointer":
        """Clone(itkStreamingImageFilterID3ID3 self) -> itkStreamingImageFilterID3ID3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterID3ID3 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterID3ID3 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterID3ID3 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterID3ID3 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterID3ID3 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterID3ID3 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterID3ID3"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterID3ID3

        Create a new object of the class itkStreamingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterID3ID3.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_Clone, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetNumberOfStreamDivisions, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetNumberOfStreamDivisions, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetRegionSplitter, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetModifiableRegionSplitter, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetRegionSplitter, None, itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_swigregister
itkStreamingImageFilterID3ID3_swigregister(itkStreamingImageFilterID3ID3)

def itkStreamingImageFilterID3ID3___New_orig__() -> "itkStreamingImageFilterID3ID3_Pointer":
    """itkStreamingImageFilterID3ID3___New_orig__() -> itkStreamingImageFilterID3ID3_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3___New_orig__()

def itkStreamingImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterID3ID3 *":
    """itkStreamingImageFilterID3ID3_cast(itkLightObject obj) -> itkStreamingImageFilterID3ID3"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_cast(obj)

class itkStreamingImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIF2IF2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIF2IF2_Pointer":
        """Clone(itkStreamingImageFilterIF2IF2 self) -> itkStreamingImageFilterIF2IF2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIF2IF2 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIF2IF2 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIF2IF2 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIF2IF2 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIF2IF2 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIF2IF2 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIF2IF2"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIF2IF2

        Create a new object of the class itkStreamingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIF2IF2.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_Clone, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetRegionSplitter, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetModifiableRegionSplitter, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetRegionSplitter, None, itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_swigregister
itkStreamingImageFilterIF2IF2_swigregister(itkStreamingImageFilterIF2IF2)

def itkStreamingImageFilterIF2IF2___New_orig__() -> "itkStreamingImageFilterIF2IF2_Pointer":
    """itkStreamingImageFilterIF2IF2___New_orig__() -> itkStreamingImageFilterIF2IF2_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2___New_orig__()

def itkStreamingImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIF2IF2 *":
    """itkStreamingImageFilterIF2IF2_cast(itkLightObject obj) -> itkStreamingImageFilterIF2IF2"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_cast(obj)

class itkStreamingImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIF3IF3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIF3IF3_Pointer":
        """Clone(itkStreamingImageFilterIF3IF3 self) -> itkStreamingImageFilterIF3IF3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIF3IF3 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIF3IF3 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIF3IF3 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIF3IF3 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIF3IF3 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIF3IF3 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIF3IF3"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIF3IF3

        Create a new object of the class itkStreamingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIF3IF3.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_Clone, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetRegionSplitter, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetModifiableRegionSplitter, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetRegionSplitter, None, itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_swigregister
itkStreamingImageFilterIF3IF3_swigregister(itkStreamingImageFilterIF3IF3)

def itkStreamingImageFilterIF3IF3___New_orig__() -> "itkStreamingImageFilterIF3IF3_Pointer":
    """itkStreamingImageFilterIF3IF3___New_orig__() -> itkStreamingImageFilterIF3IF3_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3___New_orig__()

def itkStreamingImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIF3IF3 *":
    """itkStreamingImageFilterIF3IF3_cast(itkLightObject obj) -> itkStreamingImageFilterIF3IF3"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_cast(obj)

class itkStreamingImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkStreamingImageFilterISS2ISS2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterISS2ISS2_Pointer":
        """Clone(itkStreamingImageFilterISS2ISS2 self) -> itkStreamingImageFilterISS2ISS2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterISS2ISS2 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterISS2ISS2 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterISS2ISS2 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterISS2ISS2 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterISS2ISS2 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterISS2ISS2 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterISS2ISS2"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterISS2ISS2

        Create a new object of the class itkStreamingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterISS2ISS2.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_Clone, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetNumberOfStreamDivisions, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetNumberOfStreamDivisions, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetRegionSplitter, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetModifiableRegionSplitter, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetRegionSplitter, None, itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_swigregister
itkStreamingImageFilterISS2ISS2_swigregister(itkStreamingImageFilterISS2ISS2)

def itkStreamingImageFilterISS2ISS2___New_orig__() -> "itkStreamingImageFilterISS2ISS2_Pointer":
    """itkStreamingImageFilterISS2ISS2___New_orig__() -> itkStreamingImageFilterISS2ISS2_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2___New_orig__()

def itkStreamingImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterISS2ISS2 *":
    """itkStreamingImageFilterISS2ISS2_cast(itkLightObject obj) -> itkStreamingImageFilterISS2ISS2"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_cast(obj)

class itkStreamingImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkStreamingImageFilterISS3ISS3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterISS3ISS3_Pointer":
        """Clone(itkStreamingImageFilterISS3ISS3 self) -> itkStreamingImageFilterISS3ISS3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterISS3ISS3 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterISS3ISS3 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterISS3ISS3 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterISS3ISS3 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterISS3ISS3 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterISS3ISS3 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterISS3ISS3"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterISS3ISS3

        Create a new object of the class itkStreamingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterISS3ISS3.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_Clone, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetNumberOfStreamDivisions, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetNumberOfStreamDivisions, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetRegionSplitter, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetModifiableRegionSplitter, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetRegionSplitter, None, itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_swigregister
itkStreamingImageFilterISS3ISS3_swigregister(itkStreamingImageFilterISS3ISS3)

def itkStreamingImageFilterISS3ISS3___New_orig__() -> "itkStreamingImageFilterISS3ISS3_Pointer":
    """itkStreamingImageFilterISS3ISS3___New_orig__() -> itkStreamingImageFilterISS3ISS3_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3___New_orig__()

def itkStreamingImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterISS3ISS3 *":
    """itkStreamingImageFilterISS3ISS3_cast(itkLightObject obj) -> itkStreamingImageFilterISS3ISS3"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_cast(obj)

class itkStreamingImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIUC2IUC2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIUC2IUC2_Pointer":
        """Clone(itkStreamingImageFilterIUC2IUC2 self) -> itkStreamingImageFilterIUC2IUC2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIUC2IUC2 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIUC2IUC2 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIUC2IUC2 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIUC2IUC2 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIUC2IUC2 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIUC2IUC2 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIUC2IUC2"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUC2IUC2

        Create a new object of the class itkStreamingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIUC2IUC2.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_Clone, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetRegionSplitter, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetModifiableRegionSplitter, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetRegionSplitter, None, itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_swigregister
itkStreamingImageFilterIUC2IUC2_swigregister(itkStreamingImageFilterIUC2IUC2)

def itkStreamingImageFilterIUC2IUC2___New_orig__() -> "itkStreamingImageFilterIUC2IUC2_Pointer":
    """itkStreamingImageFilterIUC2IUC2___New_orig__() -> itkStreamingImageFilterIUC2IUC2_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2___New_orig__()

def itkStreamingImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUC2IUC2 *":
    """itkStreamingImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkStreamingImageFilterIUC2IUC2"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_cast(obj)

class itkStreamingImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIUC3IUC3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIUC3IUC3_Pointer":
        """Clone(itkStreamingImageFilterIUC3IUC3 self) -> itkStreamingImageFilterIUC3IUC3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIUC3IUC3 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIUC3IUC3 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIUC3IUC3 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIUC3IUC3 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIUC3IUC3 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIUC3IUC3 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIUC3IUC3"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUC3IUC3

        Create a new object of the class itkStreamingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIUC3IUC3.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_Clone, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetRegionSplitter, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetModifiableRegionSplitter, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetRegionSplitter, None, itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_swigregister
itkStreamingImageFilterIUC3IUC3_swigregister(itkStreamingImageFilterIUC3IUC3)

def itkStreamingImageFilterIUC3IUC3___New_orig__() -> "itkStreamingImageFilterIUC3IUC3_Pointer":
    """itkStreamingImageFilterIUC3IUC3___New_orig__() -> itkStreamingImageFilterIUC3IUC3_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3___New_orig__()

def itkStreamingImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUC3IUC3 *":
    """itkStreamingImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkStreamingImageFilterIUC3IUC3"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_cast(obj)

class itkStreamingImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIUS2IUS2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIUS2IUS2_Pointer":
        """Clone(itkStreamingImageFilterIUS2IUS2 self) -> itkStreamingImageFilterIUS2IUS2_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIUS2IUS2 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIUS2IUS2 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIUS2IUS2 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIUS2IUS2 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIUS2IUS2 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIUS2IUS2 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIUS2IUS2"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUS2IUS2

        Create a new object of the class itkStreamingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIUS2IUS2.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_Clone, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetRegionSplitter, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetModifiableRegionSplitter, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetRegionSplitter, None, itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_swigregister
itkStreamingImageFilterIUS2IUS2_swigregister(itkStreamingImageFilterIUS2IUS2)

def itkStreamingImageFilterIUS2IUS2___New_orig__() -> "itkStreamingImageFilterIUS2IUS2_Pointer":
    """itkStreamingImageFilterIUS2IUS2___New_orig__() -> itkStreamingImageFilterIUS2IUS2_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2___New_orig__()

def itkStreamingImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUS2IUS2 *":
    """itkStreamingImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkStreamingImageFilterIUS2IUS2"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_cast(obj)

class itkStreamingImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIUS3IUS3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIUS3IUS3_Pointer":
        """Clone(itkStreamingImageFilterIUS3IUS3 self) -> itkStreamingImageFilterIUS3IUS3_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIUS3IUS3 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIUS3IUS3 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIUS3IUS3 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIUS3IUS3 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIUS3IUS3 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIUS3IUS3 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIUS3IUS3"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUS3IUS3

        Create a new object of the class itkStreamingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIUS3IUS3.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_Clone, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetRegionSplitter, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetModifiableRegionSplitter, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetRegionSplitter, None, itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_swigregister
itkStreamingImageFilterIUS3IUS3_swigregister(itkStreamingImageFilterIUS3IUS3)

def itkStreamingImageFilterIUS3IUS3___New_orig__() -> "itkStreamingImageFilterIUS3IUS3_Pointer":
    """itkStreamingImageFilterIUS3IUS3___New_orig__() -> itkStreamingImageFilterIUS3IUS3_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3___New_orig__()

def itkStreamingImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIUS3IUS3 *":
    """itkStreamingImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkStreamingImageFilterIUS3IUS3"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_cast(obj)

class itkStreamingImageFilterIVF22IVF22(itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF22IVF22_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF22IVF22_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF22IVF22_Pointer":
        """Clone(itkStreamingImageFilterIVF22IVF22 self) -> itkStreamingImageFilterIVF22IVF22_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF22IVF22 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF22IVF22 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF22IVF22 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF22IVF22 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF22IVF22 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF22IVF22 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF22IVF22

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF22IVF22 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF22IVF22"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF22IVF22

        Create a new object of the class itkStreamingImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF22IVF22.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_Clone, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetRegionSplitter, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetRegionSplitter, None, itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_swigregister
itkStreamingImageFilterIVF22IVF22_swigregister(itkStreamingImageFilterIVF22IVF22)

def itkStreamingImageFilterIVF22IVF22___New_orig__() -> "itkStreamingImageFilterIVF22IVF22_Pointer":
    """itkStreamingImageFilterIVF22IVF22___New_orig__() -> itkStreamingImageFilterIVF22IVF22_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22___New_orig__()

def itkStreamingImageFilterIVF22IVF22_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF22IVF22 *":
    """itkStreamingImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkStreamingImageFilterIVF22IVF22"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_cast(obj)

class itkStreamingImageFilterIVF23IVF23(itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF23IVF23_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF23IVF23_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF23IVF23_Pointer":
        """Clone(itkStreamingImageFilterIVF23IVF23 self) -> itkStreamingImageFilterIVF23IVF23_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF23IVF23 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF23IVF23 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF23IVF23 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF23IVF23 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF23IVF23 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF23IVF23 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF23IVF23

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF23IVF23 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF23IVF23"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF23IVF23

        Create a new object of the class itkStreamingImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF23IVF23.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_Clone, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetRegionSplitter, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetRegionSplitter, None, itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_swigregister
itkStreamingImageFilterIVF23IVF23_swigregister(itkStreamingImageFilterIVF23IVF23)

def itkStreamingImageFilterIVF23IVF23___New_orig__() -> "itkStreamingImageFilterIVF23IVF23_Pointer":
    """itkStreamingImageFilterIVF23IVF23___New_orig__() -> itkStreamingImageFilterIVF23IVF23_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23___New_orig__()

def itkStreamingImageFilterIVF23IVF23_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF23IVF23 *":
    """itkStreamingImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkStreamingImageFilterIVF23IVF23"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_cast(obj)

class itkStreamingImageFilterIVF32IVF32(itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF32IVF32_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF32IVF32_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF32IVF32_Pointer":
        """Clone(itkStreamingImageFilterIVF32IVF32 self) -> itkStreamingImageFilterIVF32IVF32_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF32IVF32 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF32IVF32 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF32IVF32 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF32IVF32 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF32IVF32 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF32IVF32 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF32IVF32

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF32IVF32 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF32IVF32"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF32IVF32

        Create a new object of the class itkStreamingImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF32IVF32.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_Clone, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetRegionSplitter, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetRegionSplitter, None, itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_swigregister
itkStreamingImageFilterIVF32IVF32_swigregister(itkStreamingImageFilterIVF32IVF32)

def itkStreamingImageFilterIVF32IVF32___New_orig__() -> "itkStreamingImageFilterIVF32IVF32_Pointer":
    """itkStreamingImageFilterIVF32IVF32___New_orig__() -> itkStreamingImageFilterIVF32IVF32_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32___New_orig__()

def itkStreamingImageFilterIVF32IVF32_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF32IVF32 *":
    """itkStreamingImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkStreamingImageFilterIVF32IVF32"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_cast(obj)

class itkStreamingImageFilterIVF33IVF33(itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF33IVF33_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF33IVF33_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF33IVF33_Pointer":
        """Clone(itkStreamingImageFilterIVF33IVF33 self) -> itkStreamingImageFilterIVF33IVF33_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF33IVF33 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF33IVF33 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF33IVF33 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF33IVF33 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF33IVF33 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF33IVF33 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF33IVF33

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF33IVF33 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF33IVF33"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF33IVF33

        Create a new object of the class itkStreamingImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF33IVF33.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_Clone, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetRegionSplitter, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetRegionSplitter, None, itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_swigregister
itkStreamingImageFilterIVF33IVF33_swigregister(itkStreamingImageFilterIVF33IVF33)

def itkStreamingImageFilterIVF33IVF33___New_orig__() -> "itkStreamingImageFilterIVF33IVF33_Pointer":
    """itkStreamingImageFilterIVF33IVF33___New_orig__() -> itkStreamingImageFilterIVF33IVF33_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33___New_orig__()

def itkStreamingImageFilterIVF33IVF33_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF33IVF33 *":
    """itkStreamingImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkStreamingImageFilterIVF33IVF33"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_cast(obj)

class itkStreamingImageFilterIVF42IVF42(itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF42IVF42_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF42IVF42_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF42IVF42_Pointer":
        """Clone(itkStreamingImageFilterIVF42IVF42 self) -> itkStreamingImageFilterIVF42IVF42_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF42IVF42 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF42IVF42 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF42IVF42 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF42IVF42 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF42IVF42 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF42IVF42 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF42IVF42

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF42IVF42 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF42IVF42"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF42IVF42

        Create a new object of the class itkStreamingImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF42IVF42.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_Clone, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetRegionSplitter, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetRegionSplitter, None, itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_swigregister
itkStreamingImageFilterIVF42IVF42_swigregister(itkStreamingImageFilterIVF42IVF42)

def itkStreamingImageFilterIVF42IVF42___New_orig__() -> "itkStreamingImageFilterIVF42IVF42_Pointer":
    """itkStreamingImageFilterIVF42IVF42___New_orig__() -> itkStreamingImageFilterIVF42IVF42_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42___New_orig__()

def itkStreamingImageFilterIVF42IVF42_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF42IVF42 *":
    """itkStreamingImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkStreamingImageFilterIVF42IVF42"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_cast(obj)

class itkStreamingImageFilterIVF43IVF43(itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    """


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces.

    C++ includes: itkStreamingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStreamingImageFilterIVF43IVF43_Pointer":
        """__New_orig__() -> itkStreamingImageFilterIVF43IVF43_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStreamingImageFilterIVF43IVF43_Pointer":
        """Clone(itkStreamingImageFilterIVF43IVF43 self) -> itkStreamingImageFilterIVF43IVF43_Pointer"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_Clone(self)


    def SetNumberOfStreamDivisions(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfStreamDivisions(itkStreamingImageFilterIVF43IVF43 self, unsigned int const _arg)

        Set the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self) -> "unsigned int const &":
        """
        GetNumberOfStreamDivisions(itkStreamingImageFilterIVF43IVF43 self) -> unsigned int const &

        Get the
        number of pieces to divide the input. The upstream pipeline will be
        executed this many times. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetNumberOfStreamDivisions(self)


    def SetRegionSplitter(self, _arg: 'itkImageRegionSplitterBase') -> "void":
        """
        SetRegionSplitter(itkStreamingImageFilterIVF43IVF43 self, itkImageRegionSplitterBase _arg)

        Get/Set the
        helper class for dividing the input into chunks. 
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetRegionSplitter(self, _arg)


    def GetModifiableRegionSplitter(self) -> "itkImageRegionSplitterBase *":
        """GetModifiableRegionSplitter(itkStreamingImageFilterIVF43IVF43 self) -> itkImageRegionSplitterBase"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetModifiableRegionSplitter(self)


    def GetRegionSplitter(self, *args) -> "itkImageRegionSplitterBase *":
        """
        GetRegionSplitter(itkStreamingImageFilterIVF43IVF43 self) -> itkImageRegionSplitterBase
        GetRegionSplitter(itkStreamingImageFilterIVF43IVF43 self) -> itkImageRegionSplitterBase
        """
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetRegionSplitter(self, *args)

    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF43IVF43

    def cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF43IVF43 *":
        """cast(itkLightObject obj) -> itkStreamingImageFilterIVF43IVF43"""
        return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF43IVF43

        Create a new object of the class itkStreamingImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingImageFilterIVF43IVF43.Clone = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_Clone, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43.SetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43.GetNumberOfStreamDivisions = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetNumberOfStreamDivisions, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43.SetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetRegionSplitter, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43.GetModifiableRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetModifiableRegionSplitter, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43.GetRegionSplitter = new_instancemethod(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetRegionSplitter, None, itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43_swigregister = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_swigregister
itkStreamingImageFilterIVF43IVF43_swigregister(itkStreamingImageFilterIVF43IVF43)

def itkStreamingImageFilterIVF43IVF43___New_orig__() -> "itkStreamingImageFilterIVF43IVF43_Pointer":
    """itkStreamingImageFilterIVF43IVF43___New_orig__() -> itkStreamingImageFilterIVF43IVF43_Pointer"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43___New_orig__()

def itkStreamingImageFilterIVF43IVF43_cast(obj: 'itkLightObject') -> "itkStreamingImageFilterIVF43IVF43 *":
    """itkStreamingImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkStreamingImageFilterIVF43IVF43"""
    return _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def streaming_image_filter(*args, **kwargs):
    """Procedural interface for StreamingImageFilter"""
    import itk
    instance = itk.StreamingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def streaming_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.StreamingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.StreamingImageFilter.values()[0]
    else:
        filter_object = itk.StreamingImageFilter

    streaming_image_filter.__doc__ = filter_object.__doc__
    streaming_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    streaming_image_filter.__doc__ += "Available Keyword Arguments:\n"
    streaming_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



