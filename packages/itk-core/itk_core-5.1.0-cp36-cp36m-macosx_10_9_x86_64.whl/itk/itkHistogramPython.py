# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramPython
            return _itkHistogramPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSamplePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkFixedArrayPython
import ITKCommonBasePython
import itkVectorPython
import vnl_vector_refPython

def itkSimpleDataObjectDecoratorHD_New():
  return itkSimpleDataObjectDecoratorHD.New()


def itkSimpleDataObjectDecoratorHF_New():
  return itkSimpleDataObjectDecoratorHF.New()


def itkHistogramD_New():
  return itkHistogramD.New()


def itkHistogramF_New():
  return itkHistogramF.New()

class itkHistogramD(itkSamplePython.itkSampleAD):
    """


    This class stores measurement vectors in the context of n-dimensional
    histogram.

    Histogram represents an ND histogram. Histogram bins can be regularly
    or irregularly spaced. The storage for the histogram is managed via
    the FrequencyContainer specified by the template argument. The default
    frequency container is a DenseFrequencyContainer. A
    SparseFrequencyContainer can be used as an alternative.

    Frequencies of a bin ( SetFrequency(), IncreaseFrequency()) can be
    specified by measurement, index, or instance identifier.

    Measurements can be queried by bin index or instance identifier. In
    this case, the measurement returned is the centroid of the histogram
    bin.

    The Initialize() method is used to specify the number of bins for each
    dimension of the histogram. An overloaded version also allows for
    regularly spaced bins to defined. To define irregularly sized bins,
    use the SetBinMin()/SetBinMax() methods.

    If you do not know the length of the measurement vector at compile
    time, you should use the VariableDimensionHistogram class, instead of
    the Histogram class.

    If you know the length of the measurement vector at compile time, it
    can conveniently be obtained from MeasurementVectorTraits. For
    instance, instantiate a histogram as below:

    See:   Sample, DenseFrequencyContainer, SparseFrequencyContainer,
    VariableDimensionHistogram  \\sphinx
    \\sphinxexample{Numerics/Statistics/HistogramCreationAndBinAccess,
    Histogram Creation And Bin Access} \\endsphinx

    C++ includes: itkHistogram.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramD_Pointer":
        """__New_orig__() -> itkHistogramD_Pointer"""
        return _itkHistogramPython.itkHistogramD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramD_Pointer":
        """Clone(itkHistogramD self) -> itkHistogramD_Pointer"""
        return _itkHistogramPython.itkHistogramD_Clone(self)


    def Initialize(self, *args) -> "void":
        """
        Initialize(itkHistogramD self, itkArrayUL size)
        Initialize(itkHistogramD self, itkArrayUL size, itkArrayD lowerBound, itkArrayD upperBound)

        Initialize the histogram
        using equal size bins. To assign bin's min and max values along each
        dimension use SetBinMin() and SetBinMax() functions. 
        """
        return _itkHistogramPython.itkHistogramD_Initialize(self, *args)


    def SetToZero(self) -> "void":
        """
        SetToZero(itkHistogramD self)

        Initialize the values of
        the histogram bins to zero 
        """
        return _itkHistogramPython.itkHistogramD_SetToZero(self)


    def GetIndex(self, *args) -> "itkArraySL const &":
        """
        GetIndex(itkHistogramD self, itkArrayD measurement, itkArraySL index) -> bool
        GetIndex(itkHistogramD self, unsigned long id) -> itkArraySL

        Get the index that is
        uniquely labelled by an instance identifier The corresponding id is
        the offset of the index This method uses ImageBase::ComputeIndex()
        method 
        """
        return _itkHistogramPython.itkHistogramD_GetIndex(self, *args)


    def GetClipBinsAtEnds(self) -> "bool":
        """
        GetClipBinsAtEnds(itkHistogramD self) -> bool

        Is set to false
        if the bins at edges of the histogram extend to +/- infinity. 
        """
        return _itkHistogramPython.itkHistogramD_GetClipBinsAtEnds(self)


    def SetClipBinsAtEnds(self, _arg: 'bool const') -> "void":
        """
        SetClipBinsAtEnds(itkHistogramD self, bool const _arg)

        Set to false to
        have the bins at edges of the histogram extend to +/- infinity. 
        """
        return _itkHistogramPython.itkHistogramD_SetClipBinsAtEnds(self, _arg)


    def IsIndexOutOfBounds(self, index: 'itkArraySL') -> "bool":
        """
        IsIndexOutOfBounds(itkHistogramD self, itkArraySL index) -> bool

        Returns true if
        the given index is out of bound meaning one of index is not between
        [0, last index] 
        """
        return _itkHistogramPython.itkHistogramD_IsIndexOutOfBounds(self, index)


    def GetInstanceIdentifier(self, index: 'itkArraySL') -> "unsigned long":
        """
        GetInstanceIdentifier(itkHistogramD self, itkArraySL index) -> unsigned long

        Get the
        instance identifier of the bin that is indexed by the index. The
        corresponding instance identifier is the offset of the index This
        method uses ImageBase::ComputeIndex() method 
        """
        return _itkHistogramPython.itkHistogramD_GetInstanceIdentifier(self, index)


    def GetSize(self, *args) -> "unsigned long":
        """
        GetSize(itkHistogramD self) -> itkArrayUL
        GetSize(itkHistogramD self, unsigned int dimension) -> unsigned long

        Get the size of histogram
        along a specified dimension 
        """
        return _itkHistogramPython.itkHistogramD_GetSize(self, *args)


    def GetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long') -> "double const &":
        """
        GetBinMin(itkHistogramD self, unsigned int dimension, unsigned long nbin) -> double const &

        Get the minimum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramD_GetBinMin(self, dimension, nbin)


    def GetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long') -> "double const &":
        """
        GetBinMax(itkHistogramD self, unsigned int dimension, unsigned long nbin) -> double const &

        Get the maximum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramD_GetBinMax(self, dimension, nbin)


    def SetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long', min: 'double') -> "void":
        """
        SetBinMin(itkHistogramD self, unsigned int dimension, unsigned long nbin, double min)

        Set the minimum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramD_SetBinMin(self, dimension, nbin, min)


    def SetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long', max: 'double') -> "void":
        """
        SetBinMax(itkHistogramD self, unsigned int dimension, unsigned long nbin, double max)

        Set the maximum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramD_SetBinMax(self, dimension, nbin, max)


    def GetBinMinFromValue(self, dimension: 'unsigned int', value: 'float') -> "double const &":
        """
        GetBinMinFromValue(itkHistogramD self, unsigned int dimension, float value) -> double const &

        Get the minimum
        of the bin along dimension d corresponding to a particular
        measurement. 
        """
        return _itkHistogramPython.itkHistogramD_GetBinMinFromValue(self, dimension, value)


    def GetBinMaxFromValue(self, dimension: 'unsigned int', value: 'float') -> "double const &":
        """
        GetBinMaxFromValue(itkHistogramD self, unsigned int dimension, float value) -> double const &

        Get the maximum
        of the bin along dimension d corresponding to a particular
        measurement. 
        """
        return _itkHistogramPython.itkHistogramD_GetBinMaxFromValue(self, dimension, value)


    def GetDimensionMins(self, dimension: 'unsigned int') -> "std::vector< double,std::allocator< double > > const &":
        """
        GetDimensionMins(itkHistogramD self, unsigned int dimension) -> vectorD

        Get the vector of
        bin minimums along a dimension 
        """
        return _itkHistogramPython.itkHistogramD_GetDimensionMins(self, dimension)


    def GetDimensionMaxs(self, dimension: 'unsigned int') -> "std::vector< double,std::allocator< double > > const &":
        """
        GetDimensionMaxs(itkHistogramD self, unsigned int dimension) -> vectorD

        Get the vector of
        maximums along a dimension 
        """
        return _itkHistogramPython.itkHistogramD_GetDimensionMaxs(self, dimension)


    def GetMins(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &":
        """
        GetMins(itkHistogramD self) -> vectorvectorD

        Get the minimums of the
        bins 
        """
        return _itkHistogramPython.itkHistogramD_GetMins(self)


    def GetMaxs(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &":
        """
        GetMaxs(itkHistogramD self) -> vectorvectorD

        Method the maximums of the
        bins 
        """
        return _itkHistogramPython.itkHistogramD_GetMaxs(self)


    def GetHistogramMinFromIndex(self, index: 'itkArraySL') -> "itkArrayD const &":
        """
        GetHistogramMinFromIndex(itkHistogramD self, itkArraySL index) -> itkArrayD

        Get the
        minimums of the bin corresponding to a particular index 
        """
        return _itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex(self, index)


    def GetHistogramMaxFromIndex(self, index: 'itkArraySL') -> "itkArrayD const &":
        """
        GetHistogramMaxFromIndex(itkHistogramD self, itkArraySL index) -> itkArrayD

        Get the
        maximums of the bin corresponding to a particular index 
        """
        return _itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex(self, index)


    def SetFrequency(self, *args) -> "bool":
        """
        SetFrequency(itkHistogramD self, unsigned long value)
        SetFrequency(itkHistogramD self, unsigned long id, unsigned long value) -> bool

        Set the frequency of
        an instance identifier. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramD_SetFrequency(self, *args)


    def SetFrequencyOfIndex(self, index: 'itkArraySL', value: 'unsigned long') -> "bool":
        """
        SetFrequencyOfIndex(itkHistogramD self, itkArraySL index, unsigned long value) -> bool

        Set the
        frequency of an index. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramD_SetFrequencyOfIndex(self, index, value)


    def SetFrequencyOfMeasurement(self, measurement: 'itkArrayD', value: 'unsigned long') -> "bool":
        """
        SetFrequencyOfMeasurement(itkHistogramD self, itkArrayD measurement, unsigned long value) -> bool

        Set the
        frequency of a measurement. Returns false if the bin is out of bounds.

        """
        return _itkHistogramPython.itkHistogramD_SetFrequencyOfMeasurement(self, measurement, value)


    def IncreaseFrequency(self, id: 'unsigned long', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequency(itkHistogramD self, unsigned long id, unsigned long value) -> bool

        Increase the
        frequency of an instance identifier. Frequency is increased by the
        specified value. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramD_IncreaseFrequency(self, id, value)


    def IncreaseFrequencyOfIndex(self, index: 'itkArraySL', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequencyOfIndex(itkHistogramD self, itkArraySL index, unsigned long value) -> bool

        Increase
        the frequency of an index. Frequency is increased by the specified
        value. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramD_IncreaseFrequencyOfIndex(self, index, value)


    def IncreaseFrequencyOfMeasurement(self, measurement: 'itkArrayD', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequencyOfMeasurement(itkHistogramD self, itkArrayD measurement, unsigned long value) -> bool

        Increase the frequency of a measurement. Frequency is increased by the
        specified value. Returns false if the measurement is outside the
        bounds of the histogram.

        WARNING:  This function performs a dynamic allocation for the index
        length, and should not be used in tight per-pixel loops. 
        """
        return _itkHistogramPython.itkHistogramD_IncreaseFrequencyOfMeasurement(self, measurement, value)


    def GetMeasurementVector(self, *args) -> "itkArrayD const &":
        """
        GetMeasurementVector(itkHistogramD self, unsigned long id) -> itkArrayD
        GetMeasurementVector(itkHistogramD self, itkArraySL index) -> itkArrayD

        Get the
        measurement of an index. This is the centroid of the bin. 
        """
        return _itkHistogramPython.itkHistogramD_GetMeasurementVector(self, *args)


    def GetMeasurement(self, n: 'unsigned long', dimension: 'unsigned int') -> "double":
        """
        GetMeasurement(itkHistogramD self, unsigned long n, unsigned int dimension) -> double

        Get the measurement
        a bin along a specified dimension. This is the midpoint of the bin
        along that dimension. 
        """
        return _itkHistogramPython.itkHistogramD_GetMeasurement(self, n, dimension)


    def GetFrequency(self, *args) -> "unsigned long":
        """
        GetFrequency(itkHistogramD self, unsigned long id) -> unsigned long
        GetFrequency(itkHistogramD self, itkArraySL index) -> unsigned long
        GetFrequency(itkHistogramD self, unsigned long n, unsigned int dimension) -> unsigned long

        Get the frequency of a
        dimension's nth element. 
        """
        return _itkHistogramPython.itkHistogramD_GetFrequency(self, *args)


    def Quantile(self, dimension: 'unsigned int', p: 'double') -> "double":
        """
        Quantile(itkHistogramD self, unsigned int dimension, double p) -> double

        Get the pth percentile
        value for a dimension.

        Let assume n = the index of the bin where the p-th percentile value
        is, min = min value of the dimension of the bin, max = max value of
        the dimension of the bin, interval = max - min , pp = cumulated
        proportion until n-1 bin; and pb = frequency of the bin / total
        frequency of the dimension.

        If p is less than 0.5, the percentile value = min + ((p - pp ) / pb) *
        interval If p is greater than or equal to 0.5 the percentile value =
        max - ((pp - p) / pb) * interval 
        """
        return _itkHistogramPython.itkHistogramD_Quantile(self, dimension, p)


    def Mean(self, dimension: 'unsigned int') -> "double":
        """
        Mean(itkHistogramD self, unsigned int dimension) -> double

        Get the mean value for a
        dimension 
        """
        return _itkHistogramPython.itkHistogramD_Mean(self, dimension)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramD

    def cast(obj: 'itkLightObject') -> "itkHistogramD *":
        """cast(itkLightObject obj) -> itkHistogramD"""
        return _itkHistogramPython.itkHistogramD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramD

        Create a new object of the class itkHistogramD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramD.Clone = new_instancemethod(_itkHistogramPython.itkHistogramD_Clone, None, itkHistogramD)
itkHistogramD.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramD_Initialize, None, itkHistogramD)
itkHistogramD.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramD_SetToZero, None, itkHistogramD)
itkHistogramD.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetIndex, None, itkHistogramD)
itkHistogramD.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_GetClipBinsAtEnds, None, itkHistogramD)
itkHistogramD.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_SetClipBinsAtEnds, None, itkHistogramD)
itkHistogramD.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramD_IsIndexOutOfBounds, None, itkHistogramD)
itkHistogramD.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramD_GetInstanceIdentifier, None, itkHistogramD)
itkHistogramD.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramD_GetSize, None, itkHistogramD)
itkHistogramD.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMin, None, itkHistogramD)
itkHistogramD.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMax, None, itkHistogramD)
itkHistogramD.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMin, None, itkHistogramD)
itkHistogramD.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMax, None, itkHistogramD)
itkHistogramD.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMinFromValue, None, itkHistogramD)
itkHistogramD.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMaxFromValue, None, itkHistogramD)
itkHistogramD.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMins, None, itkHistogramD)
itkHistogramD.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMaxs, None, itkHistogramD)
itkHistogramD.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMins, None, itkHistogramD)
itkHistogramD.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMaxs, None, itkHistogramD)
itkHistogramD.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex, None, itkHistogramD)
itkHistogramD.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex, None, itkHistogramD)
itkHistogramD.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequency, None, itkHistogramD)
itkHistogramD.SetFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequencyOfIndex, None, itkHistogramD)
itkHistogramD.SetFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequencyOfMeasurement, None, itkHistogramD)
itkHistogramD.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequency, None, itkHistogramD)
itkHistogramD.IncreaseFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequencyOfIndex, None, itkHistogramD)
itkHistogramD.IncreaseFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequencyOfMeasurement, None, itkHistogramD)
itkHistogramD.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurementVector, None, itkHistogramD)
itkHistogramD.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurement, None, itkHistogramD)
itkHistogramD.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_GetFrequency, None, itkHistogramD)
itkHistogramD.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramD_Quantile, None, itkHistogramD)
itkHistogramD.Mean = new_instancemethod(_itkHistogramPython.itkHistogramD_Mean, None, itkHistogramD)
itkHistogramD_swigregister = _itkHistogramPython.itkHistogramD_swigregister
itkHistogramD_swigregister(itkHistogramD)

def itkHistogramD___New_orig__() -> "itkHistogramD_Pointer":
    """itkHistogramD___New_orig__() -> itkHistogramD_Pointer"""
    return _itkHistogramPython.itkHistogramD___New_orig__()

def itkHistogramD_cast(obj: 'itkLightObject') -> "itkHistogramD *":
    """itkHistogramD_cast(itkLightObject obj) -> itkHistogramD"""
    return _itkHistogramPython.itkHistogramD_cast(obj)

class itkHistogramF(itkSamplePython.itkSampleAF):
    """


    This class stores measurement vectors in the context of n-dimensional
    histogram.

    Histogram represents an ND histogram. Histogram bins can be regularly
    or irregularly spaced. The storage for the histogram is managed via
    the FrequencyContainer specified by the template argument. The default
    frequency container is a DenseFrequencyContainer. A
    SparseFrequencyContainer can be used as an alternative.

    Frequencies of a bin ( SetFrequency(), IncreaseFrequency()) can be
    specified by measurement, index, or instance identifier.

    Measurements can be queried by bin index or instance identifier. In
    this case, the measurement returned is the centroid of the histogram
    bin.

    The Initialize() method is used to specify the number of bins for each
    dimension of the histogram. An overloaded version also allows for
    regularly spaced bins to defined. To define irregularly sized bins,
    use the SetBinMin()/SetBinMax() methods.

    If you do not know the length of the measurement vector at compile
    time, you should use the VariableDimensionHistogram class, instead of
    the Histogram class.

    If you know the length of the measurement vector at compile time, it
    can conveniently be obtained from MeasurementVectorTraits. For
    instance, instantiate a histogram as below:

    See:   Sample, DenseFrequencyContainer, SparseFrequencyContainer,
    VariableDimensionHistogram  \\sphinx
    \\sphinxexample{Numerics/Statistics/HistogramCreationAndBinAccess,
    Histogram Creation And Bin Access} \\endsphinx

    C++ includes: itkHistogram.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramF_Pointer":
        """__New_orig__() -> itkHistogramF_Pointer"""
        return _itkHistogramPython.itkHistogramF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramF_Pointer":
        """Clone(itkHistogramF self) -> itkHistogramF_Pointer"""
        return _itkHistogramPython.itkHistogramF_Clone(self)


    def Initialize(self, *args) -> "void":
        """
        Initialize(itkHistogramF self, itkArrayUL size)
        Initialize(itkHistogramF self, itkArrayUL size, itkArrayF lowerBound, itkArrayF upperBound)

        Initialize the histogram
        using equal size bins. To assign bin's min and max values along each
        dimension use SetBinMin() and SetBinMax() functions. 
        """
        return _itkHistogramPython.itkHistogramF_Initialize(self, *args)


    def SetToZero(self) -> "void":
        """
        SetToZero(itkHistogramF self)

        Initialize the values of
        the histogram bins to zero 
        """
        return _itkHistogramPython.itkHistogramF_SetToZero(self)


    def GetIndex(self, *args) -> "itkArraySL const &":
        """
        GetIndex(itkHistogramF self, itkArrayF measurement, itkArraySL index) -> bool
        GetIndex(itkHistogramF self, unsigned long id) -> itkArraySL

        Get the index that is
        uniquely labelled by an instance identifier The corresponding id is
        the offset of the index This method uses ImageBase::ComputeIndex()
        method 
        """
        return _itkHistogramPython.itkHistogramF_GetIndex(self, *args)


    def GetClipBinsAtEnds(self) -> "bool":
        """
        GetClipBinsAtEnds(itkHistogramF self) -> bool

        Is set to false
        if the bins at edges of the histogram extend to +/- infinity. 
        """
        return _itkHistogramPython.itkHistogramF_GetClipBinsAtEnds(self)


    def SetClipBinsAtEnds(self, _arg: 'bool const') -> "void":
        """
        SetClipBinsAtEnds(itkHistogramF self, bool const _arg)

        Set to false to
        have the bins at edges of the histogram extend to +/- infinity. 
        """
        return _itkHistogramPython.itkHistogramF_SetClipBinsAtEnds(self, _arg)


    def IsIndexOutOfBounds(self, index: 'itkArraySL') -> "bool":
        """
        IsIndexOutOfBounds(itkHistogramF self, itkArraySL index) -> bool

        Returns true if
        the given index is out of bound meaning one of index is not between
        [0, last index] 
        """
        return _itkHistogramPython.itkHistogramF_IsIndexOutOfBounds(self, index)


    def GetInstanceIdentifier(self, index: 'itkArraySL') -> "unsigned long":
        """
        GetInstanceIdentifier(itkHistogramF self, itkArraySL index) -> unsigned long

        Get the
        instance identifier of the bin that is indexed by the index. The
        corresponding instance identifier is the offset of the index This
        method uses ImageBase::ComputeIndex() method 
        """
        return _itkHistogramPython.itkHistogramF_GetInstanceIdentifier(self, index)


    def GetSize(self, *args) -> "unsigned long":
        """
        GetSize(itkHistogramF self) -> itkArrayUL
        GetSize(itkHistogramF self, unsigned int dimension) -> unsigned long

        Get the size of histogram
        along a specified dimension 
        """
        return _itkHistogramPython.itkHistogramF_GetSize(self, *args)


    def GetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long') -> "float const &":
        """
        GetBinMin(itkHistogramF self, unsigned int dimension, unsigned long nbin) -> float const &

        Get the minimum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramF_GetBinMin(self, dimension, nbin)


    def GetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long') -> "float const &":
        """
        GetBinMax(itkHistogramF self, unsigned int dimension, unsigned long nbin) -> float const &

        Get the maximum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramF_GetBinMax(self, dimension, nbin)


    def SetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long', min: 'float') -> "void":
        """
        SetBinMin(itkHistogramF self, unsigned int dimension, unsigned long nbin, float min)

        Set the minimum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramF_SetBinMin(self, dimension, nbin, min)


    def SetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long', max: 'float') -> "void":
        """
        SetBinMax(itkHistogramF self, unsigned int dimension, unsigned long nbin, float max)

        Set the maximum value of
        nth bin of dimension d 
        """
        return _itkHistogramPython.itkHistogramF_SetBinMax(self, dimension, nbin, max)


    def GetBinMinFromValue(self, dimension: 'unsigned int', value: 'float') -> "float const &":
        """
        GetBinMinFromValue(itkHistogramF self, unsigned int dimension, float value) -> float const &

        Get the minimum
        of the bin along dimension d corresponding to a particular
        measurement. 
        """
        return _itkHistogramPython.itkHistogramF_GetBinMinFromValue(self, dimension, value)


    def GetBinMaxFromValue(self, dimension: 'unsigned int', value: 'float') -> "float const &":
        """
        GetBinMaxFromValue(itkHistogramF self, unsigned int dimension, float value) -> float const &

        Get the maximum
        of the bin along dimension d corresponding to a particular
        measurement. 
        """
        return _itkHistogramPython.itkHistogramF_GetBinMaxFromValue(self, dimension, value)


    def GetDimensionMins(self, dimension: 'unsigned int') -> "std::vector< float,std::allocator< float > > const &":
        """
        GetDimensionMins(itkHistogramF self, unsigned int dimension) -> vectorF

        Get the vector of
        bin minimums along a dimension 
        """
        return _itkHistogramPython.itkHistogramF_GetDimensionMins(self, dimension)


    def GetDimensionMaxs(self, dimension: 'unsigned int') -> "std::vector< float,std::allocator< float > > const &":
        """
        GetDimensionMaxs(itkHistogramF self, unsigned int dimension) -> vectorF

        Get the vector of
        maximums along a dimension 
        """
        return _itkHistogramPython.itkHistogramF_GetDimensionMaxs(self, dimension)


    def GetMins(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        """
        GetMins(itkHistogramF self) -> vectorvectorF

        Get the minimums of the
        bins 
        """
        return _itkHistogramPython.itkHistogramF_GetMins(self)


    def GetMaxs(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        """
        GetMaxs(itkHistogramF self) -> vectorvectorF

        Method the maximums of the
        bins 
        """
        return _itkHistogramPython.itkHistogramF_GetMaxs(self)


    def GetHistogramMinFromIndex(self, index: 'itkArraySL') -> "itkArrayF const &":
        """
        GetHistogramMinFromIndex(itkHistogramF self, itkArraySL index) -> itkArrayF

        Get the
        minimums of the bin corresponding to a particular index 
        """
        return _itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex(self, index)


    def GetHistogramMaxFromIndex(self, index: 'itkArraySL') -> "itkArrayF const &":
        """
        GetHistogramMaxFromIndex(itkHistogramF self, itkArraySL index) -> itkArrayF

        Get the
        maximums of the bin corresponding to a particular index 
        """
        return _itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex(self, index)


    def SetFrequency(self, *args) -> "bool":
        """
        SetFrequency(itkHistogramF self, unsigned long value)
        SetFrequency(itkHistogramF self, unsigned long id, unsigned long value) -> bool

        Set the frequency of
        an instance identifier. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramF_SetFrequency(self, *args)


    def SetFrequencyOfIndex(self, index: 'itkArraySL', value: 'unsigned long') -> "bool":
        """
        SetFrequencyOfIndex(itkHistogramF self, itkArraySL index, unsigned long value) -> bool

        Set the
        frequency of an index. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramF_SetFrequencyOfIndex(self, index, value)


    def SetFrequencyOfMeasurement(self, measurement: 'itkArrayF', value: 'unsigned long') -> "bool":
        """
        SetFrequencyOfMeasurement(itkHistogramF self, itkArrayF measurement, unsigned long value) -> bool

        Set the
        frequency of a measurement. Returns false if the bin is out of bounds.

        """
        return _itkHistogramPython.itkHistogramF_SetFrequencyOfMeasurement(self, measurement, value)


    def IncreaseFrequency(self, id: 'unsigned long', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequency(itkHistogramF self, unsigned long id, unsigned long value) -> bool

        Increase the
        frequency of an instance identifier. Frequency is increased by the
        specified value. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramF_IncreaseFrequency(self, id, value)


    def IncreaseFrequencyOfIndex(self, index: 'itkArraySL', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequencyOfIndex(itkHistogramF self, itkArraySL index, unsigned long value) -> bool

        Increase
        the frequency of an index. Frequency is increased by the specified
        value. Returns false if the bin is out of bounds. 
        """
        return _itkHistogramPython.itkHistogramF_IncreaseFrequencyOfIndex(self, index, value)


    def IncreaseFrequencyOfMeasurement(self, measurement: 'itkArrayF', value: 'unsigned long') -> "bool":
        """
        IncreaseFrequencyOfMeasurement(itkHistogramF self, itkArrayF measurement, unsigned long value) -> bool

        Increase the frequency of a measurement. Frequency is increased by the
        specified value. Returns false if the measurement is outside the
        bounds of the histogram.

        WARNING:  This function performs a dynamic allocation for the index
        length, and should not be used in tight per-pixel loops. 
        """
        return _itkHistogramPython.itkHistogramF_IncreaseFrequencyOfMeasurement(self, measurement, value)


    def GetMeasurementVector(self, *args) -> "itkArrayF const &":
        """
        GetMeasurementVector(itkHistogramF self, unsigned long id) -> itkArrayF
        GetMeasurementVector(itkHistogramF self, itkArraySL index) -> itkArrayF

        Get the
        measurement of an index. This is the centroid of the bin. 
        """
        return _itkHistogramPython.itkHistogramF_GetMeasurementVector(self, *args)


    def GetMeasurement(self, n: 'unsigned long', dimension: 'unsigned int') -> "float":
        """
        GetMeasurement(itkHistogramF self, unsigned long n, unsigned int dimension) -> float

        Get the measurement
        a bin along a specified dimension. This is the midpoint of the bin
        along that dimension. 
        """
        return _itkHistogramPython.itkHistogramF_GetMeasurement(self, n, dimension)


    def GetFrequency(self, *args) -> "unsigned long":
        """
        GetFrequency(itkHistogramF self, unsigned long id) -> unsigned long
        GetFrequency(itkHistogramF self, itkArraySL index) -> unsigned long
        GetFrequency(itkHistogramF self, unsigned long n, unsigned int dimension) -> unsigned long

        Get the frequency of a
        dimension's nth element. 
        """
        return _itkHistogramPython.itkHistogramF_GetFrequency(self, *args)


    def Quantile(self, dimension: 'unsigned int', p: 'double') -> "double":
        """
        Quantile(itkHistogramF self, unsigned int dimension, double p) -> double

        Get the pth percentile
        value for a dimension.

        Let assume n = the index of the bin where the p-th percentile value
        is, min = min value of the dimension of the bin, max = max value of
        the dimension of the bin, interval = max - min , pp = cumulated
        proportion until n-1 bin; and pb = frequency of the bin / total
        frequency of the dimension.

        If p is less than 0.5, the percentile value = min + ((p - pp ) / pb) *
        interval If p is greater than or equal to 0.5 the percentile value =
        max - ((pp - p) / pb) * interval 
        """
        return _itkHistogramPython.itkHistogramF_Quantile(self, dimension, p)


    def Mean(self, dimension: 'unsigned int') -> "double":
        """
        Mean(itkHistogramF self, unsigned int dimension) -> double

        Get the mean value for a
        dimension 
        """
        return _itkHistogramPython.itkHistogramF_Mean(self, dimension)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramF

    def cast(obj: 'itkLightObject') -> "itkHistogramF *":
        """cast(itkLightObject obj) -> itkHistogramF"""
        return _itkHistogramPython.itkHistogramF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramF

        Create a new object of the class itkHistogramF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramF.Clone = new_instancemethod(_itkHistogramPython.itkHistogramF_Clone, None, itkHistogramF)
itkHistogramF.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramF_Initialize, None, itkHistogramF)
itkHistogramF.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramF_SetToZero, None, itkHistogramF)
itkHistogramF.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetIndex, None, itkHistogramF)
itkHistogramF.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_GetClipBinsAtEnds, None, itkHistogramF)
itkHistogramF.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_SetClipBinsAtEnds, None, itkHistogramF)
itkHistogramF.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramF_IsIndexOutOfBounds, None, itkHistogramF)
itkHistogramF.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramF_GetInstanceIdentifier, None, itkHistogramF)
itkHistogramF.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramF_GetSize, None, itkHistogramF)
itkHistogramF.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMin, None, itkHistogramF)
itkHistogramF.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMax, None, itkHistogramF)
itkHistogramF.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMin, None, itkHistogramF)
itkHistogramF.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMax, None, itkHistogramF)
itkHistogramF.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMinFromValue, None, itkHistogramF)
itkHistogramF.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMaxFromValue, None, itkHistogramF)
itkHistogramF.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMins, None, itkHistogramF)
itkHistogramF.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMaxs, None, itkHistogramF)
itkHistogramF.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMins, None, itkHistogramF)
itkHistogramF.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMaxs, None, itkHistogramF)
itkHistogramF.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex, None, itkHistogramF)
itkHistogramF.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex, None, itkHistogramF)
itkHistogramF.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequency, None, itkHistogramF)
itkHistogramF.SetFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequencyOfIndex, None, itkHistogramF)
itkHistogramF.SetFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequencyOfMeasurement, None, itkHistogramF)
itkHistogramF.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequency, None, itkHistogramF)
itkHistogramF.IncreaseFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequencyOfIndex, None, itkHistogramF)
itkHistogramF.IncreaseFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequencyOfMeasurement, None, itkHistogramF)
itkHistogramF.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurementVector, None, itkHistogramF)
itkHistogramF.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurement, None, itkHistogramF)
itkHistogramF.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_GetFrequency, None, itkHistogramF)
itkHistogramF.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramF_Quantile, None, itkHistogramF)
itkHistogramF.Mean = new_instancemethod(_itkHistogramPython.itkHistogramF_Mean, None, itkHistogramF)
itkHistogramF_swigregister = _itkHistogramPython.itkHistogramF_swigregister
itkHistogramF_swigregister(itkHistogramF)

def itkHistogramF___New_orig__() -> "itkHistogramF_Pointer":
    """itkHistogramF___New_orig__() -> itkHistogramF_Pointer"""
    return _itkHistogramPython.itkHistogramF___New_orig__()

def itkHistogramF_cast(obj: 'itkLightObject') -> "itkHistogramF *":
    """itkHistogramF_cast(itkLightObject obj) -> itkHistogramF"""
    return _itkHistogramPython.itkHistogramF_cast(obj)

class itkSimpleDataObjectDecoratorHD(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:  DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimpleDataObjectDecoratorHD_Pointer":
        """__New_orig__() -> itkSimpleDataObjectDecoratorHD_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimpleDataObjectDecoratorHD_Pointer":
        """Clone(itkSimpleDataObjectDecoratorHD self) -> itkSimpleDataObjectDecoratorHD_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Clone(self)


    def Set(self, val: 'itkHistogramD') -> "void":
        """
        Set(itkSimpleDataObjectDecoratorHD self, itkHistogramD val)

        Set the contained object 
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set(self, val)


    def Get(self, *args) -> "itkHistogramD *const &":
        """
        Get(itkSimpleDataObjectDecoratorHD self) -> itkHistogramD
        Get(itkSimpleDataObjectDecoratorHD self) -> itkHistogramD
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHD

    def cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHD *":
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHD

        Create a new object of the class itkSimpleDataObjectDecoratorHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorHD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorHD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHD.Clone = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Clone, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHD_swigregister
itkSimpleDataObjectDecoratorHD_swigregister(itkSimpleDataObjectDecoratorHD)

def itkSimpleDataObjectDecoratorHD___New_orig__() -> "itkSimpleDataObjectDecoratorHD_Pointer":
    """itkSimpleDataObjectDecoratorHD___New_orig__() -> itkSimpleDataObjectDecoratorHD_Pointer"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

def itkSimpleDataObjectDecoratorHD_cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHD *":
    """itkSimpleDataObjectDecoratorHD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(obj)

class itkSimpleDataObjectDecoratorHF(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:  DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimpleDataObjectDecoratorHF_Pointer":
        """__New_orig__() -> itkSimpleDataObjectDecoratorHF_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimpleDataObjectDecoratorHF_Pointer":
        """Clone(itkSimpleDataObjectDecoratorHF self) -> itkSimpleDataObjectDecoratorHF_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Clone(self)


    def Set(self, val: 'itkHistogramF') -> "void":
        """
        Set(itkSimpleDataObjectDecoratorHF self, itkHistogramF val)

        Set the contained object 
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set(self, val)


    def Get(self, *args) -> "itkHistogramF *const &":
        """
        Get(itkSimpleDataObjectDecoratorHF self) -> itkHistogramF
        Get(itkSimpleDataObjectDecoratorHF self) -> itkHistogramF
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHF

    def cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHF *":
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHF

        Create a new object of the class itkSimpleDataObjectDecoratorHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorHF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorHF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHF.Clone = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Clone, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHF_swigregister
itkSimpleDataObjectDecoratorHF_swigregister(itkSimpleDataObjectDecoratorHF)

def itkSimpleDataObjectDecoratorHF___New_orig__() -> "itkSimpleDataObjectDecoratorHF_Pointer":
    """itkSimpleDataObjectDecoratorHF___New_orig__() -> itkSimpleDataObjectDecoratorHF_Pointer"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

def itkSimpleDataObjectDecoratorHF_cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHF *":
    """itkSimpleDataObjectDecoratorHF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(obj)



