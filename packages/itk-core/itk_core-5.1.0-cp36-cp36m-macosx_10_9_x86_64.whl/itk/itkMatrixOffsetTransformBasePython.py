# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMatrixOffsetTransformBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMatrixOffsetTransformBasePython', [dirname(__file__)])
        except ImportError:
            import _itkMatrixOffsetTransformBasePython
            return _itkMatrixOffsetTransformBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMatrixOffsetTransformBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMatrixOffsetTransformBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMatrixOffsetTransformBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkOptimizerParametersPython
import itkArrayPython
import itkMatrixPython
import itkSymmetricSecondRankTensorPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkDiffusionTensor3DPython
import itkTransformBasePython

def itkMatrixOffsetTransformBaseF33_New():
  return itkMatrixOffsetTransformBaseF33.New()


def itkMatrixOffsetTransformBaseD33_New():
  return itkMatrixOffsetTransformBaseD33.New()


def itkMatrixOffsetTransformBaseF22_New():
  return itkMatrixOffsetTransformBaseF22.New()


def itkMatrixOffsetTransformBaseD22_New():
  return itkMatrixOffsetTransformBaseD22.New()

class itkMatrixOffsetTransformBaseD22(itkTransformBasePython.itkTransformD22):
    """


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions.

    C++ includes: itkMatrixOffsetTransformBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMatrixOffsetTransformBaseD22_Pointer":
        """__New_orig__() -> itkMatrixOffsetTransformBaseD22_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMatrixOffsetTransformBaseD22_Pointer":
        """Clone(itkMatrixOffsetTransformBaseD22 self) -> itkMatrixOffsetTransformBaseD22_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Clone(self)


    def SetIdentity(self) -> "void":
        """
        SetIdentity(itkMatrixOffsetTransformBaseD22 self)

        Set the transformation
        to an Identity

        This sets the matrix to identity and the Offset to null. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetIdentity(self)


    def SetMatrix(self, matrix: 'itkMatrixD22') -> "void":
        """
        SetMatrix(itkMatrixOffsetTransformBaseD22 self, itkMatrixD22 matrix)

        Set matrix of an
        MatrixOffsetTransformBase

        This method sets the matrix of an MatrixOffsetTransformBase to a value
        specified by the user.

        This updates the Offset wrt to current translation and center. See the
        warning regarding offset-versus-translation in the documentation for
        SetCenter.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetMatrix(self, matrix)


    def GetMatrix(self) -> "itkMatrixD22 const &":
        """
        GetMatrix(itkMatrixOffsetTransformBaseD22 self) -> itkMatrixD22

        Get matrix of an
        MatrixOffsetTransformBase

        This method returns the value of the matrix of the
        MatrixOffsetTransformBase. To define an affine transform, you must set
        the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetMatrix(self)


    def SetOffset(self, offset: 'itkVectorD2') -> "void":
        """
        SetOffset(itkMatrixOffsetTransformBaseD22 self, itkVectorD2 offset)

        Set offset (origin) of an
        MatrixOffset TransformBase.

        This method sets the offset of an MatrixOffsetTransformBase to a value
        specified by the user. This updates Translation wrt current center.
        See the warning regarding offset-versus-translation in the
        documentation for SetCenter. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetOffset(self, offset)


    def GetOffset(self) -> "itkVectorD2 const &":
        """
        GetOffset(itkMatrixOffsetTransformBaseD22 self) -> itkVectorD2

        Get offset of an
        MatrixOffsetTransformBase

        This method returns the offset value of the MatrixOffsetTransformBase.
        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetOffset(self)


    def SetCenter(self, center: 'itkPointD2') -> "void":
        """
        SetCenter(itkMatrixOffsetTransformBaseD22 self, itkPointD2 center)

        Set center of rotation of
        an MatrixOffsetTransformBase

        This method sets the center of rotation of an
        MatrixOffsetTransformBase to a fixed point - for most transforms
        derived from this class, this point is not a "parameter" of the
        transform - the exception is that "centered" transforms have center
        as a parameter during optimization.

        This method updates offset wrt to current translation and matrix. That
        is, changing the center changes the transform!

        WARNING: When using the Center, we strongly recommend only changing
        the matrix and translation to define a transform. Changing a
        transform's center, changes the mapping between spaces - specifically,
        translation is not changed with respect to that new center, and so the
        offset is updated to * maintain the consistency with translation. If a
        center is not used, or is set before the matrix and the offset, then
        it is safe to change the offset directly. As a rule of thumb, if you
        wish to set the center explicitly, set before Offset computations are
        done.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetCenter(self, center)


    def GetCenter(self) -> "itkPointD2 const &":
        """
        GetCenter(itkMatrixOffsetTransformBaseD22 self) -> itkPointD2

        Get center of rotation of
        the MatrixOffsetTransformBase

        This method returns the point used as the fixed center of rotation for
        the MatrixOffsetTransformBase. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetCenter(self)


    def SetTranslation(self, translation: 'itkVectorD2') -> "void":
        """
        SetTranslation(itkMatrixOffsetTransformBaseD22 self, itkVectorD2 translation)

        Set translation of
        an MatrixOffsetTransformBase

        This method sets the translation of an MatrixOffsetTransformBase. This
        updates Offset to reflect current translation. To define an affine
        transform, you must set the matrix, center, and translation OR the
        matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetTranslation(self, translation)


    def GetTranslation(self) -> "itkVectorD2 const &":
        """
        GetTranslation(itkMatrixOffsetTransformBaseD22 self) -> itkVectorD2

        Get translation
        component of the MatrixOffsetTransformBase

        This method returns the translation used after rotation about the
        center point. To define an affine transform, you must set the matrix,
        center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetTranslation(self)


    def Compose(self, other: 'itkMatrixOffsetTransformBaseD22', pre: 'bool'=False) -> "void":
        """
        Compose(itkMatrixOffsetTransformBaseD22 self, itkMatrixOffsetTransformBaseD22 other, bool pre=False)
        Compose(itkMatrixOffsetTransformBaseD22 self, itkMatrixOffsetTransformBaseD22 other)

        Compose with another
        MatrixOffsetTransformBase

        This method composes self with another MatrixOffsetTransformBase of
        the same dimension, modifying self to be the composition of self and
        other. If the argument pre is true, then other is precomposed with
        self; that is, the resulting transformation consists of first applying
        other to the source, followed by self. If pre is false or omitted,
        then other is post-composed with self; that is the resulting
        transformation consists of first applying self to the source, followed
        by other. This updates the Translation based on current center. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Compose(self, other, pre)


    def TransformVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformVector(itkMatrixOffsetTransformBaseD22 self, itkVectorD2 vector) -> itkVectorD2
        TransformVector(itkMatrixOffsetTransformBaseD22 self, vnl_vector_fixed< double,2 > const & vector) -> vnl_vector_fixed< double,2 >
        TransformVector(itkMatrixOffsetTransformBaseD22 self, itkVariableLengthVectorD vector) -> itkVariableLengthVectorD

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformVector(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformCovariantVector(itkMatrixOffsetTransformBaseD22 self, itkCovariantVectorD2 vector) -> itkCovariantVectorD2
        TransformCovariantVector(itkMatrixOffsetTransformBaseD22 self, itkVariableLengthVectorD vector) -> itkVariableLengthVectorD

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformCovariantVector(self, *args)


    def TransformDiffusionTensor3D(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseD22 self, itkDiffusionTensor3DD tensor) -> itkDiffusionTensor3DD
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseD22 self, itkVariableLengthVectorD tensor) -> itkVariableLengthVectorD

        Method
        to transform a diffusion tensor stored in a VectorImage 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformDiffusionTensor3D(self, *args)


    def TransformSymmetricSecondRankTensor(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseD22 self, itkSymmetricSecondRankTensorD2 tensor) -> itkSymmetricSecondRankTensorD2
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseD22 self, itkVariableLengthVectorD tensor) -> itkVariableLengthVectorD

        Method to transform a diffusion tensor stored in a VectorImage, at a
        point. Global transforms can ignore the point parameter. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. By default, point is ignored and
        TransformDiffusionTensor(tensor) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformSymmetricSecondRankTensor(self, *args)


    def GetInverse(self, inverse: 'itkMatrixOffsetTransformBaseD22') -> "bool":
        """
        GetInverse(itkMatrixOffsetTransformBaseD22 self, itkMatrixOffsetTransformBaseD22 inverse) -> bool

        Create inverse of an
        affine transformation

        This populates the parameters an affine transform such that the
        transform is the inverse of self. If self is not invertible, an
        exception is thrown. Note that by default the inverese transform is
        centered at the origin. If you need to compute the inverse centered at
        a point, p,

        transform2 will now contain the inverse of transform1 and will with
        its center set to p. Flipping the two statements will produce an
        incorrect transform. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverse(self, inverse)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD22

    def cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseD22 *":
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD22

        Create a new object of the class itkMatrixOffsetTransformBaseD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseD22.Clone = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Clone, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetIdentity, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetMatrix, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetMatrix, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetOffset, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetOffset, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetCenter, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetCenter, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetTranslation, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetTranslation, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Compose, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformVector, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.TransformCovariantVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformCovariantVector, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.TransformDiffusionTensor3D = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformDiffusionTensor3D, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.TransformSymmetricSecondRankTensor = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformSymmetricSecondRankTensor, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverse, None, itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_swigregister
itkMatrixOffsetTransformBaseD22_swigregister(itkMatrixOffsetTransformBaseD22)

def itkMatrixOffsetTransformBaseD22___New_orig__() -> "itkMatrixOffsetTransformBaseD22_Pointer":
    """itkMatrixOffsetTransformBaseD22___New_orig__() -> itkMatrixOffsetTransformBaseD22_Pointer"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__()

def itkMatrixOffsetTransformBaseD22_cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseD22 *":
    """itkMatrixOffsetTransformBaseD22_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD22"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast(obj)

class itkMatrixOffsetTransformBaseD33(itkTransformBasePython.itkTransformD33):
    """


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions.

    C++ includes: itkMatrixOffsetTransformBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMatrixOffsetTransformBaseD33_Pointer":
        """__New_orig__() -> itkMatrixOffsetTransformBaseD33_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMatrixOffsetTransformBaseD33_Pointer":
        """Clone(itkMatrixOffsetTransformBaseD33 self) -> itkMatrixOffsetTransformBaseD33_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Clone(self)


    def SetIdentity(self) -> "void":
        """
        SetIdentity(itkMatrixOffsetTransformBaseD33 self)

        Set the transformation
        to an Identity

        This sets the matrix to identity and the Offset to null. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetIdentity(self)


    def SetMatrix(self, matrix: 'itkMatrixD33') -> "void":
        """
        SetMatrix(itkMatrixOffsetTransformBaseD33 self, itkMatrixD33 matrix)

        Set matrix of an
        MatrixOffsetTransformBase

        This method sets the matrix of an MatrixOffsetTransformBase to a value
        specified by the user.

        This updates the Offset wrt to current translation and center. See the
        warning regarding offset-versus-translation in the documentation for
        SetCenter.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetMatrix(self, matrix)


    def GetMatrix(self) -> "itkMatrixD33 const &":
        """
        GetMatrix(itkMatrixOffsetTransformBaseD33 self) -> itkMatrixD33

        Get matrix of an
        MatrixOffsetTransformBase

        This method returns the value of the matrix of the
        MatrixOffsetTransformBase. To define an affine transform, you must set
        the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetMatrix(self)


    def SetOffset(self, offset: 'itkVectorD3') -> "void":
        """
        SetOffset(itkMatrixOffsetTransformBaseD33 self, itkVectorD3 offset)

        Set offset (origin) of an
        MatrixOffset TransformBase.

        This method sets the offset of an MatrixOffsetTransformBase to a value
        specified by the user. This updates Translation wrt current center.
        See the warning regarding offset-versus-translation in the
        documentation for SetCenter. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetOffset(self, offset)


    def GetOffset(self) -> "itkVectorD3 const &":
        """
        GetOffset(itkMatrixOffsetTransformBaseD33 self) -> itkVectorD3

        Get offset of an
        MatrixOffsetTransformBase

        This method returns the offset value of the MatrixOffsetTransformBase.
        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetOffset(self)


    def SetCenter(self, center: 'itkPointD3') -> "void":
        """
        SetCenter(itkMatrixOffsetTransformBaseD33 self, itkPointD3 center)

        Set center of rotation of
        an MatrixOffsetTransformBase

        This method sets the center of rotation of an
        MatrixOffsetTransformBase to a fixed point - for most transforms
        derived from this class, this point is not a "parameter" of the
        transform - the exception is that "centered" transforms have center
        as a parameter during optimization.

        This method updates offset wrt to current translation and matrix. That
        is, changing the center changes the transform!

        WARNING: When using the Center, we strongly recommend only changing
        the matrix and translation to define a transform. Changing a
        transform's center, changes the mapping between spaces - specifically,
        translation is not changed with respect to that new center, and so the
        offset is updated to * maintain the consistency with translation. If a
        center is not used, or is set before the matrix and the offset, then
        it is safe to change the offset directly. As a rule of thumb, if you
        wish to set the center explicitly, set before Offset computations are
        done.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetCenter(self, center)


    def GetCenter(self) -> "itkPointD3 const &":
        """
        GetCenter(itkMatrixOffsetTransformBaseD33 self) -> itkPointD3

        Get center of rotation of
        the MatrixOffsetTransformBase

        This method returns the point used as the fixed center of rotation for
        the MatrixOffsetTransformBase. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetCenter(self)


    def SetTranslation(self, translation: 'itkVectorD3') -> "void":
        """
        SetTranslation(itkMatrixOffsetTransformBaseD33 self, itkVectorD3 translation)

        Set translation of
        an MatrixOffsetTransformBase

        This method sets the translation of an MatrixOffsetTransformBase. This
        updates Offset to reflect current translation. To define an affine
        transform, you must set the matrix, center, and translation OR the
        matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetTranslation(self, translation)


    def GetTranslation(self) -> "itkVectorD3 const &":
        """
        GetTranslation(itkMatrixOffsetTransformBaseD33 self) -> itkVectorD3

        Get translation
        component of the MatrixOffsetTransformBase

        This method returns the translation used after rotation about the
        center point. To define an affine transform, you must set the matrix,
        center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetTranslation(self)


    def Compose(self, other: 'itkMatrixOffsetTransformBaseD33', pre: 'bool'=False) -> "void":
        """
        Compose(itkMatrixOffsetTransformBaseD33 self, itkMatrixOffsetTransformBaseD33 other, bool pre=False)
        Compose(itkMatrixOffsetTransformBaseD33 self, itkMatrixOffsetTransformBaseD33 other)

        Compose with another
        MatrixOffsetTransformBase

        This method composes self with another MatrixOffsetTransformBase of
        the same dimension, modifying self to be the composition of self and
        other. If the argument pre is true, then other is precomposed with
        self; that is, the resulting transformation consists of first applying
        other to the source, followed by self. If pre is false or omitted,
        then other is post-composed with self; that is the resulting
        transformation consists of first applying self to the source, followed
        by other. This updates the Translation based on current center. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Compose(self, other, pre)


    def TransformVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformVector(itkMatrixOffsetTransformBaseD33 self, itkVectorD3 vector) -> itkVectorD3
        TransformVector(itkMatrixOffsetTransformBaseD33 self, vnl_vector_fixed< double,3 > const & vector) -> vnl_vector_fixed< double,3 >
        TransformVector(itkMatrixOffsetTransformBaseD33 self, itkVariableLengthVectorD vector) -> itkVariableLengthVectorD

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformVector(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformCovariantVector(itkMatrixOffsetTransformBaseD33 self, itkCovariantVectorD3 vector) -> itkCovariantVectorD3
        TransformCovariantVector(itkMatrixOffsetTransformBaseD33 self, itkVariableLengthVectorD vector) -> itkVariableLengthVectorD

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformCovariantVector(self, *args)


    def TransformDiffusionTensor3D(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseD33 self, itkDiffusionTensor3DD tensor) -> itkDiffusionTensor3DD
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseD33 self, itkVariableLengthVectorD tensor) -> itkVariableLengthVectorD

        Method
        to transform a diffusion tensor stored in a VectorImage 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformDiffusionTensor3D(self, *args)


    def TransformSymmetricSecondRankTensor(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseD33 self, itkSymmetricSecondRankTensorD3 tensor) -> itkSymmetricSecondRankTensorD3
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseD33 self, itkVariableLengthVectorD tensor) -> itkVariableLengthVectorD

        Method to transform a diffusion tensor stored in a VectorImage, at a
        point. Global transforms can ignore the point parameter. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. By default, point is ignored and
        TransformDiffusionTensor(tensor) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformSymmetricSecondRankTensor(self, *args)


    def GetInverse(self, inverse: 'itkMatrixOffsetTransformBaseD33') -> "bool":
        """
        GetInverse(itkMatrixOffsetTransformBaseD33 self, itkMatrixOffsetTransformBaseD33 inverse) -> bool

        Create inverse of an
        affine transformation

        This populates the parameters an affine transform such that the
        transform is the inverse of self. If self is not invertible, an
        exception is thrown. Note that by default the inverese transform is
        centered at the origin. If you need to compute the inverse centered at
        a point, p,

        transform2 will now contain the inverse of transform1 and will with
        its center set to p. Flipping the two statements will produce an
        incorrect transform. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverse(self, inverse)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD33

    def cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseD33 *":
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD33

        Create a new object of the class itkMatrixOffsetTransformBaseD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseD33.Clone = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Clone, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetIdentity, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetMatrix, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetMatrix, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetOffset, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetOffset, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetCenter, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetCenter, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetTranslation, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetTranslation, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Compose, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformVector, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.TransformCovariantVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformCovariantVector, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.TransformDiffusionTensor3D = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformDiffusionTensor3D, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.TransformSymmetricSecondRankTensor = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformSymmetricSecondRankTensor, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverse, None, itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_swigregister
itkMatrixOffsetTransformBaseD33_swigregister(itkMatrixOffsetTransformBaseD33)

def itkMatrixOffsetTransformBaseD33___New_orig__() -> "itkMatrixOffsetTransformBaseD33_Pointer":
    """itkMatrixOffsetTransformBaseD33___New_orig__() -> itkMatrixOffsetTransformBaseD33_Pointer"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__()

def itkMatrixOffsetTransformBaseD33_cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseD33 *":
    """itkMatrixOffsetTransformBaseD33_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD33"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast(obj)

class itkMatrixOffsetTransformBaseF22(itkTransformBasePython.itkTransformF22):
    """


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions.

    C++ includes: itkMatrixOffsetTransformBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMatrixOffsetTransformBaseF22_Pointer":
        """__New_orig__() -> itkMatrixOffsetTransformBaseF22_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMatrixOffsetTransformBaseF22_Pointer":
        """Clone(itkMatrixOffsetTransformBaseF22 self) -> itkMatrixOffsetTransformBaseF22_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Clone(self)


    def SetIdentity(self) -> "void":
        """
        SetIdentity(itkMatrixOffsetTransformBaseF22 self)

        Set the transformation
        to an Identity

        This sets the matrix to identity and the Offset to null. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetIdentity(self)


    def SetMatrix(self, matrix: 'itkMatrixF22') -> "void":
        """
        SetMatrix(itkMatrixOffsetTransformBaseF22 self, itkMatrixF22 matrix)

        Set matrix of an
        MatrixOffsetTransformBase

        This method sets the matrix of an MatrixOffsetTransformBase to a value
        specified by the user.

        This updates the Offset wrt to current translation and center. See the
        warning regarding offset-versus-translation in the documentation for
        SetCenter.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetMatrix(self, matrix)


    def GetMatrix(self) -> "itkMatrixF22 const &":
        """
        GetMatrix(itkMatrixOffsetTransformBaseF22 self) -> itkMatrixF22

        Get matrix of an
        MatrixOffsetTransformBase

        This method returns the value of the matrix of the
        MatrixOffsetTransformBase. To define an affine transform, you must set
        the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetMatrix(self)


    def SetOffset(self, offset: 'itkVectorF2') -> "void":
        """
        SetOffset(itkMatrixOffsetTransformBaseF22 self, itkVectorF2 offset)

        Set offset (origin) of an
        MatrixOffset TransformBase.

        This method sets the offset of an MatrixOffsetTransformBase to a value
        specified by the user. This updates Translation wrt current center.
        See the warning regarding offset-versus-translation in the
        documentation for SetCenter. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetOffset(self, offset)


    def GetOffset(self) -> "itkVectorF2 const &":
        """
        GetOffset(itkMatrixOffsetTransformBaseF22 self) -> itkVectorF2

        Get offset of an
        MatrixOffsetTransformBase

        This method returns the offset value of the MatrixOffsetTransformBase.
        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetOffset(self)


    def SetCenter(self, center: 'itkPointF2') -> "void":
        """
        SetCenter(itkMatrixOffsetTransformBaseF22 self, itkPointF2 center)

        Set center of rotation of
        an MatrixOffsetTransformBase

        This method sets the center of rotation of an
        MatrixOffsetTransformBase to a fixed point - for most transforms
        derived from this class, this point is not a "parameter" of the
        transform - the exception is that "centered" transforms have center
        as a parameter during optimization.

        This method updates offset wrt to current translation and matrix. That
        is, changing the center changes the transform!

        WARNING: When using the Center, we strongly recommend only changing
        the matrix and translation to define a transform. Changing a
        transform's center, changes the mapping between spaces - specifically,
        translation is not changed with respect to that new center, and so the
        offset is updated to * maintain the consistency with translation. If a
        center is not used, or is set before the matrix and the offset, then
        it is safe to change the offset directly. As a rule of thumb, if you
        wish to set the center explicitly, set before Offset computations are
        done.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetCenter(self, center)


    def GetCenter(self) -> "itkPointF2 const &":
        """
        GetCenter(itkMatrixOffsetTransformBaseF22 self) -> itkPointF2

        Get center of rotation of
        the MatrixOffsetTransformBase

        This method returns the point used as the fixed center of rotation for
        the MatrixOffsetTransformBase. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetCenter(self)


    def SetTranslation(self, translation: 'itkVectorF2') -> "void":
        """
        SetTranslation(itkMatrixOffsetTransformBaseF22 self, itkVectorF2 translation)

        Set translation of
        an MatrixOffsetTransformBase

        This method sets the translation of an MatrixOffsetTransformBase. This
        updates Offset to reflect current translation. To define an affine
        transform, you must set the matrix, center, and translation OR the
        matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetTranslation(self, translation)


    def GetTranslation(self) -> "itkVectorF2 const &":
        """
        GetTranslation(itkMatrixOffsetTransformBaseF22 self) -> itkVectorF2

        Get translation
        component of the MatrixOffsetTransformBase

        This method returns the translation used after rotation about the
        center point. To define an affine transform, you must set the matrix,
        center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetTranslation(self)


    def Compose(self, other: 'itkMatrixOffsetTransformBaseF22', pre: 'bool'=False) -> "void":
        """
        Compose(itkMatrixOffsetTransformBaseF22 self, itkMatrixOffsetTransformBaseF22 other, bool pre=False)
        Compose(itkMatrixOffsetTransformBaseF22 self, itkMatrixOffsetTransformBaseF22 other)

        Compose with another
        MatrixOffsetTransformBase

        This method composes self with another MatrixOffsetTransformBase of
        the same dimension, modifying self to be the composition of self and
        other. If the argument pre is true, then other is precomposed with
        self; that is, the resulting transformation consists of first applying
        other to the source, followed by self. If pre is false or omitted,
        then other is post-composed with self; that is the resulting
        transformation consists of first applying self to the source, followed
        by other. This updates the Translation based on current center. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Compose(self, other, pre)


    def TransformVector(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformVector(itkMatrixOffsetTransformBaseF22 self, itkVectorF2 vector) -> itkVectorF2
        TransformVector(itkMatrixOffsetTransformBaseF22 self, vnl_vector_fixed< float,2 > const & vector) -> vnl_vector_fixed< float,2 >
        TransformVector(itkMatrixOffsetTransformBaseF22 self, itkVariableLengthVectorF vector) -> itkVariableLengthVectorF

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformVector(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformCovariantVector(itkMatrixOffsetTransformBaseF22 self, itkCovariantVectorF2 vector) -> itkCovariantVectorF2
        TransformCovariantVector(itkMatrixOffsetTransformBaseF22 self, itkVariableLengthVectorF vector) -> itkVariableLengthVectorF

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformCovariantVector(self, *args)


    def TransformDiffusionTensor3D(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseF22 self, itkDiffusionTensor3DF tensor) -> itkDiffusionTensor3DF
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseF22 self, itkVariableLengthVectorF tensor) -> itkVariableLengthVectorF

        Method
        to transform a diffusion tensor stored in a VectorImage 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformDiffusionTensor3D(self, *args)


    def TransformSymmetricSecondRankTensor(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseF22 self, itkSymmetricSecondRankTensorF2 tensor) -> itkSymmetricSecondRankTensorF2
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseF22 self, itkVariableLengthVectorF tensor) -> itkVariableLengthVectorF

        Method to transform a diffusion tensor stored in a VectorImage, at a
        point. Global transforms can ignore the point parameter. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. By default, point is ignored and
        TransformDiffusionTensor(tensor) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformSymmetricSecondRankTensor(self, *args)


    def GetInverse(self, inverse: 'itkMatrixOffsetTransformBaseF22') -> "bool":
        """
        GetInverse(itkMatrixOffsetTransformBaseF22 self, itkMatrixOffsetTransformBaseF22 inverse) -> bool

        Create inverse of an
        affine transformation

        This populates the parameters an affine transform such that the
        transform is the inverse of self. If self is not invertible, an
        exception is thrown. Note that by default the inverese transform is
        centered at the origin. If you need to compute the inverse centered at
        a point, p,

        transform2 will now contain the inverse of transform1 and will with
        its center set to p. Flipping the two statements will produce an
        incorrect transform. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetInverse(self, inverse)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseF22

    def cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseF22 *":
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseF22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseF22

        Create a new object of the class itkMatrixOffsetTransformBaseF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseF22.Clone = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Clone, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetIdentity, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetMatrix, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetMatrix, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetOffset, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetOffset, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetCenter, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetCenter, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetTranslation, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetTranslation, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Compose, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformVector, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.TransformCovariantVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformCovariantVector, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.TransformDiffusionTensor3D = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformDiffusionTensor3D, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.TransformSymmetricSecondRankTensor = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformSymmetricSecondRankTensor, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetInverse, None, itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_swigregister
itkMatrixOffsetTransformBaseF22_swigregister(itkMatrixOffsetTransformBaseF22)

def itkMatrixOffsetTransformBaseF22___New_orig__() -> "itkMatrixOffsetTransformBaseF22_Pointer":
    """itkMatrixOffsetTransformBaseF22___New_orig__() -> itkMatrixOffsetTransformBaseF22_Pointer"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22___New_orig__()

def itkMatrixOffsetTransformBaseF22_cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseF22 *":
    """itkMatrixOffsetTransformBaseF22_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseF22"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_cast(obj)

class itkMatrixOffsetTransformBaseF33(itkTransformBasePython.itkTransformF33):
    """


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions.

    C++ includes: itkMatrixOffsetTransformBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMatrixOffsetTransformBaseF33_Pointer":
        """__New_orig__() -> itkMatrixOffsetTransformBaseF33_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMatrixOffsetTransformBaseF33_Pointer":
        """Clone(itkMatrixOffsetTransformBaseF33 self) -> itkMatrixOffsetTransformBaseF33_Pointer"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Clone(self)


    def SetIdentity(self) -> "void":
        """
        SetIdentity(itkMatrixOffsetTransformBaseF33 self)

        Set the transformation
        to an Identity

        This sets the matrix to identity and the Offset to null. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetIdentity(self)


    def SetMatrix(self, matrix: 'itkMatrixF33') -> "void":
        """
        SetMatrix(itkMatrixOffsetTransformBaseF33 self, itkMatrixF33 matrix)

        Set matrix of an
        MatrixOffsetTransformBase

        This method sets the matrix of an MatrixOffsetTransformBase to a value
        specified by the user.

        This updates the Offset wrt to current translation and center. See the
        warning regarding offset-versus-translation in the documentation for
        SetCenter.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetMatrix(self, matrix)


    def GetMatrix(self) -> "itkMatrixF33 const &":
        """
        GetMatrix(itkMatrixOffsetTransformBaseF33 self) -> itkMatrixF33

        Get matrix of an
        MatrixOffsetTransformBase

        This method returns the value of the matrix of the
        MatrixOffsetTransformBase. To define an affine transform, you must set
        the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetMatrix(self)


    def SetOffset(self, offset: 'itkVectorF3') -> "void":
        """
        SetOffset(itkMatrixOffsetTransformBaseF33 self, itkVectorF3 offset)

        Set offset (origin) of an
        MatrixOffset TransformBase.

        This method sets the offset of an MatrixOffsetTransformBase to a value
        specified by the user. This updates Translation wrt current center.
        See the warning regarding offset-versus-translation in the
        documentation for SetCenter. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetOffset(self, offset)


    def GetOffset(self) -> "itkVectorF3 const &":
        """
        GetOffset(itkMatrixOffsetTransformBaseF33 self) -> itkVectorF3

        Get offset of an
        MatrixOffsetTransformBase

        This method returns the offset value of the MatrixOffsetTransformBase.
        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetOffset(self)


    def SetCenter(self, center: 'itkPointF3') -> "void":
        """
        SetCenter(itkMatrixOffsetTransformBaseF33 self, itkPointF3 center)

        Set center of rotation of
        an MatrixOffsetTransformBase

        This method sets the center of rotation of an
        MatrixOffsetTransformBase to a fixed point - for most transforms
        derived from this class, this point is not a "parameter" of the
        transform - the exception is that "centered" transforms have center
        as a parameter during optimization.

        This method updates offset wrt to current translation and matrix. That
        is, changing the center changes the transform!

        WARNING: When using the Center, we strongly recommend only changing
        the matrix and translation to define a transform. Changing a
        transform's center, changes the mapping between spaces - specifically,
        translation is not changed with respect to that new center, and so the
        offset is updated to * maintain the consistency with translation. If a
        center is not used, or is set before the matrix and the offset, then
        it is safe to change the offset directly. As a rule of thumb, if you
        wish to set the center explicitly, set before Offset computations are
        done.

        To define an affine transform, you must set the matrix, center, and
        translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetCenter(self, center)


    def GetCenter(self) -> "itkPointF3 const &":
        """
        GetCenter(itkMatrixOffsetTransformBaseF33 self) -> itkPointF3

        Get center of rotation of
        the MatrixOffsetTransformBase

        This method returns the point used as the fixed center of rotation for
        the MatrixOffsetTransformBase. To define an affine transform, you must
        set the matrix, center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetCenter(self)


    def SetTranslation(self, translation: 'itkVectorF3') -> "void":
        """
        SetTranslation(itkMatrixOffsetTransformBaseF33 self, itkVectorF3 translation)

        Set translation of
        an MatrixOffsetTransformBase

        This method sets the translation of an MatrixOffsetTransformBase. This
        updates Offset to reflect current translation. To define an affine
        transform, you must set the matrix, center, and translation OR the
        matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetTranslation(self, translation)


    def GetTranslation(self) -> "itkVectorF3 const &":
        """
        GetTranslation(itkMatrixOffsetTransformBaseF33 self) -> itkVectorF3

        Get translation
        component of the MatrixOffsetTransformBase

        This method returns the translation used after rotation about the
        center point. To define an affine transform, you must set the matrix,
        center, and translation OR the matrix and offset 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetTranslation(self)


    def Compose(self, other: 'itkMatrixOffsetTransformBaseF33', pre: 'bool'=False) -> "void":
        """
        Compose(itkMatrixOffsetTransformBaseF33 self, itkMatrixOffsetTransformBaseF33 other, bool pre=False)
        Compose(itkMatrixOffsetTransformBaseF33 self, itkMatrixOffsetTransformBaseF33 other)

        Compose with another
        MatrixOffsetTransformBase

        This method composes self with another MatrixOffsetTransformBase of
        the same dimension, modifying self to be the composition of self and
        other. If the argument pre is true, then other is precomposed with
        self; that is, the resulting transformation consists of first applying
        other to the source, followed by self. If pre is false or omitted,
        then other is post-composed with self; that is the resulting
        transformation consists of first applying self to the source, followed
        by other. This updates the Translation based on current center. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Compose(self, other, pre)


    def TransformVector(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformVector(itkMatrixOffsetTransformBaseF33 self, itkVectorF3 vector) -> itkVectorF3
        TransformVector(itkMatrixOffsetTransformBaseF33 self, vnl_vector_fixed< float,3 > const & vector) -> vnl_vector_fixed< float,3 >
        TransformVector(itkMatrixOffsetTransformBaseF33 self, itkVariableLengthVectorF vector) -> itkVariableLengthVectorF

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformVector(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformCovariantVector(itkMatrixOffsetTransformBaseF33 self, itkCovariantVectorF3 vector) -> itkCovariantVectorF3
        TransformCovariantVector(itkMatrixOffsetTransformBaseF33 self, itkVariableLengthVectorF vector) -> itkVariableLengthVectorF

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformCovariantVector(self, *args)


    def TransformDiffusionTensor3D(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseF33 self, itkDiffusionTensor3DF tensor) -> itkDiffusionTensor3DF
        TransformDiffusionTensor3D(itkMatrixOffsetTransformBaseF33 self, itkVariableLengthVectorF tensor) -> itkVariableLengthVectorF

        Method
        to transform a diffusion tensor stored in a VectorImage 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformDiffusionTensor3D(self, *args)


    def TransformSymmetricSecondRankTensor(self, *args) -> "itkVariableLengthVectorF":
        """
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseF33 self, itkSymmetricSecondRankTensorF3 tensor) -> itkSymmetricSecondRankTensorF3
        TransformSymmetricSecondRankTensor(itkMatrixOffsetTransformBaseF33 self, itkVariableLengthVectorF tensor) -> itkVariableLengthVectorF

        Method to transform a diffusion tensor stored in a VectorImage, at a
        point. Global transforms can ignore the point parameter. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. By default, point is ignored and
        TransformDiffusionTensor(tensor) is called 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformSymmetricSecondRankTensor(self, *args)


    def GetInverse(self, inverse: 'itkMatrixOffsetTransformBaseF33') -> "bool":
        """
        GetInverse(itkMatrixOffsetTransformBaseF33 self, itkMatrixOffsetTransformBaseF33 inverse) -> bool

        Create inverse of an
        affine transformation

        This populates the parameters an affine transform such that the
        transform is the inverse of self. If self is not invertible, an
        exception is thrown. Note that by default the inverese transform is
        centered at the origin. If you need to compute the inverse centered at
        a point, p,

        transform2 will now contain the inverse of transform1 and will with
        its center set to p. Flipping the two statements will produce an
        incorrect transform. 
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetInverse(self, inverse)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseF33

    def cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseF33 *":
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseF33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseF33

        Create a new object of the class itkMatrixOffsetTransformBaseF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseF33.Clone = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Clone, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetIdentity, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetMatrix, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetMatrix, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetOffset, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetOffset, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetCenter, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetCenter, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetTranslation, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetTranslation, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Compose, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformVector, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.TransformCovariantVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformCovariantVector, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.TransformDiffusionTensor3D = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformDiffusionTensor3D, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.TransformSymmetricSecondRankTensor = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformSymmetricSecondRankTensor, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetInverse, None, itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_swigregister
itkMatrixOffsetTransformBaseF33_swigregister(itkMatrixOffsetTransformBaseF33)

def itkMatrixOffsetTransformBaseF33___New_orig__() -> "itkMatrixOffsetTransformBaseF33_Pointer":
    """itkMatrixOffsetTransformBaseF33___New_orig__() -> itkMatrixOffsetTransformBaseF33_Pointer"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33___New_orig__()

def itkMatrixOffsetTransformBaseF33_cast(obj: 'itkLightObject') -> "itkMatrixOffsetTransformBaseF33 *":
    """itkMatrixOffsetTransformBaseF33_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseF33"""
    return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_cast(obj)



