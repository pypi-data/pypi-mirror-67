# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBinaryMask3DMeshSourcePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBinaryMask3DMeshSourcePython', [dirname(__file__)])
        except ImportError:
            import _itkBinaryMask3DMeshSourcePython
            return _itkBinaryMask3DMeshSourcePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBinaryMask3DMeshSourcePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBinaryMask3DMeshSourcePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBinaryMask3DMeshSourcePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToMeshFilterPython
import itkMeshSourcePython
import ITKCommonBasePython
import pyBasePython
import itkMeshBasePython
import itkMapContainerPython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkContinuousIndexPython
import itkIndexPython
import itkPointSetPython
import itkArrayPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython

def itkBinaryMask3DMeshSourceIUS3MD3_New():
  return itkBinaryMask3DMeshSourceIUS3MD3.New()


def itkBinaryMask3DMeshSourceIUS3MF3_New():
  return itkBinaryMask3DMeshSourceIUS3MF3.New()


def itkBinaryMask3DMeshSourceIUS3MUS3_New():
  return itkBinaryMask3DMeshSourceIUS3MUS3.New()


def itkBinaryMask3DMeshSourceIUS3MUC3_New():
  return itkBinaryMask3DMeshSourceIUS3MUC3.New()


def itkBinaryMask3DMeshSourceIUS3MSS3_New():
  return itkBinaryMask3DMeshSourceIUS3MSS3.New()


def itkBinaryMask3DMeshSourceIUC3MD3_New():
  return itkBinaryMask3DMeshSourceIUC3MD3.New()


def itkBinaryMask3DMeshSourceIUC3MF3_New():
  return itkBinaryMask3DMeshSourceIUC3MF3.New()


def itkBinaryMask3DMeshSourceIUC3MUS3_New():
  return itkBinaryMask3DMeshSourceIUC3MUS3.New()


def itkBinaryMask3DMeshSourceIUC3MUC3_New():
  return itkBinaryMask3DMeshSourceIUC3MUC3.New()


def itkBinaryMask3DMeshSourceIUC3MSS3_New():
  return itkBinaryMask3DMeshSourceIUC3MSS3.New()


def itkBinaryMask3DMeshSourceISS3MD3_New():
  return itkBinaryMask3DMeshSourceISS3MD3.New()


def itkBinaryMask3DMeshSourceISS3MF3_New():
  return itkBinaryMask3DMeshSourceISS3MF3.New()


def itkBinaryMask3DMeshSourceISS3MUS3_New():
  return itkBinaryMask3DMeshSourceISS3MUS3.New()


def itkBinaryMask3DMeshSourceISS3MUC3_New():
  return itkBinaryMask3DMeshSourceISS3MUC3.New()


def itkBinaryMask3DMeshSourceISS3MSS3_New():
  return itkBinaryMask3DMeshSourceISS3MSS3.New()

class itkBinaryMask3DMeshSourceISS3MD3(itkImageToMeshFilterPython.itkImageToMeshFilterISS3MD3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceISS3MD3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceISS3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceISS3MD3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceISS3MD3 self) -> itkBinaryMask3DMeshSourceISS3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_Clone(self)


    def SetObjectValue(self, _arg: 'short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceISS3MD3 self, short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceISS3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceISS3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageSS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceISS3MD3 self, itkImageSS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MD3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MD3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MD3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MD3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MD3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceISS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceISS3MD3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_Clone, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetObjectValue, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetInput, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_swigregister
itkBinaryMask3DMeshSourceISS3MD3_swigregister(itkBinaryMask3DMeshSourceISS3MD3)

def itkBinaryMask3DMeshSourceISS3MD3___New_orig__() -> "itkBinaryMask3DMeshSourceISS3MD3_Pointer":
    """itkBinaryMask3DMeshSourceISS3MD3___New_orig__() -> itkBinaryMask3DMeshSourceISS3MD3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3___New_orig__()

def itkBinaryMask3DMeshSourceISS3MD3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MD3 *":
    """itkBinaryMask3DMeshSourceISS3MD3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MD3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_cast(obj)

class itkBinaryMask3DMeshSourceISS3MF3(itkImageToMeshFilterPython.itkImageToMeshFilterISS3MF3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceISS3MF3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceISS3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceISS3MF3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceISS3MF3 self) -> itkBinaryMask3DMeshSourceISS3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_Clone(self)


    def SetObjectValue(self, _arg: 'short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceISS3MF3 self, short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceISS3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceISS3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageSS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceISS3MF3 self, itkImageSS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MF3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MF3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MF3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MF3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MF3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceISS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceISS3MF3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_Clone, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetObjectValue, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetInput, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_swigregister
itkBinaryMask3DMeshSourceISS3MF3_swigregister(itkBinaryMask3DMeshSourceISS3MF3)

def itkBinaryMask3DMeshSourceISS3MF3___New_orig__() -> "itkBinaryMask3DMeshSourceISS3MF3_Pointer":
    """itkBinaryMask3DMeshSourceISS3MF3___New_orig__() -> itkBinaryMask3DMeshSourceISS3MF3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3___New_orig__()

def itkBinaryMask3DMeshSourceISS3MF3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MF3 *":
    """itkBinaryMask3DMeshSourceISS3MF3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MF3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_cast(obj)

class itkBinaryMask3DMeshSourceISS3MSS3(itkImageToMeshFilterPython.itkImageToMeshFilterISS3MSS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceISS3MSS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceISS3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceISS3MSS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceISS3MSS3 self) -> itkBinaryMask3DMeshSourceISS3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_Clone(self)


    def SetObjectValue(self, _arg: 'short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceISS3MSS3 self, short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceISS3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceISS3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageSS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceISS3MSS3 self, itkImageSS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MSS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MSS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MSS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MSS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MSS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceISS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceISS3MSS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_Clone, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetObjectValue, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetInput, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_swigregister
itkBinaryMask3DMeshSourceISS3MSS3_swigregister(itkBinaryMask3DMeshSourceISS3MSS3)

def itkBinaryMask3DMeshSourceISS3MSS3___New_orig__() -> "itkBinaryMask3DMeshSourceISS3MSS3_Pointer":
    """itkBinaryMask3DMeshSourceISS3MSS3___New_orig__() -> itkBinaryMask3DMeshSourceISS3MSS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3___New_orig__()

def itkBinaryMask3DMeshSourceISS3MSS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MSS3 *":
    """itkBinaryMask3DMeshSourceISS3MSS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MSS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_cast(obj)

class itkBinaryMask3DMeshSourceISS3MUC3(itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUC3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceISS3MUC3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceISS3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceISS3MUC3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceISS3MUC3 self) -> itkBinaryMask3DMeshSourceISS3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_Clone(self)


    def SetObjectValue(self, _arg: 'short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceISS3MUC3 self, short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceISS3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceISS3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageSS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceISS3MUC3 self, itkImageSS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MUC3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MUC3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MUC3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MUC3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MUC3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceISS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceISS3MUC3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_Clone, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetObjectValue, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetInput, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_swigregister
itkBinaryMask3DMeshSourceISS3MUC3_swigregister(itkBinaryMask3DMeshSourceISS3MUC3)

def itkBinaryMask3DMeshSourceISS3MUC3___New_orig__() -> "itkBinaryMask3DMeshSourceISS3MUC3_Pointer":
    """itkBinaryMask3DMeshSourceISS3MUC3___New_orig__() -> itkBinaryMask3DMeshSourceISS3MUC3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3___New_orig__()

def itkBinaryMask3DMeshSourceISS3MUC3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MUC3 *":
    """itkBinaryMask3DMeshSourceISS3MUC3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MUC3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_cast(obj)

class itkBinaryMask3DMeshSourceISS3MUS3(itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceISS3MUS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceISS3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceISS3MUS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceISS3MUS3 self) -> itkBinaryMask3DMeshSourceISS3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_Clone(self)


    def SetObjectValue(self, _arg: 'short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceISS3MUS3 self, short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceISS3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceISS3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageSS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceISS3MUS3 self, itkImageSS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MUS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceISS3MUS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MUS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MUS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MUS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceISS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceISS3MUS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_Clone, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetObjectValue, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetInput, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_swigregister
itkBinaryMask3DMeshSourceISS3MUS3_swigregister(itkBinaryMask3DMeshSourceISS3MUS3)

def itkBinaryMask3DMeshSourceISS3MUS3___New_orig__() -> "itkBinaryMask3DMeshSourceISS3MUS3_Pointer":
    """itkBinaryMask3DMeshSourceISS3MUS3___New_orig__() -> itkBinaryMask3DMeshSourceISS3MUS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3___New_orig__()

def itkBinaryMask3DMeshSourceISS3MUS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceISS3MUS3 *":
    """itkBinaryMask3DMeshSourceISS3MUS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceISS3MUS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_cast(obj)

class itkBinaryMask3DMeshSourceIUC3MD3(itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MD3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MD3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUC3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUC3MD3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUC3MD3 self) -> itkBinaryMask3DMeshSourceIUC3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned char const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUC3MD3 self, unsigned char const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUC3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUC3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUC3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUC3MD3 self, itkImageUC3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MD3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MD3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MD3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MD3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MD3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUC3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUC3MD3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_Clone, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetInput, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_swigregister
itkBinaryMask3DMeshSourceIUC3MD3_swigregister(itkBinaryMask3DMeshSourceIUC3MD3)

def itkBinaryMask3DMeshSourceIUC3MD3___New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MD3_Pointer":
    """itkBinaryMask3DMeshSourceIUC3MD3___New_orig__() -> itkBinaryMask3DMeshSourceIUC3MD3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3___New_orig__()

def itkBinaryMask3DMeshSourceIUC3MD3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MD3 *":
    """itkBinaryMask3DMeshSourceIUC3MD3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MD3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_cast(obj)

class itkBinaryMask3DMeshSourceIUC3MF3(itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MF3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MF3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUC3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUC3MF3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUC3MF3 self) -> itkBinaryMask3DMeshSourceIUC3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned char const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUC3MF3 self, unsigned char const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUC3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUC3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUC3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUC3MF3 self, itkImageUC3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MF3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MF3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MF3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MF3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MF3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUC3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUC3MF3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_Clone, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetInput, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_swigregister
itkBinaryMask3DMeshSourceIUC3MF3_swigregister(itkBinaryMask3DMeshSourceIUC3MF3)

def itkBinaryMask3DMeshSourceIUC3MF3___New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MF3_Pointer":
    """itkBinaryMask3DMeshSourceIUC3MF3___New_orig__() -> itkBinaryMask3DMeshSourceIUC3MF3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3___New_orig__()

def itkBinaryMask3DMeshSourceIUC3MF3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MF3 *":
    """itkBinaryMask3DMeshSourceIUC3MF3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MF3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_cast(obj)

class itkBinaryMask3DMeshSourceIUC3MSS3(itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MSS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MSS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUC3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUC3MSS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUC3MSS3 self) -> itkBinaryMask3DMeshSourceIUC3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned char const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUC3MSS3 self, unsigned char const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUC3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUC3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUC3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUC3MSS3 self, itkImageUC3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MSS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MSS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MSS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MSS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MSS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUC3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUC3MSS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_Clone, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetInput, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_swigregister
itkBinaryMask3DMeshSourceIUC3MSS3_swigregister(itkBinaryMask3DMeshSourceIUC3MSS3)

def itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MSS3_Pointer":
    """itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__() -> itkBinaryMask3DMeshSourceIUC3MSS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__()

def itkBinaryMask3DMeshSourceIUC3MSS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MSS3 *":
    """itkBinaryMask3DMeshSourceIUC3MSS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MSS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_cast(obj)

class itkBinaryMask3DMeshSourceIUC3MUC3(itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUC3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MUC3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUC3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUC3MUC3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUC3MUC3 self) -> itkBinaryMask3DMeshSourceIUC3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned char const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUC3MUC3 self, unsigned char const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUC3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUC3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUC3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUC3MUC3 self, itkImageUC3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MUC3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MUC3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MUC3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MUC3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MUC3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUC3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUC3MUC3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_Clone, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetInput, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_swigregister
itkBinaryMask3DMeshSourceIUC3MUC3_swigregister(itkBinaryMask3DMeshSourceIUC3MUC3)

def itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MUC3_Pointer":
    """itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__() -> itkBinaryMask3DMeshSourceIUC3MUC3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__()

def itkBinaryMask3DMeshSourceIUC3MUC3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MUC3 *":
    """itkBinaryMask3DMeshSourceIUC3MUC3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MUC3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_cast(obj)

class itkBinaryMask3DMeshSourceIUC3MUS3(itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MUS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUC3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUC3MUS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUC3MUS3 self) -> itkBinaryMask3DMeshSourceIUC3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned char const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUC3MUS3 self, unsigned char const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUC3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUC3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUC3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUC3MUS3 self, itkImageUC3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MUS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUC3MUS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MUS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MUS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MUS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUC3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUC3MUS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_Clone, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetInput, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_swigregister
itkBinaryMask3DMeshSourceIUC3MUS3_swigregister(itkBinaryMask3DMeshSourceIUC3MUS3)

def itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__() -> "itkBinaryMask3DMeshSourceIUC3MUS3_Pointer":
    """itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__() -> itkBinaryMask3DMeshSourceIUC3MUS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__()

def itkBinaryMask3DMeshSourceIUC3MUS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUC3MUS3 *":
    """itkBinaryMask3DMeshSourceIUC3MUS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUC3MUS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_cast(obj)

class itkBinaryMask3DMeshSourceIUS3MD3(itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MD3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MD3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUS3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUS3MD3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUS3MD3 self) -> itkBinaryMask3DMeshSourceIUS3MD3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUS3MD3 self, unsigned short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUS3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUS3MD3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUS3MD3 self, itkImageUS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MD3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MD3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MD3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MD3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MD3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUS3MD3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_Clone, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetInput, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_swigregister
itkBinaryMask3DMeshSourceIUS3MD3_swigregister(itkBinaryMask3DMeshSourceIUS3MD3)

def itkBinaryMask3DMeshSourceIUS3MD3___New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MD3_Pointer":
    """itkBinaryMask3DMeshSourceIUS3MD3___New_orig__() -> itkBinaryMask3DMeshSourceIUS3MD3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3___New_orig__()

def itkBinaryMask3DMeshSourceIUS3MD3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MD3 *":
    """itkBinaryMask3DMeshSourceIUS3MD3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MD3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_cast(obj)

class itkBinaryMask3DMeshSourceIUS3MF3(itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MF3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MF3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUS3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUS3MF3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUS3MF3 self) -> itkBinaryMask3DMeshSourceIUS3MF3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUS3MF3 self, unsigned short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUS3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUS3MF3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUS3MF3 self, itkImageUS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MF3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MF3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MF3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MF3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MF3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUS3MF3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_Clone, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetInput, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_swigregister
itkBinaryMask3DMeshSourceIUS3MF3_swigregister(itkBinaryMask3DMeshSourceIUS3MF3)

def itkBinaryMask3DMeshSourceIUS3MF3___New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MF3_Pointer":
    """itkBinaryMask3DMeshSourceIUS3MF3___New_orig__() -> itkBinaryMask3DMeshSourceIUS3MF3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3___New_orig__()

def itkBinaryMask3DMeshSourceIUS3MF3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MF3 *":
    """itkBinaryMask3DMeshSourceIUS3MF3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MF3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_cast(obj)

class itkBinaryMask3DMeshSourceIUS3MSS3(itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MSS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MSS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUS3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUS3MSS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUS3MSS3 self) -> itkBinaryMask3DMeshSourceIUS3MSS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUS3MSS3 self, unsigned short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUS3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUS3MSS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUS3MSS3 self, itkImageUS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MSS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MSS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MSS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MSS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MSS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUS3MSS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_Clone, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetInput, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_swigregister
itkBinaryMask3DMeshSourceIUS3MSS3_swigregister(itkBinaryMask3DMeshSourceIUS3MSS3)

def itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MSS3_Pointer":
    """itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__() -> itkBinaryMask3DMeshSourceIUS3MSS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__()

def itkBinaryMask3DMeshSourceIUS3MSS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MSS3 *":
    """itkBinaryMask3DMeshSourceIUS3MSS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MSS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_cast(obj)

class itkBinaryMask3DMeshSourceIUS3MUC3(itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUC3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MUC3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUS3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUS3MUC3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUS3MUC3 self) -> itkBinaryMask3DMeshSourceIUS3MUC3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUS3MUC3 self, unsigned short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUS3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUS3MUC3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUS3MUC3 self, itkImageUS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MUC3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MUC3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MUC3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MUC3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MUC3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUS3MUC3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_Clone, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetInput, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_swigregister
itkBinaryMask3DMeshSourceIUS3MUC3_swigregister(itkBinaryMask3DMeshSourceIUS3MUC3)

def itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MUC3_Pointer":
    """itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__() -> itkBinaryMask3DMeshSourceIUS3MUC3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__()

def itkBinaryMask3DMeshSourceIUS3MUC3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MUC3 *":
    """itkBinaryMask3DMeshSourceIUS3MUC3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MUC3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_cast(obj)

class itkBinaryMask3DMeshSourceIUS3MUS3(itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUS3):
    """


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image.

    C++ includes: itkBinaryMask3DMeshSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MUS3_Pointer":
        """__New_orig__() -> itkBinaryMask3DMeshSourceIUS3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMask3DMeshSourceIUS3MUS3_Pointer":
        """Clone(itkBinaryMask3DMeshSourceIUS3MUS3 self) -> itkBinaryMask3DMeshSourceIUS3MUS3_Pointer"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_Clone(self)


    def SetObjectValue(self, _arg: 'unsigned short const') -> "void":
        """SetObjectValue(itkBinaryMask3DMeshSourceIUS3MUS3 self, unsigned short const _arg)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetObjectValue(self, _arg)


    def GetNumberOfNodes(self) -> "unsigned long":
        """GetNumberOfNodes(itkBinaryMask3DMeshSourceIUS3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfNodes(self)


    def GetNumberOfCells(self) -> "unsigned long":
        """GetNumberOfCells(itkBinaryMask3DMeshSourceIUS3MUS3 self) -> unsigned long"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfCells(self)


    def SetInput(self, inputImage: 'itkImageUS3') -> "void":
        """SetInput(itkBinaryMask3DMeshSourceIUS3MUS3 self, itkImageUS3 inputImage)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetInput(self, inputImage)


    def SetRegionOfInterest(self, iRegion: 'itkImageRegion3') -> "void":
        """SetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MUS3 self, itkImageRegion3 iRegion)"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetRegionOfInterest(self, iRegion)


    def GetRegionOfInterest(self) -> "itkImageRegion3 const &":
        """GetRegionOfInterest(itkBinaryMask3DMeshSourceIUS3MUS3 self) -> itkImageRegion3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetRegionOfInterest(self)

    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MUS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MUS3 *":
        """cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MUS3"""
        return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMask3DMeshSourceIUS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMask3DMeshSourceIUS3MUS3.Clone = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_Clone, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.SetObjectValue = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetObjectValue, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.GetNumberOfNodes = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfNodes, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.GetNumberOfCells = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfCells, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.SetInput = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetInput, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.SetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3.GetRegionOfInterest = new_instancemethod(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetRegionOfInterest, None, itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3_swigregister = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_swigregister
itkBinaryMask3DMeshSourceIUS3MUS3_swigregister(itkBinaryMask3DMeshSourceIUS3MUS3)

def itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__() -> "itkBinaryMask3DMeshSourceIUS3MUS3_Pointer":
    """itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__() -> itkBinaryMask3DMeshSourceIUS3MUS3_Pointer"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__()

def itkBinaryMask3DMeshSourceIUS3MUS3_cast(obj: 'itkLightObject') -> "itkBinaryMask3DMeshSourceIUS3MUS3 *":
    """itkBinaryMask3DMeshSourceIUS3MUS3_cast(itkLightObject obj) -> itkBinaryMask3DMeshSourceIUS3MUS3"""
    return _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_mask3_d_mesh_source(*args, **kwargs):
    """Procedural interface for BinaryMask3DMeshSource"""
    import itk
    instance = itk.BinaryMask3DMeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_mask3_d_mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMask3DMeshSource, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMask3DMeshSource.values()[0]
    else:
        filter_object = itk.BinaryMask3DMeshSource

    binary_mask3_d_mesh_source.__doc__ = filter_object.__doc__
    binary_mask3_d_mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_mask3_d_mesh_source.__doc__ += "Available Keyword Arguments:\n"
    binary_mask3_d_mesh_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



