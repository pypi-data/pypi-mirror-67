# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramToTextureFeaturesFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramToTextureFeaturesFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramToTextureFeaturesFilterPython
            return _itkHistogramToTextureFeaturesFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramToTextureFeaturesFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramToTextureFeaturesFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramToTextureFeaturesFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vector_refPython
import itkVectorPython
import itkRGBPixelPython
import itkHistogramPython
import itkSamplePython

def itkHistogramToTextureFeaturesFilterHF_New():
  return itkHistogramToTextureFeaturesFilterHF.New()


def itkHistogramToTextureFeaturesFilterHD_New():
  return itkHistogramToTextureFeaturesFilterHD.New()

class itkHistogramToTextureFeaturesFilterEnums(object):
    """Proxy of C++ itkHistogramToTextureFeaturesFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TextureFeature_Energy = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Energy
    TextureFeature_Entropy = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Entropy
    TextureFeature_Correlation = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Correlation
    TextureFeature_InverseDifferenceMoment = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_InverseDifferenceMoment
    TextureFeature_Inertia = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Inertia
    TextureFeature_ClusterShade = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_ClusterShade
    TextureFeature_ClusterProminence = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_ClusterProminence
    TextureFeature_HaralickCorrelation = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_HaralickCorrelation
    TextureFeature_InvalidFeatureName = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_InvalidFeatureName

    def __init__(self, *args):
        """
        __init__(itkHistogramToTextureFeaturesFilterEnums self) -> itkHistogramToTextureFeaturesFilterEnums
        __init__(itkHistogramToTextureFeaturesFilterEnums self, itkHistogramToTextureFeaturesFilterEnums arg0) -> itkHistogramToTextureFeaturesFilterEnums
        """
        _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_swiginit(self, _itkHistogramToTextureFeaturesFilterPython.new_itkHistogramToTextureFeaturesFilterEnums(*args))
    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterEnums
itkHistogramToTextureFeaturesFilterEnums_swigregister = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_swigregister
itkHistogramToTextureFeaturesFilterEnums_swigregister(itkHistogramToTextureFeaturesFilterEnums)

class itkHistogramToTextureFeaturesFilterHD(ITKCommonBasePython.itkProcessObject):
    """


    This class computes texture feature coefficients from a grey level co-
    occurrence matrix.

    This class computes features that summarize image texture, given a
    grey level co-occurrence matrix (generated by a
    ScalarImageToCooccurrenceMatrixFilter or related class).

    The features calculated are as follows (where $ g(i, j) $ is the
    element in cell i, j of a a normalized GLCM):

    "Energy" $ = f_1 = \\sum_{i,j}g(i, j)^2 $

    "Entropy" $ = f_2 = -\\sum_{i,j}g(i, j) \\log_2 g(i, j)$, or 0
    if $g(i, j) = 0$

    "Correlation" $ = f_3 = \\sum_{i,j}\\frac{(i - \\mu)(j -
    \\mu)g(i, j)}{\\sigma^2} $

    "Difference Moment" $= f_4 = \\sum_{i,j}\\frac{1}{1 + (i -
    j)^2}g(i, j) $

    "Inertia" $ = f_5 = \\sum_{i,j}(i - j)^2g(i, j) $ (sometimes
    called "contrast.")

    "Cluster Shade" $ = f_6 = \\sum_{i,j}((i - \\mu) + (j -
    \\mu))^3 g(i, j) $

    "Cluster Prominence" $ = f_7 = \\sum_{i,j}((i - \\mu) + (j -
    \\mu))^4 g(i, j) $

    "Haralick's Correlation" $ = f_8 = \\frac{\\sum_{i,j}(i, j) g(i,
    j) -\\mu_t^2}{\\sigma_t^2} $ where $\\mu_t$ and $\\sigma_t$
    are the mean and standard deviation of the row (or column, due to
    symmetry) sums.

    Above, $ \\mu = $ (weighted pixel average) $ = \\sum_{i,j}i
    \\cdot g(i, j) = \\sum_{i,j}j \\cdot g(i, j) $ (due to matrix
    symmetry), and

    $ \\sigma = $ (weighted pixel variance) $ = \\sum_{i,j}(i -
    \\mu)^2 \\cdot g(i, j) = \\sum_{i,j}(j - \\mu)^2 \\cdot g(i,
    j) $ (due to matrix symmetry)

    A good texture feature set to use is the Conners, Trivedi and Harlow
    set: features 1, 2, 4, 5, 6, and 7. There is some correlation between
    the various features, so using all of them at the same time is not
    necessarily a good idea.

    NOTA BENE: The input histogram will be forcibly normalized! This
    algorithm takes three passes through the input histogram if the
    histogram was already normalized, and four if not.

    Web references:

    http://www.cssip.uq.edu.au/meastex/www/algs/algs/algs.htmlhttp://www.u
    calgary.ca/~mhallbey/texture/texture_tutorial.html

    Print references:

    Haralick, R.M., K. Shanmugam and I. Dinstein. 1973. Textural Features
    for Image Classification. IEEE Transactions on Systems, Man and
    Cybernetics. SMC-3(6):610-620.

    Haralick, R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.

    R.W. Conners and C.A. Harlow. A Theoretical Comaprison of Texture
    Algorithms. IEEE Transactions on Pattern Analysis and Machine
    Intelligence, 2:204-222, 1980.

    R.W. Conners, M.M. Trivedi, and C.A. Harlow. Segmentation of a High-
    Resolution Urban Scene using Texture Operators. Computer Vision,
    Graphics and Image Processing, 25:273-310, 1984.

    See:   ScalarImageToCooccurrenceMatrixFilter

    See:   ScalarImageToTextureFeaturesFilter  Author: Zachary Pincus

    C++ includes: itkHistogramToTextureFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToTextureFeaturesFilterHD_Pointer":
        """__New_orig__() -> itkHistogramToTextureFeaturesFilterHD_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToTextureFeaturesFilterHD_Pointer":
        """Clone(itkHistogramToTextureFeaturesFilterHD self) -> itkHistogramToTextureFeaturesFilterHD_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToTextureFeaturesFilterHD self, itkHistogramD histogram)"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToTextureFeaturesFilterHD self) -> itkHistogramD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInput(self)


    def GetEnergy(self) -> "double":
        """
        GetEnergy(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return energy texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergy(self)


    def GetEnergyOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetEnergyOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergyOutput(self)


    def GetEntropy(self) -> "double":
        """
        GetEntropy(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return entropy texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropy(self)


    def GetEntropyOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetEntropyOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropyOutput(self)


    def GetCorrelation(self) -> "double":
        """
        GetCorrelation(itkHistogramToTextureFeaturesFilterHD self) -> double

        return correlation
        texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelation(self)


    def GetCorrelationOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetCorrelationOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelationOutput(self)


    def GetInverseDifferenceMoment(self) -> "double":
        """
        GetInverseDifferenceMoment(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return
        inverse difference moment texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMoment(self)


    def GetInverseDifferenceMomentOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetInverseDifferenceMomentOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMomentOutput(self)


    def GetInertia(self) -> "double":
        """
        GetInertia(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return inertia texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertia(self)


    def GetInertiaOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetInertiaOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertiaOutput(self)


    def GetClusterShade(self) -> "double":
        """
        GetClusterShade(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return cluster
        shade texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShade(self)


    def GetClusterShadeOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetClusterShadeOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShadeOutput(self)


    def GetClusterProminence(self) -> "double":
        """
        GetClusterProminence(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return cluster
        prominence texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminence(self)


    def GetClusterProminenceOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetClusterProminenceOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminenceOutput(self)


    def GetHaralickCorrelation(self) -> "double":
        """
        GetHaralickCorrelation(itkHistogramToTextureFeaturesFilterHD self) -> double

        Return
        Haralick correlation texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelation(self)


    def GetHaralickCorrelationOutput(self) -> "itkSimpleDataObjectDecoratorD const *":
        """GetHaralickCorrelationOutput(itkHistogramToTextureFeaturesFilterHD self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelationOutput(self)


    def GetFeature(self, name: 'itkHistogramToTextureFeaturesFilterEnums::TextureFeature') -> "double":
        """
        GetFeature(itkHistogramToTextureFeaturesFilterHD self, itkHistogramToTextureFeaturesFilterEnums::TextureFeature name) -> double

        convenience method to
        access the texture values 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetFeature(self, name)

    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterHD

    def cast(obj: 'itkLightObject') -> "itkHistogramToTextureFeaturesFilterHD *":
        """cast(itkLightObject obj) -> itkHistogramToTextureFeaturesFilterHD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToTextureFeaturesFilterHD

        Create a new object of the class itkHistogramToTextureFeaturesFilterHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToTextureFeaturesFilterHD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToTextureFeaturesFilterHD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToTextureFeaturesFilterHD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToTextureFeaturesFilterHD.Clone = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_Clone, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.SetInput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_SetInput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetInput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetEnergy = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergy, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetEnergyOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergyOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetEntropy = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropy, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetEntropyOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropyOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetCorrelation = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelation, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetCorrelationOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelationOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetInverseDifferenceMoment = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMoment, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetInverseDifferenceMomentOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMomentOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetInertia = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertia, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetInertiaOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertiaOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetClusterShade = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShade, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetClusterShadeOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShadeOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetClusterProminence = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminence, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetClusterProminenceOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminenceOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetHaralickCorrelation = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelation, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetHaralickCorrelationOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelationOutput, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD.GetFeature = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetFeature, None, itkHistogramToTextureFeaturesFilterHD)
itkHistogramToTextureFeaturesFilterHD_swigregister = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_swigregister
itkHistogramToTextureFeaturesFilterHD_swigregister(itkHistogramToTextureFeaturesFilterHD)

def itkHistogramToTextureFeaturesFilterHD___New_orig__() -> "itkHistogramToTextureFeaturesFilterHD_Pointer":
    """itkHistogramToTextureFeaturesFilterHD___New_orig__() -> itkHistogramToTextureFeaturesFilterHD_Pointer"""
    return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD___New_orig__()

def itkHistogramToTextureFeaturesFilterHD_cast(obj: 'itkLightObject') -> "itkHistogramToTextureFeaturesFilterHD *":
    """itkHistogramToTextureFeaturesFilterHD_cast(itkLightObject obj) -> itkHistogramToTextureFeaturesFilterHD"""
    return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_cast(obj)

class itkHistogramToTextureFeaturesFilterHF(ITKCommonBasePython.itkProcessObject):
    """


    This class computes texture feature coefficients from a grey level co-
    occurrence matrix.

    This class computes features that summarize image texture, given a
    grey level co-occurrence matrix (generated by a
    ScalarImageToCooccurrenceMatrixFilter or related class).

    The features calculated are as follows (where $ g(i, j) $ is the
    element in cell i, j of a a normalized GLCM):

    "Energy" $ = f_1 = \\sum_{i,j}g(i, j)^2 $

    "Entropy" $ = f_2 = -\\sum_{i,j}g(i, j) \\log_2 g(i, j)$, or 0
    if $g(i, j) = 0$

    "Correlation" $ = f_3 = \\sum_{i,j}\\frac{(i - \\mu)(j -
    \\mu)g(i, j)}{\\sigma^2} $

    "Difference Moment" $= f_4 = \\sum_{i,j}\\frac{1}{1 + (i -
    j)^2}g(i, j) $

    "Inertia" $ = f_5 = \\sum_{i,j}(i - j)^2g(i, j) $ (sometimes
    called "contrast.")

    "Cluster Shade" $ = f_6 = \\sum_{i,j}((i - \\mu) + (j -
    \\mu))^3 g(i, j) $

    "Cluster Prominence" $ = f_7 = \\sum_{i,j}((i - \\mu) + (j -
    \\mu))^4 g(i, j) $

    "Haralick's Correlation" $ = f_8 = \\frac{\\sum_{i,j}(i, j) g(i,
    j) -\\mu_t^2}{\\sigma_t^2} $ where $\\mu_t$ and $\\sigma_t$
    are the mean and standard deviation of the row (or column, due to
    symmetry) sums.

    Above, $ \\mu = $ (weighted pixel average) $ = \\sum_{i,j}i
    \\cdot g(i, j) = \\sum_{i,j}j \\cdot g(i, j) $ (due to matrix
    symmetry), and

    $ \\sigma = $ (weighted pixel variance) $ = \\sum_{i,j}(i -
    \\mu)^2 \\cdot g(i, j) = \\sum_{i,j}(j - \\mu)^2 \\cdot g(i,
    j) $ (due to matrix symmetry)

    A good texture feature set to use is the Conners, Trivedi and Harlow
    set: features 1, 2, 4, 5, 6, and 7. There is some correlation between
    the various features, so using all of them at the same time is not
    necessarily a good idea.

    NOTA BENE: The input histogram will be forcibly normalized! This
    algorithm takes three passes through the input histogram if the
    histogram was already normalized, and four if not.

    Web references:

    http://www.cssip.uq.edu.au/meastex/www/algs/algs/algs.htmlhttp://www.u
    calgary.ca/~mhallbey/texture/texture_tutorial.html

    Print references:

    Haralick, R.M., K. Shanmugam and I. Dinstein. 1973. Textural Features
    for Image Classification. IEEE Transactions on Systems, Man and
    Cybernetics. SMC-3(6):610-620.

    Haralick, R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.

    R.W. Conners and C.A. Harlow. A Theoretical Comaprison of Texture
    Algorithms. IEEE Transactions on Pattern Analysis and Machine
    Intelligence, 2:204-222, 1980.

    R.W. Conners, M.M. Trivedi, and C.A. Harlow. Segmentation of a High-
    Resolution Urban Scene using Texture Operators. Computer Vision,
    Graphics and Image Processing, 25:273-310, 1984.

    See:   ScalarImageToCooccurrenceMatrixFilter

    See:   ScalarImageToTextureFeaturesFilter  Author: Zachary Pincus

    C++ includes: itkHistogramToTextureFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToTextureFeaturesFilterHF_Pointer":
        """__New_orig__() -> itkHistogramToTextureFeaturesFilterHF_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToTextureFeaturesFilterHF_Pointer":
        """Clone(itkHistogramToTextureFeaturesFilterHF self) -> itkHistogramToTextureFeaturesFilterHF_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToTextureFeaturesFilterHF self, itkHistogramF histogram)"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToTextureFeaturesFilterHF self) -> itkHistogramF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInput(self)


    def GetEnergy(self) -> "float":
        """
        GetEnergy(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return energy texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergy(self)


    def GetEnergyOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetEnergyOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergyOutput(self)


    def GetEntropy(self) -> "float":
        """
        GetEntropy(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return entropy texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropy(self)


    def GetEntropyOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetEntropyOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropyOutput(self)


    def GetCorrelation(self) -> "float":
        """
        GetCorrelation(itkHistogramToTextureFeaturesFilterHF self) -> float

        return correlation
        texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelation(self)


    def GetCorrelationOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetCorrelationOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelationOutput(self)


    def GetInverseDifferenceMoment(self) -> "float":
        """
        GetInverseDifferenceMoment(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return
        inverse difference moment texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMoment(self)


    def GetInverseDifferenceMomentOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetInverseDifferenceMomentOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMomentOutput(self)


    def GetInertia(self) -> "float":
        """
        GetInertia(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return inertia texture
        value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertia(self)


    def GetInertiaOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetInertiaOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertiaOutput(self)


    def GetClusterShade(self) -> "float":
        """
        GetClusterShade(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return cluster
        shade texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShade(self)


    def GetClusterShadeOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetClusterShadeOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShadeOutput(self)


    def GetClusterProminence(self) -> "float":
        """
        GetClusterProminence(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return cluster
        prominence texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminence(self)


    def GetClusterProminenceOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetClusterProminenceOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminenceOutput(self)


    def GetHaralickCorrelation(self) -> "float":
        """
        GetHaralickCorrelation(itkHistogramToTextureFeaturesFilterHF self) -> float

        Return
        Haralick correlation texture value. 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelation(self)


    def GetHaralickCorrelationOutput(self) -> "itkSimpleDataObjectDecoratorF const *":
        """GetHaralickCorrelationOutput(itkHistogramToTextureFeaturesFilterHF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelationOutput(self)


    def GetFeature(self, name: 'itkHistogramToTextureFeaturesFilterEnums::TextureFeature') -> "float":
        """
        GetFeature(itkHistogramToTextureFeaturesFilterHF self, itkHistogramToTextureFeaturesFilterEnums::TextureFeature name) -> float

        convenience method to
        access the texture values 
        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetFeature(self, name)

    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterHF

    def cast(obj: 'itkLightObject') -> "itkHistogramToTextureFeaturesFilterHF *":
        """cast(itkLightObject obj) -> itkHistogramToTextureFeaturesFilterHF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToTextureFeaturesFilterHF

        Create a new object of the class itkHistogramToTextureFeaturesFilterHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToTextureFeaturesFilterHF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToTextureFeaturesFilterHF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToTextureFeaturesFilterHF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToTextureFeaturesFilterHF.Clone = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_Clone, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.SetInput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_SetInput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetInput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetEnergy = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergy, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetEnergyOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergyOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetEntropy = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropy, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetEntropyOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropyOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetCorrelation = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelation, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetCorrelationOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelationOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetInverseDifferenceMoment = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMoment, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetInverseDifferenceMomentOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMomentOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetInertia = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertia, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetInertiaOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertiaOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetClusterShade = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShade, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetClusterShadeOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShadeOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetClusterProminence = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminence, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetClusterProminenceOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminenceOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetHaralickCorrelation = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelation, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetHaralickCorrelationOutput = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelationOutput, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF.GetFeature = new_instancemethod(_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetFeature, None, itkHistogramToTextureFeaturesFilterHF)
itkHistogramToTextureFeaturesFilterHF_swigregister = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_swigregister
itkHistogramToTextureFeaturesFilterHF_swigregister(itkHistogramToTextureFeaturesFilterHF)

def itkHistogramToTextureFeaturesFilterHF___New_orig__() -> "itkHistogramToTextureFeaturesFilterHF_Pointer":
    """itkHistogramToTextureFeaturesFilterHF___New_orig__() -> itkHistogramToTextureFeaturesFilterHF_Pointer"""
    return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF___New_orig__()

def itkHistogramToTextureFeaturesFilterHF_cast(obj: 'itkLightObject') -> "itkHistogramToTextureFeaturesFilterHF *":
    """itkHistogramToTextureFeaturesFilterHF_cast(itkLightObject obj) -> itkHistogramToTextureFeaturesFilterHF"""
    return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_texture_features_filter(*args, **kwargs):
    """Procedural interface for HistogramToTextureFeaturesFilter"""
    import itk
    instance = itk.HistogramToTextureFeaturesFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_texture_features_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToTextureFeaturesFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToTextureFeaturesFilter.values()[0]
    else:
        filter_object = itk.HistogramToTextureFeaturesFilter

    histogram_to_texture_features_filter.__doc__ = filter_object.__doc__
    histogram_to_texture_features_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_texture_features_filter.__doc__ += "Available Keyword Arguments:\n"
    histogram_to_texture_features_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



