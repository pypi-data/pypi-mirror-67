# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkScalarImageToRunLengthMatrixFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScalarImageToRunLengthMatrixFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkScalarImageToRunLengthMatrixFilterPython
            return _itkScalarImageToRunLengthMatrixFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkScalarImageToRunLengthMatrixFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkScalarImageToRunLengthMatrixFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScalarImageToRunLengthMatrixFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkIndexPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkHistogramPython
import itkSamplePython
import itkArrayPython

def itkScalarImageToRunLengthMatrixFilterID3_New():
  return itkScalarImageToRunLengthMatrixFilterID3.New()


def itkScalarImageToRunLengthMatrixFilterID2_New():
  return itkScalarImageToRunLengthMatrixFilterID2.New()


def itkScalarImageToRunLengthMatrixFilterIF3_New():
  return itkScalarImageToRunLengthMatrixFilterIF3.New()


def itkScalarImageToRunLengthMatrixFilterIF2_New():
  return itkScalarImageToRunLengthMatrixFilterIF2.New()


def itkScalarImageToRunLengthMatrixFilterIUS3_New():
  return itkScalarImageToRunLengthMatrixFilterIUS3.New()


def itkScalarImageToRunLengthMatrixFilterIUS2_New():
  return itkScalarImageToRunLengthMatrixFilterIUS2.New()


def itkScalarImageToRunLengthMatrixFilterIUC3_New():
  return itkScalarImageToRunLengthMatrixFilterIUC3.New()


def itkScalarImageToRunLengthMatrixFilterIUC2_New():
  return itkScalarImageToRunLengthMatrixFilterIUC2.New()


def itkScalarImageToRunLengthMatrixFilterISS3_New():
  return itkScalarImageToRunLengthMatrixFilterISS3.New()


def itkScalarImageToRunLengthMatrixFilterISS2_New():
  return itkScalarImageToRunLengthMatrixFilterISS2.New()

class itkScalarImageToRunLengthMatrixFilterID2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterID2_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterID2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterID2_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkScalarImageToRunLengthMatrixFilterID2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO2') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterID2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset2') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterID2 self, itkOffset2 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO2 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO2 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkVectorContainerUCO2
        GetOffsets(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkVectorContainerUCO2
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterID2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterID2 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterID2 self, double min, double max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "double":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterID2 self) -> double

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMin(self)


    def GetMax(self) -> "double":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterID2 self) -> double

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterID2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterID2 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterID2 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageD2') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterID2 self, itkImageD2 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInput(self, image)


    def GetInput(self) -> "itkImageD2 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkImageD2

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInput(self)


    def SetMaskImage(self, image: 'itkImageD2') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterID2 self, itkImageD2 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageD2 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkImageD2

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterID2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'double const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterID2 self, double const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "double":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterID2 self) -> double"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterID2

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterID2 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterID2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterID2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterID2.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_Clone, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffset, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMin, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMax, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInput, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInput, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOutput, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_swigregister
itkScalarImageToRunLengthMatrixFilterID2_swigregister(itkScalarImageToRunLengthMatrixFilterID2)

def itkScalarImageToRunLengthMatrixFilterID2___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterID2_Pointer":
    """itkScalarImageToRunLengthMatrixFilterID2___New_orig__() -> itkScalarImageToRunLengthMatrixFilterID2_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2___New_orig__()

def itkScalarImageToRunLengthMatrixFilterID2_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterID2 *":
    """itkScalarImageToRunLengthMatrixFilterID2_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterID2"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_cast(obj)

class itkScalarImageToRunLengthMatrixFilterID3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterID3_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterID3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterID3_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkScalarImageToRunLengthMatrixFilterID3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO3') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterID3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset3') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterID3 self, itkOffset3 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO3 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO3 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkVectorContainerUCO3
        GetOffsets(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkVectorContainerUCO3
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterID3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterID3 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterID3 self, double min, double max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "double":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterID3 self) -> double

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMin(self)


    def GetMax(self) -> "double":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterID3 self) -> double

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterID3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterID3 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterID3 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageD3') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterID3 self, itkImageD3 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInput(self, image)


    def GetInput(self) -> "itkImageD3 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkImageD3

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInput(self)


    def SetMaskImage(self, image: 'itkImageD3') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterID3 self, itkImageD3 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageD3 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkImageD3

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterID3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'double const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterID3 self, double const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "double":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterID3 self) -> double"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterID3

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterID3 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterID3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterID3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterID3.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_Clone, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffset, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMin, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMax, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInput, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInput, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOutput, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_swigregister
itkScalarImageToRunLengthMatrixFilterID3_swigregister(itkScalarImageToRunLengthMatrixFilterID3)

def itkScalarImageToRunLengthMatrixFilterID3___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterID3_Pointer":
    """itkScalarImageToRunLengthMatrixFilterID3___New_orig__() -> itkScalarImageToRunLengthMatrixFilterID3_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3___New_orig__()

def itkScalarImageToRunLengthMatrixFilterID3_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterID3 *":
    """itkScalarImageToRunLengthMatrixFilterID3_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterID3"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIF2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIF2_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIF2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIF2_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkScalarImageToRunLengthMatrixFilterIF2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO2') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIF2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset2') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIF2 self, itkOffset2 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO2 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO2 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkVectorContainerUCO2
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkVectorContainerUCO2
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIF2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIF2 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'float', max: 'float') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIF2 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "float":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIF2 self) -> float

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMin(self)


    def GetMax(self) -> "float":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIF2 self) -> float

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIF2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIF2 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIF2 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageF2') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIF2 self, itkImageF2 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInput(self, image)


    def GetInput(self) -> "itkImageF2 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkImageF2

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInput(self)


    def SetMaskImage(self, image: 'itkImageF2') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIF2 self, itkImageF2 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageF2 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkImageF2

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIF2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'float const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIF2 self, float const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "float":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIF2 self) -> float"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIF2

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIF2 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIF2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIF2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIF2.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_Clone, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMin, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMax, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInput, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInput, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_swigregister
itkScalarImageToRunLengthMatrixFilterIF2_swigregister(itkScalarImageToRunLengthMatrixFilterIF2)

def itkScalarImageToRunLengthMatrixFilterIF2___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIF2_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIF2___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIF2_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIF2_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIF2 *":
    """itkScalarImageToRunLengthMatrixFilterIF2_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIF2"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIF3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIF3_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIF3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIF3_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkScalarImageToRunLengthMatrixFilterIF3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO3') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIF3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset3') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIF3 self, itkOffset3 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO3 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO3 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkVectorContainerUCO3
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkVectorContainerUCO3
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIF3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIF3 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'float', max: 'float') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIF3 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "float":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIF3 self) -> float

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMin(self)


    def GetMax(self) -> "float":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIF3 self) -> float

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIF3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIF3 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIF3 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageF3') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIF3 self, itkImageF3 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInput(self, image)


    def GetInput(self) -> "itkImageF3 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkImageF3

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInput(self)


    def SetMaskImage(self, image: 'itkImageF3') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIF3 self, itkImageF3 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageF3 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkImageF3

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIF3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'float const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIF3 self, float const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "float":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIF3 self) -> float"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIF3

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIF3 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIF3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIF3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIF3.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_Clone, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMin, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMax, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInput, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInput, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_swigregister
itkScalarImageToRunLengthMatrixFilterIF3_swigregister(itkScalarImageToRunLengthMatrixFilterIF3)

def itkScalarImageToRunLengthMatrixFilterIF3___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIF3_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIF3___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIF3_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIF3_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIF3 *":
    """itkScalarImageToRunLengthMatrixFilterIF3_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIF3"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_cast(obj)

class itkScalarImageToRunLengthMatrixFilterISS2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterISS2_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterISS2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterISS2_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkScalarImageToRunLengthMatrixFilterISS2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO2') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterISS2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset2') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterISS2 self, itkOffset2 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO2 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO2 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkVectorContainerUCO2
        GetOffsets(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkVectorContainerUCO2
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterISS2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterISS2 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'short', max: 'short') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterISS2 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "short":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterISS2 self) -> short

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMin(self)


    def GetMax(self) -> "short":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterISS2 self) -> short

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterISS2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterISS2 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterISS2 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageSS2') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterISS2 self, itkImageSS2 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInput(self, image)


    def GetInput(self) -> "itkImageSS2 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkImageSS2

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInput(self)


    def SetMaskImage(self, image: 'itkImageSS2') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterISS2 self, itkImageSS2 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageSS2 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkImageSS2

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterISS2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'short const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterISS2 self, short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "short":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterISS2 self) -> short"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterISS2

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterISS2 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterISS2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterISS2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterISS2.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_Clone, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffset, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMin, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMax, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInput, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInput, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOutput, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_swigregister
itkScalarImageToRunLengthMatrixFilterISS2_swigregister(itkScalarImageToRunLengthMatrixFilterISS2)

def itkScalarImageToRunLengthMatrixFilterISS2___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterISS2_Pointer":
    """itkScalarImageToRunLengthMatrixFilterISS2___New_orig__() -> itkScalarImageToRunLengthMatrixFilterISS2_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2___New_orig__()

def itkScalarImageToRunLengthMatrixFilterISS2_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterISS2 *":
    """itkScalarImageToRunLengthMatrixFilterISS2_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterISS2"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_cast(obj)

class itkScalarImageToRunLengthMatrixFilterISS3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterISS3_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterISS3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterISS3_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkScalarImageToRunLengthMatrixFilterISS3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO3') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterISS3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset3') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterISS3 self, itkOffset3 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO3 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO3 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkVectorContainerUCO3
        GetOffsets(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkVectorContainerUCO3
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterISS3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterISS3 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'short', max: 'short') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterISS3 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "short":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterISS3 self) -> short

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMin(self)


    def GetMax(self) -> "short":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterISS3 self) -> short

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterISS3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterISS3 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterISS3 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageSS3') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterISS3 self, itkImageSS3 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInput(self, image)


    def GetInput(self) -> "itkImageSS3 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkImageSS3

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInput(self)


    def SetMaskImage(self, image: 'itkImageSS3') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterISS3 self, itkImageSS3 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageSS3 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkImageSS3

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterISS3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'short const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterISS3 self, short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "short":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterISS3 self) -> short"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterISS3

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterISS3 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterISS3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterISS3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterISS3.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_Clone, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffset, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMin, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMax, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInput, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInput, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOutput, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_swigregister
itkScalarImageToRunLengthMatrixFilterISS3_swigregister(itkScalarImageToRunLengthMatrixFilterISS3)

def itkScalarImageToRunLengthMatrixFilterISS3___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterISS3_Pointer":
    """itkScalarImageToRunLengthMatrixFilterISS3___New_orig__() -> itkScalarImageToRunLengthMatrixFilterISS3_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3___New_orig__()

def itkScalarImageToRunLengthMatrixFilterISS3_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterISS3 *":
    """itkScalarImageToRunLengthMatrixFilterISS3_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterISS3"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIUC2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUC2_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIUC2_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkScalarImageToRunLengthMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO2') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIUC2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset2') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIUC2 self, itkOffset2 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO2 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO2 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkVectorContainerUCO2
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkVectorContainerUCO2
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUC2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'unsigned char', max: 'unsigned char') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIUC2 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "unsigned char":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> unsigned char

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMin(self)


    def GetMax(self) -> "unsigned char":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> unsigned char

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIUC2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageUC2') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIUC2 self, itkImageUC2 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInput(self, image)


    def GetInput(self) -> "itkImageUC2 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkImageUC2

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInput(self)


    def SetMaskImage(self, image: 'itkImageUC2') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIUC2 self, itkImageUC2 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageUC2 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkImageUC2

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUC2 self, unsigned char const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "unsigned char":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUC2 self) -> unsigned char"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUC2

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUC2 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUC2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUC2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIUC2.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_Clone, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMin, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMax, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInput, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInput, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_swigregister
itkScalarImageToRunLengthMatrixFilterIUC2_swigregister(itkScalarImageToRunLengthMatrixFilterIUC2)

def itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUC2_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUC2_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIUC2_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUC2 *":
    """itkScalarImageToRunLengthMatrixFilterIUC2_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUC2"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIUC3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUC3_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIUC3_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkScalarImageToRunLengthMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO3') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIUC3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset3') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIUC3 self, itkOffset3 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO3 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO3 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkVectorContainerUCO3
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkVectorContainerUCO3
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUC3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'unsigned char', max: 'unsigned char') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIUC3 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "unsigned char":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> unsigned char

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMin(self)


    def GetMax(self) -> "unsigned char":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> unsigned char

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIUC3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageUC3') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIUC3 self, itkImageUC3 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInput(self, image)


    def GetInput(self) -> "itkImageUC3 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkImageUC3

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInput(self)


    def SetMaskImage(self, image: 'itkImageUC3') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIUC3 self, itkImageUC3 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageUC3 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkImageUC3

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUC3 self, unsigned char const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "unsigned char":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUC3 self) -> unsigned char"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUC3

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUC3 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUC3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUC3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIUC3.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_Clone, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMin, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMax, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInput, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInput, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_swigregister
itkScalarImageToRunLengthMatrixFilterIUC3_swigregister(itkScalarImageToRunLengthMatrixFilterIUC3)

def itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUC3_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUC3_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIUC3_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUC3 *":
    """itkScalarImageToRunLengthMatrixFilterIUC3_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUC3"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIUS2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUS2_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIUS2_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkScalarImageToRunLengthMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO2') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIUS2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset2') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIUS2 self, itkOffset2 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO2 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO2 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkVectorContainerUCO2
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkVectorContainerUCO2
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUS2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'unsigned short', max: 'unsigned short') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIUS2 self, unsigned short min, unsigned short max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "unsigned short":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> unsigned short

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMin(self)


    def GetMax(self) -> "unsigned short":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> unsigned short

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIUS2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageUS2') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIUS2 self, itkImageUS2 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInput(self, image)


    def GetInput(self) -> "itkImageUS2 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkImageUS2

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInput(self)


    def SetMaskImage(self, image: 'itkImageUS2') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIUS2 self, itkImageUS2 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageUS2 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkImageUS2

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUS2 self, unsigned short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "unsigned short":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUS2 self) -> unsigned short"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUS2

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUS2 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUS2"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUS2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIUS2.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_Clone, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMin, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMax, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInput, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInput, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_swigregister
itkScalarImageToRunLengthMatrixFilterIUS2_swigregister(itkScalarImageToRunLengthMatrixFilterIUS2)

def itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUS2_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUS2_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIUS2_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUS2 *":
    """itkScalarImageToRunLengthMatrixFilterIUS2_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUS2"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_cast(obj)

class itkScalarImageToRunLengthMatrixFilterIUS3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUS3_Pointer":
        """__New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarImageToRunLengthMatrixFilterIUS3_Pointer":
        """Clone(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkScalarImageToRunLengthMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_Clone(self)


    def SetOffsets(self, _arg: 'itkVectorContainerUCO3') -> "void":
        """
        SetOffsets(itkScalarImageToRunLengthMatrixFilterIUS3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the intensity/distance pairs will be computed. Invoking this
        function clears the previous offsets. Note: for each individual offset
        in the OffsetVector, the rightmost non-zero (1, 0) means the offset
        along x-axis. (1, 0) has to be set instead of (-1, 0). This is
        required from the iterating order of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffsets(self, _arg)


    def SetOffset(self, offset: 'itkOffset3') -> "void":
        """
        SetOffset(itkScalarImageToRunLengthMatrixFilterIUS3 self, itkOffset3 offset)

        Set offset over which the
        intensity/distance pairs will be computed. Invoking this function
        clears the previous offset(s). Note: for each individual offset, the
        rightmost non-zero (1, 0) means the offset along x-axis. (1, 0) has to
        be set instead of (-1, 0). This is required from the iterating order
        of pixel iterator. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffset(self, offset)


    def GetModifiableOffsets(self) -> "itkVectorContainerUCO3 *":
        """GetModifiableOffsets(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetModifiableOffsets(self)


    def GetOffsets(self, *args) -> "itkVectorContainerUCO3 *":
        """
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkVectorContainerUCO3
        GetOffsets(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkVectorContainerUCO3
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOffsets(self, *args)


    def SetNumberOfBinsPerAxis(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUS3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self) -> "unsigned int":
        """
        GetNumberOfBinsPerAxis(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> unsigned int

        Get number
        of histogram bins along each axis 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min: 'unsigned short', max: 'unsigned short') -> "void":
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthMatrixFilterIUS3 self, unsigned short min, unsigned short max)

        Set the min and
        max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetPixelValueMinMax(self, min, max)


    def GetMin(self) -> "unsigned short":
        """
        GetMin(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> unsigned short

        Get the min pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMin(self)


    def GetMax(self) -> "unsigned short":
        """
        GetMax(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> unsigned short

        Get the max pixel value
        defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMax(self)


    def SetDistanceValueMinMax(self, min: 'double', max: 'double') -> "void":
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthMatrixFilterIUS3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used in generating the
        histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetDistanceValueMinMax(self, min, max)


    def GetMinDistance(self) -> "double":
        """
        GetMinDistance(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> double

        Get the min distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMinDistance(self)


    def GetMaxDistance(self) -> "double":
        """
        GetMaxDistance(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> double

        Get the max distance
        value defining one dimension of the joint histogram. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaxDistance(self)


    def SetInput(self, image: 'itkImageUS3') -> "void":
        """SetInput(itkScalarImageToRunLengthMatrixFilterIUS3 self, itkImageUS3 image)"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInput(self, image)


    def GetInput(self) -> "itkImageUS3 const *":
        """
        GetInput(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkImageUS3

        Method to get the input
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInput(self)


    def SetMaskImage(self, image: 'itkImageUS3') -> "void":
        """
        SetMaskImage(itkScalarImageToRunLengthMatrixFilterIUS3 self, itkImageUS3 image)

        Method to set the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetMaskImage(self, image)


    def GetMaskImage(self) -> "itkImageUS3 const *":
        """
        GetMaskImage(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkImageUS3

        Method to get the mask
        image 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaskImage(self)


    def GetOutput(self) -> "itkHistogramD const *":
        """
        GetOutput(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOutput(self)


    def SetInsidePixelValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUS3 self, unsigned short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to 1. 
        """
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self) -> "unsigned short":
        """GetInsidePixelValue(itkScalarImageToRunLengthMatrixFilterIUS3 self) -> unsigned short"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUS3

    def cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUS3 *":
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUS3"""
        return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUS3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthMatrixFilterIUS3.Clone = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_Clone, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetOffset = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffset, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetModifiableOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetModifiableOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOffsets, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetPixelValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetMin = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMin, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMax, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetMinDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMinDistance, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetMaxDistance = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaxDistance, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInput, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetInput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInput, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaskImage, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetOutput = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOutput, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInsidePixelValue, None, itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3_swigregister = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_swigregister
itkScalarImageToRunLengthMatrixFilterIUS3_swigregister(itkScalarImageToRunLengthMatrixFilterIUS3)

def itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__() -> "itkScalarImageToRunLengthMatrixFilterIUS3_Pointer":
    """itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__() -> itkScalarImageToRunLengthMatrixFilterIUS3_Pointer"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__()

def itkScalarImageToRunLengthMatrixFilterIUS3_cast(obj: 'itkLightObject') -> "itkScalarImageToRunLengthMatrixFilterIUS3 *":
    """itkScalarImageToRunLengthMatrixFilterIUS3_cast(itkLightObject obj) -> itkScalarImageToRunLengthMatrixFilterIUS3"""
    return _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_image_to_run_length_matrix_filter(*args, **kwargs):
    """Procedural interface for ScalarImageToRunLengthMatrixFilter"""
    import itk
    instance = itk.ScalarImageToRunLengthMatrixFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_image_to_run_length_matrix_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScalarImageToRunLengthMatrixFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScalarImageToRunLengthMatrixFilter.values()[0]
    else:
        filter_object = itk.ScalarImageToRunLengthMatrixFilter

    scalar_image_to_run_length_matrix_filter.__doc__ = filter_object.__doc__
    scalar_image_to_run_length_matrix_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scalar_image_to_run_length_matrix_filter.__doc__ += "Available Keyword Arguments:\n"
    scalar_image_to_run_length_matrix_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



