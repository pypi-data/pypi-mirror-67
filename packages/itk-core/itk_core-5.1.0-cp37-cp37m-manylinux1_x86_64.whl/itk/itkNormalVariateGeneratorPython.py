# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNormalVariateGeneratorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNormalVariateGeneratorPython', [dirname(__file__)])
        except ImportError:
            import _itkNormalVariateGeneratorPython
            return _itkNormalVariateGeneratorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNormalVariateGeneratorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNormalVariateGeneratorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNormalVariateGeneratorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython

def itkNormalVariateGenerator_New():
  return itkNormalVariateGenerator.New()

class itkNormalVariateGenerator(ITKCommonBasePython.itkRandomVariateGeneratorBase):
    """


    Normal random variate generator.

    This generation method was initially developed and implemented by
    Martin Styner, University of North Carolina at Chapel Hill, and his
    colleagues.

    You should run Initialize() function before call GetNormalVariate()
    function.

    The followings are original comments.

    Revision date 31 May 1996 This is a revised version of the algorithm
    described in

    ACM Transactions on Mathematical Software, Vol 22, No 1 March 1996, pp
    119-127.

    It is somewhat faster, and uses less memory as the vector of variates
    is updated in-situ. It has passed all the same statistical tests as
    described in the TOMS article, plus others. Seems OK so far.   Works
    well with total pool of 1024 variates, and does not need two vectors
    of this size, so does less damage to cache.            Has been tested
    for frequency of tail values which    should occur once in a million.
    OK. Other usual tests OK.    About 13 % faster than TOMS version.
    FAST GENERATOR OF PSEUDO-RANDOM UNIT NORMAL VARIATES C.S.Wallace,
    Monash University, 1994

    To use this code, files needing to call the generator should include:
    and be linked with the maths library (-lm) FastNorm.h contains
    declaration of the initialization routine 'initnorm()', definition of
    a macro 'FastGauss' used to generate variates, and three variables
    used in the macro. Read below for calling conventions.

    THIS CODE ASSUMES TWO'S-COMPLEMENT 32-BIT INTEGER ARITHMATIC. IT ALSO
    ASSUMES THE 'C' COMPILER COMPILES THE LEFT-SHIFT OPERATOR "<<" AS A
    LOGICAL SHIFT, DISCARDING THE SIGN DIGIT AND SHIFTING IN ZEROS ON THE
    RIGHT, SO " X << 1" IS EQUIVALENT TO " X+X ". IT ALSO ASSUMES THE
    RIGHT-SHIFT OPERATOR ">>" IS SIGN-PRESERVING, SO ( -2 >> 1) = -1, (
    -1>>1) = -1.

    A fast generator of pseudo-random variates from the unit Normal
    distribution. It keeps a pool of about 1000 variates, and generates
    new ones by picking 4 from the pool, rotating the 4-vector with these
    as its components, and replacing the old variates with the components
    of the rotated vector.

    The program should initialize the generator by calling initnorm(seed)
    with seed a int integer seed value. Different seed values will give
    different sequences of Normals. Then, wherever the program needs a new
    Normal variate, it should use the macro FastGauss, e.g. in statements
    like: x = FastGauss; (Sets x to a random Normal value)

    C++ includes: itkNormalVariateGenerator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalVariateGenerator_Pointer":
        """__New_orig__() -> itkNormalVariateGenerator_Pointer"""
        return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalVariateGenerator_Pointer":
        """Clone(itkNormalVariateGenerator self) -> itkNormalVariateGenerator_Pointer"""
        return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Clone(self)


    def Initialize(self, randomSeed: 'int') -> "void":
        """
        Initialize(itkNormalVariateGenerator self, int randomSeed)

        generate random number
        table 
        """
        return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Initialize(self, randomSeed)

    __swig_destroy__ = _itkNormalVariateGeneratorPython.delete_itkNormalVariateGenerator

    def cast(obj: 'itkLightObject') -> "itkNormalVariateGenerator *":
        """cast(itkLightObject obj) -> itkNormalVariateGenerator"""
        return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalVariateGenerator

        Create a new object of the class itkNormalVariateGenerator and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalVariateGenerator.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalVariateGenerator.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalVariateGenerator.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalVariateGenerator.Clone = new_instancemethod(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Clone, None, itkNormalVariateGenerator)
itkNormalVariateGenerator.Initialize = new_instancemethod(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Initialize, None, itkNormalVariateGenerator)
itkNormalVariateGenerator_swigregister = _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_swigregister
itkNormalVariateGenerator_swigregister(itkNormalVariateGenerator)

def itkNormalVariateGenerator___New_orig__() -> "itkNormalVariateGenerator_Pointer":
    """itkNormalVariateGenerator___New_orig__() -> itkNormalVariateGenerator_Pointer"""
    return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator___New_orig__()

def itkNormalVariateGenerator_cast(obj: 'itkLightObject') -> "itkNormalVariateGenerator *":
    """itkNormalVariateGenerator_cast(itkLightObject obj) -> itkNormalVariateGenerator"""
    return _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_cast(obj)



