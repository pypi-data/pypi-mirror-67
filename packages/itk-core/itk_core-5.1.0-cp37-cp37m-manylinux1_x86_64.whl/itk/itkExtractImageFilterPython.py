# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkExtractImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkExtractImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkExtractImageFilterPython
            return _itkExtractImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkExtractImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkExtractImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkExtractImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import pyBasePython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import ITKCommonBasePython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkExtractImageFilterICF3ICF2_New():
  return itkExtractImageFilterICF3ICF2.New()


def itkExtractImageFilterIRGBUC3IRGBUC2_New():
  return itkExtractImageFilterIRGBUC3IRGBUC2.New()


def itkExtractImageFilterID3ID2_New():
  return itkExtractImageFilterID3ID2.New()


def itkExtractImageFilterIF3IF2_New():
  return itkExtractImageFilterIF3IF2.New()


def itkExtractImageFilterIUS3IUS2_New():
  return itkExtractImageFilterIUS3IUS2.New()


def itkExtractImageFilterIUC3IUC2_New():
  return itkExtractImageFilterIUC3IUC2.New()


def itkExtractImageFilterISS3ISS2_New():
  return itkExtractImageFilterISS3ISS2.New()


def itkExtractImageFilterICF3ICF3_New():
  return itkExtractImageFilterICF3ICF3.New()


def itkExtractImageFilterICF2ICF2_New():
  return itkExtractImageFilterICF2ICF2.New()


def itkExtractImageFilterID3ID3_New():
  return itkExtractImageFilterID3ID3.New()


def itkExtractImageFilterID2ID2_New():
  return itkExtractImageFilterID2ID2.New()


def itkExtractImageFilterIF3IF3_New():
  return itkExtractImageFilterIF3IF3.New()


def itkExtractImageFilterIF2IF2_New():
  return itkExtractImageFilterIF2IF2.New()


def itkExtractImageFilterIUS3IUS3_New():
  return itkExtractImageFilterIUS3IUS3.New()


def itkExtractImageFilterIUS2IUS2_New():
  return itkExtractImageFilterIUS2IUS2.New()


def itkExtractImageFilterIUC3IUC3_New():
  return itkExtractImageFilterIUC3IUC3.New()


def itkExtractImageFilterIUC2IUC2_New():
  return itkExtractImageFilterIUC2IUC2.New()


def itkExtractImageFilterISS3ISS3_New():
  return itkExtractImageFilterISS3ISS3.New()


def itkExtractImageFilterISS2ISS2_New():
  return itkExtractImageFilterISS2ISS2.New()


def itkExtractImageFilterICVF43ICVF43_New():
  return itkExtractImageFilterICVF43ICVF43.New()


def itkExtractImageFilterICVF42ICVF42_New():
  return itkExtractImageFilterICVF42ICVF42.New()


def itkExtractImageFilterICVF33ICVF33_New():
  return itkExtractImageFilterICVF33ICVF33.New()


def itkExtractImageFilterICVF32ICVF32_New():
  return itkExtractImageFilterICVF32ICVF32.New()


def itkExtractImageFilterICVF23ICVF23_New():
  return itkExtractImageFilterICVF23ICVF23.New()


def itkExtractImageFilterICVF22ICVF22_New():
  return itkExtractImageFilterICVF22ICVF22.New()


def itkExtractImageFilterIVF43IVF43_New():
  return itkExtractImageFilterIVF43IVF43.New()


def itkExtractImageFilterIVF42IVF42_New():
  return itkExtractImageFilterIVF42IVF42.New()


def itkExtractImageFilterIVF33IVF33_New():
  return itkExtractImageFilterIVF33IVF33.New()


def itkExtractImageFilterIVF32IVF32_New():
  return itkExtractImageFilterIVF32IVF32.New()


def itkExtractImageFilterIVF23IVF23_New():
  return itkExtractImageFilterIVF23IVF23.New()


def itkExtractImageFilterIVF22IVF22_New():
  return itkExtractImageFilterIVF22IVF22.New()


def itkExtractImageFilterIRGBAUC3IRGBAUC3_New():
  return itkExtractImageFilterIRGBAUC3IRGBAUC3.New()


def itkExtractImageFilterIRGBAUC2IRGBAUC2_New():
  return itkExtractImageFilterIRGBAUC2IRGBAUC2.New()


def itkExtractImageFilterIRGBUC3IRGBUC3_New():
  return itkExtractImageFilterIRGBUC3IRGBUC3.New()


def itkExtractImageFilterIRGBUC2IRGBUC2_New():
  return itkExtractImageFilterIRGBUC2IRGBUC2.New()

class itkExtractImageFilterEnums(object):
    """Proxy of C++ itkExtractImageFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOUNKOWN = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOUNKOWN
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOIDENTITY = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOIDENTITY
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOSUBMATRIX = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOSUBMATRIX
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOGUESS = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOGUESS

    def __init__(self, *args):
        """
        __init__(itkExtractImageFilterEnums self) -> itkExtractImageFilterEnums
        __init__(itkExtractImageFilterEnums self, itkExtractImageFilterEnums arg0) -> itkExtractImageFilterEnums
        """
        _itkExtractImageFilterPython.itkExtractImageFilterEnums_swiginit(self, _itkExtractImageFilterPython.new_itkExtractImageFilterEnums(*args))
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterEnums
itkExtractImageFilterEnums_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterEnums_swigregister
itkExtractImageFilterEnums_swigregister(itkExtractImageFilterEnums)

class itkExtractImageFilterICF2ICF2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICF2ICF2_Pointer":
        """__New_orig__() -> itkExtractImageFilterICF2ICF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICF2ICF2_Pointer":
        """Clone(itkExtractImageFilterICF2ICF2 self) -> itkExtractImageFilterICF2ICF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICF2ICF2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICF2ICF2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICF2ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICF2ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICF2ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICF2ICF2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterICF2ICF2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF2ICF2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF2ICF2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICF2ICF2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF2ICF2

        Create a new object of the class itkExtractImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICF2ICF2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_Clone, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToGuess, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetExtractionRegion, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetExtractionRegion, None, itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_swigregister
itkExtractImageFilterICF2ICF2_swigregister(itkExtractImageFilterICF2ICF2)

def itkExtractImageFilterICF2ICF2___New_orig__() -> "itkExtractImageFilterICF2ICF2_Pointer":
    """itkExtractImageFilterICF2ICF2___New_orig__() -> itkExtractImageFilterICF2ICF2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2___New_orig__()

def itkExtractImageFilterICF2ICF2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF2ICF2 *":
    """itkExtractImageFilterICF2ICF2_cast(itkLightObject obj) -> itkExtractImageFilterICF2ICF2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_cast(obj)

class itkExtractImageFilterICF3ICF2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICF3ICF2_Pointer":
        """__New_orig__() -> itkExtractImageFilterICF3ICF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICF3ICF2_Pointer":
        """Clone(itkExtractImageFilterICF3ICF2 self) -> itkExtractImageFilterICF3ICF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICF3ICF2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICF3ICF2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICF3ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICF3ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICF3ICF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICF3ICF2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterICF3ICF2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF3ICF2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF3ICF2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICF3ICF2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF3ICF2

        Create a new object of the class itkExtractImageFilterICF3ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF3ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF3ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICF3ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICF3ICF2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_Clone, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToGuess, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetExtractionRegion, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetExtractionRegion, None, itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_swigregister
itkExtractImageFilterICF3ICF2_swigregister(itkExtractImageFilterICF3ICF2)

def itkExtractImageFilterICF3ICF2___New_orig__() -> "itkExtractImageFilterICF3ICF2_Pointer":
    """itkExtractImageFilterICF3ICF2___New_orig__() -> itkExtractImageFilterICF3ICF2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2___New_orig__()

def itkExtractImageFilterICF3ICF2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF3ICF2 *":
    """itkExtractImageFilterICF3ICF2_cast(itkLightObject obj) -> itkExtractImageFilterICF3ICF2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_cast(obj)

class itkExtractImageFilterICF3ICF3(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICF3ICF3_Pointer":
        """__New_orig__() -> itkExtractImageFilterICF3ICF3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICF3ICF3_Pointer":
        """Clone(itkExtractImageFilterICF3ICF3 self) -> itkExtractImageFilterICF3ICF3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICF3ICF3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICF3ICF3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICF3ICF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICF3ICF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICF3ICF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICF3ICF3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterICF3ICF3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF3ICF3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF3ICF3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICF3ICF3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF3ICF3

        Create a new object of the class itkExtractImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICF3ICF3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_Clone, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToGuess, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetExtractionRegion, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetExtractionRegion, None, itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_swigregister
itkExtractImageFilterICF3ICF3_swigregister(itkExtractImageFilterICF3ICF3)

def itkExtractImageFilterICF3ICF3___New_orig__() -> "itkExtractImageFilterICF3ICF3_Pointer":
    """itkExtractImageFilterICF3ICF3___New_orig__() -> itkExtractImageFilterICF3ICF3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3___New_orig__()

def itkExtractImageFilterICF3ICF3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICF3ICF3 *":
    """itkExtractImageFilterICF3ICF3_cast(itkLightObject obj) -> itkExtractImageFilterICF3ICF3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_cast(obj)

class itkExtractImageFilterICVF22ICVF22(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF22ICVF22_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF22ICVF22_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF22ICVF22_Pointer":
        """Clone(itkExtractImageFilterICVF22ICVF22 self) -> itkExtractImageFilterICVF22ICVF22_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF22ICVF22 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF22ICVF22 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF22ICVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF22ICVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF22ICVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF22ICVF22 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterICVF22ICVF22 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF22ICVF22

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF22ICVF22 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF22ICVF22"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF22ICVF22

        Create a new object of the class itkExtractImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF22ICVF22.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_Clone, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetExtractionRegion, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetExtractionRegion, None, itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_swigregister
itkExtractImageFilterICVF22ICVF22_swigregister(itkExtractImageFilterICVF22ICVF22)

def itkExtractImageFilterICVF22ICVF22___New_orig__() -> "itkExtractImageFilterICVF22ICVF22_Pointer":
    """itkExtractImageFilterICVF22ICVF22___New_orig__() -> itkExtractImageFilterICVF22ICVF22_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22___New_orig__()

def itkExtractImageFilterICVF22ICVF22_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF22ICVF22 *":
    """itkExtractImageFilterICVF22ICVF22_cast(itkLightObject obj) -> itkExtractImageFilterICVF22ICVF22"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_cast(obj)

class itkExtractImageFilterICVF23ICVF23(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF23ICVF23_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF23ICVF23_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF23ICVF23_Pointer":
        """Clone(itkExtractImageFilterICVF23ICVF23 self) -> itkExtractImageFilterICVF23ICVF23_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF23ICVF23 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF23ICVF23 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF23ICVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF23ICVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF23ICVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF23ICVF23 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterICVF23ICVF23 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF23ICVF23

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF23ICVF23 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF23ICVF23"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF23ICVF23

        Create a new object of the class itkExtractImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF23ICVF23.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_Clone, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetExtractionRegion, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetExtractionRegion, None, itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_swigregister
itkExtractImageFilterICVF23ICVF23_swigregister(itkExtractImageFilterICVF23ICVF23)

def itkExtractImageFilterICVF23ICVF23___New_orig__() -> "itkExtractImageFilterICVF23ICVF23_Pointer":
    """itkExtractImageFilterICVF23ICVF23___New_orig__() -> itkExtractImageFilterICVF23ICVF23_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23___New_orig__()

def itkExtractImageFilterICVF23ICVF23_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF23ICVF23 *":
    """itkExtractImageFilterICVF23ICVF23_cast(itkLightObject obj) -> itkExtractImageFilterICVF23ICVF23"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_cast(obj)

class itkExtractImageFilterICVF32ICVF32(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF32ICVF32_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF32ICVF32_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF32ICVF32_Pointer":
        """Clone(itkExtractImageFilterICVF32ICVF32 self) -> itkExtractImageFilterICVF32ICVF32_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF32ICVF32 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF32ICVF32 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF32ICVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF32ICVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF32ICVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF32ICVF32 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterICVF32ICVF32 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF32ICVF32

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF32ICVF32 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF32ICVF32"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF32ICVF32

        Create a new object of the class itkExtractImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF32ICVF32.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_Clone, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetExtractionRegion, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetExtractionRegion, None, itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_swigregister
itkExtractImageFilterICVF32ICVF32_swigregister(itkExtractImageFilterICVF32ICVF32)

def itkExtractImageFilterICVF32ICVF32___New_orig__() -> "itkExtractImageFilterICVF32ICVF32_Pointer":
    """itkExtractImageFilterICVF32ICVF32___New_orig__() -> itkExtractImageFilterICVF32ICVF32_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32___New_orig__()

def itkExtractImageFilterICVF32ICVF32_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF32ICVF32 *":
    """itkExtractImageFilterICVF32ICVF32_cast(itkLightObject obj) -> itkExtractImageFilterICVF32ICVF32"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_cast(obj)

class itkExtractImageFilterICVF33ICVF33(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF33ICVF33_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF33ICVF33_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF33ICVF33_Pointer":
        """Clone(itkExtractImageFilterICVF33ICVF33 self) -> itkExtractImageFilterICVF33ICVF33_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF33ICVF33 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF33ICVF33 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF33ICVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF33ICVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF33ICVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF33ICVF33 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterICVF33ICVF33 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF33ICVF33

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF33ICVF33 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF33ICVF33"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF33ICVF33

        Create a new object of the class itkExtractImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF33ICVF33.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_Clone, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetExtractionRegion, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetExtractionRegion, None, itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_swigregister
itkExtractImageFilterICVF33ICVF33_swigregister(itkExtractImageFilterICVF33ICVF33)

def itkExtractImageFilterICVF33ICVF33___New_orig__() -> "itkExtractImageFilterICVF33ICVF33_Pointer":
    """itkExtractImageFilterICVF33ICVF33___New_orig__() -> itkExtractImageFilterICVF33ICVF33_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33___New_orig__()

def itkExtractImageFilterICVF33ICVF33_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF33ICVF33 *":
    """itkExtractImageFilterICVF33ICVF33_cast(itkLightObject obj) -> itkExtractImageFilterICVF33ICVF33"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_cast(obj)

class itkExtractImageFilterICVF42ICVF42(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF42ICVF42_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF42ICVF42_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF42ICVF42_Pointer":
        """Clone(itkExtractImageFilterICVF42ICVF42 self) -> itkExtractImageFilterICVF42ICVF42_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF42ICVF42 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF42ICVF42 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF42ICVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF42ICVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF42ICVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF42ICVF42 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterICVF42ICVF42 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF42ICVF42

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF42ICVF42 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF42ICVF42"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF42ICVF42

        Create a new object of the class itkExtractImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF42ICVF42.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_Clone, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetExtractionRegion, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetExtractionRegion, None, itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_swigregister
itkExtractImageFilterICVF42ICVF42_swigregister(itkExtractImageFilterICVF42ICVF42)

def itkExtractImageFilterICVF42ICVF42___New_orig__() -> "itkExtractImageFilterICVF42ICVF42_Pointer":
    """itkExtractImageFilterICVF42ICVF42___New_orig__() -> itkExtractImageFilterICVF42ICVF42_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42___New_orig__()

def itkExtractImageFilterICVF42ICVF42_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF42ICVF42 *":
    """itkExtractImageFilterICVF42ICVF42_cast(itkLightObject obj) -> itkExtractImageFilterICVF42ICVF42"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_cast(obj)

class itkExtractImageFilterICVF43ICVF43(itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterICVF43ICVF43_Pointer":
        """__New_orig__() -> itkExtractImageFilterICVF43ICVF43_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterICVF43ICVF43_Pointer":
        """Clone(itkExtractImageFilterICVF43ICVF43 self) -> itkExtractImageFilterICVF43ICVF43_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterICVF43ICVF43 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterICVF43ICVF43 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterICVF43ICVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterICVF43ICVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterICVF43ICVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterICVF43ICVF43 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterICVF43ICVF43 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF43ICVF43

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF43ICVF43 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterICVF43ICVF43"""
        return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF43ICVF43

        Create a new object of the class itkExtractImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterICVF43ICVF43.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_Clone, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetDirectionCollapseToStrategy, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToGuess, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToIdentity, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetExtractionRegion, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetExtractionRegion, None, itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_swigregister
itkExtractImageFilterICVF43ICVF43_swigregister(itkExtractImageFilterICVF43ICVF43)

def itkExtractImageFilterICVF43ICVF43___New_orig__() -> "itkExtractImageFilterICVF43ICVF43_Pointer":
    """itkExtractImageFilterICVF43ICVF43___New_orig__() -> itkExtractImageFilterICVF43ICVF43_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43___New_orig__()

def itkExtractImageFilterICVF43ICVF43_cast(obj: 'itkLightObject') -> "itkExtractImageFilterICVF43ICVF43 *":
    """itkExtractImageFilterICVF43ICVF43_cast(itkLightObject obj) -> itkExtractImageFilterICVF43ICVF43"""
    return _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_cast(obj)

class itkExtractImageFilterID2ID2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkExtractImageFilterID2ID2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterID2ID2_Pointer":
        """Clone(itkExtractImageFilterID2ID2 self) -> itkExtractImageFilterID2ID2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterID2ID2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterID2ID2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterID2ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterID2ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterID2ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterID2ID2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterID2ID2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterID2ID2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID2ID2

        Create a new object of the class itkExtractImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterID2ID2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_Clone, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToGuess, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetExtractionRegion, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetExtractionRegion, None, itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_swigregister
itkExtractImageFilterID2ID2_swigregister(itkExtractImageFilterID2ID2)

def itkExtractImageFilterID2ID2___New_orig__() -> "itkExtractImageFilterID2ID2_Pointer":
    """itkExtractImageFilterID2ID2___New_orig__() -> itkExtractImageFilterID2ID2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2___New_orig__()

def itkExtractImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterID2ID2 *":
    """itkExtractImageFilterID2ID2_cast(itkLightObject obj) -> itkExtractImageFilterID2ID2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_cast(obj)

class itkExtractImageFilterID3ID2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterID3ID2_Pointer":
        """__New_orig__() -> itkExtractImageFilterID3ID2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterID3ID2_Pointer":
        """Clone(itkExtractImageFilterID3ID2 self) -> itkExtractImageFilterID3ID2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterID3ID2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterID3ID2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterID3ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterID3ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterID3ID2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterID3ID2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterID3ID2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID3ID2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterID3ID2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterID3ID2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID3ID2

        Create a new object of the class itkExtractImageFilterID3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID3ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID3ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterID3ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterID3ID2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_Clone, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToGuess, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetExtractionRegion, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetExtractionRegion, None, itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_swigregister
itkExtractImageFilterID3ID2_swigregister(itkExtractImageFilterID3ID2)

def itkExtractImageFilterID3ID2___New_orig__() -> "itkExtractImageFilterID3ID2_Pointer":
    """itkExtractImageFilterID3ID2___New_orig__() -> itkExtractImageFilterID3ID2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2___New_orig__()

def itkExtractImageFilterID3ID2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterID3ID2 *":
    """itkExtractImageFilterID3ID2_cast(itkLightObject obj) -> itkExtractImageFilterID3ID2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_cast(obj)

class itkExtractImageFilterID3ID3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkExtractImageFilterID3ID3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterID3ID3_Pointer":
        """Clone(itkExtractImageFilterID3ID3 self) -> itkExtractImageFilterID3ID3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterID3ID3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterID3ID3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterID3ID3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterID3ID3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterID3ID3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterID3ID3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterID3ID3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterID3ID3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID3ID3

        Create a new object of the class itkExtractImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterID3ID3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_Clone, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToGuess, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetExtractionRegion, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetExtractionRegion, None, itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_swigregister
itkExtractImageFilterID3ID3_swigregister(itkExtractImageFilterID3ID3)

def itkExtractImageFilterID3ID3___New_orig__() -> "itkExtractImageFilterID3ID3_Pointer":
    """itkExtractImageFilterID3ID3___New_orig__() -> itkExtractImageFilterID3ID3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3___New_orig__()

def itkExtractImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterID3ID3 *":
    """itkExtractImageFilterID3ID3_cast(itkLightObject obj) -> itkExtractImageFilterID3ID3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_cast(obj)

class itkExtractImageFilterIF2IF2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIF2IF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIF2IF2_Pointer":
        """Clone(itkExtractImageFilterIF2IF2 self) -> itkExtractImageFilterIF2IF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIF2IF2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIF2IF2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIF2IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIF2IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIF2IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIF2IF2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIF2IF2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIF2IF2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF2IF2

        Create a new object of the class itkExtractImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIF2IF2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_Clone, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetExtractionRegion, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetExtractionRegion, None, itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_swigregister
itkExtractImageFilterIF2IF2_swigregister(itkExtractImageFilterIF2IF2)

def itkExtractImageFilterIF2IF2___New_orig__() -> "itkExtractImageFilterIF2IF2_Pointer":
    """itkExtractImageFilterIF2IF2___New_orig__() -> itkExtractImageFilterIF2IF2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2___New_orig__()

def itkExtractImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF2IF2 *":
    """itkExtractImageFilterIF2IF2_cast(itkLightObject obj) -> itkExtractImageFilterIF2IF2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_cast(obj)

class itkExtractImageFilterIF3IF2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIF3IF2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIF3IF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIF3IF2_Pointer":
        """Clone(itkExtractImageFilterIF3IF2 self) -> itkExtractImageFilterIF3IF2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIF3IF2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIF3IF2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIF3IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIF3IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIF3IF2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIF3IF2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIF3IF2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF3IF2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF3IF2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIF3IF2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF3IF2

        Create a new object of the class itkExtractImageFilterIF3IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF3IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF3IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIF3IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIF3IF2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_Clone, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetExtractionRegion, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetExtractionRegion, None, itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_swigregister
itkExtractImageFilterIF3IF2_swigregister(itkExtractImageFilterIF3IF2)

def itkExtractImageFilterIF3IF2___New_orig__() -> "itkExtractImageFilterIF3IF2_Pointer":
    """itkExtractImageFilterIF3IF2___New_orig__() -> itkExtractImageFilterIF3IF2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2___New_orig__()

def itkExtractImageFilterIF3IF2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF3IF2 *":
    """itkExtractImageFilterIF3IF2_cast(itkLightObject obj) -> itkExtractImageFilterIF3IF2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_cast(obj)

class itkExtractImageFilterIF3IF3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkExtractImageFilterIF3IF3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIF3IF3_Pointer":
        """Clone(itkExtractImageFilterIF3IF3 self) -> itkExtractImageFilterIF3IF3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIF3IF3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIF3IF3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIF3IF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIF3IF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIF3IF3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIF3IF3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIF3IF3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIF3IF3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF3IF3

        Create a new object of the class itkExtractImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIF3IF3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_Clone, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToGuess, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetExtractionRegion, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetExtractionRegion, None, itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_swigregister
itkExtractImageFilterIF3IF3_swigregister(itkExtractImageFilterIF3IF3)

def itkExtractImageFilterIF3IF3___New_orig__() -> "itkExtractImageFilterIF3IF3_Pointer":
    """itkExtractImageFilterIF3IF3___New_orig__() -> itkExtractImageFilterIF3IF3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3___New_orig__()

def itkExtractImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIF3IF3 *":
    """itkExtractImageFilterIF3IF3_cast(itkLightObject obj) -> itkExtractImageFilterIF3IF3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_cast(obj)

class itkExtractImageFilterIRGBAUC2IRGBAUC2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer":
        """Clone(itkExtractImageFilterIRGBAUC2IRGBAUC2 self) -> itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIRGBAUC2IRGBAUC2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIRGBAUC2IRGBAUC2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIRGBAUC2IRGBAUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIRGBAUC2IRGBAUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIRGBAUC2IRGBAUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIRGBAUC2IRGBAUC2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIRGBAUC2IRGBAUC2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBAUC2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBAUC2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIRGBAUC2IRGBAUC2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkExtractImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBAUC2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIRGBAUC2IRGBAUC2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_Clone, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetExtractionRegion, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetExtractionRegion, None, itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_swigregister
itkExtractImageFilterIRGBAUC2IRGBAUC2_swigregister(itkExtractImageFilterIRGBAUC2IRGBAUC2)

def itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__() -> "itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer":
    """itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__() -> itkExtractImageFilterIRGBAUC2IRGBAUC2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__()

def itkExtractImageFilterIRGBAUC2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBAUC2IRGBAUC2 *":
    """itkExtractImageFilterIRGBAUC2IRGBAUC2_cast(itkLightObject obj) -> itkExtractImageFilterIRGBAUC2IRGBAUC2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_cast(obj)

class itkExtractImageFilterIRGBAUC3IRGBAUC3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer":
        """__New_orig__() -> itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer":
        """Clone(itkExtractImageFilterIRGBAUC3IRGBAUC3 self) -> itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIRGBAUC3IRGBAUC3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIRGBAUC3IRGBAUC3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIRGBAUC3IRGBAUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIRGBAUC3IRGBAUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIRGBAUC3IRGBAUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIRGBAUC3IRGBAUC3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIRGBAUC3IRGBAUC3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBAUC3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBAUC3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIRGBAUC3IRGBAUC3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkExtractImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBAUC3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIRGBAUC3IRGBAUC3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_Clone, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToGuess, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetExtractionRegion, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetExtractionRegion, None, itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_swigregister
itkExtractImageFilterIRGBAUC3IRGBAUC3_swigregister(itkExtractImageFilterIRGBAUC3IRGBAUC3)

def itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__() -> "itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer":
    """itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__() -> itkExtractImageFilterIRGBAUC3IRGBAUC3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__()

def itkExtractImageFilterIRGBAUC3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBAUC3IRGBAUC3 *":
    """itkExtractImageFilterIRGBAUC3IRGBAUC3_cast(itkLightObject obj) -> itkExtractImageFilterIRGBAUC3IRGBAUC3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_cast(obj)

class itkExtractImageFilterIRGBUC2IRGBUC2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIRGBUC2IRGBUC2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIRGBUC2IRGBUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIRGBUC2IRGBUC2_Pointer":
        """Clone(itkExtractImageFilterIRGBUC2IRGBUC2 self) -> itkExtractImageFilterIRGBUC2IRGBUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC2IRGBUC2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC2IRGBUC2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIRGBUC2IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIRGBUC2IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIRGBUC2IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIRGBUC2IRGBUC2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIRGBUC2IRGBUC2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC2IRGBUC2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkExtractImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIRGBUC2IRGBUC2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_Clone, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetExtractionRegion, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetExtractionRegion, None, itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_swigregister
itkExtractImageFilterIRGBUC2IRGBUC2_swigregister(itkExtractImageFilterIRGBUC2IRGBUC2)

def itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__() -> "itkExtractImageFilterIRGBUC2IRGBUC2_Pointer":
    """itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__() -> itkExtractImageFilterIRGBUC2IRGBUC2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__()

def itkExtractImageFilterIRGBUC2IRGBUC2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC2IRGBUC2 *":
    """itkExtractImageFilterIRGBUC2IRGBUC2_cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC2IRGBUC2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_cast(obj)

class itkExtractImageFilterIRGBUC3IRGBUC2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIRGBUC3IRGBUC2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIRGBUC3IRGBUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIRGBUC3IRGBUC2_Pointer":
        """Clone(itkExtractImageFilterIRGBUC3IRGBUC2 self) -> itkExtractImageFilterIRGBUC3IRGBUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC3IRGBUC2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC3IRGBUC2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIRGBUC3IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIRGBUC3IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIRGBUC3IRGBUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIRGBUC3IRGBUC2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIRGBUC3IRGBUC2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC3IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC3IRGBUC2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC3IRGBUC2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC3IRGBUC2

        Create a new object of the class itkExtractImageFilterIRGBUC3IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC3IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC3IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIRGBUC3IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIRGBUC3IRGBUC2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_Clone, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetExtractionRegion, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetExtractionRegion, None, itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_swigregister
itkExtractImageFilterIRGBUC3IRGBUC2_swigregister(itkExtractImageFilterIRGBUC3IRGBUC2)

def itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__() -> "itkExtractImageFilterIRGBUC3IRGBUC2_Pointer":
    """itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__() -> itkExtractImageFilterIRGBUC3IRGBUC2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__()

def itkExtractImageFilterIRGBUC3IRGBUC2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC3IRGBUC2 *":
    """itkExtractImageFilterIRGBUC3IRGBUC2_cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC3IRGBUC2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_cast(obj)

class itkExtractImageFilterIRGBUC3IRGBUC3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIRGBUC3IRGBUC3_Pointer":
        """__New_orig__() -> itkExtractImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIRGBUC3IRGBUC3_Pointer":
        """Clone(itkExtractImageFilterIRGBUC3IRGBUC3 self) -> itkExtractImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC3IRGBUC3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIRGBUC3IRGBUC3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIRGBUC3IRGBUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIRGBUC3IRGBUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIRGBUC3IRGBUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIRGBUC3IRGBUC3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIRGBUC3IRGBUC3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC3IRGBUC3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkExtractImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIRGBUC3IRGBUC3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_Clone, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToGuess, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetExtractionRegion, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetExtractionRegion, None, itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_swigregister
itkExtractImageFilterIRGBUC3IRGBUC3_swigregister(itkExtractImageFilterIRGBUC3IRGBUC3)

def itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__() -> "itkExtractImageFilterIRGBUC3IRGBUC3_Pointer":
    """itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__() -> itkExtractImageFilterIRGBUC3IRGBUC3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__()

def itkExtractImageFilterIRGBUC3IRGBUC3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIRGBUC3IRGBUC3 *":
    """itkExtractImageFilterIRGBUC3IRGBUC3_cast(itkLightObject obj) -> itkExtractImageFilterIRGBUC3IRGBUC3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_cast(obj)

class itkExtractImageFilterISS2ISS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkExtractImageFilterISS2ISS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterISS2ISS2_Pointer":
        """Clone(itkExtractImageFilterISS2ISS2 self) -> itkExtractImageFilterISS2ISS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterISS2ISS2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterISS2ISS2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterISS2ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterISS2ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterISS2ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterISS2ISS2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterISS2ISS2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterISS2ISS2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS2ISS2

        Create a new object of the class itkExtractImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterISS2ISS2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_Clone, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToGuess, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetExtractionRegion, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetExtractionRegion, None, itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_swigregister
itkExtractImageFilterISS2ISS2_swigregister(itkExtractImageFilterISS2ISS2)

def itkExtractImageFilterISS2ISS2___New_orig__() -> "itkExtractImageFilterISS2ISS2_Pointer":
    """itkExtractImageFilterISS2ISS2___New_orig__() -> itkExtractImageFilterISS2ISS2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2___New_orig__()

def itkExtractImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS2ISS2 *":
    """itkExtractImageFilterISS2ISS2_cast(itkLightObject obj) -> itkExtractImageFilterISS2ISS2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_cast(obj)

class itkExtractImageFilterISS3ISS2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterISS3ISS2_Pointer":
        """__New_orig__() -> itkExtractImageFilterISS3ISS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterISS3ISS2_Pointer":
        """Clone(itkExtractImageFilterISS3ISS2 self) -> itkExtractImageFilterISS3ISS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterISS3ISS2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterISS3ISS2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterISS3ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterISS3ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterISS3ISS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterISS3ISS2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterISS3ISS2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS3ISS2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS3ISS2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterISS3ISS2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS3ISS2

        Create a new object of the class itkExtractImageFilterISS3ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS3ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS3ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterISS3ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterISS3ISS2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_Clone, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToGuess, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetExtractionRegion, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetExtractionRegion, None, itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_swigregister
itkExtractImageFilterISS3ISS2_swigregister(itkExtractImageFilterISS3ISS2)

def itkExtractImageFilterISS3ISS2___New_orig__() -> "itkExtractImageFilterISS3ISS2_Pointer":
    """itkExtractImageFilterISS3ISS2___New_orig__() -> itkExtractImageFilterISS3ISS2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2___New_orig__()

def itkExtractImageFilterISS3ISS2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS3ISS2 *":
    """itkExtractImageFilterISS3ISS2_cast(itkLightObject obj) -> itkExtractImageFilterISS3ISS2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_cast(obj)

class itkExtractImageFilterISS3ISS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkExtractImageFilterISS3ISS3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterISS3ISS3_Pointer":
        """Clone(itkExtractImageFilterISS3ISS3 self) -> itkExtractImageFilterISS3ISS3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterISS3ISS3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterISS3ISS3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterISS3ISS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterISS3ISS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterISS3ISS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterISS3ISS3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterISS3ISS3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterISS3ISS3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS3ISS3

        Create a new object of the class itkExtractImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterISS3ISS3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_Clone, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToGuess, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetExtractionRegion, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetExtractionRegion, None, itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_swigregister
itkExtractImageFilterISS3ISS3_swigregister(itkExtractImageFilterISS3ISS3)

def itkExtractImageFilterISS3ISS3___New_orig__() -> "itkExtractImageFilterISS3ISS3_Pointer":
    """itkExtractImageFilterISS3ISS3___New_orig__() -> itkExtractImageFilterISS3ISS3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3___New_orig__()

def itkExtractImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterISS3ISS3 *":
    """itkExtractImageFilterISS3ISS3_cast(itkLightObject obj) -> itkExtractImageFilterISS3ISS3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_cast(obj)

class itkExtractImageFilterIUC2IUC2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUC2IUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUC2IUC2_Pointer":
        """Clone(itkExtractImageFilterIUC2IUC2 self) -> itkExtractImageFilterIUC2IUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUC2IUC2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUC2IUC2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUC2IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUC2IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUC2IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUC2IUC2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIUC2IUC2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUC2IUC2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC2IUC2

        Create a new object of the class itkExtractImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUC2IUC2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_Clone, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetExtractionRegion, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetExtractionRegion, None, itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_swigregister
itkExtractImageFilterIUC2IUC2_swigregister(itkExtractImageFilterIUC2IUC2)

def itkExtractImageFilterIUC2IUC2___New_orig__() -> "itkExtractImageFilterIUC2IUC2_Pointer":
    """itkExtractImageFilterIUC2IUC2___New_orig__() -> itkExtractImageFilterIUC2IUC2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2___New_orig__()

def itkExtractImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC2IUC2 *":
    """itkExtractImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkExtractImageFilterIUC2IUC2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_cast(obj)

class itkExtractImageFilterIUC3IUC2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUC3IUC2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUC3IUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUC3IUC2_Pointer":
        """Clone(itkExtractImageFilterIUC3IUC2 self) -> itkExtractImageFilterIUC3IUC2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUC3IUC2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUC3IUC2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUC3IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUC3IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUC3IUC2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUC3IUC2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIUC3IUC2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC3IUC2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC3IUC2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUC3IUC2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC3IUC2

        Create a new object of the class itkExtractImageFilterIUC3IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC3IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC3IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUC3IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUC3IUC2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_Clone, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetExtractionRegion, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetExtractionRegion, None, itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_swigregister
itkExtractImageFilterIUC3IUC2_swigregister(itkExtractImageFilterIUC3IUC2)

def itkExtractImageFilterIUC3IUC2___New_orig__() -> "itkExtractImageFilterIUC3IUC2_Pointer":
    """itkExtractImageFilterIUC3IUC2___New_orig__() -> itkExtractImageFilterIUC3IUC2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2___New_orig__()

def itkExtractImageFilterIUC3IUC2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC3IUC2 *":
    """itkExtractImageFilterIUC3IUC2_cast(itkLightObject obj) -> itkExtractImageFilterIUC3IUC2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_cast(obj)

class itkExtractImageFilterIUC3IUC3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUC3IUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUC3IUC3_Pointer":
        """Clone(itkExtractImageFilterIUC3IUC3 self) -> itkExtractImageFilterIUC3IUC3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUC3IUC3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUC3IUC3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUC3IUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUC3IUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUC3IUC3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUC3IUC3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIUC3IUC3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUC3IUC3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC3IUC3

        Create a new object of the class itkExtractImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUC3IUC3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_Clone, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetExtractionRegion, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetExtractionRegion, None, itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_swigregister
itkExtractImageFilterIUC3IUC3_swigregister(itkExtractImageFilterIUC3IUC3)

def itkExtractImageFilterIUC3IUC3___New_orig__() -> "itkExtractImageFilterIUC3IUC3_Pointer":
    """itkExtractImageFilterIUC3IUC3___New_orig__() -> itkExtractImageFilterIUC3IUC3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3___New_orig__()

def itkExtractImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUC3IUC3 *":
    """itkExtractImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkExtractImageFilterIUC3IUC3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_cast(obj)

class itkExtractImageFilterIUS2IUS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUS2IUS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUS2IUS2_Pointer":
        """Clone(itkExtractImageFilterIUS2IUS2 self) -> itkExtractImageFilterIUS2IUS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUS2IUS2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUS2IUS2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUS2IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUS2IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUS2IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUS2IUS2 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIUS2IUS2 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUS2IUS2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS2IUS2

        Create a new object of the class itkExtractImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUS2IUS2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_Clone, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetExtractionRegion, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetExtractionRegion, None, itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_swigregister
itkExtractImageFilterIUS2IUS2_swigregister(itkExtractImageFilterIUS2IUS2)

def itkExtractImageFilterIUS2IUS2___New_orig__() -> "itkExtractImageFilterIUS2IUS2_Pointer":
    """itkExtractImageFilterIUS2IUS2___New_orig__() -> itkExtractImageFilterIUS2IUS2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2___New_orig__()

def itkExtractImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS2IUS2 *":
    """itkExtractImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkExtractImageFilterIUS2IUS2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_cast(obj)

class itkExtractImageFilterIUS3IUS2(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUS3IUS2_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUS3IUS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUS3IUS2_Pointer":
        """Clone(itkExtractImageFilterIUS3IUS2 self) -> itkExtractImageFilterIUS3IUS2_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUS3IUS2 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUS3IUS2 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUS3IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUS3IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUS3IUS2 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUS3IUS2 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIUS3IUS2 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS3IUS2

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS3IUS2 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUS3IUS2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS3IUS2

        Create a new object of the class itkExtractImageFilterIUS3IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS3IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS3IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUS3IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUS3IUS2.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_Clone, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetExtractionRegion, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetExtractionRegion, None, itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_swigregister
itkExtractImageFilterIUS3IUS2_swigregister(itkExtractImageFilterIUS3IUS2)

def itkExtractImageFilterIUS3IUS2___New_orig__() -> "itkExtractImageFilterIUS3IUS2_Pointer":
    """itkExtractImageFilterIUS3IUS2___New_orig__() -> itkExtractImageFilterIUS3IUS2_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2___New_orig__()

def itkExtractImageFilterIUS3IUS2_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS3IUS2 *":
    """itkExtractImageFilterIUS3IUS2_cast(itkLightObject obj) -> itkExtractImageFilterIUS3IUS2"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_cast(obj)

class itkExtractImageFilterIUS3IUS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkExtractImageFilterIUS3IUS3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIUS3IUS3_Pointer":
        """Clone(itkExtractImageFilterIUS3IUS3 self) -> itkExtractImageFilterIUS3IUS3_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIUS3IUS3 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIUS3IUS3 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIUS3IUS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIUS3IUS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIUS3IUS3 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIUS3IUS3 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIUS3IUS3 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIUS3IUS3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS3IUS3

        Create a new object of the class itkExtractImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIUS3IUS3.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_Clone, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToGuess, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetExtractionRegion, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetExtractionRegion, None, itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_swigregister
itkExtractImageFilterIUS3IUS3_swigregister(itkExtractImageFilterIUS3IUS3)

def itkExtractImageFilterIUS3IUS3___New_orig__() -> "itkExtractImageFilterIUS3IUS3_Pointer":
    """itkExtractImageFilterIUS3IUS3___New_orig__() -> itkExtractImageFilterIUS3IUS3_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3___New_orig__()

def itkExtractImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIUS3IUS3 *":
    """itkExtractImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkExtractImageFilterIUS3IUS3"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_cast(obj)

class itkExtractImageFilterIVF22IVF22(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF22IVF22_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF22IVF22_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF22IVF22_Pointer":
        """Clone(itkExtractImageFilterIVF22IVF22 self) -> itkExtractImageFilterIVF22IVF22_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF22IVF22 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF22IVF22 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF22IVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF22IVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF22IVF22 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF22IVF22 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIVF22IVF22 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF22IVF22

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF22IVF22 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF22IVF22"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF22IVF22

        Create a new object of the class itkExtractImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF22IVF22.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_Clone, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetExtractionRegion, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetExtractionRegion, None, itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_swigregister
itkExtractImageFilterIVF22IVF22_swigregister(itkExtractImageFilterIVF22IVF22)

def itkExtractImageFilterIVF22IVF22___New_orig__() -> "itkExtractImageFilterIVF22IVF22_Pointer":
    """itkExtractImageFilterIVF22IVF22___New_orig__() -> itkExtractImageFilterIVF22IVF22_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22___New_orig__()

def itkExtractImageFilterIVF22IVF22_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF22IVF22 *":
    """itkExtractImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkExtractImageFilterIVF22IVF22"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_cast(obj)

class itkExtractImageFilterIVF23IVF23(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF23IVF23_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF23IVF23_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF23IVF23_Pointer":
        """Clone(itkExtractImageFilterIVF23IVF23 self) -> itkExtractImageFilterIVF23IVF23_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF23IVF23 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF23IVF23 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF23IVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF23IVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF23IVF23 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF23IVF23 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIVF23IVF23 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF23IVF23

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF23IVF23 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF23IVF23"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF23IVF23

        Create a new object of the class itkExtractImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF23IVF23.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_Clone, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetExtractionRegion, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetExtractionRegion, None, itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_swigregister
itkExtractImageFilterIVF23IVF23_swigregister(itkExtractImageFilterIVF23IVF23)

def itkExtractImageFilterIVF23IVF23___New_orig__() -> "itkExtractImageFilterIVF23IVF23_Pointer":
    """itkExtractImageFilterIVF23IVF23___New_orig__() -> itkExtractImageFilterIVF23IVF23_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23___New_orig__()

def itkExtractImageFilterIVF23IVF23_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF23IVF23 *":
    """itkExtractImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkExtractImageFilterIVF23IVF23"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_cast(obj)

class itkExtractImageFilterIVF32IVF32(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF32IVF32_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF32IVF32_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF32IVF32_Pointer":
        """Clone(itkExtractImageFilterIVF32IVF32 self) -> itkExtractImageFilterIVF32IVF32_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF32IVF32 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF32IVF32 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF32IVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF32IVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF32IVF32 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF32IVF32 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIVF32IVF32 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF32IVF32

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF32IVF32 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF32IVF32"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF32IVF32

        Create a new object of the class itkExtractImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF32IVF32.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_Clone, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetExtractionRegion, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetExtractionRegion, None, itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_swigregister
itkExtractImageFilterIVF32IVF32_swigregister(itkExtractImageFilterIVF32IVF32)

def itkExtractImageFilterIVF32IVF32___New_orig__() -> "itkExtractImageFilterIVF32IVF32_Pointer":
    """itkExtractImageFilterIVF32IVF32___New_orig__() -> itkExtractImageFilterIVF32IVF32_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32___New_orig__()

def itkExtractImageFilterIVF32IVF32_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF32IVF32 *":
    """itkExtractImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkExtractImageFilterIVF32IVF32"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_cast(obj)

class itkExtractImageFilterIVF33IVF33(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF33IVF33_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF33IVF33_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF33IVF33_Pointer":
        """Clone(itkExtractImageFilterIVF33IVF33 self) -> itkExtractImageFilterIVF33IVF33_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF33IVF33 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF33IVF33 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF33IVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF33IVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF33IVF33 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF33IVF33 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIVF33IVF33 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF33IVF33

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF33IVF33 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF33IVF33"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF33IVF33

        Create a new object of the class itkExtractImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF33IVF33.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_Clone, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetExtractionRegion, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetExtractionRegion, None, itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_swigregister
itkExtractImageFilterIVF33IVF33_swigregister(itkExtractImageFilterIVF33IVF33)

def itkExtractImageFilterIVF33IVF33___New_orig__() -> "itkExtractImageFilterIVF33IVF33_Pointer":
    """itkExtractImageFilterIVF33IVF33___New_orig__() -> itkExtractImageFilterIVF33IVF33_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33___New_orig__()

def itkExtractImageFilterIVF33IVF33_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF33IVF33 *":
    """itkExtractImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkExtractImageFilterIVF33IVF33"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_cast(obj)

class itkExtractImageFilterIVF42IVF42(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF42IVF42_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF42IVF42_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF42IVF42_Pointer":
        """Clone(itkExtractImageFilterIVF42IVF42 self) -> itkExtractImageFilterIVF42IVF42_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF42IVF42 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF42IVF42 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF42IVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF42IVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF42IVF42 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion2') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF42IVF42 self, itkImageRegion2 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion2":
        """GetExtractionRegion(itkExtractImageFilterIVF42IVF42 self) -> itkImageRegion2"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF42IVF42

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF42IVF42 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF42IVF42"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF42IVF42

        Create a new object of the class itkExtractImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF42IVF42.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_Clone, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetExtractionRegion, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetExtractionRegion, None, itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_swigregister
itkExtractImageFilterIVF42IVF42_swigregister(itkExtractImageFilterIVF42IVF42)

def itkExtractImageFilterIVF42IVF42___New_orig__() -> "itkExtractImageFilterIVF42IVF42_Pointer":
    """itkExtractImageFilterIVF42IVF42___New_orig__() -> itkExtractImageFilterIVF42IVF42_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42___New_orig__()

def itkExtractImageFilterIVF42IVF42_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF42IVF42 *":
    """itkExtractImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkExtractImageFilterIVF42IVF42"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_cast(obj)

class itkExtractImageFilterIVF43IVF43(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43):
    """


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. to get a
    3D image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter

    C++ includes: itkExtractImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExtractImageFilterIVF43IVF43_Pointer":
        """__New_orig__() -> itkExtractImageFilterIVF43IVF43_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExtractImageFilterIVF43IVF43_Pointer":
        """Clone(itkExtractImageFilterIVF43IVF43 self) -> itkExtractImageFilterIVF43IVF43_Pointer"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_Clone(self)


    def SetDirectionCollapseToStrategy(self, choosenStrategy: 'itkExtractImageFilterEnums::DirectionCollapseStrategy const') -> "void":
        """
        SetDirectionCollapseToStrategy(itkExtractImageFilterIVF43IVF43 self, itkExtractImageFilterEnums::DirectionCollapseStrategy const choosenStrategy)

        Set
        the strategy to be used to collapse physical space dimensions.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
        strategy so that all collapsed images have an identity direction. Use
        this strategy when you know that retention of the physical space
        orientation of the collapsed image is not important.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
        so that all collapsed images where output direction is the sub-matrix
        if it is positive definite, else return identity. This is backwards
        compatible with ITKv3, but is highly discouraged because the results
        are difficult to anticipate under differing data scenarios.

        itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
        strategy so that all collapsed images where output direction is the
        sub-matrix if it is positive definite, else throw an exception. Use
        this strategy when it is known that properly identified physical space
        sub-volumes can be reliably extracted from a higher dimensional space.
        For is 3D+time, and that the 3D sub-space is properly defined. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToStrategy(self, choosenStrategy)


    def GetDirectionCollapseToStrategy(self) -> "itkExtractImageFilterEnums::DirectionCollapseStrategy":
        """
        GetDirectionCollapseToStrategy(itkExtractImageFilterIVF43IVF43 self) -> itkExtractImageFilterEnums::DirectionCollapseStrategy

        NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
        is a state that a filter can be in only when it is first instantiate
        prior to being initialized. Get the currently set strategy for
        collapsing directions of physical space. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetDirectionCollapseToStrategy(self)


    def SetDirectionCollapseToGuess(self) -> "void":
        """
        SetDirectionCollapseToGuess(itkExtractImageFilterIVF43IVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToGuess(self)


    def SetDirectionCollapseToIdentity(self) -> "void":
        """
        SetDirectionCollapseToIdentity(itkExtractImageFilterIVF43IVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToIdentity(self)


    def SetDirectionCollapseToSubmatrix(self) -> "void":
        """
        SetDirectionCollapseToSubmatrix(itkExtractImageFilterIVF43IVF43 self)



        See:   SetDirectionCollapseToStrategy 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToSubmatrix(self)


    def SetExtractionRegion(self, extractRegion: 'itkImageRegion3') -> "void":
        """
        SetExtractionRegion(itkExtractImageFilterIVF43IVF43 self, itkImageRegion3 extractRegion)

        Set/Get the
        output image region. If any of the ExtractionRegion.Size = 0 for any
        particular dimension dim, we have to collapse dimension dim. This
        means the output image will have 'c' dimensions less than the input
        image, where c = number of ExtractionRegion.Size = 0. 
        """
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetExtractionRegion(self, extractRegion)


    def GetExtractionRegion(self) -> "itkImageRegion3":
        """GetExtractionRegion(itkExtractImageFilterIVF43IVF43 self) -> itkImageRegion3"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetExtractionRegion(self)

    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_InputCovertibleToOutputCheck
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF43IVF43

    def cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF43IVF43 *":
        """cast(itkLightObject obj) -> itkExtractImageFilterIVF43IVF43"""
        return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF43IVF43

        Create a new object of the class itkExtractImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtractImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtractImageFilterIVF43IVF43.Clone = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_Clone, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.SetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.GetDirectionCollapseToStrategy = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetDirectionCollapseToStrategy, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.SetDirectionCollapseToGuess = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToGuess, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.SetDirectionCollapseToIdentity = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToIdentity, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.SetDirectionCollapseToSubmatrix = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToSubmatrix, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.SetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetExtractionRegion, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43.GetExtractionRegion = new_instancemethod(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetExtractionRegion, None, itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43_swigregister = _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_swigregister
itkExtractImageFilterIVF43IVF43_swigregister(itkExtractImageFilterIVF43IVF43)

def itkExtractImageFilterIVF43IVF43___New_orig__() -> "itkExtractImageFilterIVF43IVF43_Pointer":
    """itkExtractImageFilterIVF43IVF43___New_orig__() -> itkExtractImageFilterIVF43IVF43_Pointer"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43___New_orig__()

def itkExtractImageFilterIVF43IVF43_cast(obj: 'itkLightObject') -> "itkExtractImageFilterIVF43IVF43 *":
    """itkExtractImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkExtractImageFilterIVF43IVF43"""
    return _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def extract_image_filter(*args, **kwargs):
    """Procedural interface for ExtractImageFilter"""
    import itk
    instance = itk.ExtractImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def extract_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ExtractImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ExtractImageFilter.values()[0]
    else:
        filter_object = itk.ExtractImageFilter

    extract_image_filter.__doc__ = filter_object.__doc__
    extract_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    extract_image_filter.__doc__ += "Available Keyword Arguments:\n"
    extract_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



