# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBoundingBoxPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBoundingBoxPython', [dirname(__file__)])
        except ImportError:
            import _itkBoundingBoxPython
            return _itkBoundingBoxPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBoundingBoxPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBoundingBoxPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBoundingBoxPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorContainerPython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkPointPython
import itkContinuousIndexPython
import itkIndexPython
import itkMapContainerPython

def itkBoundingBoxUL3DMCULPD3_New():
  return itkBoundingBoxUL3DMCULPD3.New()


def itkBoundingBoxUL3DVCULPD3_New():
  return itkBoundingBoxUL3DVCULPD3.New()


def itkBoundingBoxUL3FMCULPF3_New():
  return itkBoundingBoxUL3FMCULPF3.New()


def itkBoundingBoxUL3FVCULPF3_New():
  return itkBoundingBoxUL3FVCULPF3.New()


def itkBoundingBoxUL2DMCULPD2_New():
  return itkBoundingBoxUL2DMCULPD2.New()


def itkBoundingBoxUL2DVCULPD2_New():
  return itkBoundingBoxUL2DVCULPD2.New()


def itkBoundingBoxUL2FMCULPF2_New():
  return itkBoundingBoxUL2FMCULPF2.New()


def itkBoundingBoxUL2FVCULPF2_New():
  return itkBoundingBoxUL2FVCULPF2.New()

class itkBoundingBoxUL2DMCULPD2(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL2DMCULPD2_Pointer":
        """__New_orig__() -> itkBoundingBoxUL2DMCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL2DMCULPD2_Pointer":
        """Clone(itkBoundingBoxUL2DMCULPD2 self) -> itkBoundingBoxUL2DMCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD2') -> "void":
        """
        SetPoints(itkBoundingBoxUL2DMCULPD2 self, itkMapContainerULPD2 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULPD2 const *":
        """GetPoints(itkBoundingBoxUL2DMCULPD2 self) -> itkMapContainerULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointD2,4 >":
        """
        ComputeCorners(itkBoundingBoxUL2DMCULPD2 self) -> std::array< itkPointD2,4 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL2DMCULPD2 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayD4 const &":
        """
        GetBounds(itkBoundingBoxUL2DMCULPD2 self) -> itkFixedArrayD4

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetBounds(self)


    def GetCenter(self) -> "itkPointD2":
        """
        GetCenter(itkBoundingBoxUL2DMCULPD2 self) -> itkPointD2

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetCenter(self)


    def GetMinimum(self) -> "itkPointD2":
        """
        GetMinimum(itkBoundingBoxUL2DMCULPD2 self) -> itkPointD2

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointD2') -> "void":
        """
        SetMinimum(itkBoundingBoxUL2DMCULPD2 self, itkPointD2 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointD2":
        """
        GetMaximum(itkBoundingBoxUL2DMCULPD2 self) -> itkPointD2

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointD2') -> "void":
        """
        SetMaximum(itkBoundingBoxUL2DMCULPD2 self, itkPointD2 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointD2') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL2DMCULPD2 self, itkPointD2 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL2DMCULPD2 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointD2') -> "bool":
        """
        IsInside(itkBoundingBoxUL2DMCULPD2 self, itkPointD2 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL2DMCULPD2_Pointer":
        """
        DeepCopy(itkBoundingBoxUL2DMCULPD2 self) -> itkBoundingBoxUL2DMCULPD2_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2DMCULPD2

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2DMCULPD2 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL2DMCULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2DMCULPD2

        Create a new object of the class itkBoundingBoxUL2DMCULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2DMCULPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2DMCULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL2DMCULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL2DMCULPD2.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_Clone, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetPoints, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetPoints, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeCorners, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeBoundingBox, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetBounds, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetCenter, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMinimum, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMinimum, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMaximum, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMaximum, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ConsiderPoint, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetDiagonalLength2, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_IsInside, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_DeepCopy, None, itkBoundingBoxUL2DMCULPD2)
itkBoundingBoxUL2DMCULPD2_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_swigregister
itkBoundingBoxUL2DMCULPD2_swigregister(itkBoundingBoxUL2DMCULPD2)

def itkBoundingBoxUL2DMCULPD2___New_orig__() -> "itkBoundingBoxUL2DMCULPD2_Pointer":
    """itkBoundingBoxUL2DMCULPD2___New_orig__() -> itkBoundingBoxUL2DMCULPD2_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2___New_orig__()

def itkBoundingBoxUL2DMCULPD2_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2DMCULPD2 *":
    """itkBoundingBoxUL2DMCULPD2_cast(itkLightObject obj) -> itkBoundingBoxUL2DMCULPD2"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_cast(obj)

class itkBoundingBoxUL2DVCULPD2(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL2DVCULPD2_Pointer":
        """__New_orig__() -> itkBoundingBoxUL2DVCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL2DVCULPD2_Pointer":
        """Clone(itkBoundingBoxUL2DVCULPD2 self) -> itkBoundingBoxUL2DVCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_Clone(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD2') -> "void":
        """
        SetPoints(itkBoundingBoxUL2DVCULPD2 self, itkVectorContainerULPD2 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetPoints(self, arg0)


    def GetPoints(self) -> "itkVectorContainerULPD2 const *":
        """GetPoints(itkBoundingBoxUL2DVCULPD2 self) -> itkVectorContainerULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointD2,4 >":
        """
        ComputeCorners(itkBoundingBoxUL2DVCULPD2 self) -> std::array< itkPointD2,4 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL2DVCULPD2 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayD4 const &":
        """
        GetBounds(itkBoundingBoxUL2DVCULPD2 self) -> itkFixedArrayD4

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetBounds(self)


    def GetCenter(self) -> "itkPointD2":
        """
        GetCenter(itkBoundingBoxUL2DVCULPD2 self) -> itkPointD2

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetCenter(self)


    def GetMinimum(self) -> "itkPointD2":
        """
        GetMinimum(itkBoundingBoxUL2DVCULPD2 self) -> itkPointD2

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointD2') -> "void":
        """
        SetMinimum(itkBoundingBoxUL2DVCULPD2 self, itkPointD2 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointD2":
        """
        GetMaximum(itkBoundingBoxUL2DVCULPD2 self) -> itkPointD2

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointD2') -> "void":
        """
        SetMaximum(itkBoundingBoxUL2DVCULPD2 self, itkPointD2 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointD2') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL2DVCULPD2 self, itkPointD2 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL2DVCULPD2 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointD2') -> "bool":
        """
        IsInside(itkBoundingBoxUL2DVCULPD2 self, itkPointD2 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL2DVCULPD2_Pointer":
        """
        DeepCopy(itkBoundingBoxUL2DVCULPD2 self) -> itkBoundingBoxUL2DVCULPD2_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2DVCULPD2

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2DVCULPD2 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL2DVCULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2DVCULPD2

        Create a new object of the class itkBoundingBoxUL2DVCULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2DVCULPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2DVCULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL2DVCULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL2DVCULPD2.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_Clone, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetPoints, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetPoints, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeCorners, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeBoundingBox, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetBounds, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetCenter, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMinimum, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMinimum, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMaximum, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMaximum, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ConsiderPoint, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetDiagonalLength2, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_IsInside, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_DeepCopy, None, itkBoundingBoxUL2DVCULPD2)
itkBoundingBoxUL2DVCULPD2_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_swigregister
itkBoundingBoxUL2DVCULPD2_swigregister(itkBoundingBoxUL2DVCULPD2)

def itkBoundingBoxUL2DVCULPD2___New_orig__() -> "itkBoundingBoxUL2DVCULPD2_Pointer":
    """itkBoundingBoxUL2DVCULPD2___New_orig__() -> itkBoundingBoxUL2DVCULPD2_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2___New_orig__()

def itkBoundingBoxUL2DVCULPD2_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2DVCULPD2 *":
    """itkBoundingBoxUL2DVCULPD2_cast(itkLightObject obj) -> itkBoundingBoxUL2DVCULPD2"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_cast(obj)

class itkBoundingBoxUL2FMCULPF2(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL2FMCULPF2_Pointer":
        """__New_orig__() -> itkBoundingBoxUL2FMCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL2FMCULPF2_Pointer":
        """Clone(itkBoundingBoxUL2FMCULPF2 self) -> itkBoundingBoxUL2FMCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULPF2') -> "void":
        """
        SetPoints(itkBoundingBoxUL2FMCULPF2 self, itkMapContainerULPF2 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULPF2 const *":
        """GetPoints(itkBoundingBoxUL2FMCULPF2 self) -> itkMapContainerULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF2,4 >":
        """
        ComputeCorners(itkBoundingBoxUL2FMCULPF2 self) -> std::array< itkPointF2,4 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL2FMCULPF2 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF4 const &":
        """
        GetBounds(itkBoundingBoxUL2FMCULPF2 self) -> itkFixedArrayF4

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetBounds(self)


    def GetCenter(self) -> "itkPointF2":
        """
        GetCenter(itkBoundingBoxUL2FMCULPF2 self) -> itkPointF2

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetCenter(self)


    def GetMinimum(self) -> "itkPointF2":
        """
        GetMinimum(itkBoundingBoxUL2FMCULPF2 self) -> itkPointF2

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMinimum(itkBoundingBoxUL2FMCULPF2 self, itkPointF2 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF2":
        """
        GetMaximum(itkBoundingBoxUL2FMCULPF2 self) -> itkPointF2

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMaximum(itkBoundingBoxUL2FMCULPF2 self, itkPointF2 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF2') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL2FMCULPF2 self, itkPointF2 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL2FMCULPF2 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF2') -> "bool":
        """
        IsInside(itkBoundingBoxUL2FMCULPF2 self, itkPointF2 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL2FMCULPF2_Pointer":
        """
        DeepCopy(itkBoundingBoxUL2FMCULPF2 self) -> itkBoundingBoxUL2FMCULPF2_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2FMCULPF2

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FMCULPF2 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL2FMCULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2FMCULPF2

        Create a new object of the class itkBoundingBoxUL2FMCULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2FMCULPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2FMCULPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL2FMCULPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL2FMCULPF2.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_Clone, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetPoints, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetPoints, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeCorners, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeBoundingBox, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetBounds, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetCenter, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMinimum, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMinimum, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMaximum, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMaximum, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ConsiderPoint, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetDiagonalLength2, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_IsInside, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_DeepCopy, None, itkBoundingBoxUL2FMCULPF2)
itkBoundingBoxUL2FMCULPF2_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_swigregister
itkBoundingBoxUL2FMCULPF2_swigregister(itkBoundingBoxUL2FMCULPF2)

def itkBoundingBoxUL2FMCULPF2___New_orig__() -> "itkBoundingBoxUL2FMCULPF2_Pointer":
    """itkBoundingBoxUL2FMCULPF2___New_orig__() -> itkBoundingBoxUL2FMCULPF2_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2___New_orig__()

def itkBoundingBoxUL2FMCULPF2_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FMCULPF2 *":
    """itkBoundingBoxUL2FMCULPF2_cast(itkLightObject obj) -> itkBoundingBoxUL2FMCULPF2"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_cast(obj)

class itkBoundingBoxUL2FVCULPF2(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL2FVCULPF2_Pointer":
        """__New_orig__() -> itkBoundingBoxUL2FVCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL2FVCULPF2_Pointer":
        """Clone(itkBoundingBoxUL2FVCULPF2 self) -> itkBoundingBoxUL2FVCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_Clone(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkBoundingBoxUL2FVCULPF2 self, itkVectorContainerULPF2 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetPoints(self, arg0)


    def GetPoints(self) -> "itkVectorContainerULPF2 const *":
        """GetPoints(itkBoundingBoxUL2FVCULPF2 self) -> itkVectorContainerULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF2,4 >":
        """
        ComputeCorners(itkBoundingBoxUL2FVCULPF2 self) -> std::array< itkPointF2,4 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL2FVCULPF2 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF4 const &":
        """
        GetBounds(itkBoundingBoxUL2FVCULPF2 self) -> itkFixedArrayF4

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetBounds(self)


    def GetCenter(self) -> "itkPointF2":
        """
        GetCenter(itkBoundingBoxUL2FVCULPF2 self) -> itkPointF2

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetCenter(self)


    def GetMinimum(self) -> "itkPointF2":
        """
        GetMinimum(itkBoundingBoxUL2FVCULPF2 self) -> itkPointF2

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMinimum(itkBoundingBoxUL2FVCULPF2 self, itkPointF2 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF2":
        """
        GetMaximum(itkBoundingBoxUL2FVCULPF2 self) -> itkPointF2

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF2') -> "void":
        """
        SetMaximum(itkBoundingBoxUL2FVCULPF2 self, itkPointF2 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF2') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL2FVCULPF2 self, itkPointF2 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL2FVCULPF2 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF2') -> "bool":
        """
        IsInside(itkBoundingBoxUL2FVCULPF2 self, itkPointF2 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL2FVCULPF2_Pointer":
        """
        DeepCopy(itkBoundingBoxUL2FVCULPF2 self) -> itkBoundingBoxUL2FVCULPF2_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2FVCULPF2

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FVCULPF2 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL2FVCULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2FVCULPF2

        Create a new object of the class itkBoundingBoxUL2FVCULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2FVCULPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2FVCULPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL2FVCULPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL2FVCULPF2.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_Clone, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetPoints, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetPoints, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeCorners, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeBoundingBox, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetBounds, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetCenter, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMinimum, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMinimum, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMaximum, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMaximum, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ConsiderPoint, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetDiagonalLength2, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_IsInside, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_DeepCopy, None, itkBoundingBoxUL2FVCULPF2)
itkBoundingBoxUL2FVCULPF2_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_swigregister
itkBoundingBoxUL2FVCULPF2_swigregister(itkBoundingBoxUL2FVCULPF2)

def itkBoundingBoxUL2FVCULPF2___New_orig__() -> "itkBoundingBoxUL2FVCULPF2_Pointer":
    """itkBoundingBoxUL2FVCULPF2___New_orig__() -> itkBoundingBoxUL2FVCULPF2_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2___New_orig__()

def itkBoundingBoxUL2FVCULPF2_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL2FVCULPF2 *":
    """itkBoundingBoxUL2FVCULPF2_cast(itkLightObject obj) -> itkBoundingBoxUL2FVCULPF2"""
    return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_cast(obj)

class itkBoundingBoxUL3DMCULPD3(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL3DMCULPD3_Pointer":
        """__New_orig__() -> itkBoundingBoxUL3DMCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL3DMCULPD3_Pointer":
        """Clone(itkBoundingBoxUL3DMCULPD3 self) -> itkBoundingBoxUL3DMCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD3') -> "void":
        """
        SetPoints(itkBoundingBoxUL3DMCULPD3 self, itkMapContainerULPD3 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULPD3 const *":
        """GetPoints(itkBoundingBoxUL3DMCULPD3 self) -> itkMapContainerULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointD3,8 >":
        """
        ComputeCorners(itkBoundingBoxUL3DMCULPD3 self) -> std::array< itkPointD3,8 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL3DMCULPD3 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayD6 const &":
        """
        GetBounds(itkBoundingBoxUL3DMCULPD3 self) -> itkFixedArrayD6

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetBounds(self)


    def GetCenter(self) -> "itkPointD3":
        """
        GetCenter(itkBoundingBoxUL3DMCULPD3 self) -> itkPointD3

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetCenter(self)


    def GetMinimum(self) -> "itkPointD3":
        """
        GetMinimum(itkBoundingBoxUL3DMCULPD3 self) -> itkPointD3

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointD3') -> "void":
        """
        SetMinimum(itkBoundingBoxUL3DMCULPD3 self, itkPointD3 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointD3":
        """
        GetMaximum(itkBoundingBoxUL3DMCULPD3 self) -> itkPointD3

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointD3') -> "void":
        """
        SetMaximum(itkBoundingBoxUL3DMCULPD3 self, itkPointD3 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointD3') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL3DMCULPD3 self, itkPointD3 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL3DMCULPD3 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointD3') -> "bool":
        """
        IsInside(itkBoundingBoxUL3DMCULPD3 self, itkPointD3 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL3DMCULPD3_Pointer":
        """
        DeepCopy(itkBoundingBoxUL3DMCULPD3 self) -> itkBoundingBoxUL3DMCULPD3_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3DMCULPD3

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3DMCULPD3 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL3DMCULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3DMCULPD3

        Create a new object of the class itkBoundingBoxUL3DMCULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3DMCULPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3DMCULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL3DMCULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL3DMCULPD3.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_Clone, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetPoints, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetPoints, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeCorners, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeBoundingBox, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetBounds, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetCenter, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMinimum, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMinimum, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMaximum, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMaximum, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ConsiderPoint, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetDiagonalLength2, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_IsInside, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_DeepCopy, None, itkBoundingBoxUL3DMCULPD3)
itkBoundingBoxUL3DMCULPD3_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_swigregister
itkBoundingBoxUL3DMCULPD3_swigregister(itkBoundingBoxUL3DMCULPD3)

def itkBoundingBoxUL3DMCULPD3___New_orig__() -> "itkBoundingBoxUL3DMCULPD3_Pointer":
    """itkBoundingBoxUL3DMCULPD3___New_orig__() -> itkBoundingBoxUL3DMCULPD3_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3___New_orig__()

def itkBoundingBoxUL3DMCULPD3_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3DMCULPD3 *":
    """itkBoundingBoxUL3DMCULPD3_cast(itkLightObject obj) -> itkBoundingBoxUL3DMCULPD3"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_cast(obj)

class itkBoundingBoxUL3DVCULPD3(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL3DVCULPD3_Pointer":
        """__New_orig__() -> itkBoundingBoxUL3DVCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL3DVCULPD3_Pointer":
        """Clone(itkBoundingBoxUL3DVCULPD3 self) -> itkBoundingBoxUL3DVCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_Clone(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD3') -> "void":
        """
        SetPoints(itkBoundingBoxUL3DVCULPD3 self, itkVectorContainerULPD3 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetPoints(self, arg0)


    def GetPoints(self) -> "itkVectorContainerULPD3 const *":
        """GetPoints(itkBoundingBoxUL3DVCULPD3 self) -> itkVectorContainerULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointD3,8 >":
        """
        ComputeCorners(itkBoundingBoxUL3DVCULPD3 self) -> std::array< itkPointD3,8 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL3DVCULPD3 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayD6 const &":
        """
        GetBounds(itkBoundingBoxUL3DVCULPD3 self) -> itkFixedArrayD6

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetBounds(self)


    def GetCenter(self) -> "itkPointD3":
        """
        GetCenter(itkBoundingBoxUL3DVCULPD3 self) -> itkPointD3

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetCenter(self)


    def GetMinimum(self) -> "itkPointD3":
        """
        GetMinimum(itkBoundingBoxUL3DVCULPD3 self) -> itkPointD3

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointD3') -> "void":
        """
        SetMinimum(itkBoundingBoxUL3DVCULPD3 self, itkPointD3 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointD3":
        """
        GetMaximum(itkBoundingBoxUL3DVCULPD3 self) -> itkPointD3

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointD3') -> "void":
        """
        SetMaximum(itkBoundingBoxUL3DVCULPD3 self, itkPointD3 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointD3') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL3DVCULPD3 self, itkPointD3 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL3DVCULPD3 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointD3') -> "bool":
        """
        IsInside(itkBoundingBoxUL3DVCULPD3 self, itkPointD3 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL3DVCULPD3_Pointer":
        """
        DeepCopy(itkBoundingBoxUL3DVCULPD3 self) -> itkBoundingBoxUL3DVCULPD3_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3DVCULPD3

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3DVCULPD3 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL3DVCULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3DVCULPD3

        Create a new object of the class itkBoundingBoxUL3DVCULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3DVCULPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3DVCULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL3DVCULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL3DVCULPD3.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_Clone, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetPoints, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetPoints, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeCorners, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeBoundingBox, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetBounds, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetCenter, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMinimum, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMinimum, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMaximum, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMaximum, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ConsiderPoint, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetDiagonalLength2, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_IsInside, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_DeepCopy, None, itkBoundingBoxUL3DVCULPD3)
itkBoundingBoxUL3DVCULPD3_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_swigregister
itkBoundingBoxUL3DVCULPD3_swigregister(itkBoundingBoxUL3DVCULPD3)

def itkBoundingBoxUL3DVCULPD3___New_orig__() -> "itkBoundingBoxUL3DVCULPD3_Pointer":
    """itkBoundingBoxUL3DVCULPD3___New_orig__() -> itkBoundingBoxUL3DVCULPD3_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3___New_orig__()

def itkBoundingBoxUL3DVCULPD3_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3DVCULPD3 *":
    """itkBoundingBoxUL3DVCULPD3_cast(itkLightObject obj) -> itkBoundingBoxUL3DVCULPD3"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_cast(obj)

class itkBoundingBoxUL3FMCULPF3(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL3FMCULPF3_Pointer":
        """__New_orig__() -> itkBoundingBoxUL3FMCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL3FMCULPF3_Pointer":
        """Clone(itkBoundingBoxUL3FMCULPF3 self) -> itkBoundingBoxUL3FMCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_Clone(self)


    def SetPoints(self, arg0: 'itkMapContainerULPF3') -> "void":
        """
        SetPoints(itkBoundingBoxUL3FMCULPF3 self, itkMapContainerULPF3 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetPoints(self, arg0)


    def GetPoints(self) -> "itkMapContainerULPF3 const *":
        """GetPoints(itkBoundingBoxUL3FMCULPF3 self) -> itkMapContainerULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF3,8 >":
        """
        ComputeCorners(itkBoundingBoxUL3FMCULPF3 self) -> std::array< itkPointF3,8 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL3FMCULPF3 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF6 const &":
        """
        GetBounds(itkBoundingBoxUL3FMCULPF3 self) -> itkFixedArrayF6

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetBounds(self)


    def GetCenter(self) -> "itkPointF3":
        """
        GetCenter(itkBoundingBoxUL3FMCULPF3 self) -> itkPointF3

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetCenter(self)


    def GetMinimum(self) -> "itkPointF3":
        """
        GetMinimum(itkBoundingBoxUL3FMCULPF3 self) -> itkPointF3

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMinimum(itkBoundingBoxUL3FMCULPF3 self, itkPointF3 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF3":
        """
        GetMaximum(itkBoundingBoxUL3FMCULPF3 self) -> itkPointF3

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMaximum(itkBoundingBoxUL3FMCULPF3 self, itkPointF3 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF3') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL3FMCULPF3 self, itkPointF3 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL3FMCULPF3 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF3') -> "bool":
        """
        IsInside(itkBoundingBoxUL3FMCULPF3 self, itkPointF3 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL3FMCULPF3_Pointer":
        """
        DeepCopy(itkBoundingBoxUL3FMCULPF3 self) -> itkBoundingBoxUL3FMCULPF3_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3FMCULPF3

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FMCULPF3 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL3FMCULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3FMCULPF3

        Create a new object of the class itkBoundingBoxUL3FMCULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3FMCULPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3FMCULPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL3FMCULPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL3FMCULPF3.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_Clone, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetPoints, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetPoints, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeCorners, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeBoundingBox, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetBounds, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetCenter, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMinimum, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMinimum, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMaximum, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMaximum, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ConsiderPoint, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetDiagonalLength2, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_IsInside, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_DeepCopy, None, itkBoundingBoxUL3FMCULPF3)
itkBoundingBoxUL3FMCULPF3_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_swigregister
itkBoundingBoxUL3FMCULPF3_swigregister(itkBoundingBoxUL3FMCULPF3)

def itkBoundingBoxUL3FMCULPF3___New_orig__() -> "itkBoundingBoxUL3FMCULPF3_Pointer":
    """itkBoundingBoxUL3FMCULPF3___New_orig__() -> itkBoundingBoxUL3FMCULPF3_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3___New_orig__()

def itkBoundingBoxUL3FMCULPF3_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FMCULPF3 *":
    """itkBoundingBoxUL3FMCULPF3_cast(itkLightObject obj) -> itkBoundingBoxUL3FMCULPF3"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_cast(obj)

class itkBoundingBoxUL3FVCULPF3(ITKCommonBasePython.itkObject):
    """


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space.

    C++ includes: itkBoundingBox.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBoundingBoxUL3FVCULPF3_Pointer":
        """__New_orig__() -> itkBoundingBoxUL3FVCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBoundingBoxUL3FVCULPF3_Pointer":
        """Clone(itkBoundingBoxUL3FVCULPF3 self) -> itkBoundingBoxUL3FVCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_Clone(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkBoundingBoxUL3FVCULPF3 self, itkVectorContainerULPF3 arg0)

        Set/Get the points from
        which the bounding box should be computed. The bounding box is cached
        and is not recomputed if the points are not changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetPoints(self, arg0)


    def GetPoints(self) -> "itkVectorContainerULPF3 const *":
        """GetPoints(itkBoundingBoxUL3FVCULPF3 self) -> itkVectorContainerULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetPoints(self)


    def ComputeCorners(self) -> "std::array< itkPointF3,8 >":
        """
        ComputeCorners(itkBoundingBoxUL3FVCULPF3 self) -> std::array< itkPointF3,8 >

        Compute and return
        the corners of the bounding box. This function returns the same points
        as the legacy member function GetCorners(), but it is const, and it
        avoids dynamic memory allocation by using std::array. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeCorners(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkBoundingBoxUL3FVCULPF3 self) -> bool

        Method that
        actually computes bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeBoundingBox(self)


    def GetBounds(self) -> "itkFixedArrayF6 const &":
        """
        GetBounds(itkBoundingBoxUL3FVCULPF3 self) -> itkFixedArrayF6

        Get the bounding box.
        This method should only be invoked after ComputeBoundingBox(),
        otherwise the Bounds values will not be up to date. Note that many
        methods in this class invoke ComputeBoundingBox() internally,
        Therefore it is safe to invoke GetBounds() after any of those methods.

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetBounds(self)


    def GetCenter(self) -> "itkPointF3":
        """
        GetCenter(itkBoundingBoxUL3FVCULPF3 self) -> itkPointF3

        Get the center of the
        bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetCenter(self)


    def GetMinimum(self) -> "itkPointF3":
        """
        GetMinimum(itkBoundingBoxUL3FVCULPF3 self) -> itkPointF3

        Get the minimum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMinimum(self)


    def SetMinimum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMinimum(itkBoundingBoxUL3FVCULPF3 self, itkPointF3 arg0)

        Set the minimum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMinimum(self, arg0)


    def GetMaximum(self) -> "itkPointF3":
        """
        GetMaximum(itkBoundingBoxUL3FVCULPF3 self) -> itkPointF3

        Get the maximum point of
        the bounding box. Returns a point at the origin when the bounding box
        object is just default-initialized. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMaximum(self)


    def SetMaximum(self, arg0: 'itkPointF3') -> "void":
        """
        SetMaximum(itkBoundingBoxUL3FVCULPF3 self, itkPointF3 arg0)

        Set the maximum point of
        the bounding box. May not be valid for the given set of points. Will
        be preserved until this filter's (i.e., the point set's) modified time
        changes. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMaximum(self, arg0)


    def ConsiderPoint(self, arg0: 'itkPointF3') -> "void":
        """
        ConsiderPoint(itkBoundingBoxUL3FVCULPF3 self, itkPointF3 arg0)

        Adjust bounds (if
        necessary) as if the given point was in the set of points being
        considered. Does not add the given point to the set. Therefore, this
        point not considered in future computeboundingbox/gets once the point
        set is changed. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ConsiderPoint(self, arg0)


    def GetDiagonalLength2(self) -> "double":
        """GetDiagonalLength2(itkBoundingBoxUL3FVCULPF3 self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetDiagonalLength2(self)


    def IsInside(self, arg0: 'itkPointF3') -> "bool":
        """
        IsInside(itkBoundingBoxUL3FVCULPF3 self, itkPointF3 arg0) -> bool

        Method that checks if a
        point is inside the bounding box. 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_IsInside(self, arg0)


    def DeepCopy(self) -> "itkBoundingBoxUL3FVCULPF3_Pointer":
        """
        DeepCopy(itkBoundingBoxUL3FVCULPF3 self) -> itkBoundingBoxUL3FVCULPF3_Pointer

        Duplicates this bounding
        box 
        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_DeepCopy(self)

    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3FVCULPF3

    def cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FVCULPF3 *":
        """cast(itkLightObject obj) -> itkBoundingBoxUL3FVCULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3FVCULPF3

        Create a new object of the class itkBoundingBoxUL3FVCULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3FVCULPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3FVCULPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundingBoxUL3FVCULPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundingBoxUL3FVCULPF3.Clone = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_Clone, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.SetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetPoints, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetPoints = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetPoints, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.ComputeCorners = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeCorners, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.ComputeBoundingBox = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeBoundingBox, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetBounds = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetBounds, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetCenter = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetCenter, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMinimum, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.SetMinimum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMinimum, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMaximum, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.SetMaximum = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMaximum, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.ConsiderPoint = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ConsiderPoint, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.GetDiagonalLength2 = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetDiagonalLength2, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.IsInside = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_IsInside, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3.DeepCopy = new_instancemethod(_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_DeepCopy, None, itkBoundingBoxUL3FVCULPF3)
itkBoundingBoxUL3FVCULPF3_swigregister = _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_swigregister
itkBoundingBoxUL3FVCULPF3_swigregister(itkBoundingBoxUL3FVCULPF3)

def itkBoundingBoxUL3FVCULPF3___New_orig__() -> "itkBoundingBoxUL3FVCULPF3_Pointer":
    """itkBoundingBoxUL3FVCULPF3___New_orig__() -> itkBoundingBoxUL3FVCULPF3_Pointer"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3___New_orig__()

def itkBoundingBoxUL3FVCULPF3_cast(obj: 'itkLightObject') -> "itkBoundingBoxUL3FVCULPF3 *":
    """itkBoundingBoxUL3FVCULPF3_cast(itkLightObject obj) -> itkBoundingBoxUL3FVCULPF3"""
    return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_cast(obj)



