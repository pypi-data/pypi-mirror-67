# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMapContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMapContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkMapContainerPython
            return _itkMapContainerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMapContainerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMapContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMapContainerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import ITKCommonBasePython
import itkPointPython

def itkMapContainerULSIT_New():
  return itkMapContainerULSIT.New()


def itkMapContainerULD_New():
  return itkMapContainerULD.New()


def itkMapContainerULF_New():
  return itkMapContainerULF.New()


def itkMapContainerULPD3_New():
  return itkMapContainerULPD3.New()


def itkMapContainerULVD3_New():
  return itkMapContainerULVD3.New()


def itkMapContainerULPF3_New():
  return itkMapContainerULPF3.New()


def itkMapContainerULVF3_New():
  return itkMapContainerULVF3.New()


def itkMapContainerULPD2_New():
  return itkMapContainerULPD2.New()


def itkMapContainerULVD2_New():
  return itkMapContainerULVD2.New()


def itkMapContainerULPF2_New():
  return itkMapContainerULPF2.New()


def itkMapContainerULVF2_New():
  return itkMapContainerULVF2.New()

class itkMapContainerULD(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULD self) -> itkMapContainerULD
        __init__(itkMapContainerULD self, std::less< unsigned long > const & comp) -> itkMapContainerULD



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULD_swiginit(self, _itkMapContainerPython.new_itkMapContainerULD(*args))

    def __New_orig__() -> "itkMapContainerULD_Pointer":
        """__New_orig__() -> itkMapContainerULD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULD_Pointer":
        """Clone(itkMapContainerULD self) -> itkMapContainerULD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULD_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,double,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,double > > > &":
        """
        CastToSTLContainer(itkMapContainerULD self) -> mapULD

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,double,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,double > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULD self) -> mapULD

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULD_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "double const &":
        """
        ElementAt(itkMapContainerULD self, unsigned long arg0) -> double
        ElementAt(itkMapContainerULD self, unsigned long arg0) -> double const &

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULD_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "double &":
        """
        CreateElementAt(itkMapContainerULD self, unsigned long arg0) -> double &

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULD_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "double":
        """
        GetElement(itkMapContainerULD self, unsigned long arg0) -> double

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULD_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'double') -> "void":
        """
        SetElement(itkMapContainerULD self, unsigned long arg0, double arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'double') -> "void":
        """
        InsertElement(itkMapContainerULD self, unsigned long arg0, double arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULD self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'double *') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULD self, unsigned long arg0, double * arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULD self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULD self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULD_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULD self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULD_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULD self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULD_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULD self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULD_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULD self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULD_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULD

    def cast(obj: 'itkLightObject') -> "itkMapContainerULD *":
        """cast(itkLightObject obj) -> itkMapContainerULD"""
        return _itkMapContainerPython.itkMapContainerULD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULD

        Create a new object of the class itkMapContainerULD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULD.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Clone, None, itkMapContainerULD)
itkMapContainerULD.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CastToSTLContainer, None, itkMapContainerULD)
itkMapContainerULD.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CastToSTLConstContainer, None, itkMapContainerULD)
itkMapContainerULD.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_ElementAt, None, itkMapContainerULD)
itkMapContainerULD.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CreateElementAt, None, itkMapContainerULD)
itkMapContainerULD.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_GetElement, None, itkMapContainerULD)
itkMapContainerULD.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_SetElement, None, itkMapContainerULD)
itkMapContainerULD.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_InsertElement, None, itkMapContainerULD)
itkMapContainerULD.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_IndexExists, None, itkMapContainerULD)
itkMapContainerULD.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_GetElementIfIndexExists, None, itkMapContainerULD)
itkMapContainerULD.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CreateIndex, None, itkMapContainerULD)
itkMapContainerULD.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_DeleteIndex, None, itkMapContainerULD)
itkMapContainerULD.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Size, None, itkMapContainerULD)
itkMapContainerULD.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Reserve, None, itkMapContainerULD)
itkMapContainerULD.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Squeeze, None, itkMapContainerULD)
itkMapContainerULD.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Initialize, None, itkMapContainerULD)
itkMapContainerULD_swigregister = _itkMapContainerPython.itkMapContainerULD_swigregister
itkMapContainerULD_swigregister(itkMapContainerULD)

def itkMapContainerULD___New_orig__() -> "itkMapContainerULD_Pointer":
    """itkMapContainerULD___New_orig__() -> itkMapContainerULD_Pointer"""
    return _itkMapContainerPython.itkMapContainerULD___New_orig__()

def itkMapContainerULD_cast(obj: 'itkLightObject') -> "itkMapContainerULD *":
    """itkMapContainerULD_cast(itkLightObject obj) -> itkMapContainerULD"""
    return _itkMapContainerPython.itkMapContainerULD_cast(obj)

class itkMapContainerULF(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULF self) -> itkMapContainerULF
        __init__(itkMapContainerULF self, std::less< unsigned long > const & comp) -> itkMapContainerULF



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULF_swiginit(self, _itkMapContainerPython.new_itkMapContainerULF(*args))

    def __New_orig__() -> "itkMapContainerULF_Pointer":
        """__New_orig__() -> itkMapContainerULF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULF_Pointer":
        """Clone(itkMapContainerULF self) -> itkMapContainerULF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULF_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,float,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,float > > > &":
        """
        CastToSTLContainer(itkMapContainerULF self) -> std::map< unsigned long,float,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,float > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,float,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,float > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULF self) -> std::map< unsigned long,float,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,float > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULF_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "float const &":
        """
        ElementAt(itkMapContainerULF self, unsigned long arg0) -> float
        ElementAt(itkMapContainerULF self, unsigned long arg0) -> float const &

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULF_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "float &":
        """
        CreateElementAt(itkMapContainerULF self, unsigned long arg0) -> float &

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULF_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "float":
        """
        GetElement(itkMapContainerULF self, unsigned long arg0) -> float

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULF_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'float') -> "void":
        """
        SetElement(itkMapContainerULF self, unsigned long arg0, float arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'float') -> "void":
        """
        InsertElement(itkMapContainerULF self, unsigned long arg0, float arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULF self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'float *') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULF self, unsigned long arg0, float * arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULF self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULF self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULF_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULF self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULF_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULF self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULF_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULF self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULF_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULF self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULF_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULF

    def cast(obj: 'itkLightObject') -> "itkMapContainerULF *":
        """cast(itkLightObject obj) -> itkMapContainerULF"""
        return _itkMapContainerPython.itkMapContainerULF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULF

        Create a new object of the class itkMapContainerULF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULF.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_Clone, None, itkMapContainerULF)
itkMapContainerULF.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_CastToSTLContainer, None, itkMapContainerULF)
itkMapContainerULF.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_CastToSTLConstContainer, None, itkMapContainerULF)
itkMapContainerULF.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_ElementAt, None, itkMapContainerULF)
itkMapContainerULF.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_CreateElementAt, None, itkMapContainerULF)
itkMapContainerULF.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_GetElement, None, itkMapContainerULF)
itkMapContainerULF.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_SetElement, None, itkMapContainerULF)
itkMapContainerULF.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_InsertElement, None, itkMapContainerULF)
itkMapContainerULF.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_IndexExists, None, itkMapContainerULF)
itkMapContainerULF.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_GetElementIfIndexExists, None, itkMapContainerULF)
itkMapContainerULF.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_CreateIndex, None, itkMapContainerULF)
itkMapContainerULF.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_DeleteIndex, None, itkMapContainerULF)
itkMapContainerULF.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_Size, None, itkMapContainerULF)
itkMapContainerULF.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_Reserve, None, itkMapContainerULF)
itkMapContainerULF.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_Squeeze, None, itkMapContainerULF)
itkMapContainerULF.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULF_Initialize, None, itkMapContainerULF)
itkMapContainerULF_swigregister = _itkMapContainerPython.itkMapContainerULF_swigregister
itkMapContainerULF_swigregister(itkMapContainerULF)

def itkMapContainerULF___New_orig__() -> "itkMapContainerULF_Pointer":
    """itkMapContainerULF___New_orig__() -> itkMapContainerULF_Pointer"""
    return _itkMapContainerPython.itkMapContainerULF___New_orig__()

def itkMapContainerULF_cast(obj: 'itkLightObject') -> "itkMapContainerULF *":
    """itkMapContainerULF_cast(itkLightObject obj) -> itkMapContainerULF"""
    return _itkMapContainerPython.itkMapContainerULF_cast(obj)

class itkMapContainerULPD2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULPD2 self) -> itkMapContainerULPD2
        __init__(itkMapContainerULPD2 self, std::less< unsigned long > const & comp) -> itkMapContainerULPD2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULPD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPD2(*args))

    def __New_orig__() -> "itkMapContainerULPD2_Pointer":
        """__New_orig__() -> itkMapContainerULPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULPD2_Pointer":
        """Clone(itkMapContainerULPD2 self) -> itkMapContainerULPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPD2_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkPointD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD2 > > > &":
        """
        CastToSTLContainer(itkMapContainerULPD2 self) -> std::map< unsigned long,itkPointD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkPointD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD2 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULPD2 self) -> std::map< unsigned long,itkPointD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkPointD2 const &":
        """
        ElementAt(itkMapContainerULPD2 self, unsigned long arg0) -> itkPointD2
        ElementAt(itkMapContainerULPD2 self, unsigned long arg0) -> itkPointD2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkPointD2 &":
        """
        CreateElementAt(itkMapContainerULPD2 self, unsigned long arg0) -> itkPointD2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkPointD2":
        """
        GetElement(itkMapContainerULPD2 self, unsigned long arg0) -> itkPointD2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetElement(itkMapContainerULPD2 self, unsigned long arg0, itkPointD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        InsertElement(itkMapContainerULPD2 self, unsigned long arg0, itkPointD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULPD2 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULPD2 self, unsigned long arg0, itkPointD2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULPD2 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULPD2 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULPD2 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULPD2 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULPD2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULPD2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULPD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD2

    def cast(obj: 'itkLightObject') -> "itkMapContainerULPD2 *":
        """cast(itkLightObject obj) -> itkMapContainerULPD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD2

        Create a new object of the class itkMapContainerULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPD2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Clone, None, itkMapContainerULPD2)
itkMapContainerULPD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLContainer, None, itkMapContainerULPD2)
itkMapContainerULPD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLConstContainer, None, itkMapContainerULPD2)
itkMapContainerULPD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_ElementAt, None, itkMapContainerULPD2)
itkMapContainerULPD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CreateElementAt, None, itkMapContainerULPD2)
itkMapContainerULPD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_GetElement, None, itkMapContainerULPD2)
itkMapContainerULPD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_SetElement, None, itkMapContainerULPD2)
itkMapContainerULPD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_InsertElement, None, itkMapContainerULPD2)
itkMapContainerULPD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_IndexExists, None, itkMapContainerULPD2)
itkMapContainerULPD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_GetElementIfIndexExists, None, itkMapContainerULPD2)
itkMapContainerULPD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CreateIndex, None, itkMapContainerULPD2)
itkMapContainerULPD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_DeleteIndex, None, itkMapContainerULPD2)
itkMapContainerULPD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Size, None, itkMapContainerULPD2)
itkMapContainerULPD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Reserve, None, itkMapContainerULPD2)
itkMapContainerULPD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Squeeze, None, itkMapContainerULPD2)
itkMapContainerULPD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Initialize, None, itkMapContainerULPD2)
itkMapContainerULPD2_swigregister = _itkMapContainerPython.itkMapContainerULPD2_swigregister
itkMapContainerULPD2_swigregister(itkMapContainerULPD2)

def itkMapContainerULPD2___New_orig__() -> "itkMapContainerULPD2_Pointer":
    """itkMapContainerULPD2___New_orig__() -> itkMapContainerULPD2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULPD2___New_orig__()

def itkMapContainerULPD2_cast(obj: 'itkLightObject') -> "itkMapContainerULPD2 *":
    """itkMapContainerULPD2_cast(itkLightObject obj) -> itkMapContainerULPD2"""
    return _itkMapContainerPython.itkMapContainerULPD2_cast(obj)

class itkMapContainerULPD3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULPD3 self) -> itkMapContainerULPD3
        __init__(itkMapContainerULPD3 self, std::less< unsigned long > const & comp) -> itkMapContainerULPD3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULPD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPD3(*args))

    def __New_orig__() -> "itkMapContainerULPD3_Pointer":
        """__New_orig__() -> itkMapContainerULPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULPD3_Pointer":
        """Clone(itkMapContainerULPD3 self) -> itkMapContainerULPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPD3_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkPointD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD3 > > > &":
        """
        CastToSTLContainer(itkMapContainerULPD3 self) -> std::map< unsigned long,itkPointD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkPointD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD3 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULPD3 self) -> std::map< unsigned long,itkPointD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointD3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkPointD3 const &":
        """
        ElementAt(itkMapContainerULPD3 self, unsigned long arg0) -> itkPointD3
        ElementAt(itkMapContainerULPD3 self, unsigned long arg0) -> itkPointD3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkPointD3 &":
        """
        CreateElementAt(itkMapContainerULPD3 self, unsigned long arg0) -> itkPointD3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkPointD3":
        """
        GetElement(itkMapContainerULPD3 self, unsigned long arg0) -> itkPointD3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetElement(itkMapContainerULPD3 self, unsigned long arg0, itkPointD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        InsertElement(itkMapContainerULPD3 self, unsigned long arg0, itkPointD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULPD3 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULPD3 self, unsigned long arg0, itkPointD3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULPD3 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULPD3 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULPD3 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULPD3 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULPD3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULPD3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULPD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD3

    def cast(obj: 'itkLightObject') -> "itkMapContainerULPD3 *":
        """cast(itkLightObject obj) -> itkMapContainerULPD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD3

        Create a new object of the class itkMapContainerULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPD3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Clone, None, itkMapContainerULPD3)
itkMapContainerULPD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLContainer, None, itkMapContainerULPD3)
itkMapContainerULPD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLConstContainer, None, itkMapContainerULPD3)
itkMapContainerULPD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_ElementAt, None, itkMapContainerULPD3)
itkMapContainerULPD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CreateElementAt, None, itkMapContainerULPD3)
itkMapContainerULPD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_GetElement, None, itkMapContainerULPD3)
itkMapContainerULPD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_SetElement, None, itkMapContainerULPD3)
itkMapContainerULPD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_InsertElement, None, itkMapContainerULPD3)
itkMapContainerULPD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_IndexExists, None, itkMapContainerULPD3)
itkMapContainerULPD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_GetElementIfIndexExists, None, itkMapContainerULPD3)
itkMapContainerULPD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CreateIndex, None, itkMapContainerULPD3)
itkMapContainerULPD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_DeleteIndex, None, itkMapContainerULPD3)
itkMapContainerULPD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Size, None, itkMapContainerULPD3)
itkMapContainerULPD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Reserve, None, itkMapContainerULPD3)
itkMapContainerULPD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Squeeze, None, itkMapContainerULPD3)
itkMapContainerULPD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Initialize, None, itkMapContainerULPD3)
itkMapContainerULPD3_swigregister = _itkMapContainerPython.itkMapContainerULPD3_swigregister
itkMapContainerULPD3_swigregister(itkMapContainerULPD3)

def itkMapContainerULPD3___New_orig__() -> "itkMapContainerULPD3_Pointer":
    """itkMapContainerULPD3___New_orig__() -> itkMapContainerULPD3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULPD3___New_orig__()

def itkMapContainerULPD3_cast(obj: 'itkLightObject') -> "itkMapContainerULPD3 *":
    """itkMapContainerULPD3_cast(itkLightObject obj) -> itkMapContainerULPD3"""
    return _itkMapContainerPython.itkMapContainerULPD3_cast(obj)

class itkMapContainerULPF2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULPF2 self) -> itkMapContainerULPF2
        __init__(itkMapContainerULPF2 self, std::less< unsigned long > const & comp) -> itkMapContainerULPF2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULPF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPF2(*args))

    def __New_orig__() -> "itkMapContainerULPF2_Pointer":
        """__New_orig__() -> itkMapContainerULPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULPF2_Pointer":
        """Clone(itkMapContainerULPF2 self) -> itkMapContainerULPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPF2_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkPointF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF2 > > > &":
        """
        CastToSTLContainer(itkMapContainerULPF2 self) -> std::map< unsigned long,itkPointF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkPointF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF2 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULPF2 self) -> std::map< unsigned long,itkPointF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkPointF2 const &":
        """
        ElementAt(itkMapContainerULPF2 self, unsigned long arg0) -> itkPointF2
        ElementAt(itkMapContainerULPF2 self, unsigned long arg0) -> itkPointF2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkPointF2 &":
        """
        CreateElementAt(itkMapContainerULPF2 self, unsigned long arg0) -> itkPointF2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkPointF2":
        """
        GetElement(itkMapContainerULPF2 self, unsigned long arg0) -> itkPointF2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetElement(itkMapContainerULPF2 self, unsigned long arg0, itkPointF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        InsertElement(itkMapContainerULPF2 self, unsigned long arg0, itkPointF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULPF2 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULPF2 self, unsigned long arg0, itkPointF2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULPF2 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULPF2 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULPF2 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULPF2 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULPF2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULPF2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULPF2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPF2

    def cast(obj: 'itkLightObject') -> "itkMapContainerULPF2 *":
        """cast(itkLightObject obj) -> itkMapContainerULPF2"""
        return _itkMapContainerPython.itkMapContainerULPF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPF2

        Create a new object of the class itkMapContainerULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPF2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_Clone, None, itkMapContainerULPF2)
itkMapContainerULPF2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_CastToSTLContainer, None, itkMapContainerULPF2)
itkMapContainerULPF2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_CastToSTLConstContainer, None, itkMapContainerULPF2)
itkMapContainerULPF2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_ElementAt, None, itkMapContainerULPF2)
itkMapContainerULPF2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_CreateElementAt, None, itkMapContainerULPF2)
itkMapContainerULPF2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_GetElement, None, itkMapContainerULPF2)
itkMapContainerULPF2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_SetElement, None, itkMapContainerULPF2)
itkMapContainerULPF2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_InsertElement, None, itkMapContainerULPF2)
itkMapContainerULPF2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_IndexExists, None, itkMapContainerULPF2)
itkMapContainerULPF2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_GetElementIfIndexExists, None, itkMapContainerULPF2)
itkMapContainerULPF2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_CreateIndex, None, itkMapContainerULPF2)
itkMapContainerULPF2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_DeleteIndex, None, itkMapContainerULPF2)
itkMapContainerULPF2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_Size, None, itkMapContainerULPF2)
itkMapContainerULPF2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_Reserve, None, itkMapContainerULPF2)
itkMapContainerULPF2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_Squeeze, None, itkMapContainerULPF2)
itkMapContainerULPF2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF2_Initialize, None, itkMapContainerULPF2)
itkMapContainerULPF2_swigregister = _itkMapContainerPython.itkMapContainerULPF2_swigregister
itkMapContainerULPF2_swigregister(itkMapContainerULPF2)

def itkMapContainerULPF2___New_orig__() -> "itkMapContainerULPF2_Pointer":
    """itkMapContainerULPF2___New_orig__() -> itkMapContainerULPF2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULPF2___New_orig__()

def itkMapContainerULPF2_cast(obj: 'itkLightObject') -> "itkMapContainerULPF2 *":
    """itkMapContainerULPF2_cast(itkLightObject obj) -> itkMapContainerULPF2"""
    return _itkMapContainerPython.itkMapContainerULPF2_cast(obj)

class itkMapContainerULPF3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULPF3 self) -> itkMapContainerULPF3
        __init__(itkMapContainerULPF3 self, std::less< unsigned long > const & comp) -> itkMapContainerULPF3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULPF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPF3(*args))

    def __New_orig__() -> "itkMapContainerULPF3_Pointer":
        """__New_orig__() -> itkMapContainerULPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULPF3_Pointer":
        """Clone(itkMapContainerULPF3 self) -> itkMapContainerULPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULPF3_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkPointF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF3 > > > &":
        """
        CastToSTLContainer(itkMapContainerULPF3 self) -> std::map< unsigned long,itkPointF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkPointF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF3 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULPF3 self) -> std::map< unsigned long,itkPointF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkPointF3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkPointF3 const &":
        """
        ElementAt(itkMapContainerULPF3 self, unsigned long arg0) -> itkPointF3
        ElementAt(itkMapContainerULPF3 self, unsigned long arg0) -> itkPointF3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkPointF3 &":
        """
        CreateElementAt(itkMapContainerULPF3 self, unsigned long arg0) -> itkPointF3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkPointF3":
        """
        GetElement(itkMapContainerULPF3 self, unsigned long arg0) -> itkPointF3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetElement(itkMapContainerULPF3 self, unsigned long arg0, itkPointF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        InsertElement(itkMapContainerULPF3 self, unsigned long arg0, itkPointF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULPF3 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULPF3 self, unsigned long arg0, itkPointF3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULPF3 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULPF3 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULPF3 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULPF3 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULPF3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULPF3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULPF3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPF3

    def cast(obj: 'itkLightObject') -> "itkMapContainerULPF3 *":
        """cast(itkLightObject obj) -> itkMapContainerULPF3"""
        return _itkMapContainerPython.itkMapContainerULPF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPF3

        Create a new object of the class itkMapContainerULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPF3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_Clone, None, itkMapContainerULPF3)
itkMapContainerULPF3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_CastToSTLContainer, None, itkMapContainerULPF3)
itkMapContainerULPF3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_CastToSTLConstContainer, None, itkMapContainerULPF3)
itkMapContainerULPF3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_ElementAt, None, itkMapContainerULPF3)
itkMapContainerULPF3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_CreateElementAt, None, itkMapContainerULPF3)
itkMapContainerULPF3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_GetElement, None, itkMapContainerULPF3)
itkMapContainerULPF3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_SetElement, None, itkMapContainerULPF3)
itkMapContainerULPF3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_InsertElement, None, itkMapContainerULPF3)
itkMapContainerULPF3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_IndexExists, None, itkMapContainerULPF3)
itkMapContainerULPF3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_GetElementIfIndexExists, None, itkMapContainerULPF3)
itkMapContainerULPF3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_CreateIndex, None, itkMapContainerULPF3)
itkMapContainerULPF3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_DeleteIndex, None, itkMapContainerULPF3)
itkMapContainerULPF3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_Size, None, itkMapContainerULPF3)
itkMapContainerULPF3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_Reserve, None, itkMapContainerULPF3)
itkMapContainerULPF3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_Squeeze, None, itkMapContainerULPF3)
itkMapContainerULPF3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPF3_Initialize, None, itkMapContainerULPF3)
itkMapContainerULPF3_swigregister = _itkMapContainerPython.itkMapContainerULPF3_swigregister
itkMapContainerULPF3_swigregister(itkMapContainerULPF3)

def itkMapContainerULPF3___New_orig__() -> "itkMapContainerULPF3_Pointer":
    """itkMapContainerULPF3___New_orig__() -> itkMapContainerULPF3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULPF3___New_orig__()

def itkMapContainerULPF3_cast(obj: 'itkLightObject') -> "itkMapContainerULPF3 *":
    """itkMapContainerULPF3_cast(itkLightObject obj) -> itkMapContainerULPF3"""
    return _itkMapContainerPython.itkMapContainerULPF3_cast(obj)

class itkMapContainerULSIT(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULSIT self) -> itkMapContainerULSIT
        __init__(itkMapContainerULSIT self, std::less< unsigned long > const & comp) -> itkMapContainerULSIT



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULSIT_swiginit(self, _itkMapContainerPython.new_itkMapContainerULSIT(*args))

    def __New_orig__() -> "itkMapContainerULSIT_Pointer":
        """__New_orig__() -> itkMapContainerULSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULSIT___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULSIT_Pointer":
        """Clone(itkMapContainerULSIT self) -> itkMapContainerULSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULSIT_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > >,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > > > > &":
        """
        CastToSTLContainer(itkMapContainerULSIT self) -> mapsetUL

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > >,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULSIT self) -> mapsetUL

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &":
        """
        ElementAt(itkMapContainerULSIT self, unsigned long arg0) -> setUL
        ElementAt(itkMapContainerULSIT self, unsigned long arg0) -> setUL

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > &":
        """
        CreateElementAt(itkMapContainerULSIT self, unsigned long arg0) -> setUL

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > >":
        """
        GetElement(itkMapContainerULSIT self, unsigned long arg0) -> setUL

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'setUL') -> "void":
        """
        SetElement(itkMapContainerULSIT self, unsigned long arg0, setUL arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'setUL') -> "void":
        """
        InsertElement(itkMapContainerULSIT self, unsigned long arg0, setUL arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULSIT self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'setUL') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULSIT self, unsigned long arg0, setUL arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULSIT self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULSIT self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULSIT self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULSIT self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULSIT self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULSIT self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULSIT_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULSIT

    def cast(obj: 'itkLightObject') -> "itkMapContainerULSIT *":
        """cast(itkLightObject obj) -> itkMapContainerULSIT"""
        return _itkMapContainerPython.itkMapContainerULSIT_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULSIT

        Create a new object of the class itkMapContainerULSIT and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULSIT.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULSIT.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULSIT.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULSIT.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_Clone, None, itkMapContainerULSIT)
itkMapContainerULSIT.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_CastToSTLContainer, None, itkMapContainerULSIT)
itkMapContainerULSIT.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_CastToSTLConstContainer, None, itkMapContainerULSIT)
itkMapContainerULSIT.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_ElementAt, None, itkMapContainerULSIT)
itkMapContainerULSIT.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_CreateElementAt, None, itkMapContainerULSIT)
itkMapContainerULSIT.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_GetElement, None, itkMapContainerULSIT)
itkMapContainerULSIT.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_SetElement, None, itkMapContainerULSIT)
itkMapContainerULSIT.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_InsertElement, None, itkMapContainerULSIT)
itkMapContainerULSIT.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_IndexExists, None, itkMapContainerULSIT)
itkMapContainerULSIT.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_GetElementIfIndexExists, None, itkMapContainerULSIT)
itkMapContainerULSIT.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_CreateIndex, None, itkMapContainerULSIT)
itkMapContainerULSIT.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_DeleteIndex, None, itkMapContainerULSIT)
itkMapContainerULSIT.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_Size, None, itkMapContainerULSIT)
itkMapContainerULSIT.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_Reserve, None, itkMapContainerULSIT)
itkMapContainerULSIT.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_Squeeze, None, itkMapContainerULSIT)
itkMapContainerULSIT.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULSIT_Initialize, None, itkMapContainerULSIT)
itkMapContainerULSIT_swigregister = _itkMapContainerPython.itkMapContainerULSIT_swigregister
itkMapContainerULSIT_swigregister(itkMapContainerULSIT)

def itkMapContainerULSIT___New_orig__() -> "itkMapContainerULSIT_Pointer":
    """itkMapContainerULSIT___New_orig__() -> itkMapContainerULSIT_Pointer"""
    return _itkMapContainerPython.itkMapContainerULSIT___New_orig__()

def itkMapContainerULSIT_cast(obj: 'itkLightObject') -> "itkMapContainerULSIT *":
    """itkMapContainerULSIT_cast(itkLightObject obj) -> itkMapContainerULSIT"""
    return _itkMapContainerPython.itkMapContainerULSIT_cast(obj)

class itkMapContainerULVD2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULVD2 self) -> itkMapContainerULVD2
        __init__(itkMapContainerULVD2 self, std::less< unsigned long > const & comp) -> itkMapContainerULVD2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULVD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVD2(*args))

    def __New_orig__() -> "itkMapContainerULVD2_Pointer":
        """__New_orig__() -> itkMapContainerULVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULVD2_Pointer":
        """Clone(itkMapContainerULVD2 self) -> itkMapContainerULVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVD2_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkVectorD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD2 > > > &":
        """
        CastToSTLContainer(itkMapContainerULVD2 self) -> std::map< unsigned long,itkVectorD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkVectorD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD2 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULVD2 self) -> std::map< unsigned long,itkVectorD2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkVectorD2 const &":
        """
        ElementAt(itkMapContainerULVD2 self, unsigned long arg0) -> itkVectorD2
        ElementAt(itkMapContainerULVD2 self, unsigned long arg0) -> itkVectorD2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkVectorD2 &":
        """
        CreateElementAt(itkMapContainerULVD2 self, unsigned long arg0) -> itkVectorD2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkVectorD2":
        """
        GetElement(itkMapContainerULVD2 self, unsigned long arg0) -> itkVectorD2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkVectorD2') -> "void":
        """
        SetElement(itkMapContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkVectorD2') -> "void":
        """
        InsertElement(itkMapContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULVD2 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkVectorD2') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULVD2 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULVD2 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULVD2 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULVD2 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULVD2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULVD2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULVD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD2

    def cast(obj: 'itkLightObject') -> "itkMapContainerULVD2 *":
        """cast(itkLightObject obj) -> itkMapContainerULVD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD2

        Create a new object of the class itkMapContainerULVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVD2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Clone, None, itkMapContainerULVD2)
itkMapContainerULVD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLContainer, None, itkMapContainerULVD2)
itkMapContainerULVD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLConstContainer, None, itkMapContainerULVD2)
itkMapContainerULVD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_ElementAt, None, itkMapContainerULVD2)
itkMapContainerULVD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CreateElementAt, None, itkMapContainerULVD2)
itkMapContainerULVD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_GetElement, None, itkMapContainerULVD2)
itkMapContainerULVD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_SetElement, None, itkMapContainerULVD2)
itkMapContainerULVD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_InsertElement, None, itkMapContainerULVD2)
itkMapContainerULVD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_IndexExists, None, itkMapContainerULVD2)
itkMapContainerULVD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_GetElementIfIndexExists, None, itkMapContainerULVD2)
itkMapContainerULVD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CreateIndex, None, itkMapContainerULVD2)
itkMapContainerULVD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_DeleteIndex, None, itkMapContainerULVD2)
itkMapContainerULVD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Size, None, itkMapContainerULVD2)
itkMapContainerULVD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Reserve, None, itkMapContainerULVD2)
itkMapContainerULVD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Squeeze, None, itkMapContainerULVD2)
itkMapContainerULVD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Initialize, None, itkMapContainerULVD2)
itkMapContainerULVD2_swigregister = _itkMapContainerPython.itkMapContainerULVD2_swigregister
itkMapContainerULVD2_swigregister(itkMapContainerULVD2)

def itkMapContainerULVD2___New_orig__() -> "itkMapContainerULVD2_Pointer":
    """itkMapContainerULVD2___New_orig__() -> itkMapContainerULVD2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULVD2___New_orig__()

def itkMapContainerULVD2_cast(obj: 'itkLightObject') -> "itkMapContainerULVD2 *":
    """itkMapContainerULVD2_cast(itkLightObject obj) -> itkMapContainerULVD2"""
    return _itkMapContainerPython.itkMapContainerULVD2_cast(obj)

class itkMapContainerULVD3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULVD3 self) -> itkMapContainerULVD3
        __init__(itkMapContainerULVD3 self, std::less< unsigned long > const & comp) -> itkMapContainerULVD3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULVD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVD3(*args))

    def __New_orig__() -> "itkMapContainerULVD3_Pointer":
        """__New_orig__() -> itkMapContainerULVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULVD3_Pointer":
        """Clone(itkMapContainerULVD3 self) -> itkMapContainerULVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVD3_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkVectorD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD3 > > > &":
        """
        CastToSTLContainer(itkMapContainerULVD3 self) -> std::map< unsigned long,itkVectorD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkVectorD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD3 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULVD3 self) -> std::map< unsigned long,itkVectorD3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorD3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkVectorD3 const &":
        """
        ElementAt(itkMapContainerULVD3 self, unsigned long arg0) -> itkVectorD3
        ElementAt(itkMapContainerULVD3 self, unsigned long arg0) -> itkVectorD3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkVectorD3 &":
        """
        CreateElementAt(itkMapContainerULVD3 self, unsigned long arg0) -> itkVectorD3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkVectorD3":
        """
        GetElement(itkMapContainerULVD3 self, unsigned long arg0) -> itkVectorD3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkVectorD3') -> "void":
        """
        SetElement(itkMapContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkVectorD3') -> "void":
        """
        InsertElement(itkMapContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULVD3 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkVectorD3') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULVD3 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULVD3 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULVD3 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULVD3 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULVD3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULVD3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULVD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD3

    def cast(obj: 'itkLightObject') -> "itkMapContainerULVD3 *":
        """cast(itkLightObject obj) -> itkMapContainerULVD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD3

        Create a new object of the class itkMapContainerULVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVD3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Clone, None, itkMapContainerULVD3)
itkMapContainerULVD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLContainer, None, itkMapContainerULVD3)
itkMapContainerULVD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLConstContainer, None, itkMapContainerULVD3)
itkMapContainerULVD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_ElementAt, None, itkMapContainerULVD3)
itkMapContainerULVD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CreateElementAt, None, itkMapContainerULVD3)
itkMapContainerULVD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_GetElement, None, itkMapContainerULVD3)
itkMapContainerULVD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_SetElement, None, itkMapContainerULVD3)
itkMapContainerULVD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_InsertElement, None, itkMapContainerULVD3)
itkMapContainerULVD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_IndexExists, None, itkMapContainerULVD3)
itkMapContainerULVD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_GetElementIfIndexExists, None, itkMapContainerULVD3)
itkMapContainerULVD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CreateIndex, None, itkMapContainerULVD3)
itkMapContainerULVD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_DeleteIndex, None, itkMapContainerULVD3)
itkMapContainerULVD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Size, None, itkMapContainerULVD3)
itkMapContainerULVD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Reserve, None, itkMapContainerULVD3)
itkMapContainerULVD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Squeeze, None, itkMapContainerULVD3)
itkMapContainerULVD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Initialize, None, itkMapContainerULVD3)
itkMapContainerULVD3_swigregister = _itkMapContainerPython.itkMapContainerULVD3_swigregister
itkMapContainerULVD3_swigregister(itkMapContainerULVD3)

def itkMapContainerULVD3___New_orig__() -> "itkMapContainerULVD3_Pointer":
    """itkMapContainerULVD3___New_orig__() -> itkMapContainerULVD3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULVD3___New_orig__()

def itkMapContainerULVD3_cast(obj: 'itkLightObject') -> "itkMapContainerULVD3 *":
    """itkMapContainerULVD3_cast(itkLightObject obj) -> itkMapContainerULVD3"""
    return _itkMapContainerPython.itkMapContainerULVD3_cast(obj)

class itkMapContainerULVF2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULVF2 self) -> itkMapContainerULVF2
        __init__(itkMapContainerULVF2 self, std::less< unsigned long > const & comp) -> itkMapContainerULVF2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULVF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVF2(*args))

    def __New_orig__() -> "itkMapContainerULVF2_Pointer":
        """__New_orig__() -> itkMapContainerULVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULVF2_Pointer":
        """Clone(itkMapContainerULVF2 self) -> itkMapContainerULVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVF2_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkVectorF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF2 > > > &":
        """
        CastToSTLContainer(itkMapContainerULVF2 self) -> std::map< unsigned long,itkVectorF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkVectorF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF2 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULVF2 self) -> std::map< unsigned long,itkVectorF2,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkVectorF2 const &":
        """
        ElementAt(itkMapContainerULVF2 self, unsigned long arg0) -> itkVectorF2
        ElementAt(itkMapContainerULVF2 self, unsigned long arg0) -> itkVectorF2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkVectorF2 &":
        """
        CreateElementAt(itkMapContainerULVF2 self, unsigned long arg0) -> itkVectorF2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkVectorF2":
        """
        GetElement(itkMapContainerULVF2 self, unsigned long arg0) -> itkVectorF2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkVectorF2') -> "void":
        """
        SetElement(itkMapContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkVectorF2') -> "void":
        """
        InsertElement(itkMapContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULVF2 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkVectorF2') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULVF2 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULVF2 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULVF2 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULVF2 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULVF2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULVF2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULVF2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVF2

    def cast(obj: 'itkLightObject') -> "itkMapContainerULVF2 *":
        """cast(itkLightObject obj) -> itkMapContainerULVF2"""
        return _itkMapContainerPython.itkMapContainerULVF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVF2

        Create a new object of the class itkMapContainerULVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVF2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_Clone, None, itkMapContainerULVF2)
itkMapContainerULVF2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_CastToSTLContainer, None, itkMapContainerULVF2)
itkMapContainerULVF2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_CastToSTLConstContainer, None, itkMapContainerULVF2)
itkMapContainerULVF2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_ElementAt, None, itkMapContainerULVF2)
itkMapContainerULVF2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_CreateElementAt, None, itkMapContainerULVF2)
itkMapContainerULVF2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_GetElement, None, itkMapContainerULVF2)
itkMapContainerULVF2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_SetElement, None, itkMapContainerULVF2)
itkMapContainerULVF2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_InsertElement, None, itkMapContainerULVF2)
itkMapContainerULVF2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_IndexExists, None, itkMapContainerULVF2)
itkMapContainerULVF2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_GetElementIfIndexExists, None, itkMapContainerULVF2)
itkMapContainerULVF2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_CreateIndex, None, itkMapContainerULVF2)
itkMapContainerULVF2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_DeleteIndex, None, itkMapContainerULVF2)
itkMapContainerULVF2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_Size, None, itkMapContainerULVF2)
itkMapContainerULVF2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_Reserve, None, itkMapContainerULVF2)
itkMapContainerULVF2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_Squeeze, None, itkMapContainerULVF2)
itkMapContainerULVF2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF2_Initialize, None, itkMapContainerULVF2)
itkMapContainerULVF2_swigregister = _itkMapContainerPython.itkMapContainerULVF2_swigregister
itkMapContainerULVF2_swigregister(itkMapContainerULVF2)

def itkMapContainerULVF2___New_orig__() -> "itkMapContainerULVF2_Pointer":
    """itkMapContainerULVF2___New_orig__() -> itkMapContainerULVF2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULVF2___New_orig__()

def itkMapContainerULVF2_cast(obj: 'itkLightObject') -> "itkMapContainerULVF2 *":
    """itkMapContainerULVF2_cast(itkLightObject obj) -> itkMapContainerULVF2"""
    return _itkMapContainerPython.itkMapContainerULVF2_cast(obj)

class itkMapContainerULVF3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULVF3 self) -> itkMapContainerULVF3
        __init__(itkMapContainerULVF3 self, std::less< unsigned long > const & comp) -> itkMapContainerULVF3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULVF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVF3(*args))

    def __New_orig__() -> "itkMapContainerULVF3_Pointer":
        """__New_orig__() -> itkMapContainerULVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerULVF3_Pointer":
        """Clone(itkMapContainerULVF3 self) -> itkMapContainerULVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULVF3_Clone(self)


    def CastToSTLContainer(self) -> "std::map< unsigned long,itkVectorF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF3 > > > &":
        """
        CastToSTLContainer(itkMapContainerULVF3 self) -> std::map< unsigned long,itkVectorF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< unsigned long,itkVectorF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF3 > > > const &":
        """
        CastToSTLConstContainer(itkMapContainerULVF3 self) -> std::map< unsigned long,itkVectorF3,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,itkVectorF3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkVectorF3 const &":
        """
        ElementAt(itkMapContainerULVF3 self, unsigned long arg0) -> itkVectorF3
        ElementAt(itkMapContainerULVF3 self, unsigned long arg0) -> itkVectorF3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkVectorF3 &":
        """
        CreateElementAt(itkMapContainerULVF3 self, unsigned long arg0) -> itkVectorF3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkVectorF3":
        """
        GetElement(itkMapContainerULVF3 self, unsigned long arg0) -> itkVectorF3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkVectorF3') -> "void":
        """
        SetElement(itkMapContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkVectorF3') -> "void":
        """
        InsertElement(itkMapContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkMapContainerULVF3 self, unsigned long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkVectorF3') -> "bool":
        """
        GetElementIfIndexExists(itkMapContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkMapContainerULVF3 self, unsigned long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkMapContainerULVF3 self, unsigned long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkMapContainerULVF3 self) -> unsigned long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkMapContainerULVF3 self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkMapContainerULVF3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkMapContainerULVF3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULVF3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVF3

    def cast(obj: 'itkLightObject') -> "itkMapContainerULVF3 *":
        """cast(itkLightObject obj) -> itkMapContainerULVF3"""
        return _itkMapContainerPython.itkMapContainerULVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVF3

        Create a new object of the class itkMapContainerULVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVF3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_Clone, None, itkMapContainerULVF3)
itkMapContainerULVF3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_CastToSTLContainer, None, itkMapContainerULVF3)
itkMapContainerULVF3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_CastToSTLConstContainer, None, itkMapContainerULVF3)
itkMapContainerULVF3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_ElementAt, None, itkMapContainerULVF3)
itkMapContainerULVF3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_CreateElementAt, None, itkMapContainerULVF3)
itkMapContainerULVF3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_GetElement, None, itkMapContainerULVF3)
itkMapContainerULVF3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_SetElement, None, itkMapContainerULVF3)
itkMapContainerULVF3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_InsertElement, None, itkMapContainerULVF3)
itkMapContainerULVF3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_IndexExists, None, itkMapContainerULVF3)
itkMapContainerULVF3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_GetElementIfIndexExists, None, itkMapContainerULVF3)
itkMapContainerULVF3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_CreateIndex, None, itkMapContainerULVF3)
itkMapContainerULVF3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_DeleteIndex, None, itkMapContainerULVF3)
itkMapContainerULVF3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_Size, None, itkMapContainerULVF3)
itkMapContainerULVF3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_Reserve, None, itkMapContainerULVF3)
itkMapContainerULVF3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_Squeeze, None, itkMapContainerULVF3)
itkMapContainerULVF3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVF3_Initialize, None, itkMapContainerULVF3)
itkMapContainerULVF3_swigregister = _itkMapContainerPython.itkMapContainerULVF3_swigregister
itkMapContainerULVF3_swigregister(itkMapContainerULVF3)

def itkMapContainerULVF3___New_orig__() -> "itkMapContainerULVF3_Pointer":
    """itkMapContainerULVF3___New_orig__() -> itkMapContainerULVF3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULVF3___New_orig__()

def itkMapContainerULVF3_cast(obj: 'itkLightObject') -> "itkMapContainerULVF3 *":
    """itkMapContainerULVF3_cast(itkLightObject obj) -> itkMapContainerULVF3"""
    return _itkMapContainerPython.itkMapContainerULVF3_cast(obj)



