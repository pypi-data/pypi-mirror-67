# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_vector_refPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_vector_refPython', [dirname(__file__)])
        except ImportError:
            import _vnl_vector_refPython
            return _vnl_vector_refPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_vector_refPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_vector_refPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_vector_refPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
class vnl_vector_refCF(vnl_vectorPython.vnl_vectorCF):
    """Proxy of C++ vnl_vector_refCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refCF self, unsigned long n, stdcomplexF space) -> vnl_vector_refCF
        __init__(vnl_vector_refCF self, vnl_vector_refCF v) -> vnl_vector_refCF
        """
        _vnl_vector_refPython.vnl_vector_refCF_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refCF(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refCF

    def non_const(self) -> "vnl_vector_refCF &":
        """non_const(vnl_vector_refCF self) -> vnl_vector_refCF"""
        return _vnl_vector_refPython.vnl_vector_refCF_non_const(self)


    def as_vector(self) -> "vnl_vectorCF":
        """as_vector(vnl_vector_refCF self) -> vnl_vectorCF"""
        return _vnl_vector_refPython.vnl_vector_refCF_as_vector(self)

vnl_vector_refCF.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refCF_non_const, None, vnl_vector_refCF)
vnl_vector_refCF.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refCF_as_vector, None, vnl_vector_refCF)
vnl_vector_refCF_swigregister = _vnl_vector_refPython.vnl_vector_refCF_swigregister
vnl_vector_refCF_swigregister(vnl_vector_refCF)

class vnl_vector_refD(vnl_vectorPython.vnl_vectorD):
    """Proxy of C++ vnl_vector_refD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refD self, unsigned long n, double * space) -> vnl_vector_refD
        __init__(vnl_vector_refD self, vnl_vector_refD v) -> vnl_vector_refD
        """
        _vnl_vector_refPython.vnl_vector_refD_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refD(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refD

    def non_const(self) -> "vnl_vector_refD &":
        """non_const(vnl_vector_refD self) -> vnl_vector_refD"""
        return _vnl_vector_refPython.vnl_vector_refD_non_const(self)


    def as_vector(self) -> "vnl_vectorD":
        """as_vector(vnl_vector_refD self) -> vnl_vectorD"""
        return _vnl_vector_refPython.vnl_vector_refD_as_vector(self)

vnl_vector_refD.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refD_non_const, None, vnl_vector_refD)
vnl_vector_refD.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refD_as_vector, None, vnl_vector_refD)
vnl_vector_refD_swigregister = _vnl_vector_refPython.vnl_vector_refD_swigregister
vnl_vector_refD_swigregister(vnl_vector_refD)

class vnl_vector_refF(vnl_vectorPython.vnl_vectorF):
    """Proxy of C++ vnl_vector_refF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refF self, unsigned long n, float * space) -> vnl_vector_refF
        __init__(vnl_vector_refF self, vnl_vector_refF v) -> vnl_vector_refF
        """
        _vnl_vector_refPython.vnl_vector_refF_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refF(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refF

    def non_const(self) -> "vnl_vector_refF &":
        """non_const(vnl_vector_refF self) -> vnl_vector_refF"""
        return _vnl_vector_refPython.vnl_vector_refF_non_const(self)


    def as_vector(self) -> "vnl_vectorF":
        """as_vector(vnl_vector_refF self) -> vnl_vectorF"""
        return _vnl_vector_refPython.vnl_vector_refF_as_vector(self)

vnl_vector_refF.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refF_non_const, None, vnl_vector_refF)
vnl_vector_refF.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refF_as_vector, None, vnl_vector_refF)
vnl_vector_refF_swigregister = _vnl_vector_refPython.vnl_vector_refF_swigregister
vnl_vector_refF_swigregister(vnl_vector_refF)

class vnl_vector_refLD(vnl_vectorPython.vnl_vectorLD):
    """Proxy of C++ vnl_vector_refLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refLD self, unsigned long n, long double * space) -> vnl_vector_refLD
        __init__(vnl_vector_refLD self, vnl_vector_refLD v) -> vnl_vector_refLD
        """
        _vnl_vector_refPython.vnl_vector_refLD_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refLD(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refLD

    def non_const(self) -> "vnl_vector_refLD &":
        """non_const(vnl_vector_refLD self) -> vnl_vector_refLD"""
        return _vnl_vector_refPython.vnl_vector_refLD_non_const(self)


    def as_vector(self) -> "vnl_vectorLD":
        """as_vector(vnl_vector_refLD self) -> vnl_vectorLD"""
        return _vnl_vector_refPython.vnl_vector_refLD_as_vector(self)

vnl_vector_refLD.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refLD_non_const, None, vnl_vector_refLD)
vnl_vector_refLD.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refLD_as_vector, None, vnl_vector_refLD)
vnl_vector_refLD_swigregister = _vnl_vector_refPython.vnl_vector_refLD_swigregister
vnl_vector_refLD_swigregister(vnl_vector_refLD)

class vnl_vector_refSC(vnl_vectorPython.vnl_vectorSC):
    """Proxy of C++ vnl_vector_refSC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refSC self, unsigned long n, signed char * space) -> vnl_vector_refSC
        __init__(vnl_vector_refSC self, vnl_vector_refSC v) -> vnl_vector_refSC
        """
        _vnl_vector_refPython.vnl_vector_refSC_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSC(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSC

    def non_const(self) -> "vnl_vector_refSC &":
        """non_const(vnl_vector_refSC self) -> vnl_vector_refSC"""
        return _vnl_vector_refPython.vnl_vector_refSC_non_const(self)


    def as_vector(self) -> "vnl_vectorSC":
        """as_vector(vnl_vector_refSC self) -> vnl_vectorSC"""
        return _vnl_vector_refPython.vnl_vector_refSC_as_vector(self)

vnl_vector_refSC.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSC_non_const, None, vnl_vector_refSC)
vnl_vector_refSC.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSC_as_vector, None, vnl_vector_refSC)
vnl_vector_refSC_swigregister = _vnl_vector_refPython.vnl_vector_refSC_swigregister
vnl_vector_refSC_swigregister(vnl_vector_refSC)

class vnl_vector_refSI(vnl_vectorPython.vnl_vectorSI):
    """Proxy of C++ vnl_vector_refSI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refSI self, unsigned long n, int * space) -> vnl_vector_refSI
        __init__(vnl_vector_refSI self, vnl_vector_refSI v) -> vnl_vector_refSI
        """
        _vnl_vector_refPython.vnl_vector_refSI_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSI(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSI

    def non_const(self) -> "vnl_vector_refSI &":
        """non_const(vnl_vector_refSI self) -> vnl_vector_refSI"""
        return _vnl_vector_refPython.vnl_vector_refSI_non_const(self)


    def as_vector(self) -> "vnl_vectorSI":
        """as_vector(vnl_vector_refSI self) -> vnl_vectorSI"""
        return _vnl_vector_refPython.vnl_vector_refSI_as_vector(self)

vnl_vector_refSI.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSI_non_const, None, vnl_vector_refSI)
vnl_vector_refSI.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSI_as_vector, None, vnl_vector_refSI)
vnl_vector_refSI_swigregister = _vnl_vector_refPython.vnl_vector_refSI_swigregister
vnl_vector_refSI_swigregister(vnl_vector_refSI)

class vnl_vector_refSL(vnl_vectorPython.vnl_vectorSL):
    """Proxy of C++ vnl_vector_refSL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refSL self, unsigned long n, long * space) -> vnl_vector_refSL
        __init__(vnl_vector_refSL self, vnl_vector_refSL v) -> vnl_vector_refSL
        """
        _vnl_vector_refPython.vnl_vector_refSL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSL

    def non_const(self) -> "vnl_vector_refSL &":
        """non_const(vnl_vector_refSL self) -> vnl_vector_refSL"""
        return _vnl_vector_refPython.vnl_vector_refSL_non_const(self)


    def as_vector(self) -> "vnl_vectorSL":
        """as_vector(vnl_vector_refSL self) -> vnl_vectorSL"""
        return _vnl_vector_refPython.vnl_vector_refSL_as_vector(self)

vnl_vector_refSL.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSL_non_const, None, vnl_vector_refSL)
vnl_vector_refSL.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSL_as_vector, None, vnl_vector_refSL)
vnl_vector_refSL_swigregister = _vnl_vector_refPython.vnl_vector_refSL_swigregister
vnl_vector_refSL_swigregister(vnl_vector_refSL)

class vnl_vector_refSLL(vnl_vectorPython.vnl_vectorSLL):
    """Proxy of C++ vnl_vector_refSLL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refSLL self, unsigned long n, long long * space) -> vnl_vector_refSLL
        __init__(vnl_vector_refSLL self, vnl_vector_refSLL v) -> vnl_vector_refSLL
        """
        _vnl_vector_refPython.vnl_vector_refSLL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSLL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSLL

    def non_const(self) -> "vnl_vector_refSLL &":
        """non_const(vnl_vector_refSLL self) -> vnl_vector_refSLL"""
        return _vnl_vector_refPython.vnl_vector_refSLL_non_const(self)


    def as_vector(self) -> "vnl_vectorSLL":
        """as_vector(vnl_vector_refSLL self) -> vnl_vectorSLL"""
        return _vnl_vector_refPython.vnl_vector_refSLL_as_vector(self)

vnl_vector_refSLL.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSLL_non_const, None, vnl_vector_refSLL)
vnl_vector_refSLL.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSLL_as_vector, None, vnl_vector_refSLL)
vnl_vector_refSLL_swigregister = _vnl_vector_refPython.vnl_vector_refSLL_swigregister
vnl_vector_refSLL_swigregister(vnl_vector_refSLL)

class vnl_vector_refSS(vnl_vectorPython.vnl_vectorSS):
    """Proxy of C++ vnl_vector_refSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refSS self, unsigned long n, short * space) -> vnl_vector_refSS
        __init__(vnl_vector_refSS self, vnl_vector_refSS v) -> vnl_vector_refSS
        """
        _vnl_vector_refPython.vnl_vector_refSS_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSS(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSS

    def non_const(self) -> "vnl_vector_refSS &":
        """non_const(vnl_vector_refSS self) -> vnl_vector_refSS"""
        return _vnl_vector_refPython.vnl_vector_refSS_non_const(self)


    def as_vector(self) -> "vnl_vectorSS":
        """as_vector(vnl_vector_refSS self) -> vnl_vectorSS"""
        return _vnl_vector_refPython.vnl_vector_refSS_as_vector(self)

vnl_vector_refSS.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSS_non_const, None, vnl_vector_refSS)
vnl_vector_refSS.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refSS_as_vector, None, vnl_vector_refSS)
vnl_vector_refSS_swigregister = _vnl_vector_refPython.vnl_vector_refSS_swigregister
vnl_vector_refSS_swigregister(vnl_vector_refSS)

class vnl_vector_refUC(vnl_vectorPython.vnl_vectorUC):
    """Proxy of C++ vnl_vector_refUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refUC self, unsigned long n, unsigned char * space) -> vnl_vector_refUC
        __init__(vnl_vector_refUC self, vnl_vector_refUC v) -> vnl_vector_refUC
        """
        _vnl_vector_refPython.vnl_vector_refUC_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUC(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUC

    def non_const(self) -> "vnl_vector_refUC &":
        """non_const(vnl_vector_refUC self) -> vnl_vector_refUC"""
        return _vnl_vector_refPython.vnl_vector_refUC_non_const(self)


    def as_vector(self) -> "vnl_vectorUC":
        """as_vector(vnl_vector_refUC self) -> vnl_vectorUC"""
        return _vnl_vector_refPython.vnl_vector_refUC_as_vector(self)

vnl_vector_refUC.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUC_non_const, None, vnl_vector_refUC)
vnl_vector_refUC.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUC_as_vector, None, vnl_vector_refUC)
vnl_vector_refUC_swigregister = _vnl_vector_refPython.vnl_vector_refUC_swigregister
vnl_vector_refUC_swigregister(vnl_vector_refUC)

class vnl_vector_refUI(vnl_vectorPython.vnl_vectorUI):
    """Proxy of C++ vnl_vector_refUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refUI self, unsigned long n, unsigned int * space) -> vnl_vector_refUI
        __init__(vnl_vector_refUI self, vnl_vector_refUI v) -> vnl_vector_refUI
        """
        _vnl_vector_refPython.vnl_vector_refUI_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUI(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUI

    def non_const(self) -> "vnl_vector_refUI &":
        """non_const(vnl_vector_refUI self) -> vnl_vector_refUI"""
        return _vnl_vector_refPython.vnl_vector_refUI_non_const(self)


    def as_vector(self) -> "vnl_vectorUI":
        """as_vector(vnl_vector_refUI self) -> vnl_vectorUI"""
        return _vnl_vector_refPython.vnl_vector_refUI_as_vector(self)

vnl_vector_refUI.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUI_non_const, None, vnl_vector_refUI)
vnl_vector_refUI.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUI_as_vector, None, vnl_vector_refUI)
vnl_vector_refUI_swigregister = _vnl_vector_refPython.vnl_vector_refUI_swigregister
vnl_vector_refUI_swigregister(vnl_vector_refUI)

class vnl_vector_refUL(vnl_vectorPython.vnl_vectorUL):
    """Proxy of C++ vnl_vector_refUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refUL self, unsigned long n, unsigned long * space) -> vnl_vector_refUL
        __init__(vnl_vector_refUL self, vnl_vector_refUL v) -> vnl_vector_refUL
        """
        _vnl_vector_refPython.vnl_vector_refUL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUL

    def non_const(self) -> "vnl_vector_refUL &":
        """non_const(vnl_vector_refUL self) -> vnl_vector_refUL"""
        return _vnl_vector_refPython.vnl_vector_refUL_non_const(self)


    def as_vector(self) -> "vnl_vectorUL":
        """as_vector(vnl_vector_refUL self) -> vnl_vectorUL"""
        return _vnl_vector_refPython.vnl_vector_refUL_as_vector(self)

vnl_vector_refUL.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUL_non_const, None, vnl_vector_refUL)
vnl_vector_refUL.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUL_as_vector, None, vnl_vector_refUL)
vnl_vector_refUL_swigregister = _vnl_vector_refPython.vnl_vector_refUL_swigregister
vnl_vector_refUL_swigregister(vnl_vector_refUL)

class vnl_vector_refULL(vnl_vectorPython.vnl_vectorULL):
    """Proxy of C++ vnl_vector_refULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refULL self, unsigned long n, unsigned long long * space) -> vnl_vector_refULL
        __init__(vnl_vector_refULL self, vnl_vector_refULL v) -> vnl_vector_refULL
        """
        _vnl_vector_refPython.vnl_vector_refULL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refULL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refULL

    def non_const(self) -> "vnl_vector_refULL &":
        """non_const(vnl_vector_refULL self) -> vnl_vector_refULL"""
        return _vnl_vector_refPython.vnl_vector_refULL_non_const(self)


    def as_vector(self) -> "vnl_vectorULL":
        """as_vector(vnl_vector_refULL self) -> vnl_vectorULL"""
        return _vnl_vector_refPython.vnl_vector_refULL_as_vector(self)

vnl_vector_refULL.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refULL_non_const, None, vnl_vector_refULL)
vnl_vector_refULL.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refULL_as_vector, None, vnl_vector_refULL)
vnl_vector_refULL_swigregister = _vnl_vector_refPython.vnl_vector_refULL_swigregister
vnl_vector_refULL_swigregister(vnl_vector_refULL)

class vnl_vector_refUS(vnl_vectorPython.vnl_vectorUS):
    """Proxy of C++ vnl_vector_refUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vector_refUS self, unsigned long n, unsigned short * space) -> vnl_vector_refUS
        __init__(vnl_vector_refUS self, vnl_vector_refUS v) -> vnl_vector_refUS
        """
        _vnl_vector_refPython.vnl_vector_refUS_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUS(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUS

    def non_const(self) -> "vnl_vector_refUS &":
        """non_const(vnl_vector_refUS self) -> vnl_vector_refUS"""
        return _vnl_vector_refPython.vnl_vector_refUS_non_const(self)


    def as_vector(self) -> "vnl_vectorUS":
        """as_vector(vnl_vector_refUS self) -> vnl_vectorUS"""
        return _vnl_vector_refPython.vnl_vector_refUS_as_vector(self)

vnl_vector_refUS.non_const = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUS_non_const, None, vnl_vector_refUS)
vnl_vector_refUS.as_vector = new_instancemethod(_vnl_vector_refPython.vnl_vector_refUS_as_vector, None, vnl_vector_refUS)
vnl_vector_refUS_swigregister = _vnl_vector_refPython.vnl_vector_refUS_swigregister
vnl_vector_refUS_swigregister(vnl_vector_refUS)



