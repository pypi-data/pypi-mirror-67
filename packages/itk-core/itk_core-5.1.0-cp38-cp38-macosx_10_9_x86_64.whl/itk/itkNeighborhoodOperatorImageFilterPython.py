# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNeighborhoodOperatorImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNeighborhoodOperatorImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkNeighborhoodOperatorImageFilterPython
            return _itkNeighborhoodOperatorImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNeighborhoodOperatorImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNeighborhoodOperatorImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNeighborhoodOperatorImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkNeighborhoodPython
import ITKCommonBasePython
import pyBasePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkOffsetPython
import itkSizePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImagePython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkNeighborhoodOperatorImageFilterD3D3D_New():
  return itkNeighborhoodOperatorImageFilterD3D3D.New()


def itkNeighborhoodOperatorImageFilterF3F3F_New():
  return itkNeighborhoodOperatorImageFilterF3F3F.New()


def itkNeighborhoodOperatorImageFilterUS3US3US_New():
  return itkNeighborhoodOperatorImageFilterUS3US3US.New()


def itkNeighborhoodOperatorImageFilterUC3UC3UC_New():
  return itkNeighborhoodOperatorImageFilterUC3UC3UC.New()


def itkNeighborhoodOperatorImageFilterSS3SS3SS_New():
  return itkNeighborhoodOperatorImageFilterSS3SS3SS.New()


def itkNeighborhoodOperatorImageFilterD2D2D_New():
  return itkNeighborhoodOperatorImageFilterD2D2D.New()


def itkNeighborhoodOperatorImageFilterF2F2F_New():
  return itkNeighborhoodOperatorImageFilterF2F2F.New()


def itkNeighborhoodOperatorImageFilterUS2US2US_New():
  return itkNeighborhoodOperatorImageFilterUS2US2US.New()


def itkNeighborhoodOperatorImageFilterUC2UC2UC_New():
  return itkNeighborhoodOperatorImageFilterUC2UC2UC.New()


def itkNeighborhoodOperatorImageFilterSS2SS2SS_New():
  return itkNeighborhoodOperatorImageFilterSS2SS2SS.New()

class itkImageBoundaryConditionD2D2(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionD2D2 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionD2D2 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionD2D2 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_Print(self, os, i)


    def __call__(self, *args) -> "double":
        """
        __call__(itkImageBoundaryConditionD2D2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< double *,2,itk::NeighborhoodAllocator< double * > > const * data) -> double
        __call__(itkImageBoundaryConditionD2D2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< double *,2,itk::NeighborhoodAllocator< double * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const & neighborhoodAccessorFunctor) -> double
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionD2D2

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionD2D2 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion2', outputRequestedRegion: 'itkImageRegion2') -> "itkImageRegion2":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionD2D2 self, itkImageRegion2 inputLargestPossibleRegion, itkImageRegion2 outputRequestedRegion) -> itkImageRegion2

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex2', image: 'itkImageD2') -> "double":
        """
        GetPixel(itkImageBoundaryConditionD2D2 self, itkIndex2 index, itkImageD2 image) -> double

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetPixel(self, index, image)

itkImageBoundaryConditionD2D2.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetNameOfClass, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_Print, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2___call__, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetInputRequestedRegion, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetPixel, None, itkImageBoundaryConditionD2D2)
itkImageBoundaryConditionD2D2_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_swigregister
itkImageBoundaryConditionD2D2_swigregister(itkImageBoundaryConditionD2D2)

class itkImageBoundaryConditionD3D3(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionD3D3 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionD3D3 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionD3D3 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_Print(self, os, i)


    def __call__(self, *args) -> "double":
        """
        __call__(itkImageBoundaryConditionD3D3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< double *,3,itk::NeighborhoodAllocator< double * > > const * data) -> double
        __call__(itkImageBoundaryConditionD3D3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< double *,3,itk::NeighborhoodAllocator< double * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const & neighborhoodAccessorFunctor) -> double
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionD3D3

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionD3D3 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion3', outputRequestedRegion: 'itkImageRegion3') -> "itkImageRegion3":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionD3D3 self, itkImageRegion3 inputLargestPossibleRegion, itkImageRegion3 outputRequestedRegion) -> itkImageRegion3

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex3', image: 'itkImageD3') -> "double":
        """
        GetPixel(itkImageBoundaryConditionD3D3 self, itkIndex3 index, itkImageD3 image) -> double

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetPixel(self, index, image)

itkImageBoundaryConditionD3D3.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetNameOfClass, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_Print, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3___call__, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetInputRequestedRegion, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetPixel, None, itkImageBoundaryConditionD3D3)
itkImageBoundaryConditionD3D3_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_swigregister
itkImageBoundaryConditionD3D3_swigregister(itkImageBoundaryConditionD3D3)

class itkImageBoundaryConditionF2F2(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionF2F2 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionF2F2 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionF2F2 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_Print(self, os, i)


    def __call__(self, *args) -> "float":
        """
        __call__(itkImageBoundaryConditionF2F2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< float *,2,itk::NeighborhoodAllocator< float * > > const * data) -> float
        __call__(itkImageBoundaryConditionF2F2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< float *,2,itk::NeighborhoodAllocator< float * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const & neighborhoodAccessorFunctor) -> float
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionF2F2

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionF2F2 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion2', outputRequestedRegion: 'itkImageRegion2') -> "itkImageRegion2":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionF2F2 self, itkImageRegion2 inputLargestPossibleRegion, itkImageRegion2 outputRequestedRegion) -> itkImageRegion2

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex2', image: 'itkImageF2') -> "float":
        """
        GetPixel(itkImageBoundaryConditionF2F2 self, itkIndex2 index, itkImageF2 image) -> float

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetPixel(self, index, image)

itkImageBoundaryConditionF2F2.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetNameOfClass, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_Print, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2___call__, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetInputRequestedRegion, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetPixel, None, itkImageBoundaryConditionF2F2)
itkImageBoundaryConditionF2F2_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_swigregister
itkImageBoundaryConditionF2F2_swigregister(itkImageBoundaryConditionF2F2)

class itkImageBoundaryConditionF3F3(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionF3F3 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionF3F3 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionF3F3 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_Print(self, os, i)


    def __call__(self, *args) -> "float":
        """
        __call__(itkImageBoundaryConditionF3F3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< float *,3,itk::NeighborhoodAllocator< float * > > const * data) -> float
        __call__(itkImageBoundaryConditionF3F3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< float *,3,itk::NeighborhoodAllocator< float * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const & neighborhoodAccessorFunctor) -> float
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionF3F3

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionF3F3 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion3', outputRequestedRegion: 'itkImageRegion3') -> "itkImageRegion3":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionF3F3 self, itkImageRegion3 inputLargestPossibleRegion, itkImageRegion3 outputRequestedRegion) -> itkImageRegion3

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex3', image: 'itkImageF3') -> "float":
        """
        GetPixel(itkImageBoundaryConditionF3F3 self, itkIndex3 index, itkImageF3 image) -> float

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetPixel(self, index, image)

itkImageBoundaryConditionF3F3.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetNameOfClass, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_Print, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3___call__, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetInputRequestedRegion, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetPixel, None, itkImageBoundaryConditionF3F3)
itkImageBoundaryConditionF3F3_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_swigregister
itkImageBoundaryConditionF3F3_swigregister(itkImageBoundaryConditionF3F3)

class itkImageBoundaryConditionSS2SS2(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionSS2SS2 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionSS2SS2 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionSS2SS2 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_Print(self, os, i)


    def __call__(self, *args) -> "short":
        """
        __call__(itkImageBoundaryConditionSS2SS2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< short *,2,itk::NeighborhoodAllocator< short * > > const * data) -> short
        __call__(itkImageBoundaryConditionSS2SS2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< short *,2,itk::NeighborhoodAllocator< short * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const & neighborhoodAccessorFunctor) -> short
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionSS2SS2

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionSS2SS2 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion2', outputRequestedRegion: 'itkImageRegion2') -> "itkImageRegion2":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionSS2SS2 self, itkImageRegion2 inputLargestPossibleRegion, itkImageRegion2 outputRequestedRegion) -> itkImageRegion2

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex2', image: 'itkImageSS2') -> "short":
        """
        GetPixel(itkImageBoundaryConditionSS2SS2 self, itkIndex2 index, itkImageSS2 image) -> short

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetPixel(self, index, image)

itkImageBoundaryConditionSS2SS2.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetNameOfClass, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_Print, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2___call__, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetInputRequestedRegion, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetPixel, None, itkImageBoundaryConditionSS2SS2)
itkImageBoundaryConditionSS2SS2_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_swigregister
itkImageBoundaryConditionSS2SS2_swigregister(itkImageBoundaryConditionSS2SS2)

class itkImageBoundaryConditionSS3SS3(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionSS3SS3 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionSS3SS3 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionSS3SS3 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_Print(self, os, i)


    def __call__(self, *args) -> "short":
        """
        __call__(itkImageBoundaryConditionSS3SS3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< short *,3,itk::NeighborhoodAllocator< short * > > const * data) -> short
        __call__(itkImageBoundaryConditionSS3SS3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< short *,3,itk::NeighborhoodAllocator< short * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const & neighborhoodAccessorFunctor) -> short
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionSS3SS3

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionSS3SS3 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion3', outputRequestedRegion: 'itkImageRegion3') -> "itkImageRegion3":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionSS3SS3 self, itkImageRegion3 inputLargestPossibleRegion, itkImageRegion3 outputRequestedRegion) -> itkImageRegion3

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex3', image: 'itkImageSS3') -> "short":
        """
        GetPixel(itkImageBoundaryConditionSS3SS3 self, itkIndex3 index, itkImageSS3 image) -> short

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetPixel(self, index, image)

itkImageBoundaryConditionSS3SS3.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetNameOfClass, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_Print, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3___call__, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetInputRequestedRegion, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetPixel, None, itkImageBoundaryConditionSS3SS3)
itkImageBoundaryConditionSS3SS3_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_swigregister
itkImageBoundaryConditionSS3SS3_swigregister(itkImageBoundaryConditionSS3SS3)

class itkImageBoundaryConditionUC2UC2(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionUC2UC2 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionUC2UC2 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionUC2UC2 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_Print(self, os, i)


    def __call__(self, *args) -> "unsigned char":
        """
        __call__(itkImageBoundaryConditionUC2UC2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< unsigned char *,2,itk::NeighborhoodAllocator< unsigned char * > > const * data) -> unsigned char
        __call__(itkImageBoundaryConditionUC2UC2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< unsigned char *,2,itk::NeighborhoodAllocator< unsigned char * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const & neighborhoodAccessorFunctor) -> unsigned char
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUC2UC2

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionUC2UC2 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion2', outputRequestedRegion: 'itkImageRegion2') -> "itkImageRegion2":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionUC2UC2 self, itkImageRegion2 inputLargestPossibleRegion, itkImageRegion2 outputRequestedRegion) -> itkImageRegion2

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex2', image: 'itkImageUC2') -> "unsigned char":
        """
        GetPixel(itkImageBoundaryConditionUC2UC2 self, itkIndex2 index, itkImageUC2 image) -> unsigned char

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetPixel(self, index, image)

itkImageBoundaryConditionUC2UC2.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetNameOfClass, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_Print, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2___call__, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetInputRequestedRegion, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetPixel, None, itkImageBoundaryConditionUC2UC2)
itkImageBoundaryConditionUC2UC2_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_swigregister
itkImageBoundaryConditionUC2UC2_swigregister(itkImageBoundaryConditionUC2UC2)

class itkImageBoundaryConditionUC3UC3(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionUC3UC3 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionUC3UC3 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionUC3UC3 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_Print(self, os, i)


    def __call__(self, *args) -> "unsigned char":
        """
        __call__(itkImageBoundaryConditionUC3UC3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< unsigned char *,3,itk::NeighborhoodAllocator< unsigned char * > > const * data) -> unsigned char
        __call__(itkImageBoundaryConditionUC3UC3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< unsigned char *,3,itk::NeighborhoodAllocator< unsigned char * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const & neighborhoodAccessorFunctor) -> unsigned char
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUC3UC3

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionUC3UC3 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion3', outputRequestedRegion: 'itkImageRegion3') -> "itkImageRegion3":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionUC3UC3 self, itkImageRegion3 inputLargestPossibleRegion, itkImageRegion3 outputRequestedRegion) -> itkImageRegion3

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex3', image: 'itkImageUC3') -> "unsigned char":
        """
        GetPixel(itkImageBoundaryConditionUC3UC3 self, itkIndex3 index, itkImageUC3 image) -> unsigned char

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetPixel(self, index, image)

itkImageBoundaryConditionUC3UC3.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetNameOfClass, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_Print, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3___call__, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetInputRequestedRegion, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetPixel, None, itkImageBoundaryConditionUC3UC3)
itkImageBoundaryConditionUC3UC3_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_swigregister
itkImageBoundaryConditionUC3UC3_swigregister(itkImageBoundaryConditionUC3UC3)

class itkImageBoundaryConditionUS2US2(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionUS2US2 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionUS2US2 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionUS2US2 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_Print(self, os, i)


    def __call__(self, *args) -> "unsigned short":
        """
        __call__(itkImageBoundaryConditionUS2US2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< unsigned short *,2,itk::NeighborhoodAllocator< unsigned short * > > const * data) -> unsigned short
        __call__(itkImageBoundaryConditionUS2US2 self, itkOffset2 point_index, itkOffset2 boundary_offset, itk::Neighborhood< unsigned short *,2,itk::NeighborhoodAllocator< unsigned short * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const & neighborhoodAccessorFunctor) -> unsigned short
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUS2US2

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionUS2US2 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion2', outputRequestedRegion: 'itkImageRegion2') -> "itkImageRegion2":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionUS2US2 self, itkImageRegion2 inputLargestPossibleRegion, itkImageRegion2 outputRequestedRegion) -> itkImageRegion2

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex2', image: 'itkImageUS2') -> "unsigned short":
        """
        GetPixel(itkImageBoundaryConditionUS2US2 self, itkIndex2 index, itkImageUS2 image) -> unsigned short

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetPixel(self, index, image)

itkImageBoundaryConditionUS2US2.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetNameOfClass, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_Print, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2___call__, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetInputRequestedRegion, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetPixel, None, itkImageBoundaryConditionUS2US2)
itkImageBoundaryConditionUS2US2_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_swigregister
itkImageBoundaryConditionUS2US2_swigregister(itkImageBoundaryConditionUS2US2)

class itkImageBoundaryConditionUS3US3(object):
    """


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood.

    C++ includes: itkImageBoundaryCondition.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageBoundaryConditionUS3US3 self) -> char const *

        Runtime information
        support. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetNameOfClass(self)


    def Print(self, os: 'ostream', i: 'itkIndent'=0) -> "void":
        """
        Print(itkImageBoundaryConditionUS3US3 self, ostream os, itkIndent i=0)
        Print(itkImageBoundaryConditionUS3US3 self, ostream os)

        Utility for printing the
        boundary condition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_Print(self, os, i)


    def __call__(self, *args) -> "unsigned short":
        """
        __call__(itkImageBoundaryConditionUS3US3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< unsigned short *,3,itk::NeighborhoodAllocator< unsigned short * > > const * data) -> unsigned short
        __call__(itkImageBoundaryConditionUS3US3 self, itkOffset3 point_index, itkOffset3 boundary_offset, itk::Neighborhood< unsigned short *,3,itk::NeighborhoodAllocator< unsigned short * > > const * data, itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const & neighborhoodAccessorFunctor) -> unsigned short
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3___call__(self, *args)

    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUS3US3

    def RequiresCompleteNeighborhood(self) -> "bool":
        """
        RequiresCompleteNeighborhood(itkImageBoundaryConditionUS3US3 self) -> bool

        Tell
        if the boundary condition can index to any location within the
        associated iterator's neighborhood or if it has some limited subset
        (such as none) that it relies upon. Subclasses should override this
        method if they can safely limit indexes to active pixels (or no
        pixels). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_RequiresCompleteNeighborhood(self)


    def GetInputRequestedRegion(self, inputLargestPossibleRegion: 'itkImageRegion3', outputRequestedRegion: 'itkImageRegion3') -> "itkImageRegion3":
        """
        GetInputRequestedRegion(itkImageBoundaryConditionUS3US3 self, itkImageRegion3 inputLargestPossibleRegion, itkImageRegion3 outputRequestedRegion) -> itkImageRegion3

        Determines
        the necessary input region for an output region given the largest
        possible region of the input image. Subclasses should override this
        method to efficiently support streaming.

        Parameters:
        -----------

        inputLargestPossibleRegion:  Largest possible region of the input
        image.

        outputRequestedRegion:  The output requested region.

        The necessary input region required to determine the pixel values in
        the outputRequestedRegion. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetInputRequestedRegion(self, inputLargestPossibleRegion, outputRequestedRegion)


    def GetPixel(self, index: 'itkIndex3', image: 'itkImageUS3') -> "unsigned short":
        """
        GetPixel(itkImageBoundaryConditionUS3US3 self, itkIndex3 index, itkImageUS3 image) -> unsigned short

        Returns a value for a
        given pixel at an index. If the index is inside the bounds of the
        input image, then the pixel value is obtained from the input image.
        Otherwise, the pixel value is determined according to the boundary
        condition type.

        Parameters:
        -----------

        index:  The index of the desired pixel.

        image:  The image from which pixel values should be determined. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetPixel(self, index, image)

itkImageBoundaryConditionUS3US3.GetNameOfClass = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetNameOfClass, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3.Print = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_Print, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3.__call__ = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3___call__, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3.RequiresCompleteNeighborhood = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_RequiresCompleteNeighborhood, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3.GetInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetInputRequestedRegion, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3.GetPixel = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetPixel, None, itkImageBoundaryConditionUS3US3)
itkImageBoundaryConditionUS3US3_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_swigregister
itkImageBoundaryConditionUS3US3_swigregister(itkImageBoundaryConditionUS3US3)

class itkNeighborhoodOperatorImageFilterD2D2D(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterD2D2D_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterD2D2D_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterD2D2D_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterD2D2D self) -> itkNeighborhoodOperatorImageFilterD2D2D_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodD2') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterD2D2D self, itkNeighborhoodD2 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodD2 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterD2D2D self) -> itkNeighborhoodD2

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionD2D2') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterD2D2D self, itkImageBoundaryConditionD2D2 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionD2D2 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterD2D2D self) -> itkImageBoundaryConditionD2D2

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterD2D2D self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterD2D2D

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterD2D2D *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterD2D2D"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterD2D2D

        Create a new object of the class itkNeighborhoodOperatorImageFilterD2D2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterD2D2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterD2D2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterD2D2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterD2D2D.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_Clone, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_SetOperator, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetOperator, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_swigregister
itkNeighborhoodOperatorImageFilterD2D2D_swigregister(itkNeighborhoodOperatorImageFilterD2D2D)

def itkNeighborhoodOperatorImageFilterD2D2D___New_orig__() -> "itkNeighborhoodOperatorImageFilterD2D2D_Pointer":
    """itkNeighborhoodOperatorImageFilterD2D2D___New_orig__() -> itkNeighborhoodOperatorImageFilterD2D2D_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D___New_orig__()

def itkNeighborhoodOperatorImageFilterD2D2D_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterD2D2D *":
    """itkNeighborhoodOperatorImageFilterD2D2D_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterD2D2D"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_cast(obj)

class itkNeighborhoodOperatorImageFilterD3D3D(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterD3D3D_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterD3D3D_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterD3D3D_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterD3D3D self) -> itkNeighborhoodOperatorImageFilterD3D3D_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodD3') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterD3D3D self, itkNeighborhoodD3 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodD3 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterD3D3D self) -> itkNeighborhoodD3

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionD3D3') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterD3D3D self, itkImageBoundaryConditionD3D3 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionD3D3 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterD3D3D self) -> itkImageBoundaryConditionD3D3

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterD3D3D self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterD3D3D

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterD3D3D *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterD3D3D"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterD3D3D

        Create a new object of the class itkNeighborhoodOperatorImageFilterD3D3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterD3D3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterD3D3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterD3D3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterD3D3D.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_Clone, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_SetOperator, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetOperator, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_swigregister
itkNeighborhoodOperatorImageFilterD3D3D_swigregister(itkNeighborhoodOperatorImageFilterD3D3D)

def itkNeighborhoodOperatorImageFilterD3D3D___New_orig__() -> "itkNeighborhoodOperatorImageFilterD3D3D_Pointer":
    """itkNeighborhoodOperatorImageFilterD3D3D___New_orig__() -> itkNeighborhoodOperatorImageFilterD3D3D_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D___New_orig__()

def itkNeighborhoodOperatorImageFilterD3D3D_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterD3D3D *":
    """itkNeighborhoodOperatorImageFilterD3D3D_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterD3D3D"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_cast(obj)

class itkNeighborhoodOperatorImageFilterF2F2F(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterF2F2F_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterF2F2F_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterF2F2F_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterF2F2F self) -> itkNeighborhoodOperatorImageFilterF2F2F_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodF2') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterF2F2F self, itkNeighborhoodF2 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodF2 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterF2F2F self) -> itkNeighborhoodF2

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionF2F2') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterF2F2F self, itkImageBoundaryConditionF2F2 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionF2F2 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterF2F2F self) -> itkImageBoundaryConditionF2F2

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterF2F2F self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterF2F2F

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterF2F2F *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterF2F2F"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterF2F2F

        Create a new object of the class itkNeighborhoodOperatorImageFilterF2F2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterF2F2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterF2F2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterF2F2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterF2F2F.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_Clone, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_SetOperator, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetOperator, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_swigregister
itkNeighborhoodOperatorImageFilterF2F2F_swigregister(itkNeighborhoodOperatorImageFilterF2F2F)

def itkNeighborhoodOperatorImageFilterF2F2F___New_orig__() -> "itkNeighborhoodOperatorImageFilterF2F2F_Pointer":
    """itkNeighborhoodOperatorImageFilterF2F2F___New_orig__() -> itkNeighborhoodOperatorImageFilterF2F2F_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F___New_orig__()

def itkNeighborhoodOperatorImageFilterF2F2F_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterF2F2F *":
    """itkNeighborhoodOperatorImageFilterF2F2F_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterF2F2F"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_cast(obj)

class itkNeighborhoodOperatorImageFilterF3F3F(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterF3F3F_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterF3F3F_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterF3F3F_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterF3F3F self) -> itkNeighborhoodOperatorImageFilterF3F3F_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodF3') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterF3F3F self, itkNeighborhoodF3 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodF3 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterF3F3F self) -> itkNeighborhoodF3

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionF3F3') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterF3F3F self, itkImageBoundaryConditionF3F3 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionF3F3 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterF3F3F self) -> itkImageBoundaryConditionF3F3

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterF3F3F self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterF3F3F

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterF3F3F *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterF3F3F"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterF3F3F

        Create a new object of the class itkNeighborhoodOperatorImageFilterF3F3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterF3F3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterF3F3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterF3F3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterF3F3F.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_Clone, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_SetOperator, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetOperator, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_swigregister
itkNeighborhoodOperatorImageFilterF3F3F_swigregister(itkNeighborhoodOperatorImageFilterF3F3F)

def itkNeighborhoodOperatorImageFilterF3F3F___New_orig__() -> "itkNeighborhoodOperatorImageFilterF3F3F_Pointer":
    """itkNeighborhoodOperatorImageFilterF3F3F___New_orig__() -> itkNeighborhoodOperatorImageFilterF3F3F_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F___New_orig__()

def itkNeighborhoodOperatorImageFilterF3F3F_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterF3F3F *":
    """itkNeighborhoodOperatorImageFilterF3F3F_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterF3F3F"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_cast(obj)

class itkNeighborhoodOperatorImageFilterSS2SS2SS(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterSS2SS2SS self) -> itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodSS2') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterSS2SS2SS self, itkNeighborhoodSS2 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodSS2 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterSS2SS2SS self) -> itkNeighborhoodSS2

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionSS2SS2') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterSS2SS2SS self, itkImageBoundaryConditionSS2SS2 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionSS2SS2 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterSS2SS2SS self) -> itkImageBoundaryConditionSS2SS2

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterSS2SS2SS self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterSS2SS2SS

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterSS2SS2SS *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterSS2SS2SS"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterSS2SS2SS

        Create a new object of the class itkNeighborhoodOperatorImageFilterSS2SS2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterSS2SS2SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterSS2SS2SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterSS2SS2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterSS2SS2SS.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_Clone, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_SetOperator, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetOperator, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_swigregister
itkNeighborhoodOperatorImageFilterSS2SS2SS_swigregister(itkNeighborhoodOperatorImageFilterSS2SS2SS)

def itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__() -> "itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer":
    """itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__() -> itkNeighborhoodOperatorImageFilterSS2SS2SS_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__()

def itkNeighborhoodOperatorImageFilterSS2SS2SS_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterSS2SS2SS *":
    """itkNeighborhoodOperatorImageFilterSS2SS2SS_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterSS2SS2SS"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_cast(obj)

class itkNeighborhoodOperatorImageFilterSS3SS3SS(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterSS3SS3SS self) -> itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodSS3') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterSS3SS3SS self, itkNeighborhoodSS3 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodSS3 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterSS3SS3SS self) -> itkNeighborhoodSS3

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionSS3SS3') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterSS3SS3SS self, itkImageBoundaryConditionSS3SS3 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionSS3SS3 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterSS3SS3SS self) -> itkImageBoundaryConditionSS3SS3

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterSS3SS3SS self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterSS3SS3SS

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterSS3SS3SS *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterSS3SS3SS"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterSS3SS3SS

        Create a new object of the class itkNeighborhoodOperatorImageFilterSS3SS3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterSS3SS3SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterSS3SS3SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterSS3SS3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterSS3SS3SS.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_Clone, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_SetOperator, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetOperator, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_swigregister
itkNeighborhoodOperatorImageFilterSS3SS3SS_swigregister(itkNeighborhoodOperatorImageFilterSS3SS3SS)

def itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__() -> "itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer":
    """itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__() -> itkNeighborhoodOperatorImageFilterSS3SS3SS_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__()

def itkNeighborhoodOperatorImageFilterSS3SS3SS_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterSS3SS3SS *":
    """itkNeighborhoodOperatorImageFilterSS3SS3SS_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterSS3SS3SS"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_cast(obj)

class itkNeighborhoodOperatorImageFilterUC2UC2UC(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterUC2UC2UC self) -> itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodUC2') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterUC2UC2UC self, itkNeighborhoodUC2 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodUC2 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterUC2UC2UC self) -> itkNeighborhoodUC2

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionUC2UC2') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterUC2UC2UC self, itkImageBoundaryConditionUC2UC2 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionUC2UC2 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterUC2UC2UC self) -> itkImageBoundaryConditionUC2UC2

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterUC2UC2UC self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUC2UC2UC

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUC2UC2UC *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUC2UC2UC"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUC2UC2UC

        Create a new object of the class itkNeighborhoodOperatorImageFilterUC2UC2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUC2UC2UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUC2UC2UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterUC2UC2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterUC2UC2UC.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_Clone, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_SetOperator, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetOperator, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_swigregister
itkNeighborhoodOperatorImageFilterUC2UC2UC_swigregister(itkNeighborhoodOperatorImageFilterUC2UC2UC)

def itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__() -> "itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer":
    """itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__() -> itkNeighborhoodOperatorImageFilterUC2UC2UC_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__()

def itkNeighborhoodOperatorImageFilterUC2UC2UC_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUC2UC2UC *":
    """itkNeighborhoodOperatorImageFilterUC2UC2UC_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUC2UC2UC"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_cast(obj)

class itkNeighborhoodOperatorImageFilterUC3UC3UC(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterUC3UC3UC self) -> itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodUC3') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterUC3UC3UC self, itkNeighborhoodUC3 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodUC3 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterUC3UC3UC self) -> itkNeighborhoodUC3

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionUC3UC3') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterUC3UC3UC self, itkImageBoundaryConditionUC3UC3 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionUC3UC3 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterUC3UC3UC self) -> itkImageBoundaryConditionUC3UC3

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterUC3UC3UC self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUC3UC3UC

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUC3UC3UC *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUC3UC3UC"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUC3UC3UC

        Create a new object of the class itkNeighborhoodOperatorImageFilterUC3UC3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUC3UC3UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUC3UC3UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterUC3UC3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterUC3UC3UC.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_Clone, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_SetOperator, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetOperator, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_swigregister
itkNeighborhoodOperatorImageFilterUC3UC3UC_swigregister(itkNeighborhoodOperatorImageFilterUC3UC3UC)

def itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__() -> "itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer":
    """itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__() -> itkNeighborhoodOperatorImageFilterUC3UC3UC_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__()

def itkNeighborhoodOperatorImageFilterUC3UC3UC_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUC3UC3UC *":
    """itkNeighborhoodOperatorImageFilterUC3UC3UC_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUC3UC3UC"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_cast(obj)

class itkNeighborhoodOperatorImageFilterUS2US2US(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterUS2US2US_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterUS2US2US_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterUS2US2US_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterUS2US2US self) -> itkNeighborhoodOperatorImageFilterUS2US2US_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodUS2') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterUS2US2US self, itkNeighborhoodUS2 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodUS2 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterUS2US2US self) -> itkNeighborhoodUS2

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionUS2US2') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterUS2US2US self, itkImageBoundaryConditionUS2US2 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionUS2US2 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterUS2US2US self) -> itkImageBoundaryConditionUS2US2

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterUS2US2US self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUS2US2US

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUS2US2US *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUS2US2US"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUS2US2US

        Create a new object of the class itkNeighborhoodOperatorImageFilterUS2US2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUS2US2US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUS2US2US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterUS2US2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterUS2US2US.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_Clone, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_SetOperator, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetOperator, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_swigregister
itkNeighborhoodOperatorImageFilterUS2US2US_swigregister(itkNeighborhoodOperatorImageFilterUS2US2US)

def itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__() -> "itkNeighborhoodOperatorImageFilterUS2US2US_Pointer":
    """itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__() -> itkNeighborhoodOperatorImageFilterUS2US2US_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__()

def itkNeighborhoodOperatorImageFilterUS2US2US_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUS2US2US *":
    """itkNeighborhoodOperatorImageFilterUS2US2US_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUS2US2US"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_cast(obj)

class itkNeighborhoodOperatorImageFilterUS3US3US(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageFilterBase/ApplyKernelToE
    veryPixel,Apply Kernel To Every Pixel} \\endsphinx

    C++ includes: itkNeighborhoodOperatorImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNeighborhoodOperatorImageFilterUS3US3US_Pointer":
        """__New_orig__() -> itkNeighborhoodOperatorImageFilterUS3US3US_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNeighborhoodOperatorImageFilterUS3US3US_Pointer":
        """Clone(itkNeighborhoodOperatorImageFilterUS3US3US self) -> itkNeighborhoodOperatorImageFilterUS3US3US_Pointer"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_Clone(self)


    def SetOperator(self, p: 'itkNeighborhoodUS3') -> "void":
        """
        SetOperator(itkNeighborhoodOperatorImageFilterUS3US3US self, itkNeighborhoodUS3 p)

        Sets the operator that
        is used to filter the image. Note that the operator is stored as an
        internal COPY (it is not part of the pipeline). 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_SetOperator(self, p)


    def GetOperator(self) -> "itkNeighborhoodUS3 const &":
        """
        GetOperator(itkNeighborhoodOperatorImageFilterUS3US3US self) -> itkNeighborhoodUS3

        Get the operator that
        is used to filter the image. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetOperator(self)


    def OverrideBoundaryCondition(self, i: 'itkImageBoundaryConditionUS3US3') -> "void":
        """
        OverrideBoundaryCondition(itkNeighborhoodOperatorImageFilterUS3US3US self, itkImageBoundaryConditionUS3US3 i)

        Allows a
        user to override the internal boundary condition. Care should be be
        taken to ensure that the overriding boundary condition is a persistent
        object during the time it is referenced. The overriding condition can
        be of a different type than the default type as long as it is a
        subclass of ImageBoundaryCondition. 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OverrideBoundaryCondition(self, i)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionUS3US3 *":
        """
        GetBoundaryCondition(itkNeighborhoodOperatorImageFilterUS3US3US self) -> itkImageBoundaryConditionUS3US3

        Get the
        boundary condition specified 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetBoundaryCondition(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkNeighborhoodOperatorImageFilterUS3US3US self)

        NeighborhoodOperatorImageFilter needs a larger input requested region
        than the output requested region. As such,
        NeighborhoodOperatorImageFilter needs to provide an implementation for
        GenerateInputRequestedRegion() in order to inform the pipeline
        execution model.

        See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GenerateInputRequestedRegion(self)

    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_SameDimensionCheck
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorConvertibleToOutputCheck
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_InputConvertibleToOperatorCheck
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorMultiplyOperatorCheck
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorAdditiveOperatorsCheck
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUS3US3US

    def cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUS3US3US *":
        """cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUS3US3US"""
        return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUS3US3US

        Create a new object of the class itkNeighborhoodOperatorImageFilterUS3US3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUS3US3US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUS3US3US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNeighborhoodOperatorImageFilterUS3US3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNeighborhoodOperatorImageFilterUS3US3US.Clone = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_Clone, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US.SetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_SetOperator, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US.GetOperator = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetOperator, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US.OverrideBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OverrideBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US.GetBoundaryCondition = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetBoundaryCondition, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US.GenerateInputRequestedRegion = new_instancemethod(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GenerateInputRequestedRegion, None, itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US_swigregister = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_swigregister
itkNeighborhoodOperatorImageFilterUS3US3US_swigregister(itkNeighborhoodOperatorImageFilterUS3US3US)

def itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__() -> "itkNeighborhoodOperatorImageFilterUS3US3US_Pointer":
    """itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__() -> itkNeighborhoodOperatorImageFilterUS3US3US_Pointer"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__()

def itkNeighborhoodOperatorImageFilterUS3US3US_cast(obj: 'itkLightObject') -> "itkNeighborhoodOperatorImageFilterUS3US3US *":
    """itkNeighborhoodOperatorImageFilterUS3US3US_cast(itkLightObject obj) -> itkNeighborhoodOperatorImageFilterUS3US3US"""
    return _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def neighborhood_operator_image_filter(*args, **kwargs):
    """Procedural interface for NeighborhoodOperatorImageFilter"""
    import itk
    instance = itk.NeighborhoodOperatorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def neighborhood_operator_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NeighborhoodOperatorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NeighborhoodOperatorImageFilter.values()[0]
    else:
        filter_object = itk.NeighborhoodOperatorImageFilter

    neighborhood_operator_image_filter.__doc__ = filter_object.__doc__
    neighborhood_operator_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    neighborhood_operator_image_filter.__doc__ += "Available Keyword Arguments:\n"
    neighborhood_operator_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



