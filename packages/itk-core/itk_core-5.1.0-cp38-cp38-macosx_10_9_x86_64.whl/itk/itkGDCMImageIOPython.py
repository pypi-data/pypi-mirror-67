# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGDCMImageIOPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGDCMImageIOPython', [dirname(__file__)])
        except ImportError:
            import _itkGDCMImageIOPython
            return _itkGDCMImageIOPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGDCMImageIOPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGDCMImageIOPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGDCMImageIOPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import ITKIOImageBaseBasePython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython

def itkGDCMImageIO_New():
  return itkGDCMImageIO.New()


def itkGDCMSeriesFileNames_New():
  return itkGDCMSeriesFileNames.New()


def itkGDCMImageIOFactory_New():
  return itkGDCMImageIOFactory.New()

class itkGDCMImageIO(ITKIOImageBaseBasePython.itkImageIOBase):
    """


    ImageIO class for reading and writing DICOM V3.0 and ACR/NEMA 1&2
    uncompressed images. This class is only an adaptor to the GDCM
    library.

    GDCM can be found at:http://sourceforge.net/projects/gdcm

    To learn more about the revision shipped with ITK, call

    git log Modules/ThirdParty/GDCM/src/

    From an ITK Git checkout.

    GDCM build, instead of the one included within ITK itself.

    The compressors supported include "JPEG2000" (default), and
    "JPEG". The compression level parameter is not supported.

    WARNING:  There are several restrictions to this current writer: Even
    though during the writing process you pass in a DICOM file as input
    The output file may not contains ALL DICOM field from the input file.
    In particular: The SeQuence DICOM field (SQ).

    Fields from Private Dictionary.

    Some very long (>0xfff) binary fields are not loaded (typically
    0029|0010), you need to explicitly set the maximum length of elements
    to load to be bigger (see Get/SetMaxSizeLoadEntry).

    In DICOM some fields are stored directly using their binary
    representation. When loaded into the MetaDataDictionary some fields
    are converted to ASCII (only VR: OB/OW/OF and UN are encoded as
    mime64).

    \\sphinx \\sphinxexample{IO/GDCM/ResamleDICOMSeries,Resample DICOM
    Series} \\sphinxexample{IO/GDCM/ReadDICOMSeriesAndWrite3DImage,Read
    DICOM Series and Write 3D Image} \\endsphinx

    C++ includes: itkGDCMImageIO.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGDCMImageIO_Pointer":
        """__New_orig__() -> itkGDCMImageIO_Pointer"""
        return _itkGDCMImageIOPython.itkGDCMImageIO___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGDCMImageIO_Pointer":
        """Clone(itkGDCMImageIO self) -> itkGDCMImageIO_Pointer"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_Clone(self)


    def GetInternalComponentType(self) -> "itkCommonEnums::IOComponent":
        """GetInternalComponentType(itkGDCMImageIO self) -> itkCommonEnums::IOComponent"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetInternalComponentType(self)


    def SetInternalComponentType(self, _arg: 'itkCommonEnums::IOComponent const') -> "void":
        """SetInternalComponentType(itkGDCMImageIO self, itkCommonEnums::IOComponent const _arg)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetInternalComponentType(self, _arg)


    def GetRescaleSlope(self) -> "double":
        """
        GetRescaleSlope(itkGDCMImageIO self) -> double

        Macro to access
        Rescale Slope and Rescale Intercept. Which are needed to rescale
        properly image when needed. User then need to Always check those value
        when access value from the DICOM header 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetRescaleSlope(self)


    def GetRescaleIntercept(self) -> "double":
        """GetRescaleIntercept(itkGDCMImageIO self) -> double"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetRescaleIntercept(self)


    def GetUIDPrefix(self) -> "char const *":
        """
        GetUIDPrefix(itkGDCMImageIO self) -> char const *

        Macro to access the
        DICOM UID prefix. By default this is the ITK root id. This default can
        be overriden if the exam is for example part of an existing study. 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetUIDPrefix(self)


    def SetUIDPrefix(self, *args) -> "void":
        """
        SetUIDPrefix(itkGDCMImageIO self, char const * _arg)
        SetUIDPrefix(itkGDCMImageIO self, std::string const & _arg)
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetUIDPrefix(self, *args)


    def GetStudyInstanceUID(self) -> "char const *":
        """
        GetStudyInstanceUID(itkGDCMImageIO self) -> char const *

        Access the
        generated DICOM UID's. 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetStudyInstanceUID(self)


    def GetSeriesInstanceUID(self) -> "char const *":
        """GetSeriesInstanceUID(itkGDCMImageIO self) -> char const *"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetSeriesInstanceUID(self)


    def GetFrameOfReferenceInstanceUID(self) -> "char const *":
        """GetFrameOfReferenceInstanceUID(itkGDCMImageIO self) -> char const *"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetFrameOfReferenceInstanceUID(self)


    def SetKeepOriginalUID(self, _arg: 'bool const') -> "void":
        """
        SetKeepOriginalUID(itkGDCMImageIO self, bool const _arg)

        Preserve the
        original DICOM UID of the input files 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetKeepOriginalUID(self, _arg)


    def GetKeepOriginalUID(self) -> "bool":
        """GetKeepOriginalUID(itkGDCMImageIO self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetKeepOriginalUID(self)


    def KeepOriginalUIDOn(self) -> "void":
        """KeepOriginalUIDOn(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_KeepOriginalUIDOn(self)


    def KeepOriginalUIDOff(self) -> "void":
        """KeepOriginalUIDOff(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_KeepOriginalUIDOff(self)


    def SetLoadPrivateTags(self, _arg: 'bool const') -> "void":
        """
        SetLoadPrivateTags(itkGDCMImageIO self, bool const _arg)

        Parse and load
        any private tags in the DICOM file. Loading DICOM files is faster when
        private tags are not needed. Default is false. 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetLoadPrivateTags(self, _arg)


    def GetLoadPrivateTags(self) -> "bool":
        """GetLoadPrivateTags(itkGDCMImageIO self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetLoadPrivateTags(self)


    def LoadPrivateTagsOn(self) -> "void":
        """LoadPrivateTagsOn(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_LoadPrivateTagsOn(self)


    def LoadPrivateTagsOff(self) -> "void":
        """LoadPrivateTagsOff(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_LoadPrivateTagsOff(self)


    def SetReadYBRtoRGB(self, _arg: 'bool const') -> "void":
        """
        SetReadYBRtoRGB(itkGDCMImageIO self, bool const _arg)

        Convert Y'CbCr
        (YBR_FULL, YBR_FULL_422) to RGB. Default is true. Not required for
        YBR_RCT and YBR_ICT. 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetReadYBRtoRGB(self, _arg)


    def GetReadYBRtoRGB(self) -> "bool":
        """GetReadYBRtoRGB(itkGDCMImageIO self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetReadYBRtoRGB(self)


    def ReadYBRtoRGBOn(self) -> "void":
        """ReadYBRtoRGBOn(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_ReadYBRtoRGBOn(self)


    def ReadYBRtoRGBOff(self) -> "void":
        """ReadYBRtoRGBOff(itkGDCMImageIO self)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_ReadYBRtoRGBOff(self)


    def GetValueFromTag(self, tag: 'std::string const &', value: 'std::string &') -> "bool":
        """
        GetValueFromTag(itkGDCMImageIO self, std::string const & tag, std::string & value) -> bool

        More general method
        to retrieve an arbitrary DICOM value based on a DICOM Tag (eg
        "0123|45ef"). 
        """
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetValueFromTag(self, tag, value)


    def GetLabelFromTag(tag: 'std::string const &', labelId: 'std::string &') -> "std::string &":
        """GetLabelFromTag(std::string const & tag, std::string & labelId) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetLabelFromTag(tag, labelId)

    GetLabelFromTag = staticmethod(GetLabelFromTag)

    def SetCompressionType(self, _arg: 'itkGDCMImageIOEnums::Compression const') -> "void":
        """SetCompressionType(itkGDCMImageIO self, itkGDCMImageIOEnums::Compression const _arg)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_SetCompressionType(self, _arg)


    def GetCompressionType(self) -> "itkGDCMImageIOEnums::Compression":
        """GetCompressionType(itkGDCMImageIO self) -> itkGDCMImageIOEnums::Compression"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_GetCompressionType(self)


    def InternalSetCompressor(self, _compressor: 'std::string const &') -> "void":
        """InternalSetCompressor(itkGDCMImageIO self, std::string const & _compressor)"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_InternalSetCompressor(self, _compressor)

    __swig_destroy__ = _itkGDCMImageIOPython.delete_itkGDCMImageIO

    def cast(obj: 'itkLightObject') -> "itkGDCMImageIO *":
        """cast(itkLightObject obj) -> itkGDCMImageIO"""
        return _itkGDCMImageIOPython.itkGDCMImageIO_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGDCMImageIO

        Create a new object of the class itkGDCMImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGDCMImageIO.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGDCMImageIO.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGDCMImageIO.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGDCMImageIO.Clone = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_Clone, None, itkGDCMImageIO)
itkGDCMImageIO.GetInternalComponentType = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetInternalComponentType, None, itkGDCMImageIO)
itkGDCMImageIO.SetInternalComponentType = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetInternalComponentType, None, itkGDCMImageIO)
itkGDCMImageIO.GetRescaleSlope = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetRescaleSlope, None, itkGDCMImageIO)
itkGDCMImageIO.GetRescaleIntercept = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetRescaleIntercept, None, itkGDCMImageIO)
itkGDCMImageIO.GetUIDPrefix = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetUIDPrefix, None, itkGDCMImageIO)
itkGDCMImageIO.SetUIDPrefix = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetUIDPrefix, None, itkGDCMImageIO)
itkGDCMImageIO.GetStudyInstanceUID = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetStudyInstanceUID, None, itkGDCMImageIO)
itkGDCMImageIO.GetSeriesInstanceUID = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetSeriesInstanceUID, None, itkGDCMImageIO)
itkGDCMImageIO.GetFrameOfReferenceInstanceUID = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetFrameOfReferenceInstanceUID, None, itkGDCMImageIO)
itkGDCMImageIO.SetKeepOriginalUID = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetKeepOriginalUID, None, itkGDCMImageIO)
itkGDCMImageIO.GetKeepOriginalUID = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetKeepOriginalUID, None, itkGDCMImageIO)
itkGDCMImageIO.KeepOriginalUIDOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_KeepOriginalUIDOn, None, itkGDCMImageIO)
itkGDCMImageIO.KeepOriginalUIDOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_KeepOriginalUIDOff, None, itkGDCMImageIO)
itkGDCMImageIO.SetLoadPrivateTags = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetLoadPrivateTags, None, itkGDCMImageIO)
itkGDCMImageIO.GetLoadPrivateTags = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetLoadPrivateTags, None, itkGDCMImageIO)
itkGDCMImageIO.LoadPrivateTagsOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_LoadPrivateTagsOn, None, itkGDCMImageIO)
itkGDCMImageIO.LoadPrivateTagsOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_LoadPrivateTagsOff, None, itkGDCMImageIO)
itkGDCMImageIO.SetReadYBRtoRGB = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetReadYBRtoRGB, None, itkGDCMImageIO)
itkGDCMImageIO.GetReadYBRtoRGB = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetReadYBRtoRGB, None, itkGDCMImageIO)
itkGDCMImageIO.ReadYBRtoRGBOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_ReadYBRtoRGBOn, None, itkGDCMImageIO)
itkGDCMImageIO.ReadYBRtoRGBOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_ReadYBRtoRGBOff, None, itkGDCMImageIO)
itkGDCMImageIO.GetValueFromTag = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetValueFromTag, None, itkGDCMImageIO)
itkGDCMImageIO.SetCompressionType = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_SetCompressionType, None, itkGDCMImageIO)
itkGDCMImageIO.GetCompressionType = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_GetCompressionType, None, itkGDCMImageIO)
itkGDCMImageIO.InternalSetCompressor = new_instancemethod(_itkGDCMImageIOPython.itkGDCMImageIO_InternalSetCompressor, None, itkGDCMImageIO)
itkGDCMImageIO_swigregister = _itkGDCMImageIOPython.itkGDCMImageIO_swigregister
itkGDCMImageIO_swigregister(itkGDCMImageIO)

def itkGDCMImageIO___New_orig__() -> "itkGDCMImageIO_Pointer":
    """itkGDCMImageIO___New_orig__() -> itkGDCMImageIO_Pointer"""
    return _itkGDCMImageIOPython.itkGDCMImageIO___New_orig__()

def itkGDCMImageIO_GetLabelFromTag(tag: 'std::string const &', labelId: 'std::string &') -> "std::string &":
    """itkGDCMImageIO_GetLabelFromTag(std::string const & tag, std::string & labelId) -> bool"""
    return _itkGDCMImageIOPython.itkGDCMImageIO_GetLabelFromTag(tag, labelId)

def itkGDCMImageIO_cast(obj: 'itkLightObject') -> "itkGDCMImageIO *":
    """itkGDCMImageIO_cast(itkLightObject obj) -> itkGDCMImageIO"""
    return _itkGDCMImageIOPython.itkGDCMImageIO_cast(obj)

class itkGDCMImageIOEnums(object):
    """Proxy of C++ itkGDCMImageIOEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Compression_JPEG = _itkGDCMImageIOPython.itkGDCMImageIOEnums_Compression_JPEG
    Compression_JPEG2000 = _itkGDCMImageIOPython.itkGDCMImageIOEnums_Compression_JPEG2000
    Compression_JPEGLS = _itkGDCMImageIOPython.itkGDCMImageIOEnums_Compression_JPEGLS
    Compression_RLE = _itkGDCMImageIOPython.itkGDCMImageIOEnums_Compression_RLE

    def __init__(self, *args):
        """
        __init__(itkGDCMImageIOEnums self) -> itkGDCMImageIOEnums
        __init__(itkGDCMImageIOEnums self, itkGDCMImageIOEnums arg0) -> itkGDCMImageIOEnums
        """
        _itkGDCMImageIOPython.itkGDCMImageIOEnums_swiginit(self, _itkGDCMImageIOPython.new_itkGDCMImageIOEnums(*args))
    __swig_destroy__ = _itkGDCMImageIOPython.delete_itkGDCMImageIOEnums
itkGDCMImageIOEnums_swigregister = _itkGDCMImageIOPython.itkGDCMImageIOEnums_swigregister
itkGDCMImageIOEnums_swigregister(itkGDCMImageIOEnums)

class itkGDCMImageIOFactory(ITKCommonBasePython.itkObjectFactoryBase):
    """


    Create instances of GDCMImageIO objects using an object factory.

    C++ includes: itkGDCMImageIOFactory.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGDCMImageIOFactory_Pointer":
        """__New_orig__() -> itkGDCMImageIOFactory_Pointer"""
        return _itkGDCMImageIOPython.itkGDCMImageIOFactory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def RegisterOneFactory() -> "void":
        """RegisterOneFactory()"""
        return _itkGDCMImageIOPython.itkGDCMImageIOFactory_RegisterOneFactory()

    RegisterOneFactory = staticmethod(RegisterOneFactory)
    __swig_destroy__ = _itkGDCMImageIOPython.delete_itkGDCMImageIOFactory

    def cast(obj: 'itkLightObject') -> "itkGDCMImageIOFactory *":
        """cast(itkLightObject obj) -> itkGDCMImageIOFactory"""
        return _itkGDCMImageIOPython.itkGDCMImageIOFactory_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGDCMImageIOFactory

        Create a new object of the class itkGDCMImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGDCMImageIOFactory.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGDCMImageIOFactory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGDCMImageIOFactory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGDCMImageIOFactory_swigregister = _itkGDCMImageIOPython.itkGDCMImageIOFactory_swigregister
itkGDCMImageIOFactory_swigregister(itkGDCMImageIOFactory)

def itkGDCMImageIOFactory___New_orig__() -> "itkGDCMImageIOFactory_Pointer":
    """itkGDCMImageIOFactory___New_orig__() -> itkGDCMImageIOFactory_Pointer"""
    return _itkGDCMImageIOPython.itkGDCMImageIOFactory___New_orig__()

def itkGDCMImageIOFactory_RegisterOneFactory() -> "void":
    """itkGDCMImageIOFactory_RegisterOneFactory()"""
    return _itkGDCMImageIOPython.itkGDCMImageIOFactory_RegisterOneFactory()

def itkGDCMImageIOFactory_cast(obj: 'itkLightObject') -> "itkGDCMImageIOFactory *":
    """itkGDCMImageIOFactory_cast(itkLightObject obj) -> itkGDCMImageIOFactory"""
    return _itkGDCMImageIOPython.itkGDCMImageIOFactory_cast(obj)

class itkGDCMSeriesFileNames(ITKCommonBasePython.itkProcessObject):
    """


    Generate a sequence of filenames from a DICOM series.

    This class generates a sequence of files whose filenames point to a
    DICOM file. The ordering is based on the following strategy: Read all
    images in the directory (assuming there is only one study/series)

    Extract Image Orientation & Image Position from DICOM images, and then
    calculate the ordering based on the 3D coordinate of the slice.

    If for some reason this information is not found or failed, another
    strategy is used: the ordering is based on 'Instance Number'.

    If this strategy also failed, then the filenames are ordered by
    lexicographical order.

    If multiple volumes are being grouped as a single series for your
    DICOM objects, you may want to try calling SetUseSeriesDetails(true)
    prior to calling SetDirectory().

    C++ includes: itkGDCMSeriesFileNames.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGDCMSeriesFileNames_Pointer":
        """__New_orig__() -> itkGDCMSeriesFileNames_Pointer"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGDCMSeriesFileNames_Pointer":
        """Clone(itkGDCMSeriesFileNames self) -> itkGDCMSeriesFileNames_Pointer"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_Clone(self)


    def SetInputDirectory(self, *args) -> "void":
        """
        SetInputDirectory(itkGDCMSeriesFileNames self, char const * name)
        SetInputDirectory(itkGDCMSeriesFileNames self, std::string const & name)

        Set the directory
        that contains the DICOM series. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetInputDirectory(self, *args)


    def SetDirectory(self, name: 'std::string const &') -> "void":
        """
        SetDirectory(itkGDCMSeriesFileNames self, std::string const & name)

        Set the directory that
        contains the DICOM series. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetDirectory(self, name)


    def GetInputFileNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        """
        GetInputFileNames(itkGDCMSeriesFileNames self) -> vectorstring

        Returns a vector
        containing the series' file names. The file names are ordered by the
        strategy define in header. No sorting is done based on UID 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetInputFileNames(self)


    def SetOutputDirectory(self, name: 'std::string const &') -> "void":
        """
        SetOutputDirectory(itkGDCMSeriesFileNames self, std::string const & name)

        Set the
        directory where the output DICOM serie should be written. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetOutputDirectory(self, name)


    def GetOutputFileNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        """
        GetOutputFileNames(itkGDCMSeriesFileNames self) -> vectorstring

        Returns a vector
        containing the series' file names. The file names are ordered in the
        same exact order as the input one. This could be dangerous if the
        writing has changed 3rd position or some other DICOM tag in the header

        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetOutputFileNames(self)


    def GetFileNames(self, serie: 'std::string const') -> "std::vector< std::string,std::allocator< std::string > > const &":
        """
        GetFileNames(itkGDCMSeriesFileNames self, std::string const serie) -> vectorstring

        Returns a vector
        containing the series' file names. The file names are ordered by the
        strategy define in header. All DICOM files have the same exact UID
        equal to the one user's specified. An extended UID may be
        returned/used if SetUseSeriesDetails(true) has been called. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetFileNames(self, serie)


    def GetSeriesUIDs(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        """
        GetSeriesUIDs(itkGDCMSeriesFileNames self) -> vectorstring

        Returns a vector
        containing all the UIDs found when parsing the direcory specified via
        SetDirectory. If no direcory is specified return an empty vector. An
        extended UID may be returned/used if SetUseSeriesDetails(true) has
        been called. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetSeriesUIDs(self)


    def SetRecursive(self, _arg: 'bool const') -> "void":
        """
        SetRecursive(itkGDCMSeriesFileNames self, bool const _arg)

        Recursively parse the
        input directory. Must be set before the call to SetInputDirectory().

        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetRecursive(self, _arg)


    def GetRecursive(self) -> "bool":
        """GetRecursive(itkGDCMSeriesFileNames self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetRecursive(self)


    def RecursiveOn(self) -> "void":
        """RecursiveOn(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_RecursiveOn(self)


    def RecursiveOff(self) -> "void":
        """RecursiveOff(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_RecursiveOff(self)


    def SetUseSeriesDetails(self, useSeriesDetails: 'bool') -> "void":
        """
        SetUseSeriesDetails(itkGDCMSeriesFileNames self, bool useSeriesDetails)

        Use additional
        series information such as ProtocolName and SeriesName to identify
        when a single SeriesUID contains multiple 3D volumes - as can occur
        with perfusion and DTI imaging 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetUseSeriesDetails(self, useSeriesDetails)


    def GetUseSeriesDetails(self) -> "bool":
        """
        GetUseSeriesDetails(itkGDCMSeriesFileNames self) -> bool

        Returns true if
        using additional series information such as ProtocolName and
        SeriesName to identify when a single SeriesUID contains multiple 3D
        volumes - as can occur with perfusion and DTI imaging 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetUseSeriesDetails(self)


    def AddSeriesRestriction(self, tag: 'std::string const &') -> "void":
        """
        AddSeriesRestriction(itkGDCMSeriesFileNames self, std::string const & tag)

        Add more
        restriction on the selection of a Series. This follow the same
        approach as SetUseSeriesDetails, but allow a user to add even more
        DICOM tags to take into account for subrefining a set of DICOM files
        into multiple series. Format for tag is "group|element" of a DICOM
        tag. WARNING:  User need to set SetUseSeriesDetails(true) 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_AddSeriesRestriction(self, tag)


    def SetLoadSequences(self, _arg: 'bool const') -> "void":
        """
        SetLoadSequences(itkGDCMSeriesFileNames self, bool const _arg)

        Parse any
        sequences in the DICOM file. Defaults to false to skip sequences. This
        makes loading DICOM files faster when sequences are not needed. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetLoadSequences(self, _arg)


    def GetLoadSequences(self) -> "bool":
        """GetLoadSequences(itkGDCMSeriesFileNames self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetLoadSequences(self)


    def LoadSequencesOn(self) -> "void":
        """LoadSequencesOn(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadSequencesOn(self)


    def LoadSequencesOff(self) -> "void":
        """LoadSequencesOff(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadSequencesOff(self)


    def SetLoadPrivateTags(self, _arg: 'bool const') -> "void":
        """
        SetLoadPrivateTags(itkGDCMSeriesFileNames self, bool const _arg)

        Parse any
        private tags in the DICOM file. Defaults to false to skip private
        tags. This makes loading DICOM files faster when private tags are not
        needed. 
        """
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetLoadPrivateTags(self, _arg)


    def GetLoadPrivateTags(self) -> "bool":
        """GetLoadPrivateTags(itkGDCMSeriesFileNames self) -> bool"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetLoadPrivateTags(self)


    def LoadPrivateTagsOn(self) -> "void":
        """LoadPrivateTagsOn(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadPrivateTagsOn(self)


    def LoadPrivateTagsOff(self) -> "void":
        """LoadPrivateTagsOff(itkGDCMSeriesFileNames self)"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadPrivateTagsOff(self)

    __swig_destroy__ = _itkGDCMImageIOPython.delete_itkGDCMSeriesFileNames

    def cast(obj: 'itkLightObject') -> "itkGDCMSeriesFileNames *":
        """cast(itkLightObject obj) -> itkGDCMSeriesFileNames"""
        return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGDCMSeriesFileNames

        Create a new object of the class itkGDCMSeriesFileNames and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGDCMSeriesFileNames.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGDCMSeriesFileNames.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGDCMSeriesFileNames.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGDCMSeriesFileNames.Clone = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_Clone, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetInputDirectory = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetInputDirectory, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetDirectory = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetDirectory, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetInputFileNames = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetInputFileNames, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetOutputDirectory = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetOutputDirectory, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetOutputFileNames = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetOutputFileNames, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetFileNames = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetFileNames, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetSeriesUIDs = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetSeriesUIDs, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetRecursive = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetRecursive, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetRecursive = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetRecursive, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.RecursiveOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_RecursiveOn, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.RecursiveOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_RecursiveOff, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetUseSeriesDetails = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetUseSeriesDetails, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetUseSeriesDetails = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetUseSeriesDetails, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.AddSeriesRestriction = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_AddSeriesRestriction, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetLoadSequences = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetLoadSequences, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetLoadSequences = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetLoadSequences, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.LoadSequencesOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadSequencesOn, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.LoadSequencesOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadSequencesOff, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.SetLoadPrivateTags = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_SetLoadPrivateTags, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.GetLoadPrivateTags = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_GetLoadPrivateTags, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.LoadPrivateTagsOn = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadPrivateTagsOn, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames.LoadPrivateTagsOff = new_instancemethod(_itkGDCMImageIOPython.itkGDCMSeriesFileNames_LoadPrivateTagsOff, None, itkGDCMSeriesFileNames)
itkGDCMSeriesFileNames_swigregister = _itkGDCMImageIOPython.itkGDCMSeriesFileNames_swigregister
itkGDCMSeriesFileNames_swigregister(itkGDCMSeriesFileNames)

def itkGDCMSeriesFileNames___New_orig__() -> "itkGDCMSeriesFileNames_Pointer":
    """itkGDCMSeriesFileNames___New_orig__() -> itkGDCMSeriesFileNames_Pointer"""
    return _itkGDCMImageIOPython.itkGDCMSeriesFileNames___New_orig__()

def itkGDCMSeriesFileNames_cast(obj: 'itkLightObject') -> "itkGDCMSeriesFileNames *":
    """itkGDCMSeriesFileNames_cast(itkLightObject obj) -> itkGDCMSeriesFileNames"""
    return _itkGDCMImageIOPython.itkGDCMSeriesFileNames_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def gdcm_series_file_names(*args, **kwargs):
    """Procedural interface for GDCMSeriesFileNames"""
    import itk
    instance = itk.GDCMSeriesFileNames.New(*args, **kwargs)
    return instance.__internal_call__()

def gdcm_series_file_names_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GDCMSeriesFileNames, itkTemplate.itkTemplate):
        filter_object = itk.GDCMSeriesFileNames.values()[0]
    else:
        filter_object = itk.GDCMSeriesFileNames

    gdcm_series_file_names.__doc__ = filter_object.__doc__
    gdcm_series_file_names.__doc__ += "\n Args are Input(s) to the filter.\n"
    gdcm_series_file_names.__doc__ += "Available Keyword Arguments:\n"
    gdcm_series_file_names.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



