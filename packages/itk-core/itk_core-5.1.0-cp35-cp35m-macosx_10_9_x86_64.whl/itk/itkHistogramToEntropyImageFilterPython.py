# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramToEntropyImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramToEntropyImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramToEntropyImageFilterPython
            return _itkHistogramToEntropyImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramToEntropyImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramToEntropyImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramToEntropyImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramPython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSamplePython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkHistogramToEntropyImageFilterHDID3_New():
  return itkHistogramToEntropyImageFilterHDID3.New()


def itkHistogramToEntropyImageFilterHDID3_Superclass_New():
  return itkHistogramToEntropyImageFilterHDID3_Superclass.New()


def itkHistogramToEntropyImageFilterHFID3_New():
  return itkHistogramToEntropyImageFilterHFID3.New()


def itkHistogramToEntropyImageFilterHFID3_Superclass_New():
  return itkHistogramToEntropyImageFilterHFID3_Superclass.New()


def itkHistogramToEntropyImageFilterHDIF3_New():
  return itkHistogramToEntropyImageFilterHDIF3.New()


def itkHistogramToEntropyImageFilterHDIF3_Superclass_New():
  return itkHistogramToEntropyImageFilterHDIF3_Superclass.New()


def itkHistogramToEntropyImageFilterHFIF3_New():
  return itkHistogramToEntropyImageFilterHFIF3.New()


def itkHistogramToEntropyImageFilterHFIF3_Superclass_New():
  return itkHistogramToEntropyImageFilterHFIF3_Superclass.New()


def itkHistogramToEntropyImageFilterHDID2_New():
  return itkHistogramToEntropyImageFilterHDID2.New()


def itkHistogramToEntropyImageFilterHDID2_Superclass_New():
  return itkHistogramToEntropyImageFilterHDID2_Superclass.New()


def itkHistogramToEntropyImageFilterHFID2_New():
  return itkHistogramToEntropyImageFilterHFID2.New()


def itkHistogramToEntropyImageFilterHFID2_Superclass_New():
  return itkHistogramToEntropyImageFilterHFID2_Superclass.New()


def itkHistogramToEntropyImageFilterHDIF2_New():
  return itkHistogramToEntropyImageFilterHDIF2.New()


def itkHistogramToEntropyImageFilterHDIF2_Superclass_New():
  return itkHistogramToEntropyImageFilterHDIF2_Superclass.New()


def itkHistogramToEntropyImageFilterHFIF2_New():
  return itkHistogramToEntropyImageFilterHFIF2.New()


def itkHistogramToEntropyImageFilterHFIF2_Superclass_New():
  return itkHistogramToEntropyImageFilterHFIF2_Superclass.New()

class itkHistogramToEntropyImageFilterHDID2_Superclass(itkImageSourcePython.itkImageSourceID2):
    """Proxy of C++ itkHistogramToEntropyImageFilterHDID2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDID2_Superclass self) -> itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHDID2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToEntropyImageFilterHDID2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHDID2_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHDID2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double >
        GetFunctor(itkHistogramToEntropyImageFilterHDID2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHDID2_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID2_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDID2_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_Clone, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_swigregister
itkHistogramToEntropyImageFilterHDID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID2_Superclass)

def itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHDID2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID2_Superclass *":
    """itkHistogramToEntropyImageFilterHDID2_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID2_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHDID3_Superclass(itkImageSourcePython.itkImageSourceID3):
    """Proxy of C++ itkHistogramToEntropyImageFilterHDID3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDID3_Superclass self) -> itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHDID3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToEntropyImageFilterHDID3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHDID3_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHDID3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double >
        GetFunctor(itkHistogramToEntropyImageFilterHDID3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHDID3_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID3_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDID3_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_Clone, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_swigregister
itkHistogramToEntropyImageFilterHDID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID3_Superclass)

def itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHDID3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID3_Superclass *":
    """itkHistogramToEntropyImageFilterHDID3_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID3_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHDIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToEntropyImageFilterHDIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDIF2_Superclass self) -> itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHDIF2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToEntropyImageFilterHDIF2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHDIF2_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHDIF2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float >
        GetFunctor(itkHistogramToEntropyImageFilterHDIF2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHDIF2_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF2_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDIF2_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_Clone, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_swigregister
itkHistogramToEntropyImageFilterHDIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF2_Superclass)

def itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHDIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF2_Superclass *":
    """itkHistogramToEntropyImageFilterHDIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF2_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHDIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToEntropyImageFilterHDIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDIF3_Superclass self) -> itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHDIF3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToEntropyImageFilterHDIF3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHDIF3_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHDIF3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float >
        GetFunctor(itkHistogramToEntropyImageFilterHDIF3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHDIF3_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF3_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDIF3_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_Clone, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_swigregister
itkHistogramToEntropyImageFilterHDIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF3_Superclass)

def itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHDIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF3_Superclass *":
    """itkHistogramToEntropyImageFilterHDIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF3_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHFID2_Superclass(itkImageSourcePython.itkImageSourceID2):
    """Proxy of C++ itkHistogramToEntropyImageFilterHFID2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFID2_Superclass self) -> itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHFID2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToEntropyImageFilterHFID2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHFID2_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHFID2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double >
        GetFunctor(itkHistogramToEntropyImageFilterHFID2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHFID2_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID2_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFID2_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_Clone, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_swigregister
itkHistogramToEntropyImageFilterHFID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID2_Superclass)

def itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHFID2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID2_Superclass *":
    """itkHistogramToEntropyImageFilterHFID2_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID2_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHFID3_Superclass(itkImageSourcePython.itkImageSourceID3):
    """Proxy of C++ itkHistogramToEntropyImageFilterHFID3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFID3_Superclass self) -> itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHFID3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToEntropyImageFilterHFID3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,double > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHFID3_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,double > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,double > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHFID3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double >
        GetFunctor(itkHistogramToEntropyImageFilterHFID3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,double > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHFID3_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID3_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFID3_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_Clone, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_swigregister
itkHistogramToEntropyImageFilterHFID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID3_Superclass)

def itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHFID3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID3_Superclass *":
    """itkHistogramToEntropyImageFilterHFID3_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID3_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHFIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToEntropyImageFilterHFIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFIF2_Superclass self) -> itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHFIF2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToEntropyImageFilterHFIF2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHFIF2_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHFIF2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float >
        GetFunctor(itkHistogramToEntropyImageFilterHFIF2_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHFIF2_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF2_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFIF2_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_Clone, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_swigregister
itkHistogramToEntropyImageFilterHFIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF2_Superclass)

def itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHFIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF2_Superclass *":
    """itkHistogramToEntropyImageFilterHFIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF2_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHFIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToEntropyImageFilterHFIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFIF3_Superclass self) -> itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToEntropyImageFilterHFIF3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToEntropyImageFilterHFIF3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramEntropyFunction< unsigned long,float > const &') -> "void":
        """SetFunctor(itkHistogramToEntropyImageFilterHFIF3_Superclass self, itk::Function::HistogramEntropyFunction< unsigned long,float > const & functor)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramEntropyFunction< unsigned long,float > const &":
        """
        GetFunctor(itkHistogramToEntropyImageFilterHFIF3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float >
        GetFunctor(itkHistogramToEntropyImageFilterHFIF3_Superclass self) -> itk::Function::HistogramEntropyFunction< unsigned long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long') -> "void":
        """SetTotalFrequency(itkHistogramToEntropyImageFilterHFIF3_Superclass self, unsigned long n)"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF3_Superclass"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFIF3_Superclass.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_Clone, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetInput, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetInput, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetFunctor, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetFunctor, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetTotalFrequency, None, itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_swigregister
itkHistogramToEntropyImageFilterHFIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF3_Superclass)

def itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__() -> "itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer":
    """itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__()

def itkHistogramToEntropyImageFilterHFIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF3_Superclass *":
    """itkHistogramToEntropyImageFilterHFIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF3_Superclass"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_cast(obj)

class itkHistogramToEntropyImageFilterHDID2(itkHistogramToEntropyImageFilterHDID2_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDID2_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDID2_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDID2 self) -> itkHistogramToEntropyImageFilterHDID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID2 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID2"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDID2.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Clone, None, itkHistogramToEntropyImageFilterHDID2)
itkHistogramToEntropyImageFilterHDID2_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_swigregister
itkHistogramToEntropyImageFilterHDID2_swigregister(itkHistogramToEntropyImageFilterHDID2)

def itkHistogramToEntropyImageFilterHDID2___New_orig__() -> "itkHistogramToEntropyImageFilterHDID2_Pointer":
    """itkHistogramToEntropyImageFilterHDID2___New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2___New_orig__()

def itkHistogramToEntropyImageFilterHDID2_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID2 *":
    """itkHistogramToEntropyImageFilterHDID2_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID2"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_cast(obj)

class itkHistogramToEntropyImageFilterHDID3(itkHistogramToEntropyImageFilterHDID3_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDID3_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDID3_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDID3 self) -> itkHistogramToEntropyImageFilterHDID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID3 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID3"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDID3.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Clone, None, itkHistogramToEntropyImageFilterHDID3)
itkHistogramToEntropyImageFilterHDID3_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_swigregister
itkHistogramToEntropyImageFilterHDID3_swigregister(itkHistogramToEntropyImageFilterHDID3)

def itkHistogramToEntropyImageFilterHDID3___New_orig__() -> "itkHistogramToEntropyImageFilterHDID3_Pointer":
    """itkHistogramToEntropyImageFilterHDID3___New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3___New_orig__()

def itkHistogramToEntropyImageFilterHDID3_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDID3 *":
    """itkHistogramToEntropyImageFilterHDID3_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDID3"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_cast(obj)

class itkHistogramToEntropyImageFilterHDIF2(itkHistogramToEntropyImageFilterHDIF2_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDIF2_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDIF2_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDIF2 self) -> itkHistogramToEntropyImageFilterHDIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF2"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDIF2.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Clone, None, itkHistogramToEntropyImageFilterHDIF2)
itkHistogramToEntropyImageFilterHDIF2_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_swigregister
itkHistogramToEntropyImageFilterHDIF2_swigregister(itkHistogramToEntropyImageFilterHDIF2)

def itkHistogramToEntropyImageFilterHDIF2___New_orig__() -> "itkHistogramToEntropyImageFilterHDIF2_Pointer":
    """itkHistogramToEntropyImageFilterHDIF2___New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2___New_orig__()

def itkHistogramToEntropyImageFilterHDIF2_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF2 *":
    """itkHistogramToEntropyImageFilterHDIF2_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF2"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_cast(obj)

class itkHistogramToEntropyImageFilterHDIF3(itkHistogramToEntropyImageFilterHDIF3_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHDIF3_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHDIF3_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHDIF3 self) -> itkHistogramToEntropyImageFilterHDIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF3"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHDIF3.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Clone, None, itkHistogramToEntropyImageFilterHDIF3)
itkHistogramToEntropyImageFilterHDIF3_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_swigregister
itkHistogramToEntropyImageFilterHDIF3_swigregister(itkHistogramToEntropyImageFilterHDIF3)

def itkHistogramToEntropyImageFilterHDIF3___New_orig__() -> "itkHistogramToEntropyImageFilterHDIF3_Pointer":
    """itkHistogramToEntropyImageFilterHDIF3___New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3___New_orig__()

def itkHistogramToEntropyImageFilterHDIF3_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHDIF3 *":
    """itkHistogramToEntropyImageFilterHDIF3_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHDIF3"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_cast(obj)

class itkHistogramToEntropyImageFilterHFID2(itkHistogramToEntropyImageFilterHFID2_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFID2_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFID2_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFID2 self) -> itkHistogramToEntropyImageFilterHFID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID2 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID2"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFID2.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Clone, None, itkHistogramToEntropyImageFilterHFID2)
itkHistogramToEntropyImageFilterHFID2_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_swigregister
itkHistogramToEntropyImageFilterHFID2_swigregister(itkHistogramToEntropyImageFilterHFID2)

def itkHistogramToEntropyImageFilterHFID2___New_orig__() -> "itkHistogramToEntropyImageFilterHFID2_Pointer":
    """itkHistogramToEntropyImageFilterHFID2___New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2___New_orig__()

def itkHistogramToEntropyImageFilterHFID2_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID2 *":
    """itkHistogramToEntropyImageFilterHFID2_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID2"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_cast(obj)

class itkHistogramToEntropyImageFilterHFID3(itkHistogramToEntropyImageFilterHFID3_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFID3_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFID3_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFID3 self) -> itkHistogramToEntropyImageFilterHFID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID3 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID3"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFID3.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Clone, None, itkHistogramToEntropyImageFilterHFID3)
itkHistogramToEntropyImageFilterHFID3_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_swigregister
itkHistogramToEntropyImageFilterHFID3_swigregister(itkHistogramToEntropyImageFilterHFID3)

def itkHistogramToEntropyImageFilterHFID3___New_orig__() -> "itkHistogramToEntropyImageFilterHFID3_Pointer":
    """itkHistogramToEntropyImageFilterHFID3___New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3___New_orig__()

def itkHistogramToEntropyImageFilterHFID3_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFID3 *":
    """itkHistogramToEntropyImageFilterHFID3_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFID3"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_cast(obj)

class itkHistogramToEntropyImageFilterHFIF2(itkHistogramToEntropyImageFilterHFIF2_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFIF2_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFIF2_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFIF2 self) -> itkHistogramToEntropyImageFilterHFIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF2"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFIF2.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Clone, None, itkHistogramToEntropyImageFilterHFIF2)
itkHistogramToEntropyImageFilterHFIF2_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_swigregister
itkHistogramToEntropyImageFilterHFIF2_swigregister(itkHistogramToEntropyImageFilterHFIF2)

def itkHistogramToEntropyImageFilterHFIF2___New_orig__() -> "itkHistogramToEntropyImageFilterHFIF2_Pointer":
    """itkHistogramToEntropyImageFilterHFIF2___New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2___New_orig__()

def itkHistogramToEntropyImageFilterHFIF2_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF2 *":
    """itkHistogramToEntropyImageFilterHFIF2_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF2"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_cast(obj)

class itkHistogramToEntropyImageFilterHFIF3(itkHistogramToEntropyImageFilterHFIF3_Superclass):
    """


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter

    C++ includes: itkHistogramToEntropyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToEntropyImageFilterHFIF3_Pointer":
        """__New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToEntropyImageFilterHFIF3_Pointer":
        """Clone(itkHistogramToEntropyImageFilterHFIF3 self) -> itkHistogramToEntropyImageFilterHFIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF3"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToEntropyImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToEntropyImageFilterHFIF3.Clone = new_instancemethod(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Clone, None, itkHistogramToEntropyImageFilterHFIF3)
itkHistogramToEntropyImageFilterHFIF3_swigregister = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_swigregister
itkHistogramToEntropyImageFilterHFIF3_swigregister(itkHistogramToEntropyImageFilterHFIF3)

def itkHistogramToEntropyImageFilterHFIF3___New_orig__() -> "itkHistogramToEntropyImageFilterHFIF3_Pointer":
    """itkHistogramToEntropyImageFilterHFIF3___New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Pointer"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3___New_orig__()

def itkHistogramToEntropyImageFilterHFIF3_cast(obj: 'itkLightObject') -> "itkHistogramToEntropyImageFilterHFIF3 *":
    """itkHistogramToEntropyImageFilterHFIF3_cast(itkLightObject obj) -> itkHistogramToEntropyImageFilterHFIF3"""
    return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_entropy_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToEntropyImageFilter"""
    import itk
    instance = itk.HistogramToEntropyImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_entropy_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToEntropyImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToEntropyImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToEntropyImageFilter

    histogram_to_entropy_image_filter.__doc__ = filter_object.__doc__
    histogram_to_entropy_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_entropy_image_filter.__doc__ += "Available Keyword Arguments:\n"
    histogram_to_entropy_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "Available Keyword Arguments:\n"
    histogram_to_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



