# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBSplineResampleImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBSplineResampleImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkBSplineResampleImageFunctionPython
            return _itkBSplineResampleImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBSplineResampleImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBSplineResampleImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBSplineResampleImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkBSplineInterpolateImageFunctionPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkContinuousIndexPython
import itkFunctionBasePython
import itkArrayPython

def itkBSplineResampleImageFunctionID3D_New():
  return itkBSplineResampleImageFunctionID3D.New()


def itkBSplineResampleImageFunctionIF3D_New():
  return itkBSplineResampleImageFunctionIF3D.New()


def itkBSplineResampleImageFunctionIUS3D_New():
  return itkBSplineResampleImageFunctionIUS3D.New()


def itkBSplineResampleImageFunctionIUC3D_New():
  return itkBSplineResampleImageFunctionIUC3D.New()


def itkBSplineResampleImageFunctionISS3D_New():
  return itkBSplineResampleImageFunctionISS3D.New()


def itkBSplineResampleImageFunctionID2D_New():
  return itkBSplineResampleImageFunctionID2D.New()


def itkBSplineResampleImageFunctionIF2D_New():
  return itkBSplineResampleImageFunctionIF2D.New()


def itkBSplineResampleImageFunctionIUS2D_New():
  return itkBSplineResampleImageFunctionIUS2D.New()


def itkBSplineResampleImageFunctionIUC2D_New():
  return itkBSplineResampleImageFunctionIUC2D.New()


def itkBSplineResampleImageFunctionISS2D_New():
  return itkBSplineResampleImageFunctionISS2D.New()

class itkBSplineResampleImageFunctionID2D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionID2D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionID2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionID2D_Pointer":
        """Clone(itkBSplineResampleImageFunctionID2D self) -> itkBSplineResampleImageFunctionID2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionID2D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionID2D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionID2D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionID2D

        Create a new object of the class itkBSplineResampleImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionID2D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D_Clone, None, itkBSplineResampleImageFunctionID2D)
itkBSplineResampleImageFunctionID2D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D_swigregister
itkBSplineResampleImageFunctionID2D_swigregister(itkBSplineResampleImageFunctionID2D)

def itkBSplineResampleImageFunctionID2D___New_orig__() -> "itkBSplineResampleImageFunctionID2D_Pointer":
    """itkBSplineResampleImageFunctionID2D___New_orig__() -> itkBSplineResampleImageFunctionID2D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D___New_orig__()

def itkBSplineResampleImageFunctionID2D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionID2D *":
    """itkBSplineResampleImageFunctionID2D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionID2D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID2D_cast(obj)

class itkBSplineResampleImageFunctionID3D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionID3D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionID3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionID3D_Pointer":
        """Clone(itkBSplineResampleImageFunctionID3D self) -> itkBSplineResampleImageFunctionID3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionID3D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionID3D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionID3D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionID3D

        Create a new object of the class itkBSplineResampleImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionID3D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D_Clone, None, itkBSplineResampleImageFunctionID3D)
itkBSplineResampleImageFunctionID3D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D_swigregister
itkBSplineResampleImageFunctionID3D_swigregister(itkBSplineResampleImageFunctionID3D)

def itkBSplineResampleImageFunctionID3D___New_orig__() -> "itkBSplineResampleImageFunctionID3D_Pointer":
    """itkBSplineResampleImageFunctionID3D___New_orig__() -> itkBSplineResampleImageFunctionID3D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D___New_orig__()

def itkBSplineResampleImageFunctionID3D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionID3D *":
    """itkBSplineResampleImageFunctionID3D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionID3D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionID3D_cast(obj)

class itkBSplineResampleImageFunctionIF2D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIF2D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIF2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIF2D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIF2D self) -> itkBSplineResampleImageFunctionIF2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIF2D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIF2D

        Create a new object of the class itkBSplineResampleImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIF2D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D_Clone, None, itkBSplineResampleImageFunctionIF2D)
itkBSplineResampleImageFunctionIF2D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D_swigregister
itkBSplineResampleImageFunctionIF2D_swigregister(itkBSplineResampleImageFunctionIF2D)

def itkBSplineResampleImageFunctionIF2D___New_orig__() -> "itkBSplineResampleImageFunctionIF2D_Pointer":
    """itkBSplineResampleImageFunctionIF2D___New_orig__() -> itkBSplineResampleImageFunctionIF2D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D___New_orig__()

def itkBSplineResampleImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIF2D *":
    """itkBSplineResampleImageFunctionIF2D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIF2D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF2D_cast(obj)

class itkBSplineResampleImageFunctionIF3D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIF3D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIF3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIF3D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIF3D self) -> itkBSplineResampleImageFunctionIF3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIF3D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIF3D

        Create a new object of the class itkBSplineResampleImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIF3D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D_Clone, None, itkBSplineResampleImageFunctionIF3D)
itkBSplineResampleImageFunctionIF3D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D_swigregister
itkBSplineResampleImageFunctionIF3D_swigregister(itkBSplineResampleImageFunctionIF3D)

def itkBSplineResampleImageFunctionIF3D___New_orig__() -> "itkBSplineResampleImageFunctionIF3D_Pointer":
    """itkBSplineResampleImageFunctionIF3D___New_orig__() -> itkBSplineResampleImageFunctionIF3D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D___New_orig__()

def itkBSplineResampleImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIF3D *":
    """itkBSplineResampleImageFunctionIF3D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIF3D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIF3D_cast(obj)

class itkBSplineResampleImageFunctionISS2D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionISS2D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionISS2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionISS2D_Pointer":
        """Clone(itkBSplineResampleImageFunctionISS2D self) -> itkBSplineResampleImageFunctionISS2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionISS2D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionISS2D

        Create a new object of the class itkBSplineResampleImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionISS2D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D_Clone, None, itkBSplineResampleImageFunctionISS2D)
itkBSplineResampleImageFunctionISS2D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D_swigregister
itkBSplineResampleImageFunctionISS2D_swigregister(itkBSplineResampleImageFunctionISS2D)

def itkBSplineResampleImageFunctionISS2D___New_orig__() -> "itkBSplineResampleImageFunctionISS2D_Pointer":
    """itkBSplineResampleImageFunctionISS2D___New_orig__() -> itkBSplineResampleImageFunctionISS2D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D___New_orig__()

def itkBSplineResampleImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionISS2D *":
    """itkBSplineResampleImageFunctionISS2D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionISS2D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS2D_cast(obj)

class itkBSplineResampleImageFunctionISS3D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionISS3D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionISS3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionISS3D_Pointer":
        """Clone(itkBSplineResampleImageFunctionISS3D self) -> itkBSplineResampleImageFunctionISS3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionISS3D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionISS3D

        Create a new object of the class itkBSplineResampleImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionISS3D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D_Clone, None, itkBSplineResampleImageFunctionISS3D)
itkBSplineResampleImageFunctionISS3D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D_swigregister
itkBSplineResampleImageFunctionISS3D_swigregister(itkBSplineResampleImageFunctionISS3D)

def itkBSplineResampleImageFunctionISS3D___New_orig__() -> "itkBSplineResampleImageFunctionISS3D_Pointer":
    """itkBSplineResampleImageFunctionISS3D___New_orig__() -> itkBSplineResampleImageFunctionISS3D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D___New_orig__()

def itkBSplineResampleImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionISS3D *":
    """itkBSplineResampleImageFunctionISS3D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionISS3D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionISS3D_cast(obj)

class itkBSplineResampleImageFunctionIUC2D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIUC2D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIUC2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIUC2D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIUC2D self) -> itkBSplineResampleImageFunctionIUC2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUC2D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIUC2D

        Create a new object of the class itkBSplineResampleImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIUC2D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D_Clone, None, itkBSplineResampleImageFunctionIUC2D)
itkBSplineResampleImageFunctionIUC2D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D_swigregister
itkBSplineResampleImageFunctionIUC2D_swigregister(itkBSplineResampleImageFunctionIUC2D)

def itkBSplineResampleImageFunctionIUC2D___New_orig__() -> "itkBSplineResampleImageFunctionIUC2D_Pointer":
    """itkBSplineResampleImageFunctionIUC2D___New_orig__() -> itkBSplineResampleImageFunctionIUC2D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D___New_orig__()

def itkBSplineResampleImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUC2D *":
    """itkBSplineResampleImageFunctionIUC2D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUC2D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC2D_cast(obj)

class itkBSplineResampleImageFunctionIUC3D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIUC3D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIUC3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIUC3D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIUC3D self) -> itkBSplineResampleImageFunctionIUC3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUC3D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIUC3D

        Create a new object of the class itkBSplineResampleImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIUC3D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D_Clone, None, itkBSplineResampleImageFunctionIUC3D)
itkBSplineResampleImageFunctionIUC3D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D_swigregister
itkBSplineResampleImageFunctionIUC3D_swigregister(itkBSplineResampleImageFunctionIUC3D)

def itkBSplineResampleImageFunctionIUC3D___New_orig__() -> "itkBSplineResampleImageFunctionIUC3D_Pointer":
    """itkBSplineResampleImageFunctionIUC3D___New_orig__() -> itkBSplineResampleImageFunctionIUC3D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D___New_orig__()

def itkBSplineResampleImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUC3D *":
    """itkBSplineResampleImageFunctionIUC3D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUC3D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUC3D_cast(obj)

class itkBSplineResampleImageFunctionIUS2D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIUS2D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIUS2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIUS2D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIUS2D self) -> itkBSplineResampleImageFunctionIUS2D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUS2D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIUS2D

        Create a new object of the class itkBSplineResampleImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIUS2D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D_Clone, None, itkBSplineResampleImageFunctionIUS2D)
itkBSplineResampleImageFunctionIUS2D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D_swigregister
itkBSplineResampleImageFunctionIUS2D_swigregister(itkBSplineResampleImageFunctionIUS2D)

def itkBSplineResampleImageFunctionIUS2D___New_orig__() -> "itkBSplineResampleImageFunctionIUS2D_Pointer":
    """itkBSplineResampleImageFunctionIUS2D___New_orig__() -> itkBSplineResampleImageFunctionIUS2D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D___New_orig__()

def itkBSplineResampleImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUS2D *":
    """itkBSplineResampleImageFunctionIUS2D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUS2D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS2D_cast(obj)

class itkBSplineResampleImageFunctionIUS3D(itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS):
    """


    Resample image intensity from a BSpline coefficient image.

    This class resample the image intensity at a non-integer position from
    the input BSpline coefficient image.

    Spline order may be from 0 to 5.

    In ITK, BSpline coefficient can be generated using a
    BSplineDecompositionImageFilter. Using this image function in
    conjunction with ResampleImageFunction allows the reconstruction of
    the original image at different resolution and size.

    See:   BSplineInterpolateImageFunction

    See:   BSplineDecompositionImageFilter

    See:  ResampleImageFilter

    C++ includes: itkBSplineResampleImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineResampleImageFunctionIUS3D_Pointer":
        """__New_orig__() -> itkBSplineResampleImageFunctionIUS3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineResampleImageFunctionIUS3D_Pointer":
        """Clone(itkBSplineResampleImageFunctionIUS3D self) -> itkBSplineResampleImageFunctionIUS3D_Pointer"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D_Clone(self)

    __swig_destroy__ = _itkBSplineResampleImageFunctionPython.delete_itkBSplineResampleImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUS3D"""
        return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineResampleImageFunctionIUS3D

        Create a new object of the class itkBSplineResampleImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineResampleImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineResampleImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineResampleImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineResampleImageFunctionIUS3D.Clone = new_instancemethod(_itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D_Clone, None, itkBSplineResampleImageFunctionIUS3D)
itkBSplineResampleImageFunctionIUS3D_swigregister = _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D_swigregister
itkBSplineResampleImageFunctionIUS3D_swigregister(itkBSplineResampleImageFunctionIUS3D)

def itkBSplineResampleImageFunctionIUS3D___New_orig__() -> "itkBSplineResampleImageFunctionIUS3D_Pointer":
    """itkBSplineResampleImageFunctionIUS3D___New_orig__() -> itkBSplineResampleImageFunctionIUS3D_Pointer"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D___New_orig__()

def itkBSplineResampleImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkBSplineResampleImageFunctionIUS3D *":
    """itkBSplineResampleImageFunctionIUS3D_cast(itkLightObject obj) -> itkBSplineResampleImageFunctionIUS3D"""
    return _itkBSplineResampleImageFunctionPython.itkBSplineResampleImageFunctionIUS3D_cast(obj)



