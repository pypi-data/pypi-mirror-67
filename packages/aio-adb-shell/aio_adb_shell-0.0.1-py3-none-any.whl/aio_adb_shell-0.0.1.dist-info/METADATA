Metadata-Version: 2.1
Name: aio-adb-shell
Version: 0.0.1
Summary: A Python implementation of ADB with shell and FileSync functionality.
Home-page: https://github.com/JeffLIrion/aio_adb_shell
Author: Jeff Irion
Author-email: jefflirion@users.noreply.github.com
License: UNKNOWN
Keywords: adb,android
Platform: UNKNOWN
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Requires-Dist: cryptography
Requires-Dist: pyasn1
Requires-Dist: rsa

aio\_adb\_shell
===============

.. image:: https://travis-ci.com/JeffLIrion/aio_adb_shell.svg?branch=master
   :target: https://travis-ci.com/JeffLIrion/aio_adb_shell

.. image:: https://coveralls.io/repos/github/JeffLIrion/aio_adb_shell/badge.svg?branch=master
   :target: https://coveralls.io/github/JeffLIrion/aio_adb_shell?branch=master


Documentation for this package can be found at https://aio-adb-shell.readthedocs.io/.

This Python package implements ADB shell and FileSync functionality.  It originated from `python-adb <https://github.com/google/python-adb>`_.

Installation
------------

.. code-block::

   pip install aio-adb-shell


Example Usage
-------------

(Based on `androidtv/adb_manager.py <https://github.com/JeffLIrion/python-androidtv/blob/133063c8d6793a88259af405d6a69ceb301a0ca0/androidtv/adb_manager.py#L67>`_)

.. code-block:: python

   from aio_adb_shell.adb_device import AdbDeviceTcp
   from aio_adb_shell.auth.sign_pythonrsa import PythonRSASigner

   # Connect (no authentication necessary)
   device1 = AdbDeviceTcp('192.168.0.111', 5555, default_timeout_s=9.)
   await device1.connect(auth_timeout_s=0.1)

   # Connect (authentication required)
   with open('path/to/adbkey') as f:
       priv = f.read()
   signer = PythonRSASigner('', priv)
   device2 = AdbDeviceTcp('192.168.0.222', 5555, default_timeout_s=9.)
   await device2.connect(rsa_keys=[signer], auth_timeout_s=0.1)

   # Send a shell command
   response1 = await device1.shell('echo TEST1')
   response2 = await device2.shell('echo TEST2')


