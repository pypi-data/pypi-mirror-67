# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLandmarkBasedTransformInitializerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLandmarkBasedTransformInitializerPython', [dirname(__file__)])
        except ImportError:
            import _itkLandmarkBasedTransformInitializerPython
            return _itkLandmarkBasedTransformInitializerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLandmarkBasedTransformInitializerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLandmarkBasedTransformInitializerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLandmarkBasedTransformInitializerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVersorRigid3DTransformPython
import ITKCommonBasePython
import pyBasePython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import itkOptimizerParametersPython
import itkArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkArray2DPython
import itkVersorTransformPython
import itkRigid3DTransformPython
import itkMatrixOffsetTransformBasePython
import itkSymmetricSecondRankTensorPython
import itkVariableLengthVectorPython
import itkDiffusionTensor3DPython
import itkTransformBasePython
import itkVersorPython
import itkBSplineTransformPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkBSplineBaseTransformPython
import itkBSplineInterpolationWeightFunctionPython
import itkFunctionBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImagePython
import itkImageRegionPython
import itkRigid2DTransformPython
import itkAffineTransformPython

def itkLandmarkBasedTransformInitializerTF33_New():
  return itkLandmarkBasedTransformInitializerTF33.New()


def itkLandmarkBasedTransformInitializerTD33_New():
  return itkLandmarkBasedTransformInitializerTD33.New()


def itkLandmarkBasedTransformInitializerTF22_New():
  return itkLandmarkBasedTransformInitializerTF22.New()


def itkLandmarkBasedTransformInitializerTD22_New():
  return itkLandmarkBasedTransformInitializerTD22.New()

class itkLandmarkBasedTransformInitializerTD22(ITKCommonBasePython.itkObject):
    """


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    \\sphinx \\sphinxexample{Registration/Common/RegisterImageToAnothe
    rUsingLandmarks,Register Image To Another Using Landmarks}
    \\endsphinx

    C++ includes: itkLandmarkBasedTransformInitializer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandmarkBasedTransformInitializerTD22_Pointer":
        """__New_orig__() -> itkLandmarkBasedTransformInitializerTD22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandmarkBasedTransformInitializerTD22_Pointer":
        """Clone(itkLandmarkBasedTransformInitializerTD22 self) -> itkLandmarkBasedTransformInitializerTD22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkLandmarkBasedTransformInitializerTD22 self, itkTransformD22 _arg)

        Set the transform to
        be initialized 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetTransform(self, _arg)


    def SetReferenceImage(self, _arg: 'itkImageBase2') -> "void":
        """
        SetReferenceImage(itkLandmarkBasedTransformInitializerTD22 self, itkImageBase2 _arg)

        Set the reference
        image to define the parametric domain for the BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetReferenceImage(self, _arg)


    def SetBSplineNumberOfControlPoints(self, _arg: 'unsigned int const') -> "void":
        """
        SetBSplineNumberOfControlPoints(itkLandmarkBasedTransformInitializerTD22 self, unsigned int const _arg)

        Set
        the number of control points to define the parametric domain for the
        BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetBSplineNumberOfControlPoints(self, _arg)


    def SetFixedLandmarks(self, fixedLandmarks: 'vectoritkPointD2') -> "void":
        """
        SetFixedLandmarks(itkLandmarkBasedTransformInitializerTD22 self, vectoritkPointD2 fixedLandmarks)

        Set the Fixed
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetFixedLandmarks(self, fixedLandmarks)


    def SetMovingLandmarks(self, movingLandmarks: 'vectoritkPointD2') -> "void":
        """
        SetMovingLandmarks(itkLandmarkBasedTransformInitializerTD22 self, vectoritkPointD2 movingLandmarks)

        Set the Moving
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetMovingLandmarks(self, movingLandmarks)


    def SetLandmarkWeight(self, landmarkWeight: 'vectorD') -> "void":
        """
        SetLandmarkWeight(itkLandmarkBasedTransformInitializerTD22 self, vectorD landmarkWeight)

        Set the landmark
        weight point containers Weight includes diagonal elements of weight
        matrix 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetLandmarkWeight(self, landmarkWeight)


    def InitializeTransform(self) -> "void":
        """
        InitializeTransform(itkLandmarkBasedTransformInitializerTD22 self)

        Initialize the
        transform from the landmarks 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_InitializeTransform(self)

    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD22

    def cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTD22 *":
        """cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTD22"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD22

        Create a new object of the class itkLandmarkBasedTransformInitializerTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandmarkBasedTransformInitializerTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandmarkBasedTransformInitializerTD22.Clone = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_Clone, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetTransform, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetReferenceImage = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetReferenceImage, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetBSplineNumberOfControlPoints = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetBSplineNumberOfControlPoints, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetFixedLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetFixedLandmarks, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetMovingLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetMovingLandmarks, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.SetLandmarkWeight = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetLandmarkWeight, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22.InitializeTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_InitializeTransform, None, itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22_swigregister = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_swigregister
itkLandmarkBasedTransformInitializerTD22_swigregister(itkLandmarkBasedTransformInitializerTD22)

def itkLandmarkBasedTransformInitializerTD22___New_orig__() -> "itkLandmarkBasedTransformInitializerTD22_Pointer":
    """itkLandmarkBasedTransformInitializerTD22___New_orig__() -> itkLandmarkBasedTransformInitializerTD22_Pointer"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22___New_orig__()

def itkLandmarkBasedTransformInitializerTD22_cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTD22 *":
    """itkLandmarkBasedTransformInitializerTD22_cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTD22"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_cast(obj)

class itkLandmarkBasedTransformInitializerTD33(ITKCommonBasePython.itkObject):
    """


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    \\sphinx \\sphinxexample{Registration/Common/RegisterImageToAnothe
    rUsingLandmarks,Register Image To Another Using Landmarks}
    \\endsphinx

    C++ includes: itkLandmarkBasedTransformInitializer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandmarkBasedTransformInitializerTD33_Pointer":
        """__New_orig__() -> itkLandmarkBasedTransformInitializerTD33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandmarkBasedTransformInitializerTD33_Pointer":
        """Clone(itkLandmarkBasedTransformInitializerTD33 self) -> itkLandmarkBasedTransformInitializerTD33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkLandmarkBasedTransformInitializerTD33 self, itkTransformD33 _arg)

        Set the transform to
        be initialized 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetTransform(self, _arg)


    def SetReferenceImage(self, _arg: 'itkImageBase3') -> "void":
        """
        SetReferenceImage(itkLandmarkBasedTransformInitializerTD33 self, itkImageBase3 _arg)

        Set the reference
        image to define the parametric domain for the BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetReferenceImage(self, _arg)


    def SetBSplineNumberOfControlPoints(self, _arg: 'unsigned int const') -> "void":
        """
        SetBSplineNumberOfControlPoints(itkLandmarkBasedTransformInitializerTD33 self, unsigned int const _arg)

        Set
        the number of control points to define the parametric domain for the
        BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetBSplineNumberOfControlPoints(self, _arg)


    def SetFixedLandmarks(self, fixedLandmarks: 'vectoritkPointD3') -> "void":
        """
        SetFixedLandmarks(itkLandmarkBasedTransformInitializerTD33 self, vectoritkPointD3 fixedLandmarks)

        Set the Fixed
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetFixedLandmarks(self, fixedLandmarks)


    def SetMovingLandmarks(self, movingLandmarks: 'vectoritkPointD3') -> "void":
        """
        SetMovingLandmarks(itkLandmarkBasedTransformInitializerTD33 self, vectoritkPointD3 movingLandmarks)

        Set the Moving
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetMovingLandmarks(self, movingLandmarks)


    def SetLandmarkWeight(self, landmarkWeight: 'vectorD') -> "void":
        """
        SetLandmarkWeight(itkLandmarkBasedTransformInitializerTD33 self, vectorD landmarkWeight)

        Set the landmark
        weight point containers Weight includes diagonal elements of weight
        matrix 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetLandmarkWeight(self, landmarkWeight)


    def InitializeTransform(self) -> "void":
        """
        InitializeTransform(itkLandmarkBasedTransformInitializerTD33 self)

        Initialize the
        transform from the landmarks 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_InitializeTransform(self)

    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD33

    def cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTD33 *":
        """cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTD33"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD33

        Create a new object of the class itkLandmarkBasedTransformInitializerTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandmarkBasedTransformInitializerTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandmarkBasedTransformInitializerTD33.Clone = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_Clone, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetTransform, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetReferenceImage = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetReferenceImage, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetBSplineNumberOfControlPoints = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetBSplineNumberOfControlPoints, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetFixedLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetFixedLandmarks, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetMovingLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetMovingLandmarks, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.SetLandmarkWeight = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetLandmarkWeight, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33.InitializeTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_InitializeTransform, None, itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33_swigregister = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_swigregister
itkLandmarkBasedTransformInitializerTD33_swigregister(itkLandmarkBasedTransformInitializerTD33)

def itkLandmarkBasedTransformInitializerTD33___New_orig__() -> "itkLandmarkBasedTransformInitializerTD33_Pointer":
    """itkLandmarkBasedTransformInitializerTD33___New_orig__() -> itkLandmarkBasedTransformInitializerTD33_Pointer"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33___New_orig__()

def itkLandmarkBasedTransformInitializerTD33_cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTD33 *":
    """itkLandmarkBasedTransformInitializerTD33_cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTD33"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_cast(obj)

class itkLandmarkBasedTransformInitializerTF22(ITKCommonBasePython.itkObject):
    """


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    \\sphinx \\sphinxexample{Registration/Common/RegisterImageToAnothe
    rUsingLandmarks,Register Image To Another Using Landmarks}
    \\endsphinx

    C++ includes: itkLandmarkBasedTransformInitializer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandmarkBasedTransformInitializerTF22_Pointer":
        """__New_orig__() -> itkLandmarkBasedTransformInitializerTF22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandmarkBasedTransformInitializerTF22_Pointer":
        """Clone(itkLandmarkBasedTransformInitializerTF22 self) -> itkLandmarkBasedTransformInitializerTF22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF22') -> "void":
        """
        SetTransform(itkLandmarkBasedTransformInitializerTF22 self, itkTransformF22 _arg)

        Set the transform to
        be initialized 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetTransform(self, _arg)


    def SetReferenceImage(self, _arg: 'itkImageBase2') -> "void":
        """
        SetReferenceImage(itkLandmarkBasedTransformInitializerTF22 self, itkImageBase2 _arg)

        Set the reference
        image to define the parametric domain for the BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetReferenceImage(self, _arg)


    def SetBSplineNumberOfControlPoints(self, _arg: 'unsigned int const') -> "void":
        """
        SetBSplineNumberOfControlPoints(itkLandmarkBasedTransformInitializerTF22 self, unsigned int const _arg)

        Set
        the number of control points to define the parametric domain for the
        BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetBSplineNumberOfControlPoints(self, _arg)


    def SetFixedLandmarks(self, fixedLandmarks: 'vectoritkPointD2') -> "void":
        """
        SetFixedLandmarks(itkLandmarkBasedTransformInitializerTF22 self, vectoritkPointD2 fixedLandmarks)

        Set the Fixed
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetFixedLandmarks(self, fixedLandmarks)


    def SetMovingLandmarks(self, movingLandmarks: 'vectoritkPointD2') -> "void":
        """
        SetMovingLandmarks(itkLandmarkBasedTransformInitializerTF22 self, vectoritkPointD2 movingLandmarks)

        Set the Moving
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetMovingLandmarks(self, movingLandmarks)


    def SetLandmarkWeight(self, landmarkWeight: 'vectorD') -> "void":
        """
        SetLandmarkWeight(itkLandmarkBasedTransformInitializerTF22 self, vectorD landmarkWeight)

        Set the landmark
        weight point containers Weight includes diagonal elements of weight
        matrix 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetLandmarkWeight(self, landmarkWeight)


    def InitializeTransform(self) -> "void":
        """
        InitializeTransform(itkLandmarkBasedTransformInitializerTF22 self)

        Initialize the
        transform from the landmarks 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_InitializeTransform(self)

    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF22

    def cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTF22 *":
        """cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTF22"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF22

        Create a new object of the class itkLandmarkBasedTransformInitializerTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandmarkBasedTransformInitializerTF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandmarkBasedTransformInitializerTF22.Clone = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_Clone, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetTransform, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetReferenceImage = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetReferenceImage, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetBSplineNumberOfControlPoints = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetBSplineNumberOfControlPoints, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetFixedLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetFixedLandmarks, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetMovingLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetMovingLandmarks, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.SetLandmarkWeight = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetLandmarkWeight, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22.InitializeTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_InitializeTransform, None, itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22_swigregister = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_swigregister
itkLandmarkBasedTransformInitializerTF22_swigregister(itkLandmarkBasedTransformInitializerTF22)

def itkLandmarkBasedTransformInitializerTF22___New_orig__() -> "itkLandmarkBasedTransformInitializerTF22_Pointer":
    """itkLandmarkBasedTransformInitializerTF22___New_orig__() -> itkLandmarkBasedTransformInitializerTF22_Pointer"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22___New_orig__()

def itkLandmarkBasedTransformInitializerTF22_cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTF22 *":
    """itkLandmarkBasedTransformInitializerTF22_cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTF22"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_cast(obj)

class itkLandmarkBasedTransformInitializerTF33(ITKCommonBasePython.itkObject):
    """


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    \\sphinx \\sphinxexample{Registration/Common/RegisterImageToAnothe
    rUsingLandmarks,Register Image To Another Using Landmarks}
    \\endsphinx

    C++ includes: itkLandmarkBasedTransformInitializer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandmarkBasedTransformInitializerTF33_Pointer":
        """__New_orig__() -> itkLandmarkBasedTransformInitializerTF33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandmarkBasedTransformInitializerTF33_Pointer":
        """Clone(itkLandmarkBasedTransformInitializerTF33 self) -> itkLandmarkBasedTransformInitializerTF33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_Clone(self)


    def SetTransform(self, _arg: 'itkTransformF33') -> "void":
        """
        SetTransform(itkLandmarkBasedTransformInitializerTF33 self, itkTransformF33 _arg)

        Set the transform to
        be initialized 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetTransform(self, _arg)


    def SetReferenceImage(self, _arg: 'itkImageBase3') -> "void":
        """
        SetReferenceImage(itkLandmarkBasedTransformInitializerTF33 self, itkImageBase3 _arg)

        Set the reference
        image to define the parametric domain for the BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetReferenceImage(self, _arg)


    def SetBSplineNumberOfControlPoints(self, _arg: 'unsigned int const') -> "void":
        """
        SetBSplineNumberOfControlPoints(itkLandmarkBasedTransformInitializerTF33 self, unsigned int const _arg)

        Set
        the number of control points to define the parametric domain for the
        BSpline transform 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetBSplineNumberOfControlPoints(self, _arg)


    def SetFixedLandmarks(self, fixedLandmarks: 'vectoritkPointD3') -> "void":
        """
        SetFixedLandmarks(itkLandmarkBasedTransformInitializerTF33 self, vectoritkPointD3 fixedLandmarks)

        Set the Fixed
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetFixedLandmarks(self, fixedLandmarks)


    def SetMovingLandmarks(self, movingLandmarks: 'vectoritkPointD3') -> "void":
        """
        SetMovingLandmarks(itkLandmarkBasedTransformInitializerTF33 self, vectoritkPointD3 movingLandmarks)

        Set the Moving
        landmark point containers 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetMovingLandmarks(self, movingLandmarks)


    def SetLandmarkWeight(self, landmarkWeight: 'vectorD') -> "void":
        """
        SetLandmarkWeight(itkLandmarkBasedTransformInitializerTF33 self, vectorD landmarkWeight)

        Set the landmark
        weight point containers Weight includes diagonal elements of weight
        matrix 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetLandmarkWeight(self, landmarkWeight)


    def InitializeTransform(self) -> "void":
        """
        InitializeTransform(itkLandmarkBasedTransformInitializerTF33 self)

        Initialize the
        transform from the landmarks 
        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_InitializeTransform(self)

    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF33

    def cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTF33 *":
        """cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTF33"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF33

        Create a new object of the class itkLandmarkBasedTransformInitializerTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandmarkBasedTransformInitializerTF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandmarkBasedTransformInitializerTF33.Clone = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_Clone, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetTransform, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetReferenceImage = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetReferenceImage, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetBSplineNumberOfControlPoints = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetBSplineNumberOfControlPoints, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetFixedLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetFixedLandmarks, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetMovingLandmarks = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetMovingLandmarks, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.SetLandmarkWeight = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetLandmarkWeight, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33.InitializeTransform = new_instancemethod(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_InitializeTransform, None, itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33_swigregister = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_swigregister
itkLandmarkBasedTransformInitializerTF33_swigregister(itkLandmarkBasedTransformInitializerTF33)

def itkLandmarkBasedTransformInitializerTF33___New_orig__() -> "itkLandmarkBasedTransformInitializerTF33_Pointer":
    """itkLandmarkBasedTransformInitializerTF33___New_orig__() -> itkLandmarkBasedTransformInitializerTF33_Pointer"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33___New_orig__()

def itkLandmarkBasedTransformInitializerTF33_cast(obj: 'itkLightObject') -> "itkLandmarkBasedTransformInitializerTF33 *":
    """itkLandmarkBasedTransformInitializerTF33_cast(itkLightObject obj) -> itkLandmarkBasedTransformInitializerTF33"""
    return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_cast(obj)



