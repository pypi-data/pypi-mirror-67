# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformParametersAdaptorBasePython
else:
    import _itkTransformParametersAdaptorBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTransformParametersAdaptorBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTransformParametersAdaptorBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkTransformBasePython
import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkCovariantVectorPython
import itkArrayPython
import itkDiffusionTensor3DPython
import ITKCommonBasePython
import itkOptimizerParametersPython
import itkArray2DPython
import itkVariableLengthVectorPython

def itkTransformParametersAdaptorBaseD3_New():
  return itkTransformParametersAdaptorBaseD3.New()


def itkTransformParametersAdaptorBaseF3_New():
  return itkTransformParametersAdaptorBaseF3.New()


def itkTransformParametersAdaptorBaseD2_New():
  return itkTransformParametersAdaptorBaseD2.New()


def itkTransformParametersAdaptorBaseF2_New():
  return itkTransformParametersAdaptorBaseF2.New()

class itkTransformParametersAdaptorBaseD2(ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetTransform = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_SetTransform)
    SetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_SetRequiredFixedParameters)
    GetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_GetRequiredFixedParameters)
    AdaptTransformParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_AdaptTransformParameters)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseD2
    cast = _swig_new_static_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_cast)

    def New(*args, **kargs):
        """New() -> itkTransformParametersAdaptorBaseD2

        Create a new object of the class itkTransformParametersAdaptorBaseD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformParametersAdaptorBaseD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformParametersAdaptorBaseD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformParametersAdaptorBaseD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformParametersAdaptorBaseD2 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_swigregister(itkTransformParametersAdaptorBaseD2)
itkTransformParametersAdaptorBaseD2_cast = _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_cast

class itkTransformParametersAdaptorBaseD3(ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetTransform = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_SetTransform)
    SetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_SetRequiredFixedParameters)
    GetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_GetRequiredFixedParameters)
    AdaptTransformParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_AdaptTransformParameters)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseD3
    cast = _swig_new_static_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_cast)

    def New(*args, **kargs):
        """New() -> itkTransformParametersAdaptorBaseD3

        Create a new object of the class itkTransformParametersAdaptorBaseD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformParametersAdaptorBaseD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformParametersAdaptorBaseD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformParametersAdaptorBaseD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformParametersAdaptorBaseD3 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_swigregister(itkTransformParametersAdaptorBaseD3)
itkTransformParametersAdaptorBaseD3_cast = _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_cast

class itkTransformParametersAdaptorBaseF2(ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetTransform = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_SetTransform)
    SetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_SetRequiredFixedParameters)
    GetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_GetRequiredFixedParameters)
    AdaptTransformParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_AdaptTransformParameters)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseF2
    cast = _swig_new_static_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_cast)

    def New(*args, **kargs):
        """New() -> itkTransformParametersAdaptorBaseF2

        Create a new object of the class itkTransformParametersAdaptorBaseF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformParametersAdaptorBaseF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformParametersAdaptorBaseF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformParametersAdaptorBaseF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformParametersAdaptorBaseF2 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_swigregister(itkTransformParametersAdaptorBaseF2)
itkTransformParametersAdaptorBaseF2_cast = _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_cast

class itkTransformParametersAdaptorBaseF3(ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetTransform = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_SetTransform)
    SetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_SetRequiredFixedParameters)
    GetRequiredFixedParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_GetRequiredFixedParameters)
    AdaptTransformParameters = _swig_new_instance_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_AdaptTransformParameters)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseF3
    cast = _swig_new_static_method(_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_cast)

    def New(*args, **kargs):
        """New() -> itkTransformParametersAdaptorBaseF3

        Create a new object of the class itkTransformParametersAdaptorBaseF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformParametersAdaptorBaseF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTransformParametersAdaptorBaseF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformParametersAdaptorBaseF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformParametersAdaptorBaseF3 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_swigregister(itkTransformParametersAdaptorBaseF3)
itkTransformParametersAdaptorBaseF3_cast = _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_cast



