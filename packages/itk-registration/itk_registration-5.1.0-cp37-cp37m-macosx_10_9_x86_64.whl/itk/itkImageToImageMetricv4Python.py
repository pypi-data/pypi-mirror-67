# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageToImageMetricv4Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageToImageMetricv4Python', [dirname(__file__)])
        except ImportError:
            import _itkImageToImageMetricv4Python
            return _itkImageToImageMetricv4Python
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageToImageMetricv4Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageToImageMetricv4Python = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageToImageMetricv4Python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkInterpolateImageFunctionPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkContinuousIndexPython
import itkPointPython
import itkImageFunctionBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkFunctionBasePython
import itkArrayPython
import itkOptimizerParametersPython
import itkObjectToObjectMetricBasePython
import itkSingleValuedCostFunctionv4Python
import itkCostFunctionPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkDisplacementFieldTransformPython
import itkImageToImageFilterBPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkPointSetPython
import itkVectorContainerPython
import itkSpatialObjectBasePython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkBoundingBoxPython
import itkMapContainerPython
import itkSpatialObjectPropertyPython

def itkImageToImageMetricv4D3D3_New():
  return itkImageToImageMetricv4D3D3.New()


def itkImageToImageMetricv4D3D3_Superclass_New():
  return itkImageToImageMetricv4D3D3_Superclass.New()


def itkImageToImageMetricv4F3F3_New():
  return itkImageToImageMetricv4F3F3.New()


def itkImageToImageMetricv4F3F3_Superclass_New():
  return itkImageToImageMetricv4F3F3_Superclass.New()


def itkImageToImageMetricv4D2D2_New():
  return itkImageToImageMetricv4D2D2.New()


def itkImageToImageMetricv4D2D2_Superclass_New():
  return itkImageToImageMetricv4D2D2_Superclass.New()


def itkImageToImageMetricv4F2F2_New():
  return itkImageToImageMetricv4F2F2.New()


def itkImageToImageMetricv4F2F2_Superclass_New():
  return itkImageToImageMetricv4F2F2_Superclass.New()

class itkImageToImageMetricv4D2D2_Superclass(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """Proxy of C++ itkImageToImageMetricv4D2D2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetFixedTransform(itkImageToImageMetricv4D2D2_Superclass self, itkTransformD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD22 *":
        """GetModifiableFixedTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD22 *":
        """
        GetFixedTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22
        GetFixedTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetMovingTransform(itkImageToImageMetricv4D2D2_Superclass self, itkTransformD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD22 *":
        """GetModifiableMovingTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD22 *":
        """
        GetMovingTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22
        GetMovingTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD22') -> "void":
        """SetTransform(itkImageToImageMetricv4D2D2_Superclass self, itkTransformD22 transform)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD22 const *":
        """GetTransform(itkImageToImageMetricv4D2D2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """GetNumberOfValidPoints(itkImageToImageMetricv4D2D2_Superclass self) -> unsigned long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD2', origin: 'itkPointD2', direction: 'itkMatrixD22', region: 'itkImageRegion2') -> "void":
        """SetVirtualDomain(itkImageToImageMetricv4D2D2_Superclass self, itkVectorD2 spacing, itkPointD2 origin, itkMatrixD22 direction, itkImageRegion2 region)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageD2') -> "void":
        """SetVirtualDomainFromImage(itkImageToImageMetricv4D2D2_Superclass self, itkImageD2 virtualImage)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """SupportsArbitraryVirtualDomainSamples(itkImageToImageMetricv4D2D2_Superclass self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """GetVirtualDomainTimeStamp(itkImageToImageMetricv4D2D2_Superclass self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD2":
        """GetVirtualSpacing(itkImageToImageMetricv4D2D2_Superclass self) -> itkVectorD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD2":
        """GetVirtualOrigin(itkImageToImageMetricv4D2D2_Superclass self) -> itkPointD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD22":
        """GetVirtualDirection(itkImageToImageMetricv4D2D2_Superclass self) -> itkMatrixD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion2 const &":
        """GetVirtualRegion(itkImageToImageMetricv4D2D2_Superclass self) -> itkImageRegion2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageD2 *":
        """GetModifiableVirtualImage(itkImageToImageMetricv4D2D2_Superclass self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageD2 *":
        """
        GetVirtualImage(itkImageToImageMetricv4D2D2_Superclass self) -> itkImageD2
        GetVirtualImage(itkImageToImageMetricv4D2D2_Superclass self) -> itkImageD2
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualIndex(itkImageToImageMetricv4D2D2_Superclass self, itkIndex2 index, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualPoint(itkImageToImageMetricv4D2D2_Superclass self, itkPointD2 point, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkImageToImageMetricv4D2D2_Superclass self, itkPointD2 point) -> bool
        IsInsideVirtualDomain(itkImageToImageMetricv4D2D2_Superclass self, itkIndex2 index) -> bool
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D2D2_Superclass

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D2D2_Superclass *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4D2D2_Superclass"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4D2D2_Superclass

        Create a new object of the class itkImageToImageMetricv4D2D2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4D2D2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4D2D2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4D2D2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4D2D2_Superclass.SetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetFixedTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetModifiableFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableFixedTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetFixedTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.SetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetMovingTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetModifiableMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableMovingTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetMovingTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.SetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetTransform, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetNumberOfValidPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetNumberOfValidPoints, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.SetVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomain, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.SetVirtualDomainFromImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomainFromImage, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SupportsArbitraryVirtualDomainSamples, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualDomainTimeStamp = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDomainTimeStamp, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualSpacing = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualSpacing, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualOrigin = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualOrigin, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualDirection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDirection, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualRegion = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualRegion, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetModifiableVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableVirtualImage, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.GetVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualImage, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualIndex, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualPoint, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass.IsInsideVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_IsInsideVirtualDomain, None, itkImageToImageMetricv4D2D2_Superclass)
itkImageToImageMetricv4D2D2_Superclass_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_swigregister
itkImageToImageMetricv4D2D2_Superclass_swigregister(itkImageToImageMetricv4D2D2_Superclass)

def itkImageToImageMetricv4D2D2_Superclass_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D2D2_Superclass *":
    """itkImageToImageMetricv4D2D2_Superclass_cast(itkLightObject obj) -> itkImageToImageMetricv4D2D2_Superclass"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_cast(obj)

class itkImageToImageMetricv4D3D3_Superclass(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """Proxy of C++ itkImageToImageMetricv4D3D3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetFixedTransform(itkImageToImageMetricv4D3D3_Superclass self, itkTransformD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD33 *":
        """GetModifiableFixedTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD33 *":
        """
        GetFixedTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33
        GetFixedTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetMovingTransform(itkImageToImageMetricv4D3D3_Superclass self, itkTransformD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD33 *":
        """GetModifiableMovingTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD33 *":
        """
        GetMovingTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33
        GetMovingTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD33') -> "void":
        """SetTransform(itkImageToImageMetricv4D3D3_Superclass self, itkTransformD33 transform)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD33 const *":
        """GetTransform(itkImageToImageMetricv4D3D3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """GetNumberOfValidPoints(itkImageToImageMetricv4D3D3_Superclass self) -> unsigned long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD3', origin: 'itkPointD3', direction: 'itkMatrixD33', region: 'itkImageRegion3') -> "void":
        """SetVirtualDomain(itkImageToImageMetricv4D3D3_Superclass self, itkVectorD3 spacing, itkPointD3 origin, itkMatrixD33 direction, itkImageRegion3 region)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageD3') -> "void":
        """SetVirtualDomainFromImage(itkImageToImageMetricv4D3D3_Superclass self, itkImageD3 virtualImage)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """SupportsArbitraryVirtualDomainSamples(itkImageToImageMetricv4D3D3_Superclass self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """GetVirtualDomainTimeStamp(itkImageToImageMetricv4D3D3_Superclass self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD3":
        """GetVirtualSpacing(itkImageToImageMetricv4D3D3_Superclass self) -> itkVectorD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD3":
        """GetVirtualOrigin(itkImageToImageMetricv4D3D3_Superclass self) -> itkPointD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD33":
        """GetVirtualDirection(itkImageToImageMetricv4D3D3_Superclass self) -> itkMatrixD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion3 const &":
        """GetVirtualRegion(itkImageToImageMetricv4D3D3_Superclass self) -> itkImageRegion3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageD3 *":
        """GetModifiableVirtualImage(itkImageToImageMetricv4D3D3_Superclass self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageD3 *":
        """
        GetVirtualImage(itkImageToImageMetricv4D3D3_Superclass self) -> itkImageD3
        GetVirtualImage(itkImageToImageMetricv4D3D3_Superclass self) -> itkImageD3
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualIndex(itkImageToImageMetricv4D3D3_Superclass self, itkIndex3 index, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualPoint(itkImageToImageMetricv4D3D3_Superclass self, itkPointD3 point, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkImageToImageMetricv4D3D3_Superclass self, itkPointD3 point) -> bool
        IsInsideVirtualDomain(itkImageToImageMetricv4D3D3_Superclass self, itkIndex3 index) -> bool
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D3D3_Superclass

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D3D3_Superclass *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4D3D3_Superclass"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4D3D3_Superclass

        Create a new object of the class itkImageToImageMetricv4D3D3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4D3D3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4D3D3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4D3D3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4D3D3_Superclass.SetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetFixedTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetModifiableFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableFixedTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetFixedTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.SetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetMovingTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetModifiableMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableMovingTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetMovingTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.SetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetTransform, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetNumberOfValidPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetNumberOfValidPoints, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.SetVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomain, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.SetVirtualDomainFromImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomainFromImage, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SupportsArbitraryVirtualDomainSamples, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualDomainTimeStamp = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDomainTimeStamp, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualSpacing = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualSpacing, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualOrigin = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualOrigin, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualDirection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDirection, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualRegion = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualRegion, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetModifiableVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableVirtualImage, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.GetVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualImage, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualIndex, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualPoint, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass.IsInsideVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_IsInsideVirtualDomain, None, itkImageToImageMetricv4D3D3_Superclass)
itkImageToImageMetricv4D3D3_Superclass_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_swigregister
itkImageToImageMetricv4D3D3_Superclass_swigregister(itkImageToImageMetricv4D3D3_Superclass)

def itkImageToImageMetricv4D3D3_Superclass_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D3D3_Superclass *":
    """itkImageToImageMetricv4D3D3_Superclass_cast(itkLightObject obj) -> itkImageToImageMetricv4D3D3_Superclass"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_cast(obj)

class itkImageToImageMetricv4F2F2_Superclass(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """Proxy of C++ itkImageToImageMetricv4F2F2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetFixedTransform(itkImageToImageMetricv4F2F2_Superclass self, itkTransformD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD22 *":
        """GetModifiableFixedTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD22 *":
        """
        GetFixedTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22
        GetFixedTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetMovingTransform(itkImageToImageMetricv4F2F2_Superclass self, itkTransformD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD22 *":
        """GetModifiableMovingTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD22 *":
        """
        GetMovingTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22
        GetMovingTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD22') -> "void":
        """SetTransform(itkImageToImageMetricv4F2F2_Superclass self, itkTransformD22 transform)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD22 const *":
        """GetTransform(itkImageToImageMetricv4F2F2_Superclass self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """GetNumberOfValidPoints(itkImageToImageMetricv4F2F2_Superclass self) -> unsigned long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD2', origin: 'itkPointD2', direction: 'itkMatrixD22', region: 'itkImageRegion2') -> "void":
        """SetVirtualDomain(itkImageToImageMetricv4F2F2_Superclass self, itkVectorD2 spacing, itkPointD2 origin, itkMatrixD22 direction, itkImageRegion2 region)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageF2') -> "void":
        """SetVirtualDomainFromImage(itkImageToImageMetricv4F2F2_Superclass self, itkImageF2 virtualImage)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """SupportsArbitraryVirtualDomainSamples(itkImageToImageMetricv4F2F2_Superclass self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """GetVirtualDomainTimeStamp(itkImageToImageMetricv4F2F2_Superclass self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD2":
        """GetVirtualSpacing(itkImageToImageMetricv4F2F2_Superclass self) -> itkVectorD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD2":
        """GetVirtualOrigin(itkImageToImageMetricv4F2F2_Superclass self) -> itkPointD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD22":
        """GetVirtualDirection(itkImageToImageMetricv4F2F2_Superclass self) -> itkMatrixD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion2 const &":
        """GetVirtualRegion(itkImageToImageMetricv4F2F2_Superclass self) -> itkImageRegion2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageF2 *":
        """GetModifiableVirtualImage(itkImageToImageMetricv4F2F2_Superclass self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageF2 *":
        """
        GetVirtualImage(itkImageToImageMetricv4F2F2_Superclass self) -> itkImageF2
        GetVirtualImage(itkImageToImageMetricv4F2F2_Superclass self) -> itkImageF2
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualIndex(itkImageToImageMetricv4F2F2_Superclass self, itkIndex2 index, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualPoint(itkImageToImageMetricv4F2F2_Superclass self, itkPointD2 point, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkImageToImageMetricv4F2F2_Superclass self, itkPointD2 point) -> bool
        IsInsideVirtualDomain(itkImageToImageMetricv4F2F2_Superclass self, itkIndex2 index) -> bool
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F2F2_Superclass

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F2F2_Superclass *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4F2F2_Superclass"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4F2F2_Superclass

        Create a new object of the class itkImageToImageMetricv4F2F2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4F2F2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4F2F2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4F2F2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4F2F2_Superclass.SetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetFixedTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetModifiableFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableFixedTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetFixedTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.SetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetMovingTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetModifiableMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableMovingTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetMovingTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.SetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetTransform, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetNumberOfValidPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetNumberOfValidPoints, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.SetVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomain, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.SetVirtualDomainFromImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomainFromImage, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SupportsArbitraryVirtualDomainSamples, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualDomainTimeStamp = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDomainTimeStamp, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualSpacing = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualSpacing, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualOrigin = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualOrigin, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualDirection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDirection, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualRegion = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualRegion, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetModifiableVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableVirtualImage, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.GetVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualImage, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualIndex, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualPoint, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass.IsInsideVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_IsInsideVirtualDomain, None, itkImageToImageMetricv4F2F2_Superclass)
itkImageToImageMetricv4F2F2_Superclass_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_swigregister
itkImageToImageMetricv4F2F2_Superclass_swigregister(itkImageToImageMetricv4F2F2_Superclass)

def itkImageToImageMetricv4F2F2_Superclass_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F2F2_Superclass *":
    """itkImageToImageMetricv4F2F2_Superclass_cast(itkLightObject obj) -> itkImageToImageMetricv4F2F2_Superclass"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_cast(obj)

class itkImageToImageMetricv4F3F3_Superclass(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """Proxy of C++ itkImageToImageMetricv4F3F3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetFixedTransform(itkImageToImageMetricv4F3F3_Superclass self, itkTransformD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD33 *":
        """GetModifiableFixedTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD33 *":
        """
        GetFixedTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33
        GetFixedTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetMovingTransform(itkImageToImageMetricv4F3F3_Superclass self, itkTransformD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD33 *":
        """GetModifiableMovingTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD33 *":
        """
        GetMovingTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33
        GetMovingTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD33') -> "void":
        """SetTransform(itkImageToImageMetricv4F3F3_Superclass self, itkTransformD33 transform)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD33 const *":
        """GetTransform(itkImageToImageMetricv4F3F3_Superclass self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """GetNumberOfValidPoints(itkImageToImageMetricv4F3F3_Superclass self) -> unsigned long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD3', origin: 'itkPointD3', direction: 'itkMatrixD33', region: 'itkImageRegion3') -> "void":
        """SetVirtualDomain(itkImageToImageMetricv4F3F3_Superclass self, itkVectorD3 spacing, itkPointD3 origin, itkMatrixD33 direction, itkImageRegion3 region)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageF3') -> "void":
        """SetVirtualDomainFromImage(itkImageToImageMetricv4F3F3_Superclass self, itkImageF3 virtualImage)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """SupportsArbitraryVirtualDomainSamples(itkImageToImageMetricv4F3F3_Superclass self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """GetVirtualDomainTimeStamp(itkImageToImageMetricv4F3F3_Superclass self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD3":
        """GetVirtualSpacing(itkImageToImageMetricv4F3F3_Superclass self) -> itkVectorD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD3":
        """GetVirtualOrigin(itkImageToImageMetricv4F3F3_Superclass self) -> itkPointD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD33":
        """GetVirtualDirection(itkImageToImageMetricv4F3F3_Superclass self) -> itkMatrixD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion3 const &":
        """GetVirtualRegion(itkImageToImageMetricv4F3F3_Superclass self) -> itkImageRegion3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageF3 *":
        """GetModifiableVirtualImage(itkImageToImageMetricv4F3F3_Superclass self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageF3 *":
        """
        GetVirtualImage(itkImageToImageMetricv4F3F3_Superclass self) -> itkImageF3
        GetVirtualImage(itkImageToImageMetricv4F3F3_Superclass self) -> itkImageF3
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualIndex(itkImageToImageMetricv4F3F3_Superclass self, itkIndex3 index, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """ComputeParameterOffsetFromVirtualPoint(itkImageToImageMetricv4F3F3_Superclass self, itkPointD3 point, unsigned int const & numberOfLocalParameters) -> long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkImageToImageMetricv4F3F3_Superclass self, itkPointD3 point) -> bool
        IsInsideVirtualDomain(itkImageToImageMetricv4F3F3_Superclass self, itkIndex3 index) -> bool
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F3F3_Superclass

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F3F3_Superclass *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4F3F3_Superclass"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4F3F3_Superclass

        Create a new object of the class itkImageToImageMetricv4F3F3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4F3F3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4F3F3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4F3F3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4F3F3_Superclass.SetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetFixedTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetModifiableFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableFixedTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetFixedTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetFixedTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.SetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetMovingTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetModifiableMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableMovingTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetMovingTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetMovingTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.SetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetTransform = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetTransform, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetNumberOfValidPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetNumberOfValidPoints, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.SetVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomain, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.SetVirtualDomainFromImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomainFromImage, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SupportsArbitraryVirtualDomainSamples, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualDomainTimeStamp = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDomainTimeStamp, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualSpacing = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualSpacing, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualOrigin = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualOrigin, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualDirection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDirection, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualRegion = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualRegion, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetModifiableVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableVirtualImage, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.GetVirtualImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualImage, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualIndex, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualPoint, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass.IsInsideVirtualDomain = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_IsInsideVirtualDomain, None, itkImageToImageMetricv4F3F3_Superclass)
itkImageToImageMetricv4F3F3_Superclass_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_swigregister
itkImageToImageMetricv4F3F3_Superclass_swigregister(itkImageToImageMetricv4F3F3_Superclass)

def itkImageToImageMetricv4F3F3_Superclass_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F3F3_Superclass *":
    """itkImageToImageMetricv4F3F3_Superclass_cast(itkLightObject obj) -> itkImageToImageMetricv4F3F3_Superclass"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_cast(obj)

class itkImageToImageMetricv4D2D2(itkImageToImageMetricv4D2D2_Superclass):
    """


    Computes similarity between regions of two images, using two user-
    supplied transforms, a 'fixed' transform and a 'moving' transform.

    WARNING:  Integer-type images are not yet supported. See concept-
    checking in DefaultImageToImageMetricTraitsv4.  Templated over the
    fixed and moving image types, as well as an optional VirtualImage type
    to define the virtual domain. The VirtualImage type defaults to
    TFixedImage. If TFixedImage is type VectorImage, then TVirtualImage
    must be set separately to a non-VectorImage type, e.g. Image<unsigned
    char, dimension>.  If the user does not set the virtual domain
    explicitly, then it is created during the call to Initialize from the
    fixed image by copying its information. See ObjectToObjectMetric for
    more discussion on the virtual domain.

    At a minimum, the user must: 1) Set images using SetFixedImage and
    SetMovingImage. 2) Call Initialize.

    Image gradient calculations

    Image gradients can be calculated in one of two ways: 1) Using a
    gradient image filter, by setting Use[Fixed|Moving]ImageGradientFilter
    to true. By default this is set as an
    itkGradientRecursiveGaussianImageFilter, a smoothed gradient filter. A
    filter uses more memory, because it calculates all gradients at once
    and stores them in an image. The advantage of pre-calculation is for
    the fixed image gradients, since they only need be calculated once,
    and for metrics that need to access image gradients more than once for
    a particular point. The fixed image gradients are only calculated once
    when this option is set, during Initialize. 2) Otherwise, an image
    gradient calculator based on ImageFunction is used. By default the
    CentralDifferenceImageFunction is used. This calculation is not
    smoothed and gives different results than
    GradientRecursiveGaussianImageFilter. The advantage is that less
    memory is used. However for the fixed image, it means needlessly
    computing the image gradients at each iteration of a registration
    instead of just computing once at the beginning. The user can supply a
    different function by calling SetFixedImageGradientCalculator and/or
    SetMovingImageGradientCalculator.

    Both image gradient calculation methods are threaded. Generally it is
    not recommended to use different image gradient methods for the fixed
    and moving images because the methods return different results.

    Image Masks

    Image masks are supported using SetMovingImageMask or
    SetFixedImageMask. If the image mask is sparse, see the comments for
    use of sparse point sets.

    Sparse Sampling

    Sparse sampling is performed by supplying an arbitrary point list over
    which to evaluate the metric. It's presumed that the user will be
    working in terms of the fixed image domain, and thus the point list is
    expected to be in the fixed domain. Internally, the points are
    transformed into the virtual domain as needed. The attributes/data of
    each point in the set are not used, but rather the point's geometric
    coordinates. Point sets are enabled by calling UseSampledPointSet,
    then the SetFixedSampledPointSet is called or
    SetVirtualSampledPointSet along with SetUseVirtualSampledPointSet.

    If the point set is sparse, the option
    SetUse[Fixed|Moving]ImageGradientFilter typically should be disabled
    to avoid excessive computation. However, the gradient values of the
    fixed image are not cached when using a point set (there are plans for
    this in the future), so depending on the number of iterations (when
    used during optimization) and the level of sparsity, it may be more
    efficient to use a gradient image filter for it because it will only
    be calculated once.  Vector Images

    To support vector images, the class must be declared using the
    VectorImageToImageMetricTraitsv4 class in the template declaration, as
    described above. Derived classes must provide special handling for
    vector pixel types. MeanSquaresImageToImageMetricv4 can be used as an
    example.

    Threading

    This class is threaded. Threading is handled by friend classes
    ImageToImageMetricv4GetValueAndDerivativeThreaderBase and
    ImageToImageMetricv4GetValueAndDerivativeThreader. Dense and sparse
    evaluation are handled by template specialization of the
    ImageToImageMetricv4GetValueAndDerivativeThreader::ThreadedExecution
    method, in order to iterate over either all points in the virtual
    space in the case of dense evaluation, or a list of points in the
    sparse case.

    Methods and members of ImageToImageMetricv4 are accessed by the
    threading class using its m_Associate member, which points to the
    containing instance of ImageToImageMetricv4.

    Pre- and post-processing for threaded operation is handled in ImageToI
    mageMetricv4GetValueAndDerivativeThreaderBase::BeforeThreadedExecution
    , and ImageToImageMetricv4GetValueAndDerivativeThreaderBase::AfterThre
    adedExecution, respectively.

    Derived classes:

    The GetValue method may be overridden to provide better-optimized or
    otherwise different behavior as needed. Otherwise, the
    m_ComputeDerivative member should be checked to avoid computing
    derivatives when the caller has called GetValue(). See
    GetComputeDerivative() in this class and in this metric's threader
    class.

    Derived classes must derive a threader class from
    ImageToImageMetricv4GetValueAndDerivativeThreader, from which a
    DenseGetValueAndDerivativeThreader and
    SparseGetValueAndDerivativeThreader must be defined. Then, must be
    called in the constructor.

    The ProcessPoint method of the derived threader must be overriden to
    provide the metric-specific evaluation.

    To access methods and members within the derived metric class from the
    derived threader class, the user must cast m_Associate to the type of
    the derived metric class.

    See ImageToImageMetricv4Test for a clear example of what a derived
    class must implement and do.

    C++ includes: itkImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageD2') -> "void":
        """SetFixedImage(itkImageToImageMetricv4D2D2 self, itkImageD2 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD2 const *":
        """GetFixedImage(itkImageToImageMetricv4D2D2 self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD2') -> "void":
        """
        SetMovingImage(itkImageToImageMetricv4D2D2 self, itkImageD2 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD2 const *":
        """GetMovingImage(itkImageToImageMetricv4D2D2 self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImage(self)


    def SetFixedInterpolator(self, _arg: 'itkInterpolateImageFunctionID2D') -> "void":
        """
        SetFixedInterpolator(itkImageToImageMetricv4D2D2 self, itkInterpolateImageFunctionID2D _arg)

        Connect the
        fixed interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedInterpolator(self, _arg)


    def GetModifiableFixedInterpolator(self) -> "itkInterpolateImageFunctionID2D *":
        """GetModifiableFixedInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedInterpolator(self)


    def GetFixedInterpolator(self, *args) -> "itkInterpolateImageFunctionID2D *":
        """
        GetFixedInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D
        GetFixedInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedInterpolator(self, *args)


    def SetMovingInterpolator(self, _arg: 'itkInterpolateImageFunctionID2D') -> "void":
        """
        SetMovingInterpolator(itkImageToImageMetricv4D2D2 self, itkInterpolateImageFunctionID2D _arg)

        Connect the
        Moving interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingInterpolator(self, _arg)


    def GetModifiableMovingInterpolator(self) -> "itkInterpolateImageFunctionID2D *":
        """GetModifiableMovingInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingInterpolator(self)


    def GetMovingInterpolator(self, *args) -> "itkInterpolateImageFunctionID2D *":
        """
        GetMovingInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D
        GetMovingInterpolator(itkImageToImageMetricv4D2D2 self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingInterpolator(self, *args)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricv4D2D2 self, itkSpatialObject2 _arg)
        SetMovingImageMask(itkImageToImageMetricv4D2D2 self, itkSpatialObject2 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject2 const *":
        """GetMovingImageMask(itkImageToImageMetricv4D2D2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricv4D2D2 self, itkSpatialObject2 _arg)
        SetFixedImageMask(itkImageToImageMetricv4D2D2 self, itkSpatialObject2 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject2 const *":
        """GetFixedImageMask(itkImageToImageMetricv4D2D2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageMask(self)


    def SetFixedSampledPointSet(self, *args) -> "void":
        """
        SetFixedSampledPointSet(itkImageToImageMetricv4D2D2 self, itkPointSetD2 _arg)
        SetFixedSampledPointSet(itkImageToImageMetricv4D2D2 self, itkPointSetD2 _arg)

        Set/Get the
        fixed image domain sampling point set See main documentation regarding
        using fixed vs virtual domain for the point set. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedSampledPointSet(self, *args)


    def GetFixedSampledPointSet(self) -> "itkPointSetD2 const *":
        """GetFixedSampledPointSet(itkImageToImageMetricv4D2D2 self) -> itkPointSetD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedSampledPointSet(self)


    def SetVirtualSampledPointSet(self, _arg: 'itkPointSetD2') -> "void":
        """
        SetVirtualSampledPointSet(itkImageToImageMetricv4D2D2 self, itkPointSetD2 _arg)

        Set/Get
        the virtual image domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetVirtualSampledPointSet(self, _arg)


    def GetVirtualSampledPointSet(self) -> "itkPointSetD2 const *":
        """GetVirtualSampledPointSet(itkImageToImageMetricv4D2D2 self) -> itkPointSetD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetVirtualSampledPointSet(self)


    def SetUseSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseSampledPointSet(itkImageToImageMetricv4D2D2 self, bool const _arg)

        Set/Get flag
        to use a domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseSampledPointSet(self, _arg)


    def GetUseSampledPointSet(self) -> "bool const &":
        """GetUseSampledPointSet(itkImageToImageMetricv4D2D2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseSampledPointSet(self)


    def UseSampledPointSetOn(self) -> "void":
        """UseSampledPointSetOn(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOn(self)


    def UseSampledPointSetOff(self) -> "void":
        """UseSampledPointSetOff(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOff(self)


    def SetUseVirtualSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseVirtualSampledPointSet(itkImageToImageMetricv4D2D2 self, bool const _arg)

        Set/Get flag to indicate of the VirtualSampledPointSet is set over the
        FixedSampledPointSet 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseVirtualSampledPointSet(self, _arg)


    def GetUseVirtualSampledPointSet(self) -> "bool const &":
        """GetUseVirtualSampledPointSet(itkImageToImageMetricv4D2D2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseVirtualSampledPointSet(self)


    def UseVirtualSampledPointSetOn(self) -> "void":
        """UseVirtualSampledPointSetOn(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOn(self)


    def UseVirtualSampledPointSetOff(self) -> "void":
        """UseVirtualSampledPointSetOff(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOff(self)


    def SetFixedImageGradientFilter(self, _arg: 'itkImageToImageFilterID2ICVD22') -> "void":
        """
        SetFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self, itkImageToImageFilterID2ICVD22 _arg)

        Set/Get
        the gradient filter 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientFilter(self, _arg)


    def GetModifiableFixedImageGradientFilter(self) -> "itkImageToImageFilterID2ICVD22 *":
        """GetModifiableFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientFilter(self)


    def GetFixedImageGradientFilter(self, *args) -> "itkImageToImageFilterID2ICVD22 *":
        """
        GetFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22
        GetFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientFilter(self, *args)


    def SetMovingImageGradientFilter(self, _arg: 'itkImageToImageFilterID2ICVD22') -> "void":
        """SetMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self, itkImageToImageFilterID2ICVD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientFilter(self, _arg)


    def GetModifiableMovingImageGradientFilter(self) -> "itkImageToImageFilterID2ICVD22 *":
        """GetModifiableMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientFilter(self)


    def GetMovingImageGradientFilter(self, *args) -> "itkImageToImageFilterID2ICVD22 *":
        """
        GetMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22
        GetMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> itkImageToImageFilterID2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientFilter(self, *args)


    def SetFixedImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *') -> "void":
        """
        SetFixedImageGradientCalculator(itkImageToImageMetricv4D2D2 self, itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > * _arg)

        Set/Get gradient calculators 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientCalculator(self, _arg)


    def GetModifiableFixedImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *":
        """GetModifiableFixedImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientCalculator(self)


    def GetFixedImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *":
        """
        GetFixedImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > const
        GetFixedImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientCalculator(self, *args)


    def SetMovingImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *') -> "void":
        """SetMovingImageGradientCalculator(itkImageToImageMetricv4D2D2 self, itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > * _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientCalculator(self, _arg)


    def GetModifiableMovingImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *":
        """GetModifiableMovingImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientCalculator(self)


    def GetMovingImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *":
        """
        GetMovingImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > const
        GetMovingImageGradientCalculator(itkImageToImageMetricv4D2D2 self) -> itk::ImageFunction< itk::Image< double,2 >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientCalculator(self, *args)


    def SetUseFixedImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self, bool const _arg)

        Set/Get gradient computation via an image filter, for fixed image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFixedImageGradientFilter(self, _arg)


    def GetUseFixedImageGradientFilter(self) -> "bool const &":
        """GetUseFixedImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFixedImageGradientFilter(self)


    def UseFixedImageGradientFilterOn(self) -> "void":
        """UseFixedImageGradientFilterOn(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOn(self)


    def UseFixedImageGradientFilterOff(self) -> "void":
        """UseFixedImageGradientFilterOff(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOff(self)


    def SetUseMovingImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self, bool const _arg)

        Set/Get gradient computation via an image filter. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseMovingImageGradientFilter(self, _arg)


    def GetUseMovingImageGradientFilter(self) -> "bool const &":
        """GetUseMovingImageGradientFilter(itkImageToImageMetricv4D2D2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseMovingImageGradientFilter(self)


    def UseMovingImageGradientFilterOn(self) -> "void":
        """UseMovingImageGradientFilterOn(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOn(self)


    def UseMovingImageGradientFilterOff(self) -> "void":
        """UseMovingImageGradientFilterOff(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOff(self)


    def GetNumberOfWorkUnitsUsed(self) -> "unsigned int":
        """
        GetNumberOfWorkUnitsUsed(itkImageToImageMetricv4D2D2 self) -> unsigned int

        Get number
        of work units to used in the the most recent evaluation. Only valid
        after GetValueAndDerivative() or GetValue() has been called. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfWorkUnitsUsed(self)


    def SetMaximumNumberOfWorkUnits(self, workUnits: 'unsigned int const') -> "void":
        """
        SetMaximumNumberOfWorkUnits(itkImageToImageMetricv4D2D2 self, unsigned int const workUnits)

        Set
        number of work units to use. This the maximum number of work units to
        use when multithreaded. The actual number of work units used (may be
        less than this value) can be obtained with GetNumberOfWorkUnitsUsed.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMaximumNumberOfWorkUnits(self, workUnits)


    def GetMaximumNumberOfWorkUnits(self) -> "unsigned int":
        """GetMaximumNumberOfWorkUnits(itkImageToImageMetricv4D2D2 self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMaximumNumberOfWorkUnits(self)


    def FinalizeThread(self, arg0: 'unsigned int const') -> "void":
        """
        FinalizeThread(itkImageToImageMetricv4D2D2 self, unsigned int const arg0)

        Finalize the per-
        thread components for computing metric. Some threads can accumulate
        their data as the thread finishes rather than waiting for all threads
        to finish before the accumulation occurs. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_FinalizeThread(self, arg0)


    def GetModifiableFixedImageGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableFixedImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientImage(self)


    def GetFixedImageGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetFixedImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22
        GetFixedImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientImage(self, *args)


    def GetModifiableMovingImageGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableMovingImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientImage(self)


    def GetMovingImageGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetMovingImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22
        GetMovingImageGradientImage(itkImageToImageMetricv4D2D2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientImage(self, *args)


    def GetNumberOfDomainPoints(self) -> "unsigned long":
        """
        GetNumberOfDomainPoints(itkImageToImageMetricv4D2D2 self) -> unsigned long

        Get the
        number of points in the domain used to evaluate the metric. This will
        differ depending on whether a sampled point set or dense sampling is
        used, and will be greater than or equal to GetNumberOfValidPoints().

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfDomainPoints(self)


    def SetUseFloatingPointCorrection(self, _arg: 'bool const') -> "void":
        """
        SetUseFloatingPointCorrection(itkImageToImageMetricv4D2D2 self, bool const _arg)

        Set/Get the option for applying floating point resolution truncation
        to derivative calculations in global support cases. False by default.
        It is only applied in global support cases (i.e. with global-support
        transforms) because in these cases, the per-point derivative values
        are added cumulatively, which can lead to loss of precision when the
        sum becomes much larger than the values being added. The goal is more
        consistent results across the number of threads used for an
        evaluation. The resolution can be changed using
        SetFloatingPointCorrectionResolution(). The metric always sums
        derivative values using a CompensatedSummation object, but empirically
        this provides only a slight improvement in precision across number of
        threads during registration.

        WARNING:  The metric does not perform any normalization so the results
        of this truncation are highly dependent on the derivative magnitudes.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFloatingPointCorrection(self, _arg)


    def GetUseFloatingPointCorrection(self) -> "bool const &":
        """GetUseFloatingPointCorrection(itkImageToImageMetricv4D2D2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFloatingPointCorrection(self)


    def UseFloatingPointCorrectionOn(self) -> "void":
        """UseFloatingPointCorrectionOn(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOn(self)


    def UseFloatingPointCorrectionOff(self) -> "void":
        """UseFloatingPointCorrectionOff(itkImageToImageMetricv4D2D2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOff(self)


    def SetFloatingPointCorrectionResolution(self, _arg: 'double const') -> "void":
        """
        SetFloatingPointCorrectionResolution(itkImageToImageMetricv4D2D2 self, double const _arg)

        Set/Get the floating point resolution used optionally by the
        derivatives. If this is set, for example to 1e5, then the derivative
        will have precision up to 5 points beyond the decimal point. And
        precision beyond that will be truncated. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFloatingPointCorrectionResolution(self, _arg)


    def GetFloatingPointCorrectionResolution(self) -> "double":
        """GetFloatingPointCorrectionResolution(itkImageToImageMetricv4D2D2 self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFloatingPointCorrectionResolution(self)


    def GetNumberOfSkippedFixedSampledPoints(self) -> "unsigned long const &":
        """
        GetNumberOfSkippedFixedSampledPoints(itkImageToImageMetricv4D2D2 self) -> unsigned long const &

        Get the number of sampled fixed sampled points that are deemed
        invalid during conversion to virtual domain in Initialize(). For
        informational purposes. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfSkippedFixedSampledPoints(self)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D2D2

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D2D2 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4D2D2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4D2D2

        Create a new object of the class itkImageToImageMetricv4D2D2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4D2D2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4D2D2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4D2D2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4D2D2.SetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingInterpolator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageMask, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageMask, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageMask, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageMask, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetVirtualSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetVirtualSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOn, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOff, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseVirtualSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseVirtualSampledPointSet, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseVirtualSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOn, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseVirtualSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOff, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientCalculator, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFixedImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFixedImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseFixedImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOn, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseFixedImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOff, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseMovingImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseMovingImageGradientFilter, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseMovingImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOn, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseMovingImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOff, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetNumberOfWorkUnitsUsed = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfWorkUnitsUsed, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.FinalizeThread = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_FinalizeThread, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetModifiableMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientImage, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetNumberOfDomainPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfDomainPoints, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFloatingPointCorrection, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFloatingPointCorrection, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseFloatingPointCorrectionOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOn, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.UseFloatingPointCorrectionOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOff, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.SetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2.GetNumberOfSkippedFixedSampledPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfSkippedFixedSampledPoints, None, itkImageToImageMetricv4D2D2)
itkImageToImageMetricv4D2D2_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_swigregister
itkImageToImageMetricv4D2D2_swigregister(itkImageToImageMetricv4D2D2)

def itkImageToImageMetricv4D2D2_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D2D2 *":
    """itkImageToImageMetricv4D2D2_cast(itkLightObject obj) -> itkImageToImageMetricv4D2D2"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_cast(obj)

class itkImageToImageMetricv4D3D3(itkImageToImageMetricv4D3D3_Superclass):
    """


    Computes similarity between regions of two images, using two user-
    supplied transforms, a 'fixed' transform and a 'moving' transform.

    WARNING:  Integer-type images are not yet supported. See concept-
    checking in DefaultImageToImageMetricTraitsv4.  Templated over the
    fixed and moving image types, as well as an optional VirtualImage type
    to define the virtual domain. The VirtualImage type defaults to
    TFixedImage. If TFixedImage is type VectorImage, then TVirtualImage
    must be set separately to a non-VectorImage type, e.g. Image<unsigned
    char, dimension>.  If the user does not set the virtual domain
    explicitly, then it is created during the call to Initialize from the
    fixed image by copying its information. See ObjectToObjectMetric for
    more discussion on the virtual domain.

    At a minimum, the user must: 1) Set images using SetFixedImage and
    SetMovingImage. 2) Call Initialize.

    Image gradient calculations

    Image gradients can be calculated in one of two ways: 1) Using a
    gradient image filter, by setting Use[Fixed|Moving]ImageGradientFilter
    to true. By default this is set as an
    itkGradientRecursiveGaussianImageFilter, a smoothed gradient filter. A
    filter uses more memory, because it calculates all gradients at once
    and stores them in an image. The advantage of pre-calculation is for
    the fixed image gradients, since they only need be calculated once,
    and for metrics that need to access image gradients more than once for
    a particular point. The fixed image gradients are only calculated once
    when this option is set, during Initialize. 2) Otherwise, an image
    gradient calculator based on ImageFunction is used. By default the
    CentralDifferenceImageFunction is used. This calculation is not
    smoothed and gives different results than
    GradientRecursiveGaussianImageFilter. The advantage is that less
    memory is used. However for the fixed image, it means needlessly
    computing the image gradients at each iteration of a registration
    instead of just computing once at the beginning. The user can supply a
    different function by calling SetFixedImageGradientCalculator and/or
    SetMovingImageGradientCalculator.

    Both image gradient calculation methods are threaded. Generally it is
    not recommended to use different image gradient methods for the fixed
    and moving images because the methods return different results.

    Image Masks

    Image masks are supported using SetMovingImageMask or
    SetFixedImageMask. If the image mask is sparse, see the comments for
    use of sparse point sets.

    Sparse Sampling

    Sparse sampling is performed by supplying an arbitrary point list over
    which to evaluate the metric. It's presumed that the user will be
    working in terms of the fixed image domain, and thus the point list is
    expected to be in the fixed domain. Internally, the points are
    transformed into the virtual domain as needed. The attributes/data of
    each point in the set are not used, but rather the point's geometric
    coordinates. Point sets are enabled by calling UseSampledPointSet,
    then the SetFixedSampledPointSet is called or
    SetVirtualSampledPointSet along with SetUseVirtualSampledPointSet.

    If the point set is sparse, the option
    SetUse[Fixed|Moving]ImageGradientFilter typically should be disabled
    to avoid excessive computation. However, the gradient values of the
    fixed image are not cached when using a point set (there are plans for
    this in the future), so depending on the number of iterations (when
    used during optimization) and the level of sparsity, it may be more
    efficient to use a gradient image filter for it because it will only
    be calculated once.  Vector Images

    To support vector images, the class must be declared using the
    VectorImageToImageMetricTraitsv4 class in the template declaration, as
    described above. Derived classes must provide special handling for
    vector pixel types. MeanSquaresImageToImageMetricv4 can be used as an
    example.

    Threading

    This class is threaded. Threading is handled by friend classes
    ImageToImageMetricv4GetValueAndDerivativeThreaderBase and
    ImageToImageMetricv4GetValueAndDerivativeThreader. Dense and sparse
    evaluation are handled by template specialization of the
    ImageToImageMetricv4GetValueAndDerivativeThreader::ThreadedExecution
    method, in order to iterate over either all points in the virtual
    space in the case of dense evaluation, or a list of points in the
    sparse case.

    Methods and members of ImageToImageMetricv4 are accessed by the
    threading class using its m_Associate member, which points to the
    containing instance of ImageToImageMetricv4.

    Pre- and post-processing for threaded operation is handled in ImageToI
    mageMetricv4GetValueAndDerivativeThreaderBase::BeforeThreadedExecution
    , and ImageToImageMetricv4GetValueAndDerivativeThreaderBase::AfterThre
    adedExecution, respectively.

    Derived classes:

    The GetValue method may be overridden to provide better-optimized or
    otherwise different behavior as needed. Otherwise, the
    m_ComputeDerivative member should be checked to avoid computing
    derivatives when the caller has called GetValue(). See
    GetComputeDerivative() in this class and in this metric's threader
    class.

    Derived classes must derive a threader class from
    ImageToImageMetricv4GetValueAndDerivativeThreader, from which a
    DenseGetValueAndDerivativeThreader and
    SparseGetValueAndDerivativeThreader must be defined. Then, must be
    called in the constructor.

    The ProcessPoint method of the derived threader must be overriden to
    provide the metric-specific evaluation.

    To access methods and members within the derived metric class from the
    derived threader class, the user must cast m_Associate to the type of
    the derived metric class.

    See ImageToImageMetricv4Test for a clear example of what a derived
    class must implement and do.

    C++ includes: itkImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImage(itkImageToImageMetricv4D3D3 self, itkImageD3 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """GetFixedImage(itkImageToImageMetricv4D3D3 self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD3') -> "void":
        """
        SetMovingImage(itkImageToImageMetricv4D3D3 self, itkImageD3 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """GetMovingImage(itkImageToImageMetricv4D3D3 self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImage(self)


    def SetFixedInterpolator(self, _arg: 'itkInterpolateImageFunctionID3D') -> "void":
        """
        SetFixedInterpolator(itkImageToImageMetricv4D3D3 self, itkInterpolateImageFunctionID3D _arg)

        Connect the
        fixed interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedInterpolator(self, _arg)


    def GetModifiableFixedInterpolator(self) -> "itkInterpolateImageFunctionID3D *":
        """GetModifiableFixedInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedInterpolator(self)


    def GetFixedInterpolator(self, *args) -> "itkInterpolateImageFunctionID3D *":
        """
        GetFixedInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D
        GetFixedInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedInterpolator(self, *args)


    def SetMovingInterpolator(self, _arg: 'itkInterpolateImageFunctionID3D') -> "void":
        """
        SetMovingInterpolator(itkImageToImageMetricv4D3D3 self, itkInterpolateImageFunctionID3D _arg)

        Connect the
        Moving interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingInterpolator(self, _arg)


    def GetModifiableMovingInterpolator(self) -> "itkInterpolateImageFunctionID3D *":
        """GetModifiableMovingInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingInterpolator(self)


    def GetMovingInterpolator(self, *args) -> "itkInterpolateImageFunctionID3D *":
        """
        GetMovingInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D
        GetMovingInterpolator(itkImageToImageMetricv4D3D3 self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingInterpolator(self, *args)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricv4D3D3 self, itkSpatialObject3 _arg)
        SetMovingImageMask(itkImageToImageMetricv4D3D3 self, itkSpatialObject3 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject3 const *":
        """GetMovingImageMask(itkImageToImageMetricv4D3D3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricv4D3D3 self, itkSpatialObject3 _arg)
        SetFixedImageMask(itkImageToImageMetricv4D3D3 self, itkSpatialObject3 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject3 const *":
        """GetFixedImageMask(itkImageToImageMetricv4D3D3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageMask(self)


    def SetFixedSampledPointSet(self, *args) -> "void":
        """
        SetFixedSampledPointSet(itkImageToImageMetricv4D3D3 self, itkPointSetD3 _arg)
        SetFixedSampledPointSet(itkImageToImageMetricv4D3D3 self, itkPointSetD3 _arg)

        Set/Get the
        fixed image domain sampling point set See main documentation regarding
        using fixed vs virtual domain for the point set. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedSampledPointSet(self, *args)


    def GetFixedSampledPointSet(self) -> "itkPointSetD3 const *":
        """GetFixedSampledPointSet(itkImageToImageMetricv4D3D3 self) -> itkPointSetD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedSampledPointSet(self)


    def SetVirtualSampledPointSet(self, _arg: 'itkPointSetD3') -> "void":
        """
        SetVirtualSampledPointSet(itkImageToImageMetricv4D3D3 self, itkPointSetD3 _arg)

        Set/Get
        the virtual image domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetVirtualSampledPointSet(self, _arg)


    def GetVirtualSampledPointSet(self) -> "itkPointSetD3 const *":
        """GetVirtualSampledPointSet(itkImageToImageMetricv4D3D3 self) -> itkPointSetD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetVirtualSampledPointSet(self)


    def SetUseSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseSampledPointSet(itkImageToImageMetricv4D3D3 self, bool const _arg)

        Set/Get flag
        to use a domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseSampledPointSet(self, _arg)


    def GetUseSampledPointSet(self) -> "bool const &":
        """GetUseSampledPointSet(itkImageToImageMetricv4D3D3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseSampledPointSet(self)


    def UseSampledPointSetOn(self) -> "void":
        """UseSampledPointSetOn(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOn(self)


    def UseSampledPointSetOff(self) -> "void":
        """UseSampledPointSetOff(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOff(self)


    def SetUseVirtualSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseVirtualSampledPointSet(itkImageToImageMetricv4D3D3 self, bool const _arg)

        Set/Get flag to indicate of the VirtualSampledPointSet is set over the
        FixedSampledPointSet 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseVirtualSampledPointSet(self, _arg)


    def GetUseVirtualSampledPointSet(self) -> "bool const &":
        """GetUseVirtualSampledPointSet(itkImageToImageMetricv4D3D3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseVirtualSampledPointSet(self)


    def UseVirtualSampledPointSetOn(self) -> "void":
        """UseVirtualSampledPointSetOn(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOn(self)


    def UseVirtualSampledPointSetOff(self) -> "void":
        """UseVirtualSampledPointSetOff(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOff(self)


    def SetFixedImageGradientFilter(self, _arg: 'itkImageToImageFilterID3ICVD33') -> "void":
        """
        SetFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self, itkImageToImageFilterID3ICVD33 _arg)

        Set/Get
        the gradient filter 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientFilter(self, _arg)


    def GetModifiableFixedImageGradientFilter(self) -> "itkImageToImageFilterID3ICVD33 *":
        """GetModifiableFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientFilter(self)


    def GetFixedImageGradientFilter(self, *args) -> "itkImageToImageFilterID3ICVD33 *":
        """
        GetFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33
        GetFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientFilter(self, *args)


    def SetMovingImageGradientFilter(self, _arg: 'itkImageToImageFilterID3ICVD33') -> "void":
        """SetMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self, itkImageToImageFilterID3ICVD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientFilter(self, _arg)


    def GetModifiableMovingImageGradientFilter(self) -> "itkImageToImageFilterID3ICVD33 *":
        """GetModifiableMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientFilter(self)


    def GetMovingImageGradientFilter(self, *args) -> "itkImageToImageFilterID3ICVD33 *":
        """
        GetMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33
        GetMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> itkImageToImageFilterID3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientFilter(self, *args)


    def SetFixedImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *') -> "void":
        """
        SetFixedImageGradientCalculator(itkImageToImageMetricv4D3D3 self, itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > * _arg)

        Set/Get gradient calculators 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientCalculator(self, _arg)


    def GetModifiableFixedImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *":
        """GetModifiableFixedImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientCalculator(self)


    def GetFixedImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *":
        """
        GetFixedImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > const
        GetFixedImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientCalculator(self, *args)


    def SetMovingImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *') -> "void":
        """SetMovingImageGradientCalculator(itkImageToImageMetricv4D3D3 self, itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > * _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientCalculator(self, _arg)


    def GetModifiableMovingImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *":
        """GetModifiableMovingImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientCalculator(self)


    def GetMovingImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *":
        """
        GetMovingImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > const
        GetMovingImageGradientCalculator(itkImageToImageMetricv4D3D3 self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double,3 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientCalculator(self, *args)


    def SetUseFixedImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self, bool const _arg)

        Set/Get gradient computation via an image filter, for fixed image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFixedImageGradientFilter(self, _arg)


    def GetUseFixedImageGradientFilter(self) -> "bool const &":
        """GetUseFixedImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFixedImageGradientFilter(self)


    def UseFixedImageGradientFilterOn(self) -> "void":
        """UseFixedImageGradientFilterOn(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOn(self)


    def UseFixedImageGradientFilterOff(self) -> "void":
        """UseFixedImageGradientFilterOff(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOff(self)


    def SetUseMovingImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self, bool const _arg)

        Set/Get gradient computation via an image filter. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseMovingImageGradientFilter(self, _arg)


    def GetUseMovingImageGradientFilter(self) -> "bool const &":
        """GetUseMovingImageGradientFilter(itkImageToImageMetricv4D3D3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseMovingImageGradientFilter(self)


    def UseMovingImageGradientFilterOn(self) -> "void":
        """UseMovingImageGradientFilterOn(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOn(self)


    def UseMovingImageGradientFilterOff(self) -> "void":
        """UseMovingImageGradientFilterOff(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOff(self)


    def GetNumberOfWorkUnitsUsed(self) -> "unsigned int":
        """
        GetNumberOfWorkUnitsUsed(itkImageToImageMetricv4D3D3 self) -> unsigned int

        Get number
        of work units to used in the the most recent evaluation. Only valid
        after GetValueAndDerivative() or GetValue() has been called. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfWorkUnitsUsed(self)


    def SetMaximumNumberOfWorkUnits(self, workUnits: 'unsigned int const') -> "void":
        """
        SetMaximumNumberOfWorkUnits(itkImageToImageMetricv4D3D3 self, unsigned int const workUnits)

        Set
        number of work units to use. This the maximum number of work units to
        use when multithreaded. The actual number of work units used (may be
        less than this value) can be obtained with GetNumberOfWorkUnitsUsed.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMaximumNumberOfWorkUnits(self, workUnits)


    def GetMaximumNumberOfWorkUnits(self) -> "unsigned int":
        """GetMaximumNumberOfWorkUnits(itkImageToImageMetricv4D3D3 self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMaximumNumberOfWorkUnits(self)


    def FinalizeThread(self, arg0: 'unsigned int const') -> "void":
        """
        FinalizeThread(itkImageToImageMetricv4D3D3 self, unsigned int const arg0)

        Finalize the per-
        thread components for computing metric. Some threads can accumulate
        their data as the thread finishes rather than waiting for all threads
        to finish before the accumulation occurs. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_FinalizeThread(self, arg0)


    def GetModifiableFixedImageGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableFixedImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientImage(self)


    def GetFixedImageGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetFixedImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33
        GetFixedImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientImage(self, *args)


    def GetModifiableMovingImageGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableMovingImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientImage(self)


    def GetMovingImageGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetMovingImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33
        GetMovingImageGradientImage(itkImageToImageMetricv4D3D3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientImage(self, *args)


    def GetNumberOfDomainPoints(self) -> "unsigned long":
        """
        GetNumberOfDomainPoints(itkImageToImageMetricv4D3D3 self) -> unsigned long

        Get the
        number of points in the domain used to evaluate the metric. This will
        differ depending on whether a sampled point set or dense sampling is
        used, and will be greater than or equal to GetNumberOfValidPoints().

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfDomainPoints(self)


    def SetUseFloatingPointCorrection(self, _arg: 'bool const') -> "void":
        """
        SetUseFloatingPointCorrection(itkImageToImageMetricv4D3D3 self, bool const _arg)

        Set/Get the option for applying floating point resolution truncation
        to derivative calculations in global support cases. False by default.
        It is only applied in global support cases (i.e. with global-support
        transforms) because in these cases, the per-point derivative values
        are added cumulatively, which can lead to loss of precision when the
        sum becomes much larger than the values being added. The goal is more
        consistent results across the number of threads used for an
        evaluation. The resolution can be changed using
        SetFloatingPointCorrectionResolution(). The metric always sums
        derivative values using a CompensatedSummation object, but empirically
        this provides only a slight improvement in precision across number of
        threads during registration.

        WARNING:  The metric does not perform any normalization so the results
        of this truncation are highly dependent on the derivative magnitudes.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFloatingPointCorrection(self, _arg)


    def GetUseFloatingPointCorrection(self) -> "bool const &":
        """GetUseFloatingPointCorrection(itkImageToImageMetricv4D3D3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFloatingPointCorrection(self)


    def UseFloatingPointCorrectionOn(self) -> "void":
        """UseFloatingPointCorrectionOn(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOn(self)


    def UseFloatingPointCorrectionOff(self) -> "void":
        """UseFloatingPointCorrectionOff(itkImageToImageMetricv4D3D3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOff(self)


    def SetFloatingPointCorrectionResolution(self, _arg: 'double const') -> "void":
        """
        SetFloatingPointCorrectionResolution(itkImageToImageMetricv4D3D3 self, double const _arg)

        Set/Get the floating point resolution used optionally by the
        derivatives. If this is set, for example to 1e5, then the derivative
        will have precision up to 5 points beyond the decimal point. And
        precision beyond that will be truncated. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFloatingPointCorrectionResolution(self, _arg)


    def GetFloatingPointCorrectionResolution(self) -> "double":
        """GetFloatingPointCorrectionResolution(itkImageToImageMetricv4D3D3 self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFloatingPointCorrectionResolution(self)


    def GetNumberOfSkippedFixedSampledPoints(self) -> "unsigned long const &":
        """
        GetNumberOfSkippedFixedSampledPoints(itkImageToImageMetricv4D3D3 self) -> unsigned long const &

        Get the number of sampled fixed sampled points that are deemed
        invalid during conversion to virtual domain in Initialize(). For
        informational purposes. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfSkippedFixedSampledPoints(self)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D3D3

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D3D3 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4D3D3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4D3D3

        Create a new object of the class itkImageToImageMetricv4D3D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4D3D3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4D3D3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4D3D3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4D3D3.SetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingInterpolator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageMask, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageMask, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageMask, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageMask, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetVirtualSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetVirtualSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOn, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOff, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseVirtualSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseVirtualSampledPointSet, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseVirtualSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOn, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseVirtualSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOff, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientCalculator, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFixedImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFixedImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseFixedImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOn, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseFixedImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOff, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseMovingImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseMovingImageGradientFilter, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseMovingImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOn, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseMovingImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOff, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetNumberOfWorkUnitsUsed = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfWorkUnitsUsed, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.FinalizeThread = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_FinalizeThread, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetModifiableMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientImage, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetNumberOfDomainPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfDomainPoints, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFloatingPointCorrection, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFloatingPointCorrection, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseFloatingPointCorrectionOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOn, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.UseFloatingPointCorrectionOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOff, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.SetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3.GetNumberOfSkippedFixedSampledPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfSkippedFixedSampledPoints, None, itkImageToImageMetricv4D3D3)
itkImageToImageMetricv4D3D3_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_swigregister
itkImageToImageMetricv4D3D3_swigregister(itkImageToImageMetricv4D3D3)

def itkImageToImageMetricv4D3D3_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4D3D3 *":
    """itkImageToImageMetricv4D3D3_cast(itkLightObject obj) -> itkImageToImageMetricv4D3D3"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_cast(obj)

class itkImageToImageMetricv4F2F2(itkImageToImageMetricv4F2F2_Superclass):
    """


    Computes similarity between regions of two images, using two user-
    supplied transforms, a 'fixed' transform and a 'moving' transform.

    WARNING:  Integer-type images are not yet supported. See concept-
    checking in DefaultImageToImageMetricTraitsv4.  Templated over the
    fixed and moving image types, as well as an optional VirtualImage type
    to define the virtual domain. The VirtualImage type defaults to
    TFixedImage. If TFixedImage is type VectorImage, then TVirtualImage
    must be set separately to a non-VectorImage type, e.g. Image<unsigned
    char, dimension>.  If the user does not set the virtual domain
    explicitly, then it is created during the call to Initialize from the
    fixed image by copying its information. See ObjectToObjectMetric for
    more discussion on the virtual domain.

    At a minimum, the user must: 1) Set images using SetFixedImage and
    SetMovingImage. 2) Call Initialize.

    Image gradient calculations

    Image gradients can be calculated in one of two ways: 1) Using a
    gradient image filter, by setting Use[Fixed|Moving]ImageGradientFilter
    to true. By default this is set as an
    itkGradientRecursiveGaussianImageFilter, a smoothed gradient filter. A
    filter uses more memory, because it calculates all gradients at once
    and stores them in an image. The advantage of pre-calculation is for
    the fixed image gradients, since they only need be calculated once,
    and for metrics that need to access image gradients more than once for
    a particular point. The fixed image gradients are only calculated once
    when this option is set, during Initialize. 2) Otherwise, an image
    gradient calculator based on ImageFunction is used. By default the
    CentralDifferenceImageFunction is used. This calculation is not
    smoothed and gives different results than
    GradientRecursiveGaussianImageFilter. The advantage is that less
    memory is used. However for the fixed image, it means needlessly
    computing the image gradients at each iteration of a registration
    instead of just computing once at the beginning. The user can supply a
    different function by calling SetFixedImageGradientCalculator and/or
    SetMovingImageGradientCalculator.

    Both image gradient calculation methods are threaded. Generally it is
    not recommended to use different image gradient methods for the fixed
    and moving images because the methods return different results.

    Image Masks

    Image masks are supported using SetMovingImageMask or
    SetFixedImageMask. If the image mask is sparse, see the comments for
    use of sparse point sets.

    Sparse Sampling

    Sparse sampling is performed by supplying an arbitrary point list over
    which to evaluate the metric. It's presumed that the user will be
    working in terms of the fixed image domain, and thus the point list is
    expected to be in the fixed domain. Internally, the points are
    transformed into the virtual domain as needed. The attributes/data of
    each point in the set are not used, but rather the point's geometric
    coordinates. Point sets are enabled by calling UseSampledPointSet,
    then the SetFixedSampledPointSet is called or
    SetVirtualSampledPointSet along with SetUseVirtualSampledPointSet.

    If the point set is sparse, the option
    SetUse[Fixed|Moving]ImageGradientFilter typically should be disabled
    to avoid excessive computation. However, the gradient values of the
    fixed image are not cached when using a point set (there are plans for
    this in the future), so depending on the number of iterations (when
    used during optimization) and the level of sparsity, it may be more
    efficient to use a gradient image filter for it because it will only
    be calculated once.  Vector Images

    To support vector images, the class must be declared using the
    VectorImageToImageMetricTraitsv4 class in the template declaration, as
    described above. Derived classes must provide special handling for
    vector pixel types. MeanSquaresImageToImageMetricv4 can be used as an
    example.

    Threading

    This class is threaded. Threading is handled by friend classes
    ImageToImageMetricv4GetValueAndDerivativeThreaderBase and
    ImageToImageMetricv4GetValueAndDerivativeThreader. Dense and sparse
    evaluation are handled by template specialization of the
    ImageToImageMetricv4GetValueAndDerivativeThreader::ThreadedExecution
    method, in order to iterate over either all points in the virtual
    space in the case of dense evaluation, or a list of points in the
    sparse case.

    Methods and members of ImageToImageMetricv4 are accessed by the
    threading class using its m_Associate member, which points to the
    containing instance of ImageToImageMetricv4.

    Pre- and post-processing for threaded operation is handled in ImageToI
    mageMetricv4GetValueAndDerivativeThreaderBase::BeforeThreadedExecution
    , and ImageToImageMetricv4GetValueAndDerivativeThreaderBase::AfterThre
    adedExecution, respectively.

    Derived classes:

    The GetValue method may be overridden to provide better-optimized or
    otherwise different behavior as needed. Otherwise, the
    m_ComputeDerivative member should be checked to avoid computing
    derivatives when the caller has called GetValue(). See
    GetComputeDerivative() in this class and in this metric's threader
    class.

    Derived classes must derive a threader class from
    ImageToImageMetricv4GetValueAndDerivativeThreader, from which a
    DenseGetValueAndDerivativeThreader and
    SparseGetValueAndDerivativeThreader must be defined. Then, must be
    called in the constructor.

    The ProcessPoint method of the derived threader must be overriden to
    provide the metric-specific evaluation.

    To access methods and members within the derived metric class from the
    derived threader class, the user must cast m_Associate to the type of
    the derived metric class.

    See ImageToImageMetricv4Test for a clear example of what a derived
    class must implement and do.

    C++ includes: itkImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageF2') -> "void":
        """SetFixedImage(itkImageToImageMetricv4F2F2 self, itkImageF2 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """GetFixedImage(itkImageToImageMetricv4F2F2 self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF2') -> "void":
        """
        SetMovingImage(itkImageToImageMetricv4F2F2 self, itkImageF2 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """GetMovingImage(itkImageToImageMetricv4F2F2 self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImage(self)


    def SetFixedInterpolator(self, _arg: 'itkInterpolateImageFunctionIF2D') -> "void":
        """
        SetFixedInterpolator(itkImageToImageMetricv4F2F2 self, itkInterpolateImageFunctionIF2D _arg)

        Connect the
        fixed interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedInterpolator(self, _arg)


    def GetModifiableFixedInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableFixedInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedInterpolator(self)


    def GetFixedInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetFixedInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D
        GetFixedInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedInterpolator(self, *args)


    def SetMovingInterpolator(self, _arg: 'itkInterpolateImageFunctionIF2D') -> "void":
        """
        SetMovingInterpolator(itkImageToImageMetricv4F2F2 self, itkInterpolateImageFunctionIF2D _arg)

        Connect the
        Moving interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingInterpolator(self, _arg)


    def GetModifiableMovingInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableMovingInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingInterpolator(self)


    def GetMovingInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetMovingInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D
        GetMovingInterpolator(itkImageToImageMetricv4F2F2 self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingInterpolator(self, *args)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricv4F2F2 self, itkSpatialObject2 _arg)
        SetMovingImageMask(itkImageToImageMetricv4F2F2 self, itkSpatialObject2 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject2 const *":
        """GetMovingImageMask(itkImageToImageMetricv4F2F2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricv4F2F2 self, itkSpatialObject2 _arg)
        SetFixedImageMask(itkImageToImageMetricv4F2F2 self, itkSpatialObject2 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject2 const *":
        """GetFixedImageMask(itkImageToImageMetricv4F2F2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageMask(self)


    def SetFixedSampledPointSet(self, *args) -> "void":
        """
        SetFixedSampledPointSet(itkImageToImageMetricv4F2F2 self, itkPointSetF2 _arg)
        SetFixedSampledPointSet(itkImageToImageMetricv4F2F2 self, itkPointSetF2 _arg)

        Set/Get the
        fixed image domain sampling point set See main documentation regarding
        using fixed vs virtual domain for the point set. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedSampledPointSet(self, *args)


    def GetFixedSampledPointSet(self) -> "itkPointSetF2 const *":
        """GetFixedSampledPointSet(itkImageToImageMetricv4F2F2 self) -> itkPointSetF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedSampledPointSet(self)


    def SetVirtualSampledPointSet(self, _arg: 'itkPointSetF2') -> "void":
        """
        SetVirtualSampledPointSet(itkImageToImageMetricv4F2F2 self, itkPointSetF2 _arg)

        Set/Get
        the virtual image domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetVirtualSampledPointSet(self, _arg)


    def GetVirtualSampledPointSet(self) -> "itkPointSetF2 const *":
        """GetVirtualSampledPointSet(itkImageToImageMetricv4F2F2 self) -> itkPointSetF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetVirtualSampledPointSet(self)


    def SetUseSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseSampledPointSet(itkImageToImageMetricv4F2F2 self, bool const _arg)

        Set/Get flag
        to use a domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseSampledPointSet(self, _arg)


    def GetUseSampledPointSet(self) -> "bool const &":
        """GetUseSampledPointSet(itkImageToImageMetricv4F2F2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseSampledPointSet(self)


    def UseSampledPointSetOn(self) -> "void":
        """UseSampledPointSetOn(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOn(self)


    def UseSampledPointSetOff(self) -> "void":
        """UseSampledPointSetOff(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOff(self)


    def SetUseVirtualSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseVirtualSampledPointSet(itkImageToImageMetricv4F2F2 self, bool const _arg)

        Set/Get flag to indicate of the VirtualSampledPointSet is set over the
        FixedSampledPointSet 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseVirtualSampledPointSet(self, _arg)


    def GetUseVirtualSampledPointSet(self) -> "bool const &":
        """GetUseVirtualSampledPointSet(itkImageToImageMetricv4F2F2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseVirtualSampledPointSet(self)


    def UseVirtualSampledPointSetOn(self) -> "void":
        """UseVirtualSampledPointSetOn(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOn(self)


    def UseVirtualSampledPointSetOff(self) -> "void":
        """UseVirtualSampledPointSetOff(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOff(self)


    def SetFixedImageGradientFilter(self, _arg: 'itkImageToImageFilterIF2ICVD22') -> "void":
        """
        SetFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self, itkImageToImageFilterIF2ICVD22 _arg)

        Set/Get
        the gradient filter 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientFilter(self, _arg)


    def GetModifiableFixedImageGradientFilter(self) -> "itkImageToImageFilterIF2ICVD22 *":
        """GetModifiableFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientFilter(self)


    def GetFixedImageGradientFilter(self, *args) -> "itkImageToImageFilterIF2ICVD22 *":
        """
        GetFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22
        GetFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientFilter(self, *args)


    def SetMovingImageGradientFilter(self, _arg: 'itkImageToImageFilterIF2ICVD22') -> "void":
        """SetMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self, itkImageToImageFilterIF2ICVD22 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientFilter(self, _arg)


    def GetModifiableMovingImageGradientFilter(self) -> "itkImageToImageFilterIF2ICVD22 *":
        """GetModifiableMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientFilter(self)


    def GetMovingImageGradientFilter(self, *args) -> "itkImageToImageFilterIF2ICVD22 *":
        """
        GetMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22
        GetMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> itkImageToImageFilterIF2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientFilter(self, *args)


    def SetFixedImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *') -> "void":
        """
        SetFixedImageGradientCalculator(itkImageToImageMetricv4F2F2 self, itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > * _arg)

        Set/Get gradient calculators 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientCalculator(self, _arg)


    def GetModifiableFixedImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *":
        """GetModifiableFixedImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientCalculator(self)


    def GetFixedImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *":
        """
        GetFixedImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > const
        GetFixedImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientCalculator(self, *args)


    def SetMovingImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *') -> "void":
        """SetMovingImageGradientCalculator(itkImageToImageMetricv4F2F2 self, itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > * _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientCalculator(self, _arg)


    def GetModifiableMovingImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *":
        """GetModifiableMovingImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientCalculator(self)


    def GetMovingImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *":
        """
        GetMovingImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > const
        GetMovingImageGradientCalculator(itkImageToImageMetricv4F2F2 self) -> itk::ImageFunction< itk::Image< float,2 >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientCalculator(self, *args)


    def SetUseFixedImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self, bool const _arg)

        Set/Get gradient computation via an image filter, for fixed image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFixedImageGradientFilter(self, _arg)


    def GetUseFixedImageGradientFilter(self) -> "bool const &":
        """GetUseFixedImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFixedImageGradientFilter(self)


    def UseFixedImageGradientFilterOn(self) -> "void":
        """UseFixedImageGradientFilterOn(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOn(self)


    def UseFixedImageGradientFilterOff(self) -> "void":
        """UseFixedImageGradientFilterOff(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOff(self)


    def SetUseMovingImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self, bool const _arg)

        Set/Get gradient computation via an image filter. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseMovingImageGradientFilter(self, _arg)


    def GetUseMovingImageGradientFilter(self) -> "bool const &":
        """GetUseMovingImageGradientFilter(itkImageToImageMetricv4F2F2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseMovingImageGradientFilter(self)


    def UseMovingImageGradientFilterOn(self) -> "void":
        """UseMovingImageGradientFilterOn(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOn(self)


    def UseMovingImageGradientFilterOff(self) -> "void":
        """UseMovingImageGradientFilterOff(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOff(self)


    def GetNumberOfWorkUnitsUsed(self) -> "unsigned int":
        """
        GetNumberOfWorkUnitsUsed(itkImageToImageMetricv4F2F2 self) -> unsigned int

        Get number
        of work units to used in the the most recent evaluation. Only valid
        after GetValueAndDerivative() or GetValue() has been called. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfWorkUnitsUsed(self)


    def SetMaximumNumberOfWorkUnits(self, workUnits: 'unsigned int const') -> "void":
        """
        SetMaximumNumberOfWorkUnits(itkImageToImageMetricv4F2F2 self, unsigned int const workUnits)

        Set
        number of work units to use. This the maximum number of work units to
        use when multithreaded. The actual number of work units used (may be
        less than this value) can be obtained with GetNumberOfWorkUnitsUsed.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMaximumNumberOfWorkUnits(self, workUnits)


    def GetMaximumNumberOfWorkUnits(self) -> "unsigned int":
        """GetMaximumNumberOfWorkUnits(itkImageToImageMetricv4F2F2 self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMaximumNumberOfWorkUnits(self)


    def FinalizeThread(self, arg0: 'unsigned int const') -> "void":
        """
        FinalizeThread(itkImageToImageMetricv4F2F2 self, unsigned int const arg0)

        Finalize the per-
        thread components for computing metric. Some threads can accumulate
        their data as the thread finishes rather than waiting for all threads
        to finish before the accumulation occurs. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_FinalizeThread(self, arg0)


    def GetModifiableFixedImageGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableFixedImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientImage(self)


    def GetFixedImageGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetFixedImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22
        GetFixedImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientImage(self, *args)


    def GetModifiableMovingImageGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableMovingImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientImage(self)


    def GetMovingImageGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetMovingImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22
        GetMovingImageGradientImage(itkImageToImageMetricv4F2F2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientImage(self, *args)


    def GetNumberOfDomainPoints(self) -> "unsigned long":
        """
        GetNumberOfDomainPoints(itkImageToImageMetricv4F2F2 self) -> unsigned long

        Get the
        number of points in the domain used to evaluate the metric. This will
        differ depending on whether a sampled point set or dense sampling is
        used, and will be greater than or equal to GetNumberOfValidPoints().

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfDomainPoints(self)


    def SetUseFloatingPointCorrection(self, _arg: 'bool const') -> "void":
        """
        SetUseFloatingPointCorrection(itkImageToImageMetricv4F2F2 self, bool const _arg)

        Set/Get the option for applying floating point resolution truncation
        to derivative calculations in global support cases. False by default.
        It is only applied in global support cases (i.e. with global-support
        transforms) because in these cases, the per-point derivative values
        are added cumulatively, which can lead to loss of precision when the
        sum becomes much larger than the values being added. The goal is more
        consistent results across the number of threads used for an
        evaluation. The resolution can be changed using
        SetFloatingPointCorrectionResolution(). The metric always sums
        derivative values using a CompensatedSummation object, but empirically
        this provides only a slight improvement in precision across number of
        threads during registration.

        WARNING:  The metric does not perform any normalization so the results
        of this truncation are highly dependent on the derivative magnitudes.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFloatingPointCorrection(self, _arg)


    def GetUseFloatingPointCorrection(self) -> "bool const &":
        """GetUseFloatingPointCorrection(itkImageToImageMetricv4F2F2 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFloatingPointCorrection(self)


    def UseFloatingPointCorrectionOn(self) -> "void":
        """UseFloatingPointCorrectionOn(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOn(self)


    def UseFloatingPointCorrectionOff(self) -> "void":
        """UseFloatingPointCorrectionOff(itkImageToImageMetricv4F2F2 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOff(self)


    def SetFloatingPointCorrectionResolution(self, _arg: 'double const') -> "void":
        """
        SetFloatingPointCorrectionResolution(itkImageToImageMetricv4F2F2 self, double const _arg)

        Set/Get the floating point resolution used optionally by the
        derivatives. If this is set, for example to 1e5, then the derivative
        will have precision up to 5 points beyond the decimal point. And
        precision beyond that will be truncated. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFloatingPointCorrectionResolution(self, _arg)


    def GetFloatingPointCorrectionResolution(self) -> "double":
        """GetFloatingPointCorrectionResolution(itkImageToImageMetricv4F2F2 self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFloatingPointCorrectionResolution(self)


    def GetNumberOfSkippedFixedSampledPoints(self) -> "unsigned long const &":
        """
        GetNumberOfSkippedFixedSampledPoints(itkImageToImageMetricv4F2F2 self) -> unsigned long const &

        Get the number of sampled fixed sampled points that are deemed
        invalid during conversion to virtual domain in Initialize(). For
        informational purposes. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfSkippedFixedSampledPoints(self)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F2F2

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F2F2 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4F2F2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4F2F2

        Create a new object of the class itkImageToImageMetricv4F2F2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4F2F2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4F2F2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4F2F2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4F2F2.SetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingInterpolator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageMask, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageMask, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageMask, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageMask, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetVirtualSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetVirtualSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOn, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOff, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseVirtualSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseVirtualSampledPointSet, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseVirtualSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOn, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseVirtualSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOff, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientCalculator, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFixedImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFixedImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseFixedImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOn, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseFixedImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOff, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseMovingImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseMovingImageGradientFilter, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseMovingImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOn, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseMovingImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOff, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetNumberOfWorkUnitsUsed = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfWorkUnitsUsed, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.FinalizeThread = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_FinalizeThread, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetModifiableMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientImage, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetNumberOfDomainPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfDomainPoints, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFloatingPointCorrection, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFloatingPointCorrection, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseFloatingPointCorrectionOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOn, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.UseFloatingPointCorrectionOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOff, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.SetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2.GetNumberOfSkippedFixedSampledPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfSkippedFixedSampledPoints, None, itkImageToImageMetricv4F2F2)
itkImageToImageMetricv4F2F2_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_swigregister
itkImageToImageMetricv4F2F2_swigregister(itkImageToImageMetricv4F2F2)

def itkImageToImageMetricv4F2F2_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F2F2 *":
    """itkImageToImageMetricv4F2F2_cast(itkLightObject obj) -> itkImageToImageMetricv4F2F2"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_cast(obj)

class itkImageToImageMetricv4F3F3(itkImageToImageMetricv4F3F3_Superclass):
    """


    Computes similarity between regions of two images, using two user-
    supplied transforms, a 'fixed' transform and a 'moving' transform.

    WARNING:  Integer-type images are not yet supported. See concept-
    checking in DefaultImageToImageMetricTraitsv4.  Templated over the
    fixed and moving image types, as well as an optional VirtualImage type
    to define the virtual domain. The VirtualImage type defaults to
    TFixedImage. If TFixedImage is type VectorImage, then TVirtualImage
    must be set separately to a non-VectorImage type, e.g. Image<unsigned
    char, dimension>.  If the user does not set the virtual domain
    explicitly, then it is created during the call to Initialize from the
    fixed image by copying its information. See ObjectToObjectMetric for
    more discussion on the virtual domain.

    At a minimum, the user must: 1) Set images using SetFixedImage and
    SetMovingImage. 2) Call Initialize.

    Image gradient calculations

    Image gradients can be calculated in one of two ways: 1) Using a
    gradient image filter, by setting Use[Fixed|Moving]ImageGradientFilter
    to true. By default this is set as an
    itkGradientRecursiveGaussianImageFilter, a smoothed gradient filter. A
    filter uses more memory, because it calculates all gradients at once
    and stores them in an image. The advantage of pre-calculation is for
    the fixed image gradients, since they only need be calculated once,
    and for metrics that need to access image gradients more than once for
    a particular point. The fixed image gradients are only calculated once
    when this option is set, during Initialize. 2) Otherwise, an image
    gradient calculator based on ImageFunction is used. By default the
    CentralDifferenceImageFunction is used. This calculation is not
    smoothed and gives different results than
    GradientRecursiveGaussianImageFilter. The advantage is that less
    memory is used. However for the fixed image, it means needlessly
    computing the image gradients at each iteration of a registration
    instead of just computing once at the beginning. The user can supply a
    different function by calling SetFixedImageGradientCalculator and/or
    SetMovingImageGradientCalculator.

    Both image gradient calculation methods are threaded. Generally it is
    not recommended to use different image gradient methods for the fixed
    and moving images because the methods return different results.

    Image Masks

    Image masks are supported using SetMovingImageMask or
    SetFixedImageMask. If the image mask is sparse, see the comments for
    use of sparse point sets.

    Sparse Sampling

    Sparse sampling is performed by supplying an arbitrary point list over
    which to evaluate the metric. It's presumed that the user will be
    working in terms of the fixed image domain, and thus the point list is
    expected to be in the fixed domain. Internally, the points are
    transformed into the virtual domain as needed. The attributes/data of
    each point in the set are not used, but rather the point's geometric
    coordinates. Point sets are enabled by calling UseSampledPointSet,
    then the SetFixedSampledPointSet is called or
    SetVirtualSampledPointSet along with SetUseVirtualSampledPointSet.

    If the point set is sparse, the option
    SetUse[Fixed|Moving]ImageGradientFilter typically should be disabled
    to avoid excessive computation. However, the gradient values of the
    fixed image are not cached when using a point set (there are plans for
    this in the future), so depending on the number of iterations (when
    used during optimization) and the level of sparsity, it may be more
    efficient to use a gradient image filter for it because it will only
    be calculated once.  Vector Images

    To support vector images, the class must be declared using the
    VectorImageToImageMetricTraitsv4 class in the template declaration, as
    described above. Derived classes must provide special handling for
    vector pixel types. MeanSquaresImageToImageMetricv4 can be used as an
    example.

    Threading

    This class is threaded. Threading is handled by friend classes
    ImageToImageMetricv4GetValueAndDerivativeThreaderBase and
    ImageToImageMetricv4GetValueAndDerivativeThreader. Dense and sparse
    evaluation are handled by template specialization of the
    ImageToImageMetricv4GetValueAndDerivativeThreader::ThreadedExecution
    method, in order to iterate over either all points in the virtual
    space in the case of dense evaluation, or a list of points in the
    sparse case.

    Methods and members of ImageToImageMetricv4 are accessed by the
    threading class using its m_Associate member, which points to the
    containing instance of ImageToImageMetricv4.

    Pre- and post-processing for threaded operation is handled in ImageToI
    mageMetricv4GetValueAndDerivativeThreaderBase::BeforeThreadedExecution
    , and ImageToImageMetricv4GetValueAndDerivativeThreaderBase::AfterThre
    adedExecution, respectively.

    Derived classes:

    The GetValue method may be overridden to provide better-optimized or
    otherwise different behavior as needed. Otherwise, the
    m_ComputeDerivative member should be checked to avoid computing
    derivatives when the caller has called GetValue(). See
    GetComputeDerivative() in this class and in this metric's threader
    class.

    Derived classes must derive a threader class from
    ImageToImageMetricv4GetValueAndDerivativeThreader, from which a
    DenseGetValueAndDerivativeThreader and
    SparseGetValueAndDerivativeThreader must be defined. Then, must be
    called in the constructor.

    The ProcessPoint method of the derived threader must be overriden to
    provide the metric-specific evaluation.

    To access methods and members within the derived metric class from the
    derived threader class, the user must cast m_Associate to the type of
    the derived metric class.

    See ImageToImageMetricv4Test for a clear example of what a derived
    class must implement and do.

    C++ includes: itkImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImage(itkImageToImageMetricv4F3F3 self, itkImageF3 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkImageToImageMetricv4F3F3 self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF3') -> "void":
        """
        SetMovingImage(itkImageToImageMetricv4F3F3 self, itkImageF3 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkImageToImageMetricv4F3F3 self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImage(self)


    def SetFixedInterpolator(self, _arg: 'itkInterpolateImageFunctionIF3D') -> "void":
        """
        SetFixedInterpolator(itkImageToImageMetricv4F3F3 self, itkInterpolateImageFunctionIF3D _arg)

        Connect the
        fixed interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedInterpolator(self, _arg)


    def GetModifiableFixedInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableFixedInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedInterpolator(self)


    def GetFixedInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetFixedInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D
        GetFixedInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedInterpolator(self, *args)


    def SetMovingInterpolator(self, _arg: 'itkInterpolateImageFunctionIF3D') -> "void":
        """
        SetMovingInterpolator(itkImageToImageMetricv4F3F3 self, itkInterpolateImageFunctionIF3D _arg)

        Connect the
        Moving interpolator. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingInterpolator(self, _arg)


    def GetModifiableMovingInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableMovingInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingInterpolator(self)


    def GetMovingInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetMovingInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D
        GetMovingInterpolator(itkImageToImageMetricv4F3F3 self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingInterpolator(self, *args)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricv4F3F3 self, itkSpatialObject3 _arg)
        SetMovingImageMask(itkImageToImageMetricv4F3F3 self, itkSpatialObject3 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject3 const *":
        """GetMovingImageMask(itkImageToImageMetricv4F3F3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricv4F3F3 self, itkSpatialObject3 _arg)
        SetFixedImageMask(itkImageToImageMetricv4F3F3 self, itkSpatialObject3 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject3 const *":
        """GetFixedImageMask(itkImageToImageMetricv4F3F3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageMask(self)


    def SetFixedSampledPointSet(self, *args) -> "void":
        """
        SetFixedSampledPointSet(itkImageToImageMetricv4F3F3 self, itkPointSetF3 _arg)
        SetFixedSampledPointSet(itkImageToImageMetricv4F3F3 self, itkPointSetF3 _arg)

        Set/Get the
        fixed image domain sampling point set See main documentation regarding
        using fixed vs virtual domain for the point set. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedSampledPointSet(self, *args)


    def GetFixedSampledPointSet(self) -> "itkPointSetF3 const *":
        """GetFixedSampledPointSet(itkImageToImageMetricv4F3F3 self) -> itkPointSetF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedSampledPointSet(self)


    def SetVirtualSampledPointSet(self, _arg: 'itkPointSetF3') -> "void":
        """
        SetVirtualSampledPointSet(itkImageToImageMetricv4F3F3 self, itkPointSetF3 _arg)

        Set/Get
        the virtual image domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetVirtualSampledPointSet(self, _arg)


    def GetVirtualSampledPointSet(self) -> "itkPointSetF3 const *":
        """GetVirtualSampledPointSet(itkImageToImageMetricv4F3F3 self) -> itkPointSetF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetVirtualSampledPointSet(self)


    def SetUseSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseSampledPointSet(itkImageToImageMetricv4F3F3 self, bool const _arg)

        Set/Get flag
        to use a domain sampling point set 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseSampledPointSet(self, _arg)


    def GetUseSampledPointSet(self) -> "bool const &":
        """GetUseSampledPointSet(itkImageToImageMetricv4F3F3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseSampledPointSet(self)


    def UseSampledPointSetOn(self) -> "void":
        """UseSampledPointSetOn(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOn(self)


    def UseSampledPointSetOff(self) -> "void":
        """UseSampledPointSetOff(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOff(self)


    def SetUseVirtualSampledPointSet(self, _arg: 'bool const') -> "void":
        """
        SetUseVirtualSampledPointSet(itkImageToImageMetricv4F3F3 self, bool const _arg)

        Set/Get flag to indicate of the VirtualSampledPointSet is set over the
        FixedSampledPointSet 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseVirtualSampledPointSet(self, _arg)


    def GetUseVirtualSampledPointSet(self) -> "bool const &":
        """GetUseVirtualSampledPointSet(itkImageToImageMetricv4F3F3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseVirtualSampledPointSet(self)


    def UseVirtualSampledPointSetOn(self) -> "void":
        """UseVirtualSampledPointSetOn(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOn(self)


    def UseVirtualSampledPointSetOff(self) -> "void":
        """UseVirtualSampledPointSetOff(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOff(self)


    def SetFixedImageGradientFilter(self, _arg: 'itkImageToImageFilterIF3ICVD33') -> "void":
        """
        SetFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self, itkImageToImageFilterIF3ICVD33 _arg)

        Set/Get
        the gradient filter 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientFilter(self, _arg)


    def GetModifiableFixedImageGradientFilter(self) -> "itkImageToImageFilterIF3ICVD33 *":
        """GetModifiableFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientFilter(self)


    def GetFixedImageGradientFilter(self, *args) -> "itkImageToImageFilterIF3ICVD33 *":
        """
        GetFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33
        GetFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientFilter(self, *args)


    def SetMovingImageGradientFilter(self, _arg: 'itkImageToImageFilterIF3ICVD33') -> "void":
        """SetMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self, itkImageToImageFilterIF3ICVD33 _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientFilter(self, _arg)


    def GetModifiableMovingImageGradientFilter(self) -> "itkImageToImageFilterIF3ICVD33 *":
        """GetModifiableMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientFilter(self)


    def GetMovingImageGradientFilter(self, *args) -> "itkImageToImageFilterIF3ICVD33 *":
        """
        GetMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33
        GetMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> itkImageToImageFilterIF3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientFilter(self, *args)


    def SetFixedImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *') -> "void":
        """
        SetFixedImageGradientCalculator(itkImageToImageMetricv4F3F3 self, itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > * _arg)

        Set/Get gradient calculators 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientCalculator(self, _arg)


    def GetModifiableFixedImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *":
        """GetModifiableFixedImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientCalculator(self)


    def GetFixedImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *":
        """
        GetFixedImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > const
        GetFixedImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientCalculator(self, *args)


    def SetMovingImageGradientCalculator(self, _arg: 'itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *') -> "void":
        """SetMovingImageGradientCalculator(itkImageToImageMetricv4F3F3 self, itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > * _arg)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientCalculator(self, _arg)


    def GetModifiableMovingImageGradientCalculator(self) -> "itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *":
        """GetModifiableMovingImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientCalculator(self)


    def GetMovingImageGradientCalculator(self, *args) -> "itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *":
        """
        GetMovingImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > const
        GetMovingImageGradientCalculator(itkImageToImageMetricv4F3F3 self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double,3 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientCalculator(self, *args)


    def SetUseFixedImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self, bool const _arg)

        Set/Get gradient computation via an image filter, for fixed image. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFixedImageGradientFilter(self, _arg)


    def GetUseFixedImageGradientFilter(self) -> "bool const &":
        """GetUseFixedImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFixedImageGradientFilter(self)


    def UseFixedImageGradientFilterOn(self) -> "void":
        """UseFixedImageGradientFilterOn(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOn(self)


    def UseFixedImageGradientFilterOff(self) -> "void":
        """UseFixedImageGradientFilterOff(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOff(self)


    def SetUseMovingImageGradientFilter(self, _arg: 'bool const') -> "void":
        """
        SetUseMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self, bool const _arg)

        Set/Get gradient computation via an image filter. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseMovingImageGradientFilter(self, _arg)


    def GetUseMovingImageGradientFilter(self) -> "bool const &":
        """GetUseMovingImageGradientFilter(itkImageToImageMetricv4F3F3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseMovingImageGradientFilter(self)


    def UseMovingImageGradientFilterOn(self) -> "void":
        """UseMovingImageGradientFilterOn(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOn(self)


    def UseMovingImageGradientFilterOff(self) -> "void":
        """UseMovingImageGradientFilterOff(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOff(self)


    def GetNumberOfWorkUnitsUsed(self) -> "unsigned int":
        """
        GetNumberOfWorkUnitsUsed(itkImageToImageMetricv4F3F3 self) -> unsigned int

        Get number
        of work units to used in the the most recent evaluation. Only valid
        after GetValueAndDerivative() or GetValue() has been called. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfWorkUnitsUsed(self)


    def SetMaximumNumberOfWorkUnits(self, workUnits: 'unsigned int const') -> "void":
        """
        SetMaximumNumberOfWorkUnits(itkImageToImageMetricv4F3F3 self, unsigned int const workUnits)

        Set
        number of work units to use. This the maximum number of work units to
        use when multithreaded. The actual number of work units used (may be
        less than this value) can be obtained with GetNumberOfWorkUnitsUsed.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMaximumNumberOfWorkUnits(self, workUnits)


    def GetMaximumNumberOfWorkUnits(self) -> "unsigned int":
        """GetMaximumNumberOfWorkUnits(itkImageToImageMetricv4F3F3 self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMaximumNumberOfWorkUnits(self)


    def FinalizeThread(self, arg0: 'unsigned int const') -> "void":
        """
        FinalizeThread(itkImageToImageMetricv4F3F3 self, unsigned int const arg0)

        Finalize the per-
        thread components for computing metric. Some threads can accumulate
        their data as the thread finishes rather than waiting for all threads
        to finish before the accumulation occurs. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_FinalizeThread(self, arg0)


    def GetModifiableFixedImageGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableFixedImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientImage(self)


    def GetFixedImageGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetFixedImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33
        GetFixedImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientImage(self, *args)


    def GetModifiableMovingImageGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableMovingImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientImage(self)


    def GetMovingImageGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetMovingImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33
        GetMovingImageGradientImage(itkImageToImageMetricv4F3F3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientImage(self, *args)


    def GetNumberOfDomainPoints(self) -> "unsigned long":
        """
        GetNumberOfDomainPoints(itkImageToImageMetricv4F3F3 self) -> unsigned long

        Get the
        number of points in the domain used to evaluate the metric. This will
        differ depending on whether a sampled point set or dense sampling is
        used, and will be greater than or equal to GetNumberOfValidPoints().

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfDomainPoints(self)


    def SetUseFloatingPointCorrection(self, _arg: 'bool const') -> "void":
        """
        SetUseFloatingPointCorrection(itkImageToImageMetricv4F3F3 self, bool const _arg)

        Set/Get the option for applying floating point resolution truncation
        to derivative calculations in global support cases. False by default.
        It is only applied in global support cases (i.e. with global-support
        transforms) because in these cases, the per-point derivative values
        are added cumulatively, which can lead to loss of precision when the
        sum becomes much larger than the values being added. The goal is more
        consistent results across the number of threads used for an
        evaluation. The resolution can be changed using
        SetFloatingPointCorrectionResolution(). The metric always sums
        derivative values using a CompensatedSummation object, but empirically
        this provides only a slight improvement in precision across number of
        threads during registration.

        WARNING:  The metric does not perform any normalization so the results
        of this truncation are highly dependent on the derivative magnitudes.

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFloatingPointCorrection(self, _arg)


    def GetUseFloatingPointCorrection(self) -> "bool const &":
        """GetUseFloatingPointCorrection(itkImageToImageMetricv4F3F3 self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFloatingPointCorrection(self)


    def UseFloatingPointCorrectionOn(self) -> "void":
        """UseFloatingPointCorrectionOn(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOn(self)


    def UseFloatingPointCorrectionOff(self) -> "void":
        """UseFloatingPointCorrectionOff(itkImageToImageMetricv4F3F3 self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOff(self)


    def SetFloatingPointCorrectionResolution(self, _arg: 'double const') -> "void":
        """
        SetFloatingPointCorrectionResolution(itkImageToImageMetricv4F3F3 self, double const _arg)

        Set/Get the floating point resolution used optionally by the
        derivatives. If this is set, for example to 1e5, then the derivative
        will have precision up to 5 points beyond the decimal point. And
        precision beyond that will be truncated. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFloatingPointCorrectionResolution(self, _arg)


    def GetFloatingPointCorrectionResolution(self) -> "double":
        """GetFloatingPointCorrectionResolution(itkImageToImageMetricv4F3F3 self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFloatingPointCorrectionResolution(self)


    def GetNumberOfSkippedFixedSampledPoints(self) -> "unsigned long const &":
        """
        GetNumberOfSkippedFixedSampledPoints(itkImageToImageMetricv4F3F3 self) -> unsigned long const &

        Get the number of sampled fixed sampled points that are deemed
        invalid during conversion to virtual domain in Initialize(). For
        informational purposes. 
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfSkippedFixedSampledPoints(self)

    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F3F3

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F3F3 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricv4F3F3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageMetricv4F3F3

        Create a new object of the class itkImageToImageMetricv4F3F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricv4F3F3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricv4F3F3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricv4F3F3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricv4F3F3.SetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingInterpolator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingInterpolator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageMask, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageMask, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageMask, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageMask, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetVirtualSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetVirtualSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetUseSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOn, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOff, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseVirtualSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetUseVirtualSampledPointSet = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseVirtualSampledPointSet, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseVirtualSampledPointSetOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOn, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseVirtualSampledPointSetOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOff, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingImageGradientCalculator = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientCalculator, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFixedImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetUseFixedImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFixedImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseFixedImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOn, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseFixedImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOff, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseMovingImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetUseMovingImageGradientFilter = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseMovingImageGradientFilter, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseMovingImageGradientFilterOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOn, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseMovingImageGradientFilterOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOff, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetNumberOfWorkUnitsUsed = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfWorkUnitsUsed, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMaximumNumberOfWorkUnits = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMaximumNumberOfWorkUnits, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.FinalizeThread = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_FinalizeThread, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFixedImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetModifiableMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetMovingImageGradientImage = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientImage, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetNumberOfDomainPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfDomainPoints, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFloatingPointCorrection, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetUseFloatingPointCorrection = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFloatingPointCorrection, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseFloatingPointCorrectionOn = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOn, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.UseFloatingPointCorrectionOff = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOff, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.SetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetFloatingPointCorrectionResolution = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFloatingPointCorrectionResolution, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3.GetNumberOfSkippedFixedSampledPoints = new_instancemethod(_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfSkippedFixedSampledPoints, None, itkImageToImageMetricv4F3F3)
itkImageToImageMetricv4F3F3_swigregister = _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_swigregister
itkImageToImageMetricv4F3F3_swigregister(itkImageToImageMetricv4F3F3)

def itkImageToImageMetricv4F3F3_cast(obj: 'itkLightObject') -> "itkImageToImageMetricv4F3F3 *":
    """itkImageToImageMetricv4F3F3_cast(itkLightObject obj) -> itkImageToImageMetricv4F3F3"""
    return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_cast(obj)



