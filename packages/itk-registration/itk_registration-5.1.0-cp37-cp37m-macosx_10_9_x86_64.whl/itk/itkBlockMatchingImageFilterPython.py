# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBlockMatchingImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBlockMatchingImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBlockMatchingImageFilterPython
            return _itkBlockMatchingImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBlockMatchingImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBlockMatchingImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBlockMatchingImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointSetPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython

def itkPointSetD3DTD33FFD_New():
  return itkPointSetD3DTD33FFD.New()


def itkPointSetVF33DTVF333FFVF3_New():
  return itkPointSetVF33DTVF333FFVF3.New()


def itkBlockMatchingImageFilterID3_New():
  return itkBlockMatchingImageFilterID3.New()


def itkBlockMatchingImageFilterID3_Superclass_New():
  return itkBlockMatchingImageFilterID3_Superclass.New()


def itkBlockMatchingImageFilterID3_Superclass_Superclass_New():
  return itkBlockMatchingImageFilterID3_Superclass_Superclass.New()


def itkBlockMatchingImageFilterIF3_New():
  return itkBlockMatchingImageFilterIF3.New()


def itkBlockMatchingImageFilterIF3_Superclass_New():
  return itkBlockMatchingImageFilterIF3_Superclass.New()


def itkBlockMatchingImageFilterIF3_Superclass_Superclass_New():
  return itkBlockMatchingImageFilterIF3_Superclass_Superclass.New()

class itkBlockMatchingImageFilterID3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkBlockMatchingImageFilterID3_Superclass_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
        """Clone(itkBlockMatchingImageFilterID3_Superclass_Superclass self) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_Clone(self)


    def GetOutput(self, *args) -> "itkPointSetVF33DTVF333FFVF3 *":
        """
        GetOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self) -> itkPointSetVF33DTVF333FFVF3
        GetOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self, unsigned int idx) -> itkPointSetVF33DTVF333FFVF3
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GetOutput(self, *args)


    def SetOutput(self, output: 'itkPointSetVF33DTVF333FFVF3') -> "void":
        """SetOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self, itkPointSetVF33DTVF333FFVF3 output)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self, itkDataObject output)
        GraftOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self, std::string const & key, itkDataObject output)
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkBlockMatchingImageFilterID3_Superclass_Superclass self, unsigned int idx, itkDataObject output)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3_Superclass_Superclass

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3_Superclass_Superclass *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3_Superclass_Superclass"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3_Superclass_Superclass

        Create a new object of the class itkBlockMatchingImageFilterID3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterID3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterID3_Superclass_Superclass.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_Clone, None, itkBlockMatchingImageFilterID3_Superclass_Superclass)
itkBlockMatchingImageFilterID3_Superclass_Superclass.GetOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GetOutput, None, itkBlockMatchingImageFilterID3_Superclass_Superclass)
itkBlockMatchingImageFilterID3_Superclass_Superclass.SetOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_SetOutput, None, itkBlockMatchingImageFilterID3_Superclass_Superclass)
itkBlockMatchingImageFilterID3_Superclass_Superclass.GraftOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftOutput, None, itkBlockMatchingImageFilterID3_Superclass_Superclass)
itkBlockMatchingImageFilterID3_Superclass_Superclass.GraftNthOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftNthOutput, None, itkBlockMatchingImageFilterID3_Superclass_Superclass)
itkBlockMatchingImageFilterID3_Superclass_Superclass_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_swigregister
itkBlockMatchingImageFilterID3_Superclass_Superclass_swigregister(itkBlockMatchingImageFilterID3_Superclass_Superclass)

def itkBlockMatchingImageFilterID3_Superclass_Superclass___New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
    """itkBlockMatchingImageFilterID3_Superclass_Superclass___New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass___New_orig__()

def itkBlockMatchingImageFilterID3_Superclass_Superclass_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3_Superclass_Superclass *":
    """itkBlockMatchingImageFilterID3_Superclass_Superclass_cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3_Superclass_Superclass"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_cast(obj)

class itkBlockMatchingImageFilterIF3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkBlockMatchingImageFilterIF3_Superclass_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
        """Clone(itkBlockMatchingImageFilterIF3_Superclass_Superclass self) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_Clone(self)


    def GetOutput(self, *args) -> "itkPointSetVF33DTVF333FFVF3 *":
        """
        GetOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self) -> itkPointSetVF33DTVF333FFVF3
        GetOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self, unsigned int idx) -> itkPointSetVF33DTVF333FFVF3
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GetOutput(self, *args)


    def SetOutput(self, output: 'itkPointSetVF33DTVF333FFVF3') -> "void":
        """SetOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self, itkPointSetVF33DTVF333FFVF3 output)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_SetOutput(self, output)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self, itkDataObject output)
        GraftOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self, std::string const & key, itkDataObject output)
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkBlockMatchingImageFilterIF3_Superclass_Superclass self, unsigned int idx, itkDataObject output)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftNthOutput(self, idx, output)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3_Superclass_Superclass

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass

        Create a new object of the class itkBlockMatchingImageFilterIF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterIF3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterIF3_Superclass_Superclass.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_Clone, None, itkBlockMatchingImageFilterIF3_Superclass_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_Superclass.GetOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GetOutput, None, itkBlockMatchingImageFilterIF3_Superclass_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_Superclass.SetOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_SetOutput, None, itkBlockMatchingImageFilterIF3_Superclass_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_Superclass.GraftOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftOutput, None, itkBlockMatchingImageFilterIF3_Superclass_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_Superclass.GraftNthOutput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftNthOutput, None, itkBlockMatchingImageFilterIF3_Superclass_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_Superclass_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_swigregister
itkBlockMatchingImageFilterIF3_Superclass_Superclass_swigregister(itkBlockMatchingImageFilterIF3_Superclass_Superclass)

def itkBlockMatchingImageFilterIF3_Superclass_Superclass___New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer":
    """itkBlockMatchingImageFilterIF3_Superclass_Superclass___New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass___New_orig__()

def itkBlockMatchingImageFilterIF3_Superclass_Superclass_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3_Superclass_Superclass *":
    """itkBlockMatchingImageFilterIF3_Superclass_Superclass_cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_cast(obj)

class itkPointSetD3DTD33FFD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    \\sphinx \\sphinxexample{Core/Common/CreateAPointSet,Create a
    PointSet} \\sphinxexample{Core/Common/ReadAPointSet,Read a PointSet}
    \\sphinxexample{Core/Common/WriteAPointSet,Write a PointSet}
    \\sphinxexample{Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A
    Point Set} \\endsphinx

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3DTD33FFD_Pointer":
        """__New_orig__() -> itkPointSetD3DTD33FFD_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3DTD33FFD_Pointer":
        """Clone(itkPointSetD3DTD33FFD self) -> itkPointSetD3DTD33FFD_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3DTD33FFD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3DTD33FFD') -> "void":
        """
        PassStructure(itkPointSetD3DTD33FFD self, itkPointSetD3DTD33FFD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3DTD33FFD self) -> unsigned long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetD3DTD33FFD self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetD3DTD33FFD self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetD3DTD33FFD self) -> itkVectorContainerULPF3
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetD3DTD33FFD self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetD3DTD33FFD self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetD3DTD33FFD self, unsigned long arg0) -> itkPointF3
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3DTD33FFD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD3DTD33FFD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3DTD33FFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3DTD33FFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3DTD33FFD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3DTD33FFD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3DTD33FFD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3DTD33FFD self) -> long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3DTD33FFD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3DTD33FFD self) -> long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetBufferedRegion(self)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkPointSetD3DTD33FFD

    def cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33FFD *":
        """cast(itkLightObject obj) -> itkPointSetD3DTD33FFD"""
        return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD3DTD33FFD

        Create a new object of the class itkPointSetD3DTD33FFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3DTD33FFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3DTD33FFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3DTD33FFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3DTD33FFD.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_Clone, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetMaximumNumberOfRegions = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetMaximumNumberOfRegions, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.PassStructure = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_PassStructure, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetNumberOfPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetNumberOfPoints, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.SetPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPoints, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPoints, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.SetPoint = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPoint, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetPoint = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPoint, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.SetPointData = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetPointData, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetPointData = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetPointData, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.SetRequestedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetRequestedRegion, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetRequestedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetRequestedRegion, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.SetBufferedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_SetBufferedRegion, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD.GetBufferedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_GetBufferedRegion, None, itkPointSetD3DTD33FFD)
itkPointSetD3DTD33FFD_swigregister = _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_swigregister
itkPointSetD3DTD33FFD_swigregister(itkPointSetD3DTD33FFD)

def itkPointSetD3DTD33FFD___New_orig__() -> "itkPointSetD3DTD33FFD_Pointer":
    """itkPointSetD3DTD33FFD___New_orig__() -> itkPointSetD3DTD33FFD_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD___New_orig__()

def itkPointSetD3DTD33FFD_cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33FFD *":
    """itkPointSetD3DTD33FFD_cast(itkLightObject obj) -> itkPointSetD3DTD33FFD"""
    return _itkBlockMatchingImageFilterPython.itkPointSetD3DTD33FFD_cast(obj)

class itkPointSetVF33DTVF333FFVF3(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    \\sphinx \\sphinxexample{Core/Common/CreateAPointSet,Create a
    PointSet} \\sphinxexample{Core/Common/ReadAPointSet,Read a PointSet}
    \\sphinxexample{Core/Common/WriteAPointSet,Write a PointSet}
    \\sphinxexample{Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A
    Point Set} \\endsphinx

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetVF33DTVF333FFVF3_Pointer":
        """__New_orig__() -> itkPointSetVF33DTVF333FFVF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetVF33DTVF333FFVF3_Pointer":
        """Clone(itkPointSetVF33DTVF333FFVF3 self) -> itkPointSetVF33DTVF333FFVF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetVF33DTVF333FFVF3 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetVF33DTVF333FFVF3') -> "void":
        """
        PassStructure(itkPointSetVF33DTVF333FFVF3 self, itkPointSetVF33DTVF333FFVF3 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetVF33DTVF333FFVF3 self) -> unsigned long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetVF33DTVF333FFVF3 self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetVF33DTVF333FFVF3 self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetVF33DTVF333FFVF3 self) -> itkVectorContainerULPF3
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetVF33DTVF333FFVF3 self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetVF33DTVF333FFVF3 self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetVF33DTVF333FFVF3 self, unsigned long arg0) -> itkPointF3
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetVF33DTVF333FFVF3 self, itkVectorContainerULVF3 arg0)
        SetPointData(itkPointSetVF33DTVF333FFVF3 self, unsigned long arg0, itkVectorF3 arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetVF33DTVF333FFVF3 self) -> itkVectorContainerULVF3
        GetPointData(itkPointSetVF33DTVF333FFVF3 self) -> itkVectorContainerULVF3
        GetPointData(itkPointSetVF33DTVF333FFVF3 self, unsigned long arg0, itkVectorF3 arg1) -> bool
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetVF33DTVF333FFVF3 self, itkDataObject data)
        SetRequestedRegion(itkPointSetVF33DTVF333FFVF3 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetVF33DTVF333FFVF3 self) -> long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetVF33DTVF333FFVF3 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetVF33DTVF333FFVF3 self) -> long"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetBufferedRegion(self)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkPointSetVF33DTVF333FFVF3

    def cast(obj: 'itkLightObject') -> "itkPointSetVF33DTVF333FFVF3 *":
        """cast(itkLightObject obj) -> itkPointSetVF33DTVF333FFVF3"""
        return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPointSetVF33DTVF333FFVF3

        Create a new object of the class itkPointSetVF33DTVF333FFVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetVF33DTVF333FFVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetVF33DTVF333FFVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetVF33DTVF333FFVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetVF33DTVF333FFVF3.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_Clone, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetMaximumNumberOfRegions = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetMaximumNumberOfRegions, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.PassStructure = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_PassStructure, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetNumberOfPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetNumberOfPoints, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.SetPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPoints, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetPoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPoints, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.SetPoint = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPoint, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetPoint = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPoint, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.SetPointData = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetPointData, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetPointData = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetPointData, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.SetRequestedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetRequestedRegion, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetRequestedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetRequestedRegion, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.SetBufferedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_SetBufferedRegion, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3.GetBufferedRegion = new_instancemethod(_itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_GetBufferedRegion, None, itkPointSetVF33DTVF333FFVF3)
itkPointSetVF33DTVF333FFVF3_swigregister = _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_swigregister
itkPointSetVF33DTVF333FFVF3_swigregister(itkPointSetVF33DTVF333FFVF3)

def itkPointSetVF33DTVF333FFVF3___New_orig__() -> "itkPointSetVF33DTVF333FFVF3_Pointer":
    """itkPointSetVF33DTVF333FFVF3___New_orig__() -> itkPointSetVF33DTVF333FFVF3_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3___New_orig__()

def itkPointSetVF33DTVF333FFVF3_cast(obj: 'itkLightObject') -> "itkPointSetVF33DTVF333FFVF3 *":
    """itkPointSetVF33DTVF333FFVF3_cast(itkLightObject obj) -> itkPointSetVF33DTVF333FFVF3"""
    return _itkBlockMatchingImageFilterPython.itkPointSetVF33DTVF333FFVF3_cast(obj)

class itkBlockMatchingImageFilterID3_Superclass(itkBlockMatchingImageFilterIF3_Superclass_Superclass):
    """Proxy of C++ itkBlockMatchingImageFilterID3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
        """Clone(itkBlockMatchingImageFilterID3_Superclass self) -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Clone(self)


    def SetInput(self, input: 'itkPointSetMD33STMD3333FFMD33') -> "void":
        """SetInput(itkBlockMatchingImageFilterID3_Superclass self, itkPointSetMD33STMD3333FFMD33 input)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_SetInput(self, input)


    def GetInput(self, *args) -> "itkPointSetMD33STMD3333FFMD33 const *":
        """
        GetInput(itkBlockMatchingImageFilterID3_Superclass self) -> itkPointSetMD33STMD3333FFMD33
        GetInput(itkBlockMatchingImageFilterID3_Superclass self, unsigned int idx) -> itkPointSetMD33STMD3333FFMD33
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_GetInput(self, *args)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3_Superclass

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3_Superclass *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3_Superclass"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3_Superclass

        Create a new object of the class itkBlockMatchingImageFilterID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterID3_Superclass.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Clone, None, itkBlockMatchingImageFilterID3_Superclass)
itkBlockMatchingImageFilterID3_Superclass.SetInput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_SetInput, None, itkBlockMatchingImageFilterID3_Superclass)
itkBlockMatchingImageFilterID3_Superclass.GetInput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_GetInput, None, itkBlockMatchingImageFilterID3_Superclass)
itkBlockMatchingImageFilterID3_Superclass_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_swigregister
itkBlockMatchingImageFilterID3_Superclass_swigregister(itkBlockMatchingImageFilterID3_Superclass)

def itkBlockMatchingImageFilterID3_Superclass___New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
    """itkBlockMatchingImageFilterID3_Superclass___New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass___New_orig__()

def itkBlockMatchingImageFilterID3_Superclass_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3_Superclass *":
    """itkBlockMatchingImageFilterID3_Superclass_cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3_Superclass"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_cast(obj)

class itkBlockMatchingImageFilterIF3_Superclass(itkBlockMatchingImageFilterIF3_Superclass_Superclass):
    """Proxy of C++ itkBlockMatchingImageFilterIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
        """Clone(itkBlockMatchingImageFilterIF3_Superclass self) -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Clone(self)


    def SetInput(self, input: 'itkPointSetMD33STMD3333FFMD33') -> "void":
        """SetInput(itkBlockMatchingImageFilterIF3_Superclass self, itkPointSetMD33STMD3333FFMD33 input)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_SetInput(self, input)


    def GetInput(self, *args) -> "itkPointSetMD33STMD3333FFMD33 const *":
        """
        GetInput(itkBlockMatchingImageFilterIF3_Superclass self) -> itkPointSetMD33STMD3333FFMD33
        GetInput(itkBlockMatchingImageFilterIF3_Superclass self, unsigned int idx) -> itkPointSetMD33STMD3333FFMD33
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_GetInput(self, *args)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3_Superclass *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3_Superclass"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3_Superclass

        Create a new object of the class itkBlockMatchingImageFilterIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterIF3_Superclass.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Clone, None, itkBlockMatchingImageFilterIF3_Superclass)
itkBlockMatchingImageFilterIF3_Superclass.SetInput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_SetInput, None, itkBlockMatchingImageFilterIF3_Superclass)
itkBlockMatchingImageFilterIF3_Superclass.GetInput = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_GetInput, None, itkBlockMatchingImageFilterIF3_Superclass)
itkBlockMatchingImageFilterIF3_Superclass_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_swigregister
itkBlockMatchingImageFilterIF3_Superclass_swigregister(itkBlockMatchingImageFilterIF3_Superclass)

def itkBlockMatchingImageFilterIF3_Superclass___New_orig__() -> "itkBlockMatchingImageFilterIF3_Superclass_Pointer":
    """itkBlockMatchingImageFilterIF3_Superclass___New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass___New_orig__()

def itkBlockMatchingImageFilterIF3_Superclass_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3_Superclass *":
    """itkBlockMatchingImageFilterIF3_Superclass_cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3_Superclass"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_cast(obj)

class itkBlockMatchingImageFilterID3(itkBlockMatchingImageFilterIF3_Superclass):
    """


    Computes displacements of given points from a fixed image in a
    floating image.

    BlockMatchingImageFilter takes fixed and moving Images as well as
    PointSet of feature points as inputs. Physical coordinates of feature
    points are stored as point coordinates. Points of the input point set
    must have unique identifiers within range 0..N-1, where N is the
    number of points. Pixels (pointData) of input point set are not used.
    Additionally, by default, feature points are expected to lie at least
    (SearchRadius + BlockRadius) voxels from a boundary. This is usually
    achieved by using an appropriate mask during selection of feature
    points. If you are unsure whether feature points satisfy the above
    condition set CheckBoundary flag to true which turns on boundary
    checks. The default output(0) is a PointSet with displacements stored
    as vectors. Additional output(1) is a PointSet containing
    similarities. Similarities are needed to compute displacements and are
    always computed. The number of points in the output PointSet is equal
    to the number of points in the input PointSet.

    The filter is templated over fixed Image, moving Image, input
    PointSet, output displacements PointSet and output similarities
    PointSet.

    This filter is intended to be used in the process of Physics-Based
    Non-Rigid Registration. It computes displacement for selected points
    based on similarity [M. Bierling, Displacement estimation by
    hierarchical block matching, Proc. SPIE Vis. Comm. and Image Proc.,
    vol. 1001, pp. 942-951, 1988.].

    Andriy Kot, Center for Real-Time Computing, Old Dominion University,
    Norfolk, VA

    See:  MaskFeaturePointSelectionFilter  \\sphinx
    \\sphinxexample{Registration/Common/MatchFeaturePoints,Match Feature
    Points} \\endsphinx

    C++ includes: itkBlockMatchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterID3_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterID3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterID3_Pointer":
        """Clone(itkBlockMatchingImageFilterID3 self) -> itkBlockMatchingImageFilterID3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Clone(self)


    def SetBlockRadius(self, _arg: 'itkSize3') -> "void":
        """
        SetBlockRadius(itkBlockMatchingImageFilterID3 self, itkSize3 _arg)

        set/get half size 
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetBlockRadius(self, _arg)


    def GetBlockRadius(self) -> "itkSize3":
        """GetBlockRadius(itkBlockMatchingImageFilterID3 self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetBlockRadius(self)


    def SetSearchRadius(self, _arg: 'itkSize3') -> "void":
        """
        SetSearchRadius(itkBlockMatchingImageFilterID3 self, itkSize3 _arg)

        set/get half window

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetSearchRadius(self, _arg)


    def GetSearchRadius(self) -> "itkSize3":
        """GetSearchRadius(itkBlockMatchingImageFilterID3 self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSearchRadius(self)


    def SetFixedImage(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImage(itkBlockMatchingImageFilterID3 self, itkImageD3 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """GetFixedImage(itkBlockMatchingImageFilterID3 self) -> itkImageD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD3') -> "void":
        """SetMovingImage(itkBlockMatchingImageFilterID3 self, itkImageD3 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """GetMovingImage(itkBlockMatchingImageFilterID3 self) -> itkImageD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetMovingImage(self)


    def SetFeaturePoints(self, _arg: 'itkPointSetMD33STMD3333FFMD33') -> "void":
        """SetFeaturePoints(itkBlockMatchingImageFilterID3 self, itkPointSetMD33STMD3333FFMD33 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFeaturePoints(self, _arg)


    def GetFeaturePoints(self) -> "itkPointSetMD33STMD3333FFMD33 const *":
        """GetFeaturePoints(itkBlockMatchingImageFilterID3 self) -> itkPointSetMD33STMD3333FFMD33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFeaturePoints(self)


    def GetDisplacements(self) -> "itkPointSetVF33DTVF333FFVF3 *":
        """GetDisplacements(itkBlockMatchingImageFilterID3 self) -> itkPointSetVF33DTVF333FFVF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetDisplacements(self)


    def GetSimilarities(self) -> "itkPointSetD3DTD33FFD *":
        """GetSimilarities(itkBlockMatchingImageFilterID3 self) -> itkPointSetD3DTD33FFD"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSimilarities(self)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3 *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3

        Create a new object of the class itkBlockMatchingImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterID3.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Clone, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.SetBlockRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetBlockRadius, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetBlockRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetBlockRadius, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.SetSearchRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetSearchRadius, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetSearchRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSearchRadius, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.SetFixedImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFixedImage, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetFixedImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFixedImage, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.SetMovingImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetMovingImage, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetMovingImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetMovingImage, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.SetFeaturePoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFeaturePoints, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetFeaturePoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFeaturePoints, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetDisplacements = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetDisplacements, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3.GetSimilarities = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSimilarities, None, itkBlockMatchingImageFilterID3)
itkBlockMatchingImageFilterID3_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_swigregister
itkBlockMatchingImageFilterID3_swigregister(itkBlockMatchingImageFilterID3)

def itkBlockMatchingImageFilterID3___New_orig__() -> "itkBlockMatchingImageFilterID3_Pointer":
    """itkBlockMatchingImageFilterID3___New_orig__() -> itkBlockMatchingImageFilterID3_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3___New_orig__()

def itkBlockMatchingImageFilterID3_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterID3 *":
    """itkBlockMatchingImageFilterID3_cast(itkLightObject obj) -> itkBlockMatchingImageFilterID3"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_cast(obj)

class itkBlockMatchingImageFilterIF3(itkBlockMatchingImageFilterIF3_Superclass):
    """


    Computes displacements of given points from a fixed image in a
    floating image.

    BlockMatchingImageFilter takes fixed and moving Images as well as
    PointSet of feature points as inputs. Physical coordinates of feature
    points are stored as point coordinates. Points of the input point set
    must have unique identifiers within range 0..N-1, where N is the
    number of points. Pixels (pointData) of input point set are not used.
    Additionally, by default, feature points are expected to lie at least
    (SearchRadius + BlockRadius) voxels from a boundary. This is usually
    achieved by using an appropriate mask during selection of feature
    points. If you are unsure whether feature points satisfy the above
    condition set CheckBoundary flag to true which turns on boundary
    checks. The default output(0) is a PointSet with displacements stored
    as vectors. Additional output(1) is a PointSet containing
    similarities. Similarities are needed to compute displacements and are
    always computed. The number of points in the output PointSet is equal
    to the number of points in the input PointSet.

    The filter is templated over fixed Image, moving Image, input
    PointSet, output displacements PointSet and output similarities
    PointSet.

    This filter is intended to be used in the process of Physics-Based
    Non-Rigid Registration. It computes displacement for selected points
    based on similarity [M. Bierling, Displacement estimation by
    hierarchical block matching, Proc. SPIE Vis. Comm. and Image Proc.,
    vol. 1001, pp. 942-951, 1988.].

    Andriy Kot, Center for Real-Time Computing, Old Dominion University,
    Norfolk, VA

    See:  MaskFeaturePointSelectionFilter  \\sphinx
    \\sphinxexample{Registration/Common/MatchFeaturePoints,Match Feature
    Points} \\endsphinx

    C++ includes: itkBlockMatchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlockMatchingImageFilterIF3_Pointer":
        """__New_orig__() -> itkBlockMatchingImageFilterIF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlockMatchingImageFilterIF3_Pointer":
        """Clone(itkBlockMatchingImageFilterIF3 self) -> itkBlockMatchingImageFilterIF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Clone(self)


    def SetBlockRadius(self, _arg: 'itkSize3') -> "void":
        """
        SetBlockRadius(itkBlockMatchingImageFilterIF3 self, itkSize3 _arg)

        set/get half size 
        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetBlockRadius(self, _arg)


    def GetBlockRadius(self) -> "itkSize3":
        """GetBlockRadius(itkBlockMatchingImageFilterIF3 self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetBlockRadius(self)


    def SetSearchRadius(self, _arg: 'itkSize3') -> "void":
        """
        SetSearchRadius(itkBlockMatchingImageFilterIF3 self, itkSize3 _arg)

        set/get half window

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetSearchRadius(self, _arg)


    def GetSearchRadius(self) -> "itkSize3":
        """GetSearchRadius(itkBlockMatchingImageFilterIF3 self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSearchRadius(self)


    def SetFixedImage(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImage(itkBlockMatchingImageFilterIF3 self, itkImageF3 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkBlockMatchingImageFilterIF3 self) -> itkImageF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF3') -> "void":
        """SetMovingImage(itkBlockMatchingImageFilterIF3 self, itkImageF3 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkBlockMatchingImageFilterIF3 self) -> itkImageF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetMovingImage(self)


    def SetFeaturePoints(self, _arg: 'itkPointSetMD33STMD3333FFMD33') -> "void":
        """SetFeaturePoints(itkBlockMatchingImageFilterIF3 self, itkPointSetMD33STMD3333FFMD33 _arg)"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFeaturePoints(self, _arg)


    def GetFeaturePoints(self) -> "itkPointSetMD33STMD3333FFMD33 const *":
        """GetFeaturePoints(itkBlockMatchingImageFilterIF3 self) -> itkPointSetMD33STMD3333FFMD33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFeaturePoints(self)


    def GetDisplacements(self) -> "itkPointSetVF33DTVF333FFVF3 *":
        """GetDisplacements(itkBlockMatchingImageFilterIF3 self) -> itkPointSetVF33DTVF333FFVF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetDisplacements(self)


    def GetSimilarities(self) -> "itkPointSetD3DTD33FFD *":
        """GetSimilarities(itkBlockMatchingImageFilterIF3 self) -> itkPointSetD3DTD33FFD"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSimilarities(self)

    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3

    def cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3 *":
        """cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3

        Create a new object of the class itkBlockMatchingImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlockMatchingImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlockMatchingImageFilterIF3.Clone = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Clone, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.SetBlockRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetBlockRadius, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetBlockRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetBlockRadius, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.SetSearchRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetSearchRadius, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetSearchRadius = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSearchRadius, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.SetFixedImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFixedImage, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetFixedImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFixedImage, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.SetMovingImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetMovingImage, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetMovingImage = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetMovingImage, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.SetFeaturePoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFeaturePoints, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetFeaturePoints = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFeaturePoints, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetDisplacements = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetDisplacements, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3.GetSimilarities = new_instancemethod(_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSimilarities, None, itkBlockMatchingImageFilterIF3)
itkBlockMatchingImageFilterIF3_swigregister = _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_swigregister
itkBlockMatchingImageFilterIF3_swigregister(itkBlockMatchingImageFilterIF3)

def itkBlockMatchingImageFilterIF3___New_orig__() -> "itkBlockMatchingImageFilterIF3_Pointer":
    """itkBlockMatchingImageFilterIF3___New_orig__() -> itkBlockMatchingImageFilterIF3_Pointer"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3___New_orig__()

def itkBlockMatchingImageFilterIF3_cast(obj: 'itkLightObject') -> "itkBlockMatchingImageFilterIF3 *":
    """itkBlockMatchingImageFilterIF3_cast(itkLightObject obj) -> itkBlockMatchingImageFilterIF3"""
    return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_source(*args, **kwargs):
    """Procedural interface for MeshSource"""
    import itk
    instance = itk.MeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshSource, itkTemplate.itkTemplate):
        filter_object = itk.MeshSource.values()[0]
    else:
        filter_object = itk.MeshSource

    mesh_source.__doc__ = filter_object.__doc__
    mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_source.__doc__ += "Available Keyword Arguments:\n"
    mesh_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def block_matching_image_filter(*args, **kwargs):
    """Procedural interface for BlockMatchingImageFilter"""
    import itk
    instance = itk.BlockMatchingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def block_matching_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BlockMatchingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BlockMatchingImageFilter.values()[0]
    else:
        filter_object = itk.BlockMatchingImageFilter

    block_matching_image_filter.__doc__ = filter_object.__doc__
    block_matching_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    block_matching_image_filter.__doc__ += "Available Keyword Arguments:\n"
    block_matching_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_to_mesh_filter(*args, **kwargs):
    """Procedural interface for MeshToMeshFilter"""
    import itk
    instance = itk.MeshToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.MeshToMeshFilter.values()[0]
    else:
        filter_object = itk.MeshToMeshFilter

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__
    mesh_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_to_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    mesh_to_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



