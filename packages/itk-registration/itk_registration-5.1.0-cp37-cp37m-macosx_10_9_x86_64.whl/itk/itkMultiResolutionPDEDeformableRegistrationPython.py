# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMultiResolutionPDEDeformableRegistrationPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMultiResolutionPDEDeformableRegistrationPython', [dirname(__file__)])
        except ImportError:
            import _itkMultiResolutionPDEDeformableRegistrationPython
            return _itkMultiResolutionPDEDeformableRegistrationPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMultiResolutionPDEDeformableRegistrationPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMultiResolutionPDEDeformableRegistrationPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMultiResolutionPDEDeformableRegistrationPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMultiResolutionPyramidImageFilterPython
import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkArray2DPython
import itkResampleImageFilterPython
import itkInterpolateImageFunctionPython
import itkContinuousIndexPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkOptimizerParametersPython
import itkExtrapolateImageFunctionPython
import itkPDEDeformableRegistrationFilterPython
import itkDenseFiniteDifferenceImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkFiniteDifferenceFunctionPython

def itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_New():
  return itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New()


def itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_New():
  return itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New()


def itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_New():
  return itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New()


def itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_New():
  return itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New()

class itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D(itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    """


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming.

    C++ includes: itkMultiResolutionPDEDeformableRegistration.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer":
        """__New_orig__() -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer":
        """Clone(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Clone(self)


    def SetFixedImage(self, ptr: 'itkImageD2') -> "void":
        """
        SetFixedImage(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkImageD2 ptr)

        Set the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImage(self, ptr)


    def GetFixedImage(self) -> "itkImageD2 const *":
        """
        GetFixedImage(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkImageD2

        Get the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImage(self)


    def SetMovingImage(self, ptr: 'itkImageD2') -> "void":
        """
        SetMovingImage(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkImageD2 ptr)

        Set the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImage(self, ptr)


    def GetMovingImage(self) -> "itkImageD2 const *":
        """
        GetMovingImage(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkImageD2

        Get the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImage(self)


    def SetInitialDisplacementField(self, ptr: 'itkImageVF22') -> "void":
        """
        SetInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkImageVF22 ptr)

        Set
        initial deformation field to be used as is (no smoothing, no
        subsampling at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetInitialDisplacementField(self, ptr)


    def SetArbitraryInitialDisplacementField(self, ptr: 'itkImageVF22') -> "void":
        """
        SetArbitraryInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkImageVF22 ptr)

        Set initial deformation field. No assumption is made on the input.
        It will therefore be smoothed and resampled to match the images
        characteristics at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetArbitraryInitialDisplacementField(self, ptr)


    def GetDisplacementField(self) -> "itkImageVF22 const *":
        """
        GetDisplacementField(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkImageVF22

        Get output
        deformation field. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetDisplacementField(self)


    def SetRegistrationFilter(self, _arg: 'itkPDEDeformableRegistrationFilterID2ID2IVF22') -> "void":
        """
        SetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkPDEDeformableRegistrationFilterID2ID2IVF22 _arg)

        Get/Set the
        internal registrator. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetRegistrationFilter(self, _arg)


    def GetModifiableRegistrationFilter(self) -> "itkPDEDeformableRegistrationFilterID2ID2IVF22 *":
        """GetModifiableRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkPDEDeformableRegistrationFilterID2ID2IVF22"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableRegistrationFilter(self)


    def GetRegistrationFilter(self, *args) -> "itkPDEDeformableRegistrationFilterID2ID2IVF22 *":
        """
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkPDEDeformableRegistrationFilterID2ID2IVF22
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkPDEDeformableRegistrationFilterID2ID2IVF22
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetRegistrationFilter(self, *args)


    def SetFixedImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterID2ID2') -> "void":
        """
        SetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkMultiResolutionPyramidImageFilterID2ID2 _arg)

        Get/Set the
        fixed image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImagePyramid(self, _arg)


    def GetModifiableFixedImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
        """GetModifiableFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFixedImagePyramid(self)


    def GetFixedImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
        """
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImagePyramid(self, *args)


    def SetMovingImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterID2ID2') -> "void":
        """
        SetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkMultiResolutionPyramidImageFilterID2ID2 _arg)

        Get/Set the
        moving image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImagePyramid(self, _arg)


    def GetModifiableMovingImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
        """GetModifiableMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableMovingImagePyramid(self)


    def GetMovingImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
        """
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkMultiResolutionPyramidImageFilterID2ID2
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImagePyramid(self, *args)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, unsigned int num)

        Set number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int const &":
        """
        GetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> unsigned int const &

        Get number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfLevels(self)


    def GetCurrentLevel(self) -> "unsigned int const &":
        """
        GetCurrentLevel(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> unsigned int const &

        Get the current
        resolution level being processed. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetCurrentLevel(self)


    def SetFieldExpander(self, _arg: 'itkResampleImageFilterIVF22IVF22') -> "void":
        """
        SetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkResampleImageFilterIVF22IVF22 _arg)

        Get/Set the moving
        image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFieldExpander(self, _arg)


    def GetModifiableFieldExpander(self) -> "itkResampleImageFilterIVF22IVF22 *":
        """GetModifiableFieldExpander(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkResampleImageFilterIVF22IVF22"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFieldExpander(self)


    def GetFieldExpander(self, *args) -> "itkResampleImageFilterIVF22IVF22 *":
        """
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkResampleImageFilterIVF22IVF22
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkResampleImageFilterIVF22IVF22
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFieldExpander(self, *args)


    def SetNumberOfIterations(self, *args) -> "void":
        """
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, itkArrayUI _arg)
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self, unsigned int * data)

        Set number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfIterations(self, *args)


    def GetNumberOfIterations(self) -> "itkArrayUI const &":
        """
        GetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self) -> itkArrayUI

        Get number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfIterations(self)


    def StopRegistration(self) -> "void":
        """
        StopRegistration(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D self)

        Stop the
        registration after the current iteration. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_StopRegistration(self)

    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D *":
        """cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.Clone = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Clone, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetArbitraryInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetArbitraryInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetModifiableRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetModifiableFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetModifiableMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetCurrentLevel = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetCurrentLevel, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetModifiableFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.SetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.GetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.StopRegistration = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_StopRegistration, None, itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_swigregister = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_swigregister
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_swigregister(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)

def itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer":
    """itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__() -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Pointer"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__()

def itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D *":
    """itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast(obj)

class itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D(itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    """


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming.

    C++ includes: itkMultiResolutionPDEDeformableRegistration.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer":
        """__New_orig__() -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer":
        """Clone(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Clone(self)


    def SetFixedImage(self, ptr: 'itkImageD3') -> "void":
        """
        SetFixedImage(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkImageD3 ptr)

        Set the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImage(self, ptr)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """
        GetFixedImage(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkImageD3

        Get the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImage(self)


    def SetMovingImage(self, ptr: 'itkImageD3') -> "void":
        """
        SetMovingImage(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkImageD3 ptr)

        Set the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImage(self, ptr)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """
        GetMovingImage(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkImageD3

        Get the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImage(self)


    def SetInitialDisplacementField(self, ptr: 'itkImageVF33') -> "void":
        """
        SetInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkImageVF33 ptr)

        Set
        initial deformation field to be used as is (no smoothing, no
        subsampling at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetInitialDisplacementField(self, ptr)


    def SetArbitraryInitialDisplacementField(self, ptr: 'itkImageVF33') -> "void":
        """
        SetArbitraryInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkImageVF33 ptr)

        Set initial deformation field. No assumption is made on the input.
        It will therefore be smoothed and resampled to match the images
        characteristics at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetArbitraryInitialDisplacementField(self, ptr)


    def GetDisplacementField(self) -> "itkImageVF33 const *":
        """
        GetDisplacementField(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkImageVF33

        Get output
        deformation field. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetDisplacementField(self)


    def SetRegistrationFilter(self, _arg: 'itkPDEDeformableRegistrationFilterID3ID3IVF33') -> "void":
        """
        SetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkPDEDeformableRegistrationFilterID3ID3IVF33 _arg)

        Get/Set the
        internal registrator. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetRegistrationFilter(self, _arg)


    def GetModifiableRegistrationFilter(self) -> "itkPDEDeformableRegistrationFilterID3ID3IVF33 *":
        """GetModifiableRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkPDEDeformableRegistrationFilterID3ID3IVF33"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableRegistrationFilter(self)


    def GetRegistrationFilter(self, *args) -> "itkPDEDeformableRegistrationFilterID3ID3IVF33 *":
        """
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkPDEDeformableRegistrationFilterID3ID3IVF33
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkPDEDeformableRegistrationFilterID3ID3IVF33
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetRegistrationFilter(self, *args)


    def SetFixedImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterID3ID3') -> "void":
        """
        SetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkMultiResolutionPyramidImageFilterID3ID3 _arg)

        Get/Set the
        fixed image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImagePyramid(self, _arg)


    def GetModifiableFixedImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
        """GetModifiableFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFixedImagePyramid(self)


    def GetFixedImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
        """
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImagePyramid(self, *args)


    def SetMovingImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterID3ID3') -> "void":
        """
        SetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkMultiResolutionPyramidImageFilterID3ID3 _arg)

        Get/Set the
        moving image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImagePyramid(self, _arg)


    def GetModifiableMovingImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
        """GetModifiableMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableMovingImagePyramid(self)


    def GetMovingImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
        """
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkMultiResolutionPyramidImageFilterID3ID3
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImagePyramid(self, *args)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, unsigned int num)

        Set number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int const &":
        """
        GetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> unsigned int const &

        Get number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfLevels(self)


    def GetCurrentLevel(self) -> "unsigned int const &":
        """
        GetCurrentLevel(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> unsigned int const &

        Get the current
        resolution level being processed. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetCurrentLevel(self)


    def SetFieldExpander(self, _arg: 'itkResampleImageFilterIVF33IVF33') -> "void":
        """
        SetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkResampleImageFilterIVF33IVF33 _arg)

        Get/Set the moving
        image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFieldExpander(self, _arg)


    def GetModifiableFieldExpander(self) -> "itkResampleImageFilterIVF33IVF33 *":
        """GetModifiableFieldExpander(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkResampleImageFilterIVF33IVF33"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFieldExpander(self)


    def GetFieldExpander(self, *args) -> "itkResampleImageFilterIVF33IVF33 *":
        """
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkResampleImageFilterIVF33IVF33
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkResampleImageFilterIVF33IVF33
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFieldExpander(self, *args)


    def SetNumberOfIterations(self, *args) -> "void":
        """
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, itkArrayUI _arg)
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self, unsigned int * data)

        Set number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfIterations(self, *args)


    def GetNumberOfIterations(self) -> "itkArrayUI const &":
        """
        GetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self) -> itkArrayUI

        Get number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfIterations(self)


    def StopRegistration(self) -> "void":
        """
        StopRegistration(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D self)

        Stop the
        registration after the current iteration. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_StopRegistration(self)

    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D *":
        """cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.Clone = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Clone, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetArbitraryInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetArbitraryInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetModifiableRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetModifiableFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetModifiableMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetCurrentLevel = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetCurrentLevel, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetModifiableFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.SetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.GetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.StopRegistration = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_StopRegistration, None, itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_swigregister = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_swigregister
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_swigregister(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)

def itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer":
    """itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__() -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Pointer"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__()

def itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D *":
    """itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast(obj)

class itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F(itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    """


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming.

    C++ includes: itkMultiResolutionPDEDeformableRegistration.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer":
        """__New_orig__() -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer":
        """Clone(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Clone(self)


    def SetFixedImage(self, ptr: 'itkImageF2') -> "void":
        """
        SetFixedImage(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkImageF2 ptr)

        Set the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImage(self, ptr)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """
        GetFixedImage(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkImageF2

        Get the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImage(self)


    def SetMovingImage(self, ptr: 'itkImageF2') -> "void":
        """
        SetMovingImage(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkImageF2 ptr)

        Set the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImage(self, ptr)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """
        GetMovingImage(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkImageF2

        Get the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImage(self)


    def SetInitialDisplacementField(self, ptr: 'itkImageVF22') -> "void":
        """
        SetInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkImageVF22 ptr)

        Set
        initial deformation field to be used as is (no smoothing, no
        subsampling at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetInitialDisplacementField(self, ptr)


    def SetArbitraryInitialDisplacementField(self, ptr: 'itkImageVF22') -> "void":
        """
        SetArbitraryInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkImageVF22 ptr)

        Set initial deformation field. No assumption is made on the input.
        It will therefore be smoothed and resampled to match the images
        characteristics at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetArbitraryInitialDisplacementField(self, ptr)


    def GetDisplacementField(self) -> "itkImageVF22 const *":
        """
        GetDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkImageVF22

        Get output
        deformation field. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetDisplacementField(self)


    def SetRegistrationFilter(self, _arg: 'itkPDEDeformableRegistrationFilterIF2IF2IVF22') -> "void":
        """
        SetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkPDEDeformableRegistrationFilterIF2IF2IVF22 _arg)

        Get/Set the
        internal registrator. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetRegistrationFilter(self, _arg)


    def GetModifiableRegistrationFilter(self) -> "itkPDEDeformableRegistrationFilterIF2IF2IVF22 *":
        """GetModifiableRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkPDEDeformableRegistrationFilterIF2IF2IVF22"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableRegistrationFilter(self)


    def GetRegistrationFilter(self, *args) -> "itkPDEDeformableRegistrationFilterIF2IF2IVF22 *":
        """
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkPDEDeformableRegistrationFilterIF2IF2IVF22
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkPDEDeformableRegistrationFilterIF2IF2IVF22
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetRegistrationFilter(self, *args)


    def SetFixedImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterIF2IF2') -> "void":
        """
        SetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkMultiResolutionPyramidImageFilterIF2IF2 _arg)

        Get/Set the
        fixed image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImagePyramid(self, _arg)


    def GetModifiableFixedImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
        """GetModifiableFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFixedImagePyramid(self)


    def GetFixedImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
        """
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImagePyramid(self, *args)


    def SetMovingImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterIF2IF2') -> "void":
        """
        SetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkMultiResolutionPyramidImageFilterIF2IF2 _arg)

        Get/Set the
        moving image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImagePyramid(self, _arg)


    def GetModifiableMovingImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
        """GetModifiableMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableMovingImagePyramid(self)


    def GetMovingImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
        """
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkMultiResolutionPyramidImageFilterIF2IF2
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImagePyramid(self, *args)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, unsigned int num)

        Set number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int const &":
        """
        GetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> unsigned int const &

        Get number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfLevels(self)


    def GetCurrentLevel(self) -> "unsigned int const &":
        """
        GetCurrentLevel(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> unsigned int const &

        Get the current
        resolution level being processed. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetCurrentLevel(self)


    def SetFieldExpander(self, _arg: 'itkResampleImageFilterIVF22IVF22') -> "void":
        """
        SetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkResampleImageFilterIVF22IVF22 _arg)

        Get/Set the moving
        image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFieldExpander(self, _arg)


    def GetModifiableFieldExpander(self) -> "itkResampleImageFilterIVF22IVF22 *":
        """GetModifiableFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkResampleImageFilterIVF22IVF22"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFieldExpander(self)


    def GetFieldExpander(self, *args) -> "itkResampleImageFilterIVF22IVF22 *":
        """
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkResampleImageFilterIVF22IVF22
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkResampleImageFilterIVF22IVF22
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFieldExpander(self, *args)


    def SetNumberOfIterations(self, *args) -> "void":
        """
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, itkArrayUI _arg)
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self, unsigned int * data)

        Set number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfIterations(self, *args)


    def GetNumberOfIterations(self) -> "itkArrayUI const &":
        """
        GetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self) -> itkArrayUI

        Get number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfIterations(self)


    def StopRegistration(self) -> "void":
        """
        StopRegistration(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F self)

        Stop the
        registration after the current iteration. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_StopRegistration(self)

    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F *":
        """cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.Clone = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Clone, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetArbitraryInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetArbitraryInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetModifiableRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetModifiableFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetModifiableMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetCurrentLevel = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetCurrentLevel, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetModifiableFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.SetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.GetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.StopRegistration = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_StopRegistration, None, itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_swigregister = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_swigregister
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_swigregister(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)

def itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer":
    """itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__() -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Pointer"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__()

def itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F *":
    """itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast(obj)

class itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F(itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    """


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming.

    C++ includes: itkMultiResolutionPDEDeformableRegistration.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer":
        """__New_orig__() -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer":
        """Clone(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Clone(self)


    def SetFixedImage(self, ptr: 'itkImageF3') -> "void":
        """
        SetFixedImage(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkImageF3 ptr)

        Set the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImage(self, ptr)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """
        GetFixedImage(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkImageF3

        Get the fixed image.

        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImage(self)


    def SetMovingImage(self, ptr: 'itkImageF3') -> "void":
        """
        SetMovingImage(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkImageF3 ptr)

        Set the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImage(self, ptr)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """
        GetMovingImage(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkImageF3

        Get the moving
        image. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImage(self)


    def SetInitialDisplacementField(self, ptr: 'itkImageVF33') -> "void":
        """
        SetInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkImageVF33 ptr)

        Set
        initial deformation field to be used as is (no smoothing, no
        subsampling at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetInitialDisplacementField(self, ptr)


    def SetArbitraryInitialDisplacementField(self, ptr: 'itkImageVF33') -> "void":
        """
        SetArbitraryInitialDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkImageVF33 ptr)

        Set initial deformation field. No assumption is made on the input.
        It will therefore be smoothed and resampled to match the images
        characteristics at the coarsest level of the pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetArbitraryInitialDisplacementField(self, ptr)


    def GetDisplacementField(self) -> "itkImageVF33 const *":
        """
        GetDisplacementField(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkImageVF33

        Get output
        deformation field. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetDisplacementField(self)


    def SetRegistrationFilter(self, _arg: 'itkPDEDeformableRegistrationFilterIF3IF3IVF33') -> "void":
        """
        SetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkPDEDeformableRegistrationFilterIF3IF3IVF33 _arg)

        Get/Set the
        internal registrator. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetRegistrationFilter(self, _arg)


    def GetModifiableRegistrationFilter(self) -> "itkPDEDeformableRegistrationFilterIF3IF3IVF33 *":
        """GetModifiableRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkPDEDeformableRegistrationFilterIF3IF3IVF33"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableRegistrationFilter(self)


    def GetRegistrationFilter(self, *args) -> "itkPDEDeformableRegistrationFilterIF3IF3IVF33 *":
        """
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkPDEDeformableRegistrationFilterIF3IF3IVF33
        GetRegistrationFilter(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkPDEDeformableRegistrationFilterIF3IF3IVF33
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetRegistrationFilter(self, *args)


    def SetFixedImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterIF3IF3') -> "void":
        """
        SetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkMultiResolutionPyramidImageFilterIF3IF3 _arg)

        Get/Set the
        fixed image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImagePyramid(self, _arg)


    def GetModifiableFixedImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
        """GetModifiableFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFixedImagePyramid(self)


    def GetFixedImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
        """
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3
        GetFixedImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImagePyramid(self, *args)


    def SetMovingImagePyramid(self, _arg: 'itkMultiResolutionPyramidImageFilterIF3IF3') -> "void":
        """
        SetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkMultiResolutionPyramidImageFilterIF3IF3 _arg)

        Get/Set the
        moving image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImagePyramid(self, _arg)


    def GetModifiableMovingImagePyramid(self) -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
        """GetModifiableMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableMovingImagePyramid(self)


    def GetMovingImagePyramid(self, *args) -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
        """
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3
        GetMovingImagePyramid(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkMultiResolutionPyramidImageFilterIF3IF3
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImagePyramid(self, *args)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, unsigned int num)

        Set number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int const &":
        """
        GetNumberOfLevels(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> unsigned int const &

        Get number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfLevels(self)


    def GetCurrentLevel(self) -> "unsigned int const &":
        """
        GetCurrentLevel(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> unsigned int const &

        Get the current
        resolution level being processed. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetCurrentLevel(self)


    def SetFieldExpander(self, _arg: 'itkResampleImageFilterIVF33IVF33') -> "void":
        """
        SetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkResampleImageFilterIVF33IVF33 _arg)

        Get/Set the moving
        image pyramid. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFieldExpander(self, _arg)


    def GetModifiableFieldExpander(self) -> "itkResampleImageFilterIVF33IVF33 *":
        """GetModifiableFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkResampleImageFilterIVF33IVF33"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFieldExpander(self)


    def GetFieldExpander(self, *args) -> "itkResampleImageFilterIVF33IVF33 *":
        """
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkResampleImageFilterIVF33IVF33
        GetFieldExpander(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkResampleImageFilterIVF33IVF33
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFieldExpander(self, *args)


    def SetNumberOfIterations(self, *args) -> "void":
        """
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, itkArrayUI _arg)
        SetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self, unsigned int * data)

        Set number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfIterations(self, *args)


    def GetNumberOfIterations(self) -> "itkArrayUI const &":
        """
        GetNumberOfIterations(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self) -> itkArrayUI

        Get number of
        iterations per multi-resolution levels. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfIterations(self)


    def StopRegistration(self) -> "void":
        """
        StopRegistration(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F self)

        Stop the
        registration after the current iteration. 
        """
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_StopRegistration(self)

    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F *":
        """cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F"""
        return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.Clone = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Clone, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetFixedImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImage, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetMovingImage = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImage, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetArbitraryInitialDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetArbitraryInitialDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetDisplacementField = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetDisplacementField, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetModifiableRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetRegistrationFilter = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetRegistrationFilter, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetModifiableFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetFixedImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetModifiableMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetMovingImagePyramid = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImagePyramid, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfLevels, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetCurrentLevel = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetCurrentLevel, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetModifiableFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetFieldExpander = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFieldExpander, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.SetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.GetNumberOfIterations = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfIterations, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.StopRegistration = new_instancemethod(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_StopRegistration, None, itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_swigregister = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_swigregister
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_swigregister(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)

def itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__() -> "itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer":
    """itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__() -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Pointer"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__()

def itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast(obj: 'itkLightObject') -> "itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F *":
    """itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast(itkLightObject obj) -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F"""
    return _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multi_resolution_pde_deformable_registration(*args, **kwargs):
    """Procedural interface for MultiResolutionPDEDeformableRegistration"""
    import itk
    instance = itk.MultiResolutionPDEDeformableRegistration.New(*args, **kwargs)
    return instance.__internal_call__()

def multi_resolution_pde_deformable_registration_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MultiResolutionPDEDeformableRegistration, itkTemplate.itkTemplate):
        filter_object = itk.MultiResolutionPDEDeformableRegistration.values()[0]
    else:
        filter_object = itk.MultiResolutionPDEDeformableRegistration

    multi_resolution_pde_deformable_registration.__doc__ = filter_object.__doc__
    multi_resolution_pde_deformable_registration.__doc__ += "\n Args are Input(s) to the filter.\n"
    multi_resolution_pde_deformable_registration.__doc__ += "Available Keyword Arguments:\n"
    multi_resolution_pde_deformable_registration.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



