# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageRegistrationMethodPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageRegistrationMethodPython', [dirname(__file__)])
        except ImportError:
            import _itkImageRegistrationMethodPython
            return _itkImageRegistrationMethodPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageRegistrationMethodPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageRegistrationMethodPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageRegistrationMethodPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageMetricPython
import itkSpatialObjectBasePython
import itkImageRegionPython
import ITKCommonBasePython
import pyBasePython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkPointPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkSpatialObjectPropertyPython
import itkRGBAPixelPython
import itkAffineTransformPython
import itkTransformBasePython
import itkArray2DPython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkArrayPython
import itkOptimizerParametersPython
import itkVariableLengthVectorPython
import itkMatrixOffsetTransformBasePython
import itkImagePython
import itkRGBPixelPython
import ITKCostFunctionsPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import vnl_least_squares_functionPython
import itkCostFunctionPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import ITKOptimizersBasePython

def itkImageRegistrationMethodID3ID3_New():
  return itkImageRegistrationMethodID3ID3.New()


def itkImageRegistrationMethodID2ID2_New():
  return itkImageRegistrationMethodID2ID2.New()


def itkImageRegistrationMethodIF3IF3_New():
  return itkImageRegistrationMethodIF3IF3.New()


def itkImageRegistrationMethodIF2IF2_New():
  return itkImageRegistrationMethodIF2IF2.New()


def itkImageRegistrationMethodIUS3IUS3_New():
  return itkImageRegistrationMethodIUS3IUS3.New()


def itkImageRegistrationMethodIUS2IUS2_New():
  return itkImageRegistrationMethodIUS2IUS2.New()


def itkImageRegistrationMethodIUC3IUC3_New():
  return itkImageRegistrationMethodIUC3IUC3.New()


def itkImageRegistrationMethodIUC2IUC2_New():
  return itkImageRegistrationMethodIUC2IUC2.New()


def itkImageRegistrationMethodISS3ISS3_New():
  return itkImageRegistrationMethodISS3ISS3.New()


def itkImageRegistrationMethodISS2ISS2_New():
  return itkImageRegistrationMethodISS2ISS2.New()

class itkImageRegistrationMethodID2ID2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodID2ID2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodID2ID2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodID2ID2_Pointer":
        """Clone(itkImageRegistrationMethodID2ID2 self) -> itkImageRegistrationMethodID2ID2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageD2') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodID2ID2 self, itkImageD2 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageD2 const *":
        """GetFixedImage(itkImageRegistrationMethodID2ID2 self) -> itkImageD2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageD2') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodID2ID2 self, itkImageD2 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageD2 const *":
        """GetMovingImage(itkImageRegistrationMethodID2ID2 self) -> itkImageD2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodID2ID2 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodID2ID2 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodID2ID2 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodID2ID2 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricID2ID2') -> "void":
        """
        SetMetric(itkImageRegistrationMethodID2ID2 self, itkImageToImageMetricID2ID2 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricID2ID2 *":
        """GetModifiableMetric(itkImageRegistrationMethodID2ID2 self) -> itkImageToImageMetricID2ID2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricID2ID2 *":
        """
        GetMetric(itkImageRegistrationMethodID2ID2 self) -> itkImageToImageMetricID2ID2
        GetMetric(itkImageRegistrationMethodID2ID2 self) -> itkImageToImageMetricID2ID2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageRegistrationMethodID2ID2 self, itkTransformD22 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodID2ID2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageRegistrationMethodID2ID2 self) -> itkTransformD22
        GetTransform(itkImageRegistrationMethodID2ID2 self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionID2D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodID2ID2 self, itkInterpolateImageFunctionID2D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionID2D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodID2ID2 self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionID2D *":
        """
        GetInterpolator(itkImageRegistrationMethodID2ID2 self) -> itkInterpolateImageFunctionID2D
        GetInterpolator(itkImageRegistrationMethodID2ID2 self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodID2ID2 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodID2ID2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodID2ID2 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodID2ID2 self, itkImageRegion2 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodID2ID2 self) -> itkImageRegion2

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodID2ID2 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodID2ID2 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodID2ID2 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodID2ID2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID2ID2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodID2ID2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodID2ID2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID2ID2

        Create a new object of the class itkImageRegistrationMethodID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodID2ID2.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Clone, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImage, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImage, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMovingImage, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMovingImage, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetOptimizer, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableOptimizer, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOptimizer, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMetric, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableMetric, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMetric, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetTransform, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableTransform, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetTransform, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInterpolator, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableInterpolator, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInterpolator, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInitialTransformParameters, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInitialTransformParameters, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetLastTransformParameters, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegion, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegion, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegionDefined, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegionDefined, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Initialize, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOutput, None, itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_swigregister
itkImageRegistrationMethodID2ID2_swigregister(itkImageRegistrationMethodID2ID2)

def itkImageRegistrationMethodID2ID2___New_orig__() -> "itkImageRegistrationMethodID2ID2_Pointer":
    """itkImageRegistrationMethodID2ID2___New_orig__() -> itkImageRegistrationMethodID2ID2_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2___New_orig__()

def itkImageRegistrationMethodID2ID2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodID2ID2 *":
    """itkImageRegistrationMethodID2ID2_cast(itkLightObject obj) -> itkImageRegistrationMethodID2ID2"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_cast(obj)

class itkImageRegistrationMethodID3ID3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodID3ID3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodID3ID3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodID3ID3_Pointer":
        """Clone(itkImageRegistrationMethodID3ID3 self) -> itkImageRegistrationMethodID3ID3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageD3') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodID3ID3 self, itkImageD3 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """GetFixedImage(itkImageRegistrationMethodID3ID3 self) -> itkImageD3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageD3') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodID3ID3 self, itkImageD3 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """GetMovingImage(itkImageRegistrationMethodID3ID3 self) -> itkImageD3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodID3ID3 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodID3ID3 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodID3ID3 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodID3ID3 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricID3ID3') -> "void":
        """
        SetMetric(itkImageRegistrationMethodID3ID3 self, itkImageToImageMetricID3ID3 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricID3ID3 *":
        """GetModifiableMetric(itkImageRegistrationMethodID3ID3 self) -> itkImageToImageMetricID3ID3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricID3ID3 *":
        """
        GetMetric(itkImageRegistrationMethodID3ID3 self) -> itkImageToImageMetricID3ID3
        GetMetric(itkImageRegistrationMethodID3ID3 self) -> itkImageToImageMetricID3ID3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageRegistrationMethodID3ID3 self, itkTransformD33 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodID3ID3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageRegistrationMethodID3ID3 self) -> itkTransformD33
        GetTransform(itkImageRegistrationMethodID3ID3 self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionID3D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodID3ID3 self, itkInterpolateImageFunctionID3D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionID3D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodID3ID3 self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionID3D *":
        """
        GetInterpolator(itkImageRegistrationMethodID3ID3 self) -> itkInterpolateImageFunctionID3D
        GetInterpolator(itkImageRegistrationMethodID3ID3 self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodID3ID3 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodID3ID3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodID3ID3 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodID3ID3 self, itkImageRegion3 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodID3ID3 self) -> itkImageRegion3

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodID3ID3 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodID3ID3 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodID3ID3 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodID3ID3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID3ID3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodID3ID3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodID3ID3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID3ID3

        Create a new object of the class itkImageRegistrationMethodID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodID3ID3.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Clone, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImage, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImage, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMovingImage, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMovingImage, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetOptimizer, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableOptimizer, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOptimizer, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMetric, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableMetric, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMetric, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetTransform, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableTransform, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetTransform, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInterpolator, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableInterpolator, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInterpolator, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInitialTransformParameters, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInitialTransformParameters, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetLastTransformParameters, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegion, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegion, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegionDefined, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegionDefined, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Initialize, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOutput, None, itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_swigregister
itkImageRegistrationMethodID3ID3_swigregister(itkImageRegistrationMethodID3ID3)

def itkImageRegistrationMethodID3ID3___New_orig__() -> "itkImageRegistrationMethodID3ID3_Pointer":
    """itkImageRegistrationMethodID3ID3___New_orig__() -> itkImageRegistrationMethodID3ID3_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3___New_orig__()

def itkImageRegistrationMethodID3ID3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodID3ID3 *":
    """itkImageRegistrationMethodID3ID3_cast(itkLightObject obj) -> itkImageRegistrationMethodID3ID3"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_cast(obj)

class itkImageRegistrationMethodIF2IF2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIF2IF2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIF2IF2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIF2IF2_Pointer":
        """Clone(itkImageRegistrationMethodIF2IF2 self) -> itkImageRegistrationMethodIF2IF2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageF2') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIF2IF2 self, itkImageF2 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """GetFixedImage(itkImageRegistrationMethodIF2IF2 self) -> itkImageF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageF2') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIF2IF2 self, itkImageF2 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """GetMovingImage(itkImageRegistrationMethodIF2IF2 self) -> itkImageF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIF2IF2 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIF2IF2 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIF2IF2 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIF2IF2 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIF2IF2') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIF2IF2 self, itkImageToImageMetricIF2IF2 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIF2IF2 *":
        """GetModifiableMetric(itkImageRegistrationMethodIF2IF2 self) -> itkImageToImageMetricIF2IF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIF2IF2 *":
        """
        GetMetric(itkImageRegistrationMethodIF2IF2 self) -> itkImageToImageMetricIF2IF2
        GetMetric(itkImageRegistrationMethodIF2IF2 self) -> itkImageToImageMetricIF2IF2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIF2IF2 self, itkTransformD22 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodIF2IF2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageRegistrationMethodIF2IF2 self) -> itkTransformD22
        GetTransform(itkImageRegistrationMethodIF2IF2 self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF2D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIF2IF2 self, itkInterpolateImageFunctionIF2D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIF2IF2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetInterpolator(itkImageRegistrationMethodIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(itkImageRegistrationMethodIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIF2IF2 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIF2IF2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIF2IF2 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIF2IF2 self, itkImageRegion2 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIF2IF2 self) -> itkImageRegion2

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIF2IF2 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIF2IF2 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIF2IF2 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodIF2IF2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF2IF2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIF2IF2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIF2IF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF2IF2

        Create a new object of the class itkImageRegistrationMethodIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIF2IF2.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Clone, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImage, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImage, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMovingImage, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMovingImage, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetOptimizer, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableOptimizer, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOptimizer, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMetric, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableMetric, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMetric, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetTransform, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableTransform, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetTransform, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInterpolator, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableInterpolator, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInterpolator, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInitialTransformParameters, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInitialTransformParameters, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetLastTransformParameters, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegion, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegion, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Initialize, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOutput, None, itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_swigregister
itkImageRegistrationMethodIF2IF2_swigregister(itkImageRegistrationMethodIF2IF2)

def itkImageRegistrationMethodIF2IF2___New_orig__() -> "itkImageRegistrationMethodIF2IF2_Pointer":
    """itkImageRegistrationMethodIF2IF2___New_orig__() -> itkImageRegistrationMethodIF2IF2_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2___New_orig__()

def itkImageRegistrationMethodIF2IF2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIF2IF2 *":
    """itkImageRegistrationMethodIF2IF2_cast(itkLightObject obj) -> itkImageRegistrationMethodIF2IF2"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_cast(obj)

class itkImageRegistrationMethodIF3IF3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIF3IF3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIF3IF3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIF3IF3_Pointer":
        """Clone(itkImageRegistrationMethodIF3IF3 self) -> itkImageRegistrationMethodIF3IF3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageF3') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIF3IF3 self, itkImageF3 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkImageRegistrationMethodIF3IF3 self) -> itkImageF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageF3') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIF3IF3 self, itkImageF3 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkImageRegistrationMethodIF3IF3 self) -> itkImageF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIF3IF3 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIF3IF3 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIF3IF3 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIF3IF3 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIF3IF3') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIF3IF3 self, itkImageToImageMetricIF3IF3 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIF3IF3 *":
        """GetModifiableMetric(itkImageRegistrationMethodIF3IF3 self) -> itkImageToImageMetricIF3IF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIF3IF3 *":
        """
        GetMetric(itkImageRegistrationMethodIF3IF3 self) -> itkImageToImageMetricIF3IF3
        GetMetric(itkImageRegistrationMethodIF3IF3 self) -> itkImageToImageMetricIF3IF3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIF3IF3 self, itkTransformD33 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodIF3IF3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageRegistrationMethodIF3IF3 self) -> itkTransformD33
        GetTransform(itkImageRegistrationMethodIF3IF3 self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF3D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIF3IF3 self, itkInterpolateImageFunctionIF3D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIF3IF3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetInterpolator(itkImageRegistrationMethodIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(itkImageRegistrationMethodIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIF3IF3 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIF3IF3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIF3IF3 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIF3IF3 self, itkImageRegion3 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIF3IF3 self) -> itkImageRegion3

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIF3IF3 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIF3IF3 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIF3IF3 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodIF3IF3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF3IF3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIF3IF3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIF3IF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF3IF3

        Create a new object of the class itkImageRegistrationMethodIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIF3IF3.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Clone, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImage, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImage, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMovingImage, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMovingImage, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetOptimizer, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableOptimizer, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOptimizer, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMetric, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableMetric, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMetric, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetTransform, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableTransform, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetTransform, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInterpolator, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableInterpolator, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInterpolator, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInitialTransformParameters, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInitialTransformParameters, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetLastTransformParameters, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegion, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegion, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Initialize, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOutput, None, itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_swigregister
itkImageRegistrationMethodIF3IF3_swigregister(itkImageRegistrationMethodIF3IF3)

def itkImageRegistrationMethodIF3IF3___New_orig__() -> "itkImageRegistrationMethodIF3IF3_Pointer":
    """itkImageRegistrationMethodIF3IF3___New_orig__() -> itkImageRegistrationMethodIF3IF3_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3___New_orig__()

def itkImageRegistrationMethodIF3IF3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIF3IF3 *":
    """itkImageRegistrationMethodIF3IF3_cast(itkLightObject obj) -> itkImageRegistrationMethodIF3IF3"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_cast(obj)

class itkImageRegistrationMethodISS2ISS2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodISS2ISS2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodISS2ISS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodISS2ISS2_Pointer":
        """Clone(itkImageRegistrationMethodISS2ISS2 self) -> itkImageRegistrationMethodISS2ISS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageSS2') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodISS2ISS2 self, itkImageSS2 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageSS2 const *":
        """GetFixedImage(itkImageRegistrationMethodISS2ISS2 self) -> itkImageSS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageSS2') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodISS2ISS2 self, itkImageSS2 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageSS2 const *":
        """GetMovingImage(itkImageRegistrationMethodISS2ISS2 self) -> itkImageSS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodISS2ISS2 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodISS2ISS2 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodISS2ISS2 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodISS2ISS2 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricISS2ISS2') -> "void":
        """
        SetMetric(itkImageRegistrationMethodISS2ISS2 self, itkImageToImageMetricISS2ISS2 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricISS2ISS2 *":
        """GetModifiableMetric(itkImageRegistrationMethodISS2ISS2 self) -> itkImageToImageMetricISS2ISS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricISS2ISS2 *":
        """
        GetMetric(itkImageRegistrationMethodISS2ISS2 self) -> itkImageToImageMetricISS2ISS2
        GetMetric(itkImageRegistrationMethodISS2ISS2 self) -> itkImageToImageMetricISS2ISS2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageRegistrationMethodISS2ISS2 self, itkTransformD22 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodISS2ISS2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageRegistrationMethodISS2ISS2 self) -> itkTransformD22
        GetTransform(itkImageRegistrationMethodISS2ISS2 self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS2D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodISS2ISS2 self, itkInterpolateImageFunctionISS2D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS2D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodISS2ISS2 self) -> itkInterpolateImageFunctionISS2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS2D *":
        """
        GetInterpolator(itkImageRegistrationMethodISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(itkImageRegistrationMethodISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodISS2ISS2 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodISS2ISS2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodISS2ISS2 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodISS2ISS2 self, itkImageRegion2 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodISS2ISS2 self) -> itkImageRegion2

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodISS2ISS2 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodISS2ISS2 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodISS2ISS2 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodISS2ISS2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodISS2ISS2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodISS2ISS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS2ISS2

        Create a new object of the class itkImageRegistrationMethodISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodISS2ISS2.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Clone, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImage, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImage, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMovingImage, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMovingImage, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetOptimizer, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableOptimizer, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOptimizer, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMetric, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableMetric, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMetric, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetTransform, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableTransform, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetTransform, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInterpolator, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableInterpolator, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInterpolator, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInitialTransformParameters, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInitialTransformParameters, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetLastTransformParameters, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegion, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegion, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegionDefined, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegionDefined, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Initialize, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOutput, None, itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_swigregister
itkImageRegistrationMethodISS2ISS2_swigregister(itkImageRegistrationMethodISS2ISS2)

def itkImageRegistrationMethodISS2ISS2___New_orig__() -> "itkImageRegistrationMethodISS2ISS2_Pointer":
    """itkImageRegistrationMethodISS2ISS2___New_orig__() -> itkImageRegistrationMethodISS2ISS2_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2___New_orig__()

def itkImageRegistrationMethodISS2ISS2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodISS2ISS2 *":
    """itkImageRegistrationMethodISS2ISS2_cast(itkLightObject obj) -> itkImageRegistrationMethodISS2ISS2"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_cast(obj)

class itkImageRegistrationMethodISS3ISS3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodISS3ISS3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodISS3ISS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodISS3ISS3_Pointer":
        """Clone(itkImageRegistrationMethodISS3ISS3 self) -> itkImageRegistrationMethodISS3ISS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageSS3') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodISS3ISS3 self, itkImageSS3 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageSS3 const *":
        """GetFixedImage(itkImageRegistrationMethodISS3ISS3 self) -> itkImageSS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageSS3') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodISS3ISS3 self, itkImageSS3 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageSS3 const *":
        """GetMovingImage(itkImageRegistrationMethodISS3ISS3 self) -> itkImageSS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodISS3ISS3 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodISS3ISS3 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodISS3ISS3 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodISS3ISS3 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricISS3ISS3') -> "void":
        """
        SetMetric(itkImageRegistrationMethodISS3ISS3 self, itkImageToImageMetricISS3ISS3 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricISS3ISS3 *":
        """GetModifiableMetric(itkImageRegistrationMethodISS3ISS3 self) -> itkImageToImageMetricISS3ISS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricISS3ISS3 *":
        """
        GetMetric(itkImageRegistrationMethodISS3ISS3 self) -> itkImageToImageMetricISS3ISS3
        GetMetric(itkImageRegistrationMethodISS3ISS3 self) -> itkImageToImageMetricISS3ISS3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageRegistrationMethodISS3ISS3 self, itkTransformD33 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodISS3ISS3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageRegistrationMethodISS3ISS3 self) -> itkTransformD33
        GetTransform(itkImageRegistrationMethodISS3ISS3 self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS3D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodISS3ISS3 self, itkInterpolateImageFunctionISS3D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS3D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodISS3ISS3 self) -> itkInterpolateImageFunctionISS3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS3D *":
        """
        GetInterpolator(itkImageRegistrationMethodISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(itkImageRegistrationMethodISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodISS3ISS3 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodISS3ISS3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodISS3ISS3 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodISS3ISS3 self, itkImageRegion3 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodISS3ISS3 self) -> itkImageRegion3

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodISS3ISS3 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodISS3ISS3 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodISS3ISS3 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodISS3ISS3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodISS3ISS3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodISS3ISS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS3ISS3

        Create a new object of the class itkImageRegistrationMethodISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodISS3ISS3.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Clone, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImage, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImage, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMovingImage, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMovingImage, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetOptimizer, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableOptimizer, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOptimizer, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMetric, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableMetric, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMetric, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetTransform, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableTransform, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetTransform, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInterpolator, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableInterpolator, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInterpolator, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInitialTransformParameters, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInitialTransformParameters, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetLastTransformParameters, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegion, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegion, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegionDefined, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegionDefined, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Initialize, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOutput, None, itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_swigregister
itkImageRegistrationMethodISS3ISS3_swigregister(itkImageRegistrationMethodISS3ISS3)

def itkImageRegistrationMethodISS3ISS3___New_orig__() -> "itkImageRegistrationMethodISS3ISS3_Pointer":
    """itkImageRegistrationMethodISS3ISS3___New_orig__() -> itkImageRegistrationMethodISS3ISS3_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3___New_orig__()

def itkImageRegistrationMethodISS3ISS3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodISS3ISS3 *":
    """itkImageRegistrationMethodISS3ISS3_cast(itkLightObject obj) -> itkImageRegistrationMethodISS3ISS3"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_cast(obj)

class itkImageRegistrationMethodIUC2IUC2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIUC2IUC2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIUC2IUC2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIUC2IUC2_Pointer":
        """Clone(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageRegistrationMethodIUC2IUC2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageUC2') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIUC2IUC2 self, itkImageUC2 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageUC2 const *":
        """GetFixedImage(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageUC2') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIUC2IUC2 self, itkImageUC2 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageUC2 const *":
        """GetMovingImage(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIUC2IUC2 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIUC2IUC2 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIUC2IUC2 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIUC2IUC2 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIUC2IUC2') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIUC2IUC2 self, itkImageToImageMetricIUC2IUC2 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIUC2IUC2 *":
        """GetModifiableMetric(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageToImageMetricIUC2IUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIUC2IUC2 *":
        """
        GetMetric(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageToImageMetricIUC2IUC2
        GetMetric(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageToImageMetricIUC2IUC2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIUC2IUC2 self, itkTransformD22 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodIUC2IUC2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageRegistrationMethodIUC2IUC2 self) -> itkTransformD22
        GetTransform(itkImageRegistrationMethodIUC2IUC2 self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC2D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIUC2IUC2 self, itkInterpolateImageFunctionIUC2D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC2D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC2D *":
        """
        GetInterpolator(itkImageRegistrationMethodIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(itkImageRegistrationMethodIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIUC2IUC2 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIUC2IUC2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIUC2IUC2 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIUC2IUC2 self, itkImageRegion2 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIUC2IUC2 self) -> itkImageRegion2

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIUC2IUC2 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIUC2IUC2 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIUC2IUC2 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodIUC2IUC2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIUC2IUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC2IUC2

        Create a new object of the class itkImageRegistrationMethodIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIUC2IUC2.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Clone, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImage, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImage, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMovingImage, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMovingImage, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetOptimizer, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableOptimizer, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOptimizer, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMetric, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableMetric, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMetric, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetTransform, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableTransform, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetTransform, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInterpolator, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableInterpolator, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInterpolator, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInitialTransformParameters, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInitialTransformParameters, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetLastTransformParameters, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegion, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegion, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Initialize, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOutput, None, itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_swigregister
itkImageRegistrationMethodIUC2IUC2_swigregister(itkImageRegistrationMethodIUC2IUC2)

def itkImageRegistrationMethodIUC2IUC2___New_orig__() -> "itkImageRegistrationMethodIUC2IUC2_Pointer":
    """itkImageRegistrationMethodIUC2IUC2___New_orig__() -> itkImageRegistrationMethodIUC2IUC2_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2___New_orig__()

def itkImageRegistrationMethodIUC2IUC2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUC2IUC2 *":
    """itkImageRegistrationMethodIUC2IUC2_cast(itkLightObject obj) -> itkImageRegistrationMethodIUC2IUC2"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_cast(obj)

class itkImageRegistrationMethodIUC3IUC3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIUC3IUC3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIUC3IUC3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIUC3IUC3_Pointer":
        """Clone(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageRegistrationMethodIUC3IUC3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageUC3') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIUC3IUC3 self, itkImageUC3 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageUC3 const *":
        """GetFixedImage(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageUC3') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIUC3IUC3 self, itkImageUC3 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageUC3 const *":
        """GetMovingImage(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIUC3IUC3 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIUC3IUC3 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIUC3IUC3 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIUC3IUC3 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIUC3IUC3') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIUC3IUC3 self, itkImageToImageMetricIUC3IUC3 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIUC3IUC3 *":
        """GetModifiableMetric(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageToImageMetricIUC3IUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIUC3IUC3 *":
        """
        GetMetric(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageToImageMetricIUC3IUC3
        GetMetric(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageToImageMetricIUC3IUC3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIUC3IUC3 self, itkTransformD33 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodIUC3IUC3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageRegistrationMethodIUC3IUC3 self) -> itkTransformD33
        GetTransform(itkImageRegistrationMethodIUC3IUC3 self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC3D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIUC3IUC3 self, itkInterpolateImageFunctionIUC3D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC3D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC3D *":
        """
        GetInterpolator(itkImageRegistrationMethodIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(itkImageRegistrationMethodIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIUC3IUC3 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIUC3IUC3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIUC3IUC3 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIUC3IUC3 self, itkImageRegion3 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIUC3IUC3 self) -> itkImageRegion3

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIUC3IUC3 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIUC3IUC3 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIUC3IUC3 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodIUC3IUC3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIUC3IUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC3IUC3

        Create a new object of the class itkImageRegistrationMethodIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIUC3IUC3.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Clone, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImage, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImage, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMovingImage, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMovingImage, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetOptimizer, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableOptimizer, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOptimizer, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMetric, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableMetric, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMetric, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetTransform, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableTransform, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetTransform, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInterpolator, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableInterpolator, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInterpolator, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInitialTransformParameters, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInitialTransformParameters, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetLastTransformParameters, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegion, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegion, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Initialize, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOutput, None, itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_swigregister
itkImageRegistrationMethodIUC3IUC3_swigregister(itkImageRegistrationMethodIUC3IUC3)

def itkImageRegistrationMethodIUC3IUC3___New_orig__() -> "itkImageRegistrationMethodIUC3IUC3_Pointer":
    """itkImageRegistrationMethodIUC3IUC3___New_orig__() -> itkImageRegistrationMethodIUC3IUC3_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3___New_orig__()

def itkImageRegistrationMethodIUC3IUC3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUC3IUC3 *":
    """itkImageRegistrationMethodIUC3IUC3_cast(itkLightObject obj) -> itkImageRegistrationMethodIUC3IUC3"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_cast(obj)

class itkImageRegistrationMethodIUS2IUS2(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIUS2IUS2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIUS2IUS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIUS2IUS2_Pointer":
        """Clone(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageRegistrationMethodIUS2IUS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageUS2') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIUS2IUS2 self, itkImageUS2 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageUS2 const *":
        """GetFixedImage(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageUS2') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIUS2IUS2 self, itkImageUS2 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageUS2 const *":
        """GetMovingImage(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIUS2IUS2 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIUS2IUS2 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIUS2IUS2 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIUS2IUS2 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIUS2IUS2') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIUS2IUS2 self, itkImageToImageMetricIUS2IUS2 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIUS2IUS2 *":
        """GetModifiableMetric(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageToImageMetricIUS2IUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIUS2IUS2 *":
        """
        GetMetric(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageToImageMetricIUS2IUS2
        GetMetric(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageToImageMetricIUS2IUS2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIUS2IUS2 self, itkTransformD22 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodIUS2IUS2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageRegistrationMethodIUS2IUS2 self) -> itkTransformD22
        GetTransform(itkImageRegistrationMethodIUS2IUS2 self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUS2D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIUS2IUS2 self, itkInterpolateImageFunctionIUS2D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS2D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS2D *":
        """
        GetInterpolator(itkImageRegistrationMethodIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D
        GetInterpolator(itkImageRegistrationMethodIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIUS2IUS2 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIUS2IUS2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIUS2IUS2 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIUS2IUS2 self, itkImageRegion2 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIUS2IUS2 self) -> itkImageRegion2

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIUS2IUS2 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIUS2IUS2 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIUS2IUS2 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodIUS2IUS2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIUS2IUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS2IUS2

        Create a new object of the class itkImageRegistrationMethodIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIUS2IUS2.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Clone, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImage, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImage, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMovingImage, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMovingImage, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetOptimizer, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableOptimizer, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOptimizer, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMetric, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableMetric, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMetric, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetTransform, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableTransform, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetTransform, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInterpolator, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableInterpolator, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInterpolator, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInitialTransformParameters, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInitialTransformParameters, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetLastTransformParameters, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegion, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegion, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Initialize, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOutput, None, itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_swigregister
itkImageRegistrationMethodIUS2IUS2_swigregister(itkImageRegistrationMethodIUS2IUS2)

def itkImageRegistrationMethodIUS2IUS2___New_orig__() -> "itkImageRegistrationMethodIUS2IUS2_Pointer":
    """itkImageRegistrationMethodIUS2IUS2___New_orig__() -> itkImageRegistrationMethodIUS2IUS2_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2___New_orig__()

def itkImageRegistrationMethodIUS2IUS2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUS2IUS2 *":
    """itkImageRegistrationMethodIUS2IUS2_cast(itkLightObject obj) -> itkImageRegistrationMethodIUS2IUS2"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_cast(obj)

class itkImageRegistrationMethodIUS3IUS3(ITKCommonBasePython.itkProcessObject):
    """


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    \\sphinx \\sphinxexample{Registration/Common/GlobalRegistrationOfT
    woImages,Global Registration Of Two Images} \\sphinxexample{Core/Tra
    nsform/GlobalRegistrationTwoImagesAffine,Global Registration Two
    Images (Affine)} \\sphinxexample{Core/Transform/GlobalRegistrationTw
    oImagesBSpline,Global Registration Of Two Images (BSpline)}
    \\endsphinx

    C++ includes: itkImageRegistrationMethod.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodIUS3IUS3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodIUS3IUS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodIUS3IUS3_Pointer":
        """Clone(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageRegistrationMethodIUS3IUS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Clone(self)


    def SetFixedImage(self, fixedImage: 'itkImageUS3') -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodIUS3IUS3 self, itkImageUS3 fixedImage)

        Set/Get the Fixed
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImage(self, fixedImage)


    def GetFixedImage(self) -> "itkImageUS3 const *":
        """GetFixedImage(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImage(self)


    def SetMovingImage(self, movingImage: 'itkImageUS3') -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodIUS3IUS3 self, itkImageUS3 movingImage)

        Set/Get the Moving
        image. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMovingImage(self, movingImage)


    def GetMovingImage(self) -> "itkImageUS3 const *":
        """GetMovingImage(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMovingImage(self)


    def SetOptimizer(self, _arg: 'itkSingleValuedNonLinearOptimizer') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodIUS3IUS3 self, itkSingleValuedNonLinearOptimizer _arg)

        Set/Get the Optimizer.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkSingleValuedNonLinearOptimizer *":
        """GetModifiableOptimizer(itkImageRegistrationMethodIUS3IUS3 self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkSingleValuedNonLinearOptimizer *":
        """
        GetOptimizer(itkImageRegistrationMethodIUS3IUS3 self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(itkImageRegistrationMethodIUS3IUS3 self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOptimizer(self, *args)


    def SetMetric(self, _arg: 'itkImageToImageMetricIUS3IUS3') -> "void":
        """
        SetMetric(itkImageRegistrationMethodIUS3IUS3 self, itkImageToImageMetricIUS3IUS3 _arg)

        Set/Get the Metric. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkImageToImageMetricIUS3IUS3 *":
        """GetModifiableMetric(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageToImageMetricIUS3IUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkImageToImageMetricIUS3IUS3 *":
        """
        GetMetric(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageToImageMetricIUS3IUS3
        GetMetric(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageToImageMetricIUS3IUS3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMetric(self, *args)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageRegistrationMethodIUS3IUS3 self, itkTransformD33 _arg)

        Set/Get the Transfrom.

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodIUS3IUS3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageRegistrationMethodIUS3IUS3 self) -> itkTransformD33
        GetTransform(itkImageRegistrationMethodIUS3IUS3 self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUS3D') -> "void":
        """
        SetInterpolator(itkImageRegistrationMethodIUS3IUS3 self, itkInterpolateImageFunctionIUS3D _arg)

        Set/Get the
        Interpolator. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS3D *":
        """GetModifiableInterpolator(itkImageRegistrationMethodIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS3D *":
        """
        GetInterpolator(itkImageRegistrationMethodIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(itkImageRegistrationMethodIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInterpolator(self, *args)


    def SetInitialTransformParameters(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialTransformParameters(itkImageRegistrationMethodIUS3IUS3 self, itkOptimizerParametersD param)

        Set/Get the initial transformation parameters. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInitialTransformParameters(self, param)


    def GetInitialTransformParameters(self) -> "itkOptimizerParametersD const &":
        """GetInitialTransformParameters(itkImageRegistrationMethodIUS3IUS3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInitialTransformParameters(self)


    def GetLastTransformParameters(self) -> "itkOptimizerParametersD const &":
        """
        GetLastTransformParameters(itkImageRegistrationMethodIUS3IUS3 self) -> itkOptimizerParametersD

        Get the
        last transformation parameters visited by the optimizer. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetLastTransformParameters(self)


    def SetFixedImageRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageRegistrationMethodIUS3IUS3 self, itkImageRegion3 region)

        Set the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region.
        WARNING:  The same region can also be set directly into the metric.
        please avoid to set the region in both places since this can lead to
        inconsistent configurations. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegion(self, region)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageRegistrationMethodIUS3IUS3 self) -> itkImageRegion3

        Get the region
        of the fixed image to be considered as region of interest during the
        registration. This region will be passed to the ImageMetric in order
        to restrict the metric computation to consider only this region. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegion(self)


    def GetFixedImageRegionDefined(self) -> "bool":
        """
        GetFixedImageRegionDefined(itkImageRegistrationMethodIUS3IUS3 self) -> bool

        True if
        a region has been defined for the fixed image to which the ImageMetric
        will limit its computation 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegionDefined(self)


    def SetFixedImageRegionDefined(self, _arg: 'bool const') -> "void":
        """
        SetFixedImageRegionDefined(itkImageRegistrationMethodIUS3IUS3 self, bool const _arg)

        Turn
        on/off the use of a fixed image region to which the ImageMetric will
        limit its computation. WARNING:  The region must have been previously
        defined using the SetFixedImageRegion member function 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegionDefined(self, _arg)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageRegistrationMethodIUS3IUS3 self)

        Initialize by setting
        the interconnects between the components. 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Initialize(self)


    def GetOutput(self) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodIUS3IUS3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOutput(self)

    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodIUS3IUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS3IUS3

        Create a new object of the class itkImageRegistrationMethodIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodIUS3IUS3.Clone = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Clone, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImage, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImage, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMovingImage, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMovingImage, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetOptimizer, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableOptimizer, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOptimizer, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMetric, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableMetric, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetMetric = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMetric, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetTransform, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableTransform, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetTransform = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetTransform, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInterpolator, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetModifiableInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableInterpolator, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetInterpolator = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInterpolator, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInitialTransformParameters, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetInitialTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInitialTransformParameters, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetLastTransformParameters = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetLastTransformParameters, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegion, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetFixedImageRegion = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegion, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegionDefined, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.SetFixedImageRegionDefined = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegionDefined, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.Initialize = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Initialize, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3.GetOutput = new_instancemethod(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOutput, None, itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3_swigregister = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_swigregister
itkImageRegistrationMethodIUS3IUS3_swigregister(itkImageRegistrationMethodIUS3IUS3)

def itkImageRegistrationMethodIUS3IUS3___New_orig__() -> "itkImageRegistrationMethodIUS3IUS3_Pointer":
    """itkImageRegistrationMethodIUS3IUS3___New_orig__() -> itkImageRegistrationMethodIUS3IUS3_Pointer"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3___New_orig__()

def itkImageRegistrationMethodIUS3IUS3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodIUS3IUS3 *":
    """itkImageRegistrationMethodIUS3IUS3_cast(itkLightObject obj) -> itkImageRegistrationMethodIUS3IUS3"""
    return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_registration_method(*args, **kwargs):
    """Procedural interface for ImageRegistrationMethod"""
    import itk
    instance = itk.ImageRegistrationMethod.New(*args, **kwargs)
    return instance.__internal_call__()

def image_registration_method_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageRegistrationMethod, itkTemplate.itkTemplate):
        filter_object = itk.ImageRegistrationMethod.values()[0]
    else:
        filter_object = itk.ImageRegistrationMethod

    image_registration_method.__doc__ = filter_object.__doc__
    image_registration_method.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_registration_method.__doc__ += "Available Keyword Arguments:\n"
    image_registration_method.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



