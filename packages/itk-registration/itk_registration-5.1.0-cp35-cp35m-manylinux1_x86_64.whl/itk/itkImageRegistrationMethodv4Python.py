# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageRegistrationMethodv4Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageRegistrationMethodv4Python', [dirname(__file__)])
        except ImportError:
            import _itkImageRegistrationMethodv4Python
            return _itkImageRegistrationMethodv4Python
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageRegistrationMethodv4Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageRegistrationMethodv4Python = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageRegistrationMethodv4Python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkOptimizerParametersPython
import ITKCommonBasePython
import itkTransformBasePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkTransformParametersAdaptorBasePython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkObjectToObjectOptimizerBasePython
import itkOptimizerParameterScalesEstimatorPython
import itkObjectToObjectMetricBasePython
import itkSingleValuedCostFunctionv4Python
import itkCostFunctionPython
import itkPointSetPython
import itkVectorContainerPython
import itkContinuousIndexPython

def itkImageRegistrationMethodv4REGv4D3D3_New():
  return itkImageRegistrationMethodv4REGv4D3D3.New()


def itkImageRegistrationMethodv4REGv4F3F3_New():
  return itkImageRegistrationMethodv4REGv4F3F3.New()


def itkImageRegistrationMethodv4REGv4D2D2_New():
  return itkImageRegistrationMethodv4REGv4D2D2.New()


def itkImageRegistrationMethodv4REGv4F2F2_New():
  return itkImageRegistrationMethodv4REGv4F2F2.New()

class itkImageRegistrationMethodv4Enums(object):
    """Proxy of C++ itkImageRegistrationMethodv4Enums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MetricSamplingStrategy_NONE = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4Enums_MetricSamplingStrategy_NONE
    MetricSamplingStrategy_REGULAR = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4Enums_MetricSamplingStrategy_REGULAR
    MetricSamplingStrategy_RANDOM = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4Enums_MetricSamplingStrategy_RANDOM

    def __init__(self, *args):
        """
        __init__(itkImageRegistrationMethodv4Enums self) -> itkImageRegistrationMethodv4Enums
        __init__(itkImageRegistrationMethodv4Enums self, itkImageRegistrationMethodv4Enums arg0) -> itkImageRegistrationMethodv4Enums
        """
        _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4Enums_swiginit(self, _itkImageRegistrationMethodv4Python.new_itkImageRegistrationMethodv4Enums(*args))
    __swig_destroy__ = _itkImageRegistrationMethodv4Python.delete_itkImageRegistrationMethodv4Enums
itkImageRegistrationMethodv4Enums_swigregister = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4Enums_swigregister
itkImageRegistrationMethodv4Enums_swigregister(itkImageRegistrationMethodv4Enums)

class itkImageRegistrationMethodv4REGv4D2D2(ITKCommonBasePython.itkProcessObject):
    """


    Interface method for the current registration framework.

    This interface method class encapsulates typical registration usage by
    incorporating all the necessary elements for performing a simple image
    registration between two images. This method also allows for
    multistage registration whereby each stage is characterize by possibly
    different transforms of and different a linear registration followed
    by deformable registration where both stages are performed in multiple
    levels. Each level can be characterized by:

    the resolution of the virtual domain image (see below)

    smoothing of the fixed and moving images

    the coarseness of the current transform via transform adaptors (see
    below)  Multiple stages are handled by linking multiple instantiations
    of this class where the output transform is added to the optional
    composite transform input.

    Transform adaptors: To accommodate new changes to the current ITK
    registration framework, we introduced the concept of transform
    adaptors. Whereas each stage is associated with a moving and,
    possibly, fixed transform, each level of each stage is defined by a
    transform adaptor which describes how to adapt the transform to the
    current level. For registration stage, common practice is to increase
    the resolution of the B-spline mesh (or, analogously, the control
    point grid size) at each level. At each level, one would define the
    parameters of the B-spline transform adaptor at that level which
    increases the resolution from the previous level. For many transforms,
    such as affine, this concept of an adaptor may be nonsensical. For
    this reason, the base transform adaptor class does not do anything to
    the transform but merely passes it through. Each level of each stage
    must define a transform adaptor but, by default, the base adaptor
    class is assigned which, again, does not do anything to the transform.
    A special mention should be made of the transform adaptor at level 0
    of any stage. Most likely, the user will not want to do anything to
    the transform as it enters into the given stage so typical use will be
    to assign the base adaptor class to level 0 of all stages but we leave
    that open to the user.

    Output: The output is the updated transform.

    Nick Tustison

    Brian Avants

    C++ includes: itkImageRegistrationMethodv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodv4REGv4D2D2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodv4REGv4D2D2_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodv4REGv4D2D2_Pointer":
        """Clone(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkImageRegistrationMethodv4REGv4D2D2_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_Clone(self)


    def SetFixedImage(self, *args) -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodv4REGv4D2D2 self, itkImageD2 image)
        SetFixedImage(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0, itkImageD2 arg1)

        Set/get the fixed
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedImage(self, *args)


    def GetFixedImage(self, *args) -> "itkImageD2 const *":
        """
        GetFixedImage(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkImageD2
        GetFixedImage(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0) -> itkImageD2
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedImage(self, *args)


    def SetMovingImage(self, *args) -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodv4REGv4D2D2 self, itkImageD2 image)
        SetMovingImage(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0, itkImageD2 arg1)

        Set the moving
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingImage(self, *args)


    def GetMovingImage(self, *args) -> "itkImageD2 const *":
        """
        GetMovingImage(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkImageD2
        GetMovingImage(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0) -> itkImageD2
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingImage(self, *args)


    def SetFixedPointSet(self, *args) -> "void":
        """
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, itkPointSetUI2DSMUI22FFUI pointSet)
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0, itkPointSetUI2DSMUI22FFUI arg1)

        Set/get the fixed
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedPointSet(self, *args)


    def GetFixedPointSet(self, *args) -> "itkPointSetUI2DSMUI22FFUI const *":
        """
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkPointSetUI2DSMUI22FFUI
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0) -> itkPointSetUI2DSMUI22FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedPointSet(self, *args)


    def SetMovingPointSet(self, *args) -> "void":
        """
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, itkPointSetUI2DSMUI22FFUI pointSet)
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0, itkPointSetUI2DSMUI22FFUI arg1)

        Set the moving
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingPointSet(self, *args)


    def GetMovingPointSet(self, *args) -> "itkPointSetUI2DSMUI22FFUI const *":
        """
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkPointSetUI2DSMUI22FFUI
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long arg0) -> itkPointSetUI2DSMUI22FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingPointSet(self, *args)


    def SetOptimizer(self, _arg: 'itkObjectToObjectOptimizerBaseTemplateD') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodv4REGv4D2D2 self, itkObjectToObjectOptimizerBaseTemplateD _arg)

        Set/Get the optimizer.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """GetModifiableOptimizer(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectOptimizerBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """
        GetOptimizer(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectOptimizerBaseTemplateD
        GetOptimizer(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectOptimizerBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOptimizer(self, *args)


    def SetOptimizerWeights(self, arg0: 'itkOptimizerParametersD') -> "void":
        """
        SetOptimizerWeights(itkImageRegistrationMethodv4REGv4D2D2 self, itkOptimizerParametersD arg0)

        Set/Get the
        optimizer weights. Allows setting of a per-local-parameter weighting
        array. If unset, the weights are treated as identity. Weights are used
        to mask out a particular parameter during optimization to hold it
        constant. Or they may be used to apply another kind of prior
        knowledge. The size of the weights must be equal to the number of the
        local transformation parameters. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetOptimizerWeights(self, arg0)


    def GetOptimizerWeights(self) -> "itkOptimizerParametersD":
        """GetOptimizerWeights(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOptimizerWeights(self)


    def SetMetric(self, _arg: 'itkObjectToObjectMetricBaseTemplateD') -> "void":
        """
        SetMetric(itkImageRegistrationMethodv4REGv4D2D2 self, itkObjectToObjectMetricBaseTemplateD _arg)

        Set/Get the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkObjectToObjectMetricBaseTemplateD *":
        """GetModifiableMetric(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectMetricBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkObjectToObjectMetricBaseTemplateD *":
        """
        GetMetric(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectMetricBaseTemplateD
        GetMetric(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkObjectToObjectMetricBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetric(self, *args)


    def SetMetricSamplingStrategy(self, _arg: 'itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const') -> "void":
        """SetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4D2D2 self, itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingStrategy(self, _arg)


    def GetMetricSamplingStrategy(self) -> "itkImageRegistrationMethodv4Enums::MetricSamplingStrategy":
        """GetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkImageRegistrationMethodv4Enums::MetricSamplingStrategy"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetricSamplingStrategy(self)


    def MetricSamplingReinitializeSeed(self, *args) -> "void":
        """
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4D2D2 self)
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4D2D2 self, int seed)

        Reinitialize the seed for the random number generators that select the
        samples for some metric sampling strategies.

        By initializing the random number generator seed to a value the same
        deterministic sampling will be used each Update execution. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the wall clock in order to have psuedo-random initialization
        of the seeds. This will indeed increase the non-deterministic behavior
        of the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_MetricSamplingReinitializeSeed(self, *args)


    def SetMetricSamplingPercentage(self, arg0: 'double const') -> "void":
        """
        SetMetricSamplingPercentage(itkImageRegistrationMethodv4REGv4D2D2 self, double const arg0)

        Set the
        metric sampling percentage. Valid values are in (0.0, 1.0] 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingPercentage(self, arg0)


    def SetMetricSamplingPercentagePerLevel(self, samplingPercentages: 'itkArrayD') -> "void":
        """
        SetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4D2D2 self, itkArrayD samplingPercentages)

        Set the metric sampling percentage. Valid values are in (0.0,1.0]. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingPercentagePerLevel(self, samplingPercentages)


    def GetMetricSamplingPercentagePerLevel(self) -> "itkArrayD":
        """GetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetricSamplingPercentagePerLevel(self)


    def SetFixedInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedInitialTransformInput(self, _arg)


    def SetFixedInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetFixedInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedInitialTransform(self, _arg)


    def GetFixedInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedInitialTransformInput(self)


    def GetFixedInitialTransform(self) -> "itkTransformD22 const *":
        """GetFixedInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedInitialTransform(self)


    def SetMovingInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingInitialTransformInput(self, _arg)


    def SetMovingInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetMovingInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingInitialTransform(self, _arg)


    def GetMovingInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingInitialTransformInput(self)


    def GetMovingInitialTransform(self) -> "itkTransformD22 const *":
        """GetMovingInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingInitialTransform(self)


    def SetInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitialTransformInput(self, _arg)


    def SetInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitialTransform(self, _arg)


    def GetInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetInitialTransformInput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitialTransformInput(self)


    def GetInitialTransform(self) -> "itkTransformD22 const *":
        """GetInitialTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitialTransform(self)


    def SetTransformParametersAdaptorsPerLevel(self, arg0: 'std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > &') -> "void":
        """
        SetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4D2D2 self, std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > & arg0)

        Set/Get the
        transform adaptors. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetTransformParametersAdaptorsPerLevel(self, arg0)


    def GetTransformParametersAdaptorsPerLevel(self) -> "std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > const &":
        """GetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4D2D2 self) -> std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransformParametersAdaptorsPerLevel(self)


    def SetNumberOfLevels(self, arg0: 'unsigned long const') -> "void":
        """
        SetNumberOfLevels(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned long const arg0)

        Set/Get the
        number of multi-resolution levels. In setting the number of levels we
        need to set the following for each level: shrink factors for the
        virtual domain

        sigma smoothing parameter

        transform adaptor with specific parameters for the specified level 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetNumberOfLevels(self, arg0)


    def GetNumberOfLevels(self) -> "unsigned long":
        """GetNumberOfLevels(itkImageRegistrationMethodv4REGv4D2D2 self) -> unsigned long"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetNumberOfLevels(self)


    def SetShrinkFactorsPerLevel(self, factors: 'itkArrayUL') -> "void":
        """
        SetShrinkFactorsPerLevel(itkImageRegistrationMethodv4REGv4D2D2 self, itkArrayUL factors)

        Set the
        shrink factors for each level where each level has a constant of
        factors = [4,2,1] will shrink the image in every dimension by 4 the
        first level, then by 2 at the second level, then the original
        resolution for the final level (uses the itkShrinkImageFilter). 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetShrinkFactorsPerLevel(self, factors)


    def GetShrinkFactorsPerDimension(self, level: 'unsigned int const') -> "itkFixedArrayUI2":
        """
        GetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned int const level) -> itkFixedArrayUI2

        Get
        the shrink factors for a specific level. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetShrinkFactorsPerDimension(self, level)


    def SetShrinkFactorsPerDimension(self, level: 'unsigned int', factors: 'itkFixedArrayUI2') -> "void":
        """
        SetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4D2D2 self, unsigned int level, itkFixedArrayUI2 factors)

        Set
        the shrink factors for a specific level for each dimension. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetShrinkFactorsPerDimension(self, level, factors)


    def SetSmoothingSigmasPerLevel(self, _arg: 'itkArrayD') -> "void":
        """
        SetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4D2D2 self, itkArrayD _arg)

        Set/Get
        the smoothing sigmas for each level. At each resolution level, a
        gaussian smoothing filter (specifically, the
        itkDiscreteGaussianImageFilter) is applied. Sigma values are specified
        according to the option m_SmoothingSigmasAreSpecifiedInPhysicalUnits.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetSmoothingSigmasPerLevel(self, _arg)


    def GetSmoothingSigmasPerLevel(self) -> "itkArrayD":
        """GetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetSmoothingSigmasPerLevel(self)


    def SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg: 'bool const') -> "void":
        """
        SetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4D2D2 self, bool const _arg)

        Set/Get
        whether to specify the smoothing sigmas for each level in physical
        units (default) or in terms of voxels. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg)


    def GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self) -> "bool":
        """GetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4D2D2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(itkImageRegistrationMethodv4REGv4D2D2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(itkImageRegistrationMethodv4REGv4D2D2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self)


    def GetOutput(self, *args) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22
        GetOutput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOutput(self, *args)


    def GetTransformOutput(self, *args) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetTransformOutput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22
        GetTransformOutput(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkDataObjectDecoratorTD22
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransformOutput(self, *args)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableTransform(self)


    def GetTransform(self) -> "itkTransformD22 const *":
        """GetTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransform(self)


    def GetCurrentLevel(self) -> "unsigned long":
        """
        GetCurrentLevel(itkImageRegistrationMethodv4REGv4D2D2 self) -> unsigned long

        Get the current
        level. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentLevel(self)


    def GetCurrentIteration(self) -> "unsigned long const &":
        """
        GetCurrentIteration(itkImageRegistrationMethodv4REGv4D2D2 self) -> unsigned long const &

        Get the current
        iteration. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentIteration(self)


    def GetCurrentMetricValue(self) -> "double const &":
        """GetCurrentMetricValue(itkImageRegistrationMethodv4REGv4D2D2 self) -> double const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentMetricValue(self)


    def GetCurrentConvergenceValue(self) -> "double const &":
        """
        GetCurrentConvergenceValue(itkImageRegistrationMethodv4REGv4D2D2 self) -> double const &

        Get the
        current convergence value. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentConvergenceValue(self)


    def GetIsConverged(self) -> "bool const &":
        """
        GetIsConverged(itkImageRegistrationMethodv4REGv4D2D2 self) -> bool const &

        Get the current
        convergence state per level. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetIsConverged(self)


    def SetInPlace(self, _arg: 'bool const') -> "void":
        """
        SetInPlace(itkImageRegistrationMethodv4REGv4D2D2 self, bool const _arg)

        Request that the
        InitialTransform be grafted onto the output, there by not creating a
        copy. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInPlace(self, _arg)


    def GetInPlace(self) -> "bool":
        """GetInPlace(itkImageRegistrationMethodv4REGv4D2D2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInPlace(self)


    def InPlaceOn(self) -> "void":
        """InPlaceOn(itkImageRegistrationMethodv4REGv4D2D2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InPlaceOn(self)


    def InPlaceOff(self) -> "void":
        """InPlaceOff(itkImageRegistrationMethodv4REGv4D2D2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InPlaceOff(self)


    def InitializeCenterOfLinearOutputTransformOn(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransformOn(itkImageRegistrationMethodv4REGv4D2D2 self)

        Initialize the
        current linear transform to be optimized with the center of the
        previous transform in the queue. This provides a much better
        initialization than the default origin. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransformOn(self)


    def InitializeCenterOfLinearOutputTransformOff(self) -> "void":
        """InitializeCenterOfLinearOutputTransformOff(itkImageRegistrationMethodv4REGv4D2D2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransformOff(self)


    def SetInitializeCenterOfLinearOutputTransform(self, _arg: 'bool const') -> "void":
        """SetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D2D2 self, bool const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitializeCenterOfLinearOutputTransform(self, _arg)


    def GetInitializeCenterOfLinearOutputTransform(self) -> "bool":
        """GetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D2D2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitializeCenterOfLinearOutputTransform(self)


    def InitializeCenterOfLinearOutputTransform(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D2D2 self)

        We try to
        initialize the center of a linear transform (specifically those
        derived from itk::MatrixOffsetTransformBase). There are a number of
        checks that we need to make to account for all possible scenarios: 1)
        we check to make sure the m_OutputTransform is of the appropriate type
        such that it makes sense to try to center the transform. Local
        transforms such as SyN and B-spline do not need to be "centered", 2)
        we check to make sure the composite transform (to which we'll add the
        m_OutputTransform) is not empty, 3) we look for the first previous
        transform which has a center parameter, (which, presumably, been
        optimized beforehand), and 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransform(self)

    __swig_destroy__ = _itkImageRegistrationMethodv4Python.delete_itkImageRegistrationMethodv4REGv4D2D2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4D2D2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4D2D2"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodv4REGv4D2D2

        Create a new object of the class itkImageRegistrationMethodv4REGv4D2D2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodv4REGv4D2D2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodv4REGv4D2D2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodv4REGv4D2D2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodv4REGv4D2D2.Clone = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_Clone, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedImage, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedImage, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingImage, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingImage, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedPointSet, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedPointSet, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingPointSet, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingPointSet, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetOptimizer, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableOptimizer, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOptimizer, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetric, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableMetric, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetric, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.MetricSamplingReinitializeSeed = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_MetricSamplingReinitializeSeed, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMetricSamplingPercentage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingPercentage, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitialTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetShrinkFactorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetShrinkFactorsPerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetOutput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetTransformOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransformOutput, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetModifiableTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetCurrentLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentLevel, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetCurrentIteration = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentIteration, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetCurrentMetricValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentMetricValue, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetCurrentConvergenceValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetCurrentConvergenceValue, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetIsConverged = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetIsConverged, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInPlace, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInPlace, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.InPlaceOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InPlaceOn, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.InPlaceOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InPlaceOff, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.InitializeCenterOfLinearOutputTransformOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransformOn, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.InitializeCenterOfLinearOutputTransformOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransformOff, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.SetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_SetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.GetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_GetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2.InitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_InitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D2D2)
itkImageRegistrationMethodv4REGv4D2D2_swigregister = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_swigregister
itkImageRegistrationMethodv4REGv4D2D2_swigregister(itkImageRegistrationMethodv4REGv4D2D2)

def itkImageRegistrationMethodv4REGv4D2D2___New_orig__() -> "itkImageRegistrationMethodv4REGv4D2D2_Pointer":
    """itkImageRegistrationMethodv4REGv4D2D2___New_orig__() -> itkImageRegistrationMethodv4REGv4D2D2_Pointer"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2___New_orig__()

def itkImageRegistrationMethodv4REGv4D2D2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4D2D2 *":
    """itkImageRegistrationMethodv4REGv4D2D2_cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4D2D2"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2_cast(obj)

class itkImageRegistrationMethodv4REGv4D3D3(ITKCommonBasePython.itkProcessObject):
    """


    Interface method for the current registration framework.

    This interface method class encapsulates typical registration usage by
    incorporating all the necessary elements for performing a simple image
    registration between two images. This method also allows for
    multistage registration whereby each stage is characterize by possibly
    different transforms of and different a linear registration followed
    by deformable registration where both stages are performed in multiple
    levels. Each level can be characterized by:

    the resolution of the virtual domain image (see below)

    smoothing of the fixed and moving images

    the coarseness of the current transform via transform adaptors (see
    below)  Multiple stages are handled by linking multiple instantiations
    of this class where the output transform is added to the optional
    composite transform input.

    Transform adaptors: To accommodate new changes to the current ITK
    registration framework, we introduced the concept of transform
    adaptors. Whereas each stage is associated with a moving and,
    possibly, fixed transform, each level of each stage is defined by a
    transform adaptor which describes how to adapt the transform to the
    current level. For registration stage, common practice is to increase
    the resolution of the B-spline mesh (or, analogously, the control
    point grid size) at each level. At each level, one would define the
    parameters of the B-spline transform adaptor at that level which
    increases the resolution from the previous level. For many transforms,
    such as affine, this concept of an adaptor may be nonsensical. For
    this reason, the base transform adaptor class does not do anything to
    the transform but merely passes it through. Each level of each stage
    must define a transform adaptor but, by default, the base adaptor
    class is assigned which, again, does not do anything to the transform.
    A special mention should be made of the transform adaptor at level 0
    of any stage. Most likely, the user will not want to do anything to
    the transform as it enters into the given stage so typical use will be
    to assign the base adaptor class to level 0 of all stages but we leave
    that open to the user.

    Output: The output is the updated transform.

    Nick Tustison

    Brian Avants

    C++ includes: itkImageRegistrationMethodv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodv4REGv4D3D3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodv4REGv4D3D3_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodv4REGv4D3D3_Pointer":
        """Clone(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkImageRegistrationMethodv4REGv4D3D3_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_Clone(self)


    def SetFixedImage(self, *args) -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodv4REGv4D3D3 self, itkImageD3 image)
        SetFixedImage(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0, itkImageD3 arg1)

        Set/get the fixed
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedImage(self, *args)


    def GetFixedImage(self, *args) -> "itkImageD3 const *":
        """
        GetFixedImage(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkImageD3
        GetFixedImage(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0) -> itkImageD3
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedImage(self, *args)


    def SetMovingImage(self, *args) -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodv4REGv4D3D3 self, itkImageD3 image)
        SetMovingImage(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0, itkImageD3 arg1)

        Set the moving
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingImage(self, *args)


    def GetMovingImage(self, *args) -> "itkImageD3 const *":
        """
        GetMovingImage(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkImageD3
        GetMovingImage(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0) -> itkImageD3
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingImage(self, *args)


    def SetFixedPointSet(self, *args) -> "void":
        """
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, itkPointSetUI3DSMUI33FFUI pointSet)
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0, itkPointSetUI3DSMUI33FFUI arg1)

        Set/get the fixed
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedPointSet(self, *args)


    def GetFixedPointSet(self, *args) -> "itkPointSetUI3DSMUI33FFUI const *":
        """
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkPointSetUI3DSMUI33FFUI
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0) -> itkPointSetUI3DSMUI33FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedPointSet(self, *args)


    def SetMovingPointSet(self, *args) -> "void":
        """
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, itkPointSetUI3DSMUI33FFUI pointSet)
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0, itkPointSetUI3DSMUI33FFUI arg1)

        Set the moving
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingPointSet(self, *args)


    def GetMovingPointSet(self, *args) -> "itkPointSetUI3DSMUI33FFUI const *":
        """
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkPointSetUI3DSMUI33FFUI
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long arg0) -> itkPointSetUI3DSMUI33FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingPointSet(self, *args)


    def SetOptimizer(self, _arg: 'itkObjectToObjectOptimizerBaseTemplateD') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodv4REGv4D3D3 self, itkObjectToObjectOptimizerBaseTemplateD _arg)

        Set/Get the optimizer.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """GetModifiableOptimizer(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectOptimizerBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """
        GetOptimizer(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectOptimizerBaseTemplateD
        GetOptimizer(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectOptimizerBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOptimizer(self, *args)


    def SetOptimizerWeights(self, arg0: 'itkOptimizerParametersD') -> "void":
        """
        SetOptimizerWeights(itkImageRegistrationMethodv4REGv4D3D3 self, itkOptimizerParametersD arg0)

        Set/Get the
        optimizer weights. Allows setting of a per-local-parameter weighting
        array. If unset, the weights are treated as identity. Weights are used
        to mask out a particular parameter during optimization to hold it
        constant. Or they may be used to apply another kind of prior
        knowledge. The size of the weights must be equal to the number of the
        local transformation parameters. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetOptimizerWeights(self, arg0)


    def GetOptimizerWeights(self) -> "itkOptimizerParametersD":
        """GetOptimizerWeights(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOptimizerWeights(self)


    def SetMetric(self, _arg: 'itkObjectToObjectMetricBaseTemplateD') -> "void":
        """
        SetMetric(itkImageRegistrationMethodv4REGv4D3D3 self, itkObjectToObjectMetricBaseTemplateD _arg)

        Set/Get the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkObjectToObjectMetricBaseTemplateD *":
        """GetModifiableMetric(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectMetricBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkObjectToObjectMetricBaseTemplateD *":
        """
        GetMetric(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectMetricBaseTemplateD
        GetMetric(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkObjectToObjectMetricBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetric(self, *args)


    def SetMetricSamplingStrategy(self, _arg: 'itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const') -> "void":
        """SetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4D3D3 self, itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingStrategy(self, _arg)


    def GetMetricSamplingStrategy(self) -> "itkImageRegistrationMethodv4Enums::MetricSamplingStrategy":
        """GetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkImageRegistrationMethodv4Enums::MetricSamplingStrategy"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetricSamplingStrategy(self)


    def MetricSamplingReinitializeSeed(self, *args) -> "void":
        """
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4D3D3 self)
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4D3D3 self, int seed)

        Reinitialize the seed for the random number generators that select the
        samples for some metric sampling strategies.

        By initializing the random number generator seed to a value the same
        deterministic sampling will be used each Update execution. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the wall clock in order to have psuedo-random initialization
        of the seeds. This will indeed increase the non-deterministic behavior
        of the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_MetricSamplingReinitializeSeed(self, *args)


    def SetMetricSamplingPercentage(self, arg0: 'double const') -> "void":
        """
        SetMetricSamplingPercentage(itkImageRegistrationMethodv4REGv4D3D3 self, double const arg0)

        Set the
        metric sampling percentage. Valid values are in (0.0, 1.0] 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingPercentage(self, arg0)


    def SetMetricSamplingPercentagePerLevel(self, samplingPercentages: 'itkArrayD') -> "void":
        """
        SetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4D3D3 self, itkArrayD samplingPercentages)

        Set the metric sampling percentage. Valid values are in (0.0,1.0]. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingPercentagePerLevel(self, samplingPercentages)


    def GetMetricSamplingPercentagePerLevel(self) -> "itkArrayD":
        """GetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetricSamplingPercentagePerLevel(self)


    def SetFixedInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedInitialTransformInput(self, _arg)


    def SetFixedInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetFixedInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedInitialTransform(self, _arg)


    def GetFixedInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedInitialTransformInput(self)


    def GetFixedInitialTransform(self) -> "itkTransformD33 const *":
        """GetFixedInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedInitialTransform(self)


    def SetMovingInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingInitialTransformInput(self, _arg)


    def SetMovingInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetMovingInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingInitialTransform(self, _arg)


    def GetMovingInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingInitialTransformInput(self)


    def GetMovingInitialTransform(self) -> "itkTransformD33 const *":
        """GetMovingInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingInitialTransform(self)


    def SetInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitialTransformInput(self, _arg)


    def SetInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitialTransform(self, _arg)


    def GetInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetInitialTransformInput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitialTransformInput(self)


    def GetInitialTransform(self) -> "itkTransformD33 const *":
        """GetInitialTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitialTransform(self)


    def SetTransformParametersAdaptorsPerLevel(self, arg0: 'std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > &') -> "void":
        """
        SetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4D3D3 self, std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > & arg0)

        Set/Get the
        transform adaptors. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetTransformParametersAdaptorsPerLevel(self, arg0)


    def GetTransformParametersAdaptorsPerLevel(self) -> "std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > const &":
        """GetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4D3D3 self) -> std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransformParametersAdaptorsPerLevel(self)


    def SetNumberOfLevels(self, arg0: 'unsigned long const') -> "void":
        """
        SetNumberOfLevels(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned long const arg0)

        Set/Get the
        number of multi-resolution levels. In setting the number of levels we
        need to set the following for each level: shrink factors for the
        virtual domain

        sigma smoothing parameter

        transform adaptor with specific parameters for the specified level 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetNumberOfLevels(self, arg0)


    def GetNumberOfLevels(self) -> "unsigned long":
        """GetNumberOfLevels(itkImageRegistrationMethodv4REGv4D3D3 self) -> unsigned long"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetNumberOfLevels(self)


    def SetShrinkFactorsPerLevel(self, factors: 'itkArrayUL') -> "void":
        """
        SetShrinkFactorsPerLevel(itkImageRegistrationMethodv4REGv4D3D3 self, itkArrayUL factors)

        Set the
        shrink factors for each level where each level has a constant of
        factors = [4,2,1] will shrink the image in every dimension by 4 the
        first level, then by 2 at the second level, then the original
        resolution for the final level (uses the itkShrinkImageFilter). 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetShrinkFactorsPerLevel(self, factors)


    def GetShrinkFactorsPerDimension(self, level: 'unsigned int const') -> "itkFixedArrayUI3":
        """
        GetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned int const level) -> itkFixedArrayUI3

        Get
        the shrink factors for a specific level. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetShrinkFactorsPerDimension(self, level)


    def SetShrinkFactorsPerDimension(self, level: 'unsigned int', factors: 'itkFixedArrayUI3') -> "void":
        """
        SetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4D3D3 self, unsigned int level, itkFixedArrayUI3 factors)

        Set
        the shrink factors for a specific level for each dimension. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetShrinkFactorsPerDimension(self, level, factors)


    def SetSmoothingSigmasPerLevel(self, _arg: 'itkArrayD') -> "void":
        """
        SetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4D3D3 self, itkArrayD _arg)

        Set/Get
        the smoothing sigmas for each level. At each resolution level, a
        gaussian smoothing filter (specifically, the
        itkDiscreteGaussianImageFilter) is applied. Sigma values are specified
        according to the option m_SmoothingSigmasAreSpecifiedInPhysicalUnits.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetSmoothingSigmasPerLevel(self, _arg)


    def GetSmoothingSigmasPerLevel(self) -> "itkArrayD":
        """GetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetSmoothingSigmasPerLevel(self)


    def SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg: 'bool const') -> "void":
        """
        SetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4D3D3 self, bool const _arg)

        Set/Get
        whether to specify the smoothing sigmas for each level in physical
        units (default) or in terms of voxels. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg)


    def GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self) -> "bool":
        """GetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4D3D3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(itkImageRegistrationMethodv4REGv4D3D3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(itkImageRegistrationMethodv4REGv4D3D3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self)


    def GetOutput(self, *args) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33
        GetOutput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOutput(self, *args)


    def GetTransformOutput(self, *args) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetTransformOutput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33
        GetTransformOutput(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkDataObjectDecoratorTD33
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransformOutput(self, *args)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableTransform(self)


    def GetTransform(self) -> "itkTransformD33 const *":
        """GetTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransform(self)


    def GetCurrentLevel(self) -> "unsigned long":
        """
        GetCurrentLevel(itkImageRegistrationMethodv4REGv4D3D3 self) -> unsigned long

        Get the current
        level. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentLevel(self)


    def GetCurrentIteration(self) -> "unsigned long const &":
        """
        GetCurrentIteration(itkImageRegistrationMethodv4REGv4D3D3 self) -> unsigned long const &

        Get the current
        iteration. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentIteration(self)


    def GetCurrentMetricValue(self) -> "double const &":
        """GetCurrentMetricValue(itkImageRegistrationMethodv4REGv4D3D3 self) -> double const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentMetricValue(self)


    def GetCurrentConvergenceValue(self) -> "double const &":
        """
        GetCurrentConvergenceValue(itkImageRegistrationMethodv4REGv4D3D3 self) -> double const &

        Get the
        current convergence value. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentConvergenceValue(self)


    def GetIsConverged(self) -> "bool const &":
        """
        GetIsConverged(itkImageRegistrationMethodv4REGv4D3D3 self) -> bool const &

        Get the current
        convergence state per level. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetIsConverged(self)


    def SetInPlace(self, _arg: 'bool const') -> "void":
        """
        SetInPlace(itkImageRegistrationMethodv4REGv4D3D3 self, bool const _arg)

        Request that the
        InitialTransform be grafted onto the output, there by not creating a
        copy. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInPlace(self, _arg)


    def GetInPlace(self) -> "bool":
        """GetInPlace(itkImageRegistrationMethodv4REGv4D3D3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInPlace(self)


    def InPlaceOn(self) -> "void":
        """InPlaceOn(itkImageRegistrationMethodv4REGv4D3D3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InPlaceOn(self)


    def InPlaceOff(self) -> "void":
        """InPlaceOff(itkImageRegistrationMethodv4REGv4D3D3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InPlaceOff(self)


    def InitializeCenterOfLinearOutputTransformOn(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransformOn(itkImageRegistrationMethodv4REGv4D3D3 self)

        Initialize the
        current linear transform to be optimized with the center of the
        previous transform in the queue. This provides a much better
        initialization than the default origin. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransformOn(self)


    def InitializeCenterOfLinearOutputTransformOff(self) -> "void":
        """InitializeCenterOfLinearOutputTransformOff(itkImageRegistrationMethodv4REGv4D3D3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransformOff(self)


    def SetInitializeCenterOfLinearOutputTransform(self, _arg: 'bool const') -> "void":
        """SetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D3D3 self, bool const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitializeCenterOfLinearOutputTransform(self, _arg)


    def GetInitializeCenterOfLinearOutputTransform(self) -> "bool":
        """GetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D3D3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitializeCenterOfLinearOutputTransform(self)


    def InitializeCenterOfLinearOutputTransform(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4D3D3 self)

        We try to
        initialize the center of a linear transform (specifically those
        derived from itk::MatrixOffsetTransformBase). There are a number of
        checks that we need to make to account for all possible scenarios: 1)
        we check to make sure the m_OutputTransform is of the appropriate type
        such that it makes sense to try to center the transform. Local
        transforms such as SyN and B-spline do not need to be "centered", 2)
        we check to make sure the composite transform (to which we'll add the
        m_OutputTransform) is not empty, 3) we look for the first previous
        transform which has a center parameter, (which, presumably, been
        optimized beforehand), and 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransform(self)

    __swig_destroy__ = _itkImageRegistrationMethodv4Python.delete_itkImageRegistrationMethodv4REGv4D3D3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4D3D3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4D3D3"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodv4REGv4D3D3

        Create a new object of the class itkImageRegistrationMethodv4REGv4D3D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodv4REGv4D3D3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodv4REGv4D3D3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodv4REGv4D3D3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodv4REGv4D3D3.Clone = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_Clone, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedImage, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedImage, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingImage, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingImage, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedPointSet, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedPointSet, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingPointSet, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingPointSet, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetOptimizer, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableOptimizer, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOptimizer, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetric, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableMetric, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetric, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.MetricSamplingReinitializeSeed = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_MetricSamplingReinitializeSeed, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMetricSamplingPercentage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingPercentage, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitialTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetShrinkFactorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetShrinkFactorsPerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetOutput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetTransformOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransformOutput, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetModifiableTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetCurrentLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentLevel, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetCurrentIteration = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentIteration, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetCurrentMetricValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentMetricValue, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetCurrentConvergenceValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetCurrentConvergenceValue, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetIsConverged = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetIsConverged, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInPlace, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInPlace, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.InPlaceOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InPlaceOn, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.InPlaceOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InPlaceOff, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.InitializeCenterOfLinearOutputTransformOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransformOn, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.InitializeCenterOfLinearOutputTransformOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransformOff, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.SetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_SetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.GetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_GetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3.InitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_InitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4D3D3)
itkImageRegistrationMethodv4REGv4D3D3_swigregister = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_swigregister
itkImageRegistrationMethodv4REGv4D3D3_swigregister(itkImageRegistrationMethodv4REGv4D3D3)

def itkImageRegistrationMethodv4REGv4D3D3___New_orig__() -> "itkImageRegistrationMethodv4REGv4D3D3_Pointer":
    """itkImageRegistrationMethodv4REGv4D3D3___New_orig__() -> itkImageRegistrationMethodv4REGv4D3D3_Pointer"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3___New_orig__()

def itkImageRegistrationMethodv4REGv4D3D3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4D3D3 *":
    """itkImageRegistrationMethodv4REGv4D3D3_cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4D3D3"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3_cast(obj)

class itkImageRegistrationMethodv4REGv4F2F2(ITKCommonBasePython.itkProcessObject):
    """


    Interface method for the current registration framework.

    This interface method class encapsulates typical registration usage by
    incorporating all the necessary elements for performing a simple image
    registration between two images. This method also allows for
    multistage registration whereby each stage is characterize by possibly
    different transforms of and different a linear registration followed
    by deformable registration where both stages are performed in multiple
    levels. Each level can be characterized by:

    the resolution of the virtual domain image (see below)

    smoothing of the fixed and moving images

    the coarseness of the current transform via transform adaptors (see
    below)  Multiple stages are handled by linking multiple instantiations
    of this class where the output transform is added to the optional
    composite transform input.

    Transform adaptors: To accommodate new changes to the current ITK
    registration framework, we introduced the concept of transform
    adaptors. Whereas each stage is associated with a moving and,
    possibly, fixed transform, each level of each stage is defined by a
    transform adaptor which describes how to adapt the transform to the
    current level. For registration stage, common practice is to increase
    the resolution of the B-spline mesh (or, analogously, the control
    point grid size) at each level. At each level, one would define the
    parameters of the B-spline transform adaptor at that level which
    increases the resolution from the previous level. For many transforms,
    such as affine, this concept of an adaptor may be nonsensical. For
    this reason, the base transform adaptor class does not do anything to
    the transform but merely passes it through. Each level of each stage
    must define a transform adaptor but, by default, the base adaptor
    class is assigned which, again, does not do anything to the transform.
    A special mention should be made of the transform adaptor at level 0
    of any stage. Most likely, the user will not want to do anything to
    the transform as it enters into the given stage so typical use will be
    to assign the base adaptor class to level 0 of all stages but we leave
    that open to the user.

    Output: The output is the updated transform.

    Nick Tustison

    Brian Avants

    C++ includes: itkImageRegistrationMethodv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodv4REGv4F2F2_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodv4REGv4F2F2_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodv4REGv4F2F2_Pointer":
        """Clone(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkImageRegistrationMethodv4REGv4F2F2_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_Clone(self)


    def SetFixedImage(self, *args) -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodv4REGv4F2F2 self, itkImageF2 image)
        SetFixedImage(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0, itkImageF2 arg1)

        Set/get the fixed
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedImage(self, *args)


    def GetFixedImage(self, *args) -> "itkImageF2 const *":
        """
        GetFixedImage(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkImageF2
        GetFixedImage(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0) -> itkImageF2
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedImage(self, *args)


    def SetMovingImage(self, *args) -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodv4REGv4F2F2 self, itkImageF2 image)
        SetMovingImage(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0, itkImageF2 arg1)

        Set the moving
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingImage(self, *args)


    def GetMovingImage(self, *args) -> "itkImageF2 const *":
        """
        GetMovingImage(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkImageF2
        GetMovingImage(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0) -> itkImageF2
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingImage(self, *args)


    def SetFixedPointSet(self, *args) -> "void":
        """
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, itkPointSetUI2DSMUI22FFUI pointSet)
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0, itkPointSetUI2DSMUI22FFUI arg1)

        Set/get the fixed
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedPointSet(self, *args)


    def GetFixedPointSet(self, *args) -> "itkPointSetUI2DSMUI22FFUI const *":
        """
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkPointSetUI2DSMUI22FFUI
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0) -> itkPointSetUI2DSMUI22FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedPointSet(self, *args)


    def SetMovingPointSet(self, *args) -> "void":
        """
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, itkPointSetUI2DSMUI22FFUI pointSet)
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0, itkPointSetUI2DSMUI22FFUI arg1)

        Set the moving
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingPointSet(self, *args)


    def GetMovingPointSet(self, *args) -> "itkPointSetUI2DSMUI22FFUI const *":
        """
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkPointSetUI2DSMUI22FFUI
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long arg0) -> itkPointSetUI2DSMUI22FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingPointSet(self, *args)


    def SetOptimizer(self, _arg: 'itkObjectToObjectOptimizerBaseTemplateD') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodv4REGv4F2F2 self, itkObjectToObjectOptimizerBaseTemplateD _arg)

        Set/Get the optimizer.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """GetModifiableOptimizer(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectOptimizerBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """
        GetOptimizer(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectOptimizerBaseTemplateD
        GetOptimizer(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectOptimizerBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOptimizer(self, *args)


    def SetOptimizerWeights(self, arg0: 'itkOptimizerParametersD') -> "void":
        """
        SetOptimizerWeights(itkImageRegistrationMethodv4REGv4F2F2 self, itkOptimizerParametersD arg0)

        Set/Get the
        optimizer weights. Allows setting of a per-local-parameter weighting
        array. If unset, the weights are treated as identity. Weights are used
        to mask out a particular parameter during optimization to hold it
        constant. Or they may be used to apply another kind of prior
        knowledge. The size of the weights must be equal to the number of the
        local transformation parameters. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetOptimizerWeights(self, arg0)


    def GetOptimizerWeights(self) -> "itkOptimizerParametersD":
        """GetOptimizerWeights(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOptimizerWeights(self)


    def SetMetric(self, _arg: 'itkObjectToObjectMetricBaseTemplateD') -> "void":
        """
        SetMetric(itkImageRegistrationMethodv4REGv4F2F2 self, itkObjectToObjectMetricBaseTemplateD _arg)

        Set/Get the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkObjectToObjectMetricBaseTemplateD *":
        """GetModifiableMetric(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectMetricBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkObjectToObjectMetricBaseTemplateD *":
        """
        GetMetric(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectMetricBaseTemplateD
        GetMetric(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkObjectToObjectMetricBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetric(self, *args)


    def SetMetricSamplingStrategy(self, _arg: 'itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const') -> "void":
        """SetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4F2F2 self, itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingStrategy(self, _arg)


    def GetMetricSamplingStrategy(self) -> "itkImageRegistrationMethodv4Enums::MetricSamplingStrategy":
        """GetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkImageRegistrationMethodv4Enums::MetricSamplingStrategy"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetricSamplingStrategy(self)


    def MetricSamplingReinitializeSeed(self, *args) -> "void":
        """
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4F2F2 self)
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4F2F2 self, int seed)

        Reinitialize the seed for the random number generators that select the
        samples for some metric sampling strategies.

        By initializing the random number generator seed to a value the same
        deterministic sampling will be used each Update execution. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the wall clock in order to have psuedo-random initialization
        of the seeds. This will indeed increase the non-deterministic behavior
        of the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_MetricSamplingReinitializeSeed(self, *args)


    def SetMetricSamplingPercentage(self, arg0: 'double const') -> "void":
        """
        SetMetricSamplingPercentage(itkImageRegistrationMethodv4REGv4F2F2 self, double const arg0)

        Set the
        metric sampling percentage. Valid values are in (0.0, 1.0] 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingPercentage(self, arg0)


    def SetMetricSamplingPercentagePerLevel(self, samplingPercentages: 'itkArrayD') -> "void":
        """
        SetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4F2F2 self, itkArrayD samplingPercentages)

        Set the metric sampling percentage. Valid values are in (0.0,1.0]. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingPercentagePerLevel(self, samplingPercentages)


    def GetMetricSamplingPercentagePerLevel(self) -> "itkArrayD":
        """GetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetricSamplingPercentagePerLevel(self)


    def SetFixedInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedInitialTransformInput(self, _arg)


    def SetFixedInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetFixedInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedInitialTransform(self, _arg)


    def GetFixedInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedInitialTransformInput(self)


    def GetFixedInitialTransform(self) -> "itkTransformD22 const *":
        """GetFixedInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedInitialTransform(self)


    def SetMovingInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingInitialTransformInput(self, _arg)


    def SetMovingInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetMovingInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingInitialTransform(self, _arg)


    def GetMovingInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingInitialTransformInput(self)


    def GetMovingInitialTransform(self) -> "itkTransformD22 const *":
        """GetMovingInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingInitialTransform(self)


    def SetInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD22') -> "void":
        """SetInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self, itkDataObjectDecoratorTD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitialTransformInput(self, _arg)


    def SetInitialTransform(self, _arg: 'itkTransformD22') -> "void":
        """SetInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self, itkTransformD22 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitialTransform(self, _arg)


    def GetInitialTransformInput(self) -> "itkDataObjectDecoratorTD22 const *":
        """GetInitialTransformInput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitialTransformInput(self)


    def GetInitialTransform(self) -> "itkTransformD22 const *":
        """GetInitialTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitialTransform(self)


    def SetTransformParametersAdaptorsPerLevel(self, arg0: 'std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > &') -> "void":
        """
        SetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4F2F2 self, std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > & arg0)

        Set/Get the
        transform adaptors. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetTransformParametersAdaptorsPerLevel(self, arg0)


    def GetTransformParametersAdaptorsPerLevel(self) -> "std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > const &":
        """GetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4F2F2 self) -> std::vector< itkTransformParametersAdaptorBaseD2_Pointer,std::allocator< itkTransformParametersAdaptorBaseD2_Pointer > > const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransformParametersAdaptorsPerLevel(self)


    def SetNumberOfLevels(self, arg0: 'unsigned long const') -> "void":
        """
        SetNumberOfLevels(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned long const arg0)

        Set/Get the
        number of multi-resolution levels. In setting the number of levels we
        need to set the following for each level: shrink factors for the
        virtual domain

        sigma smoothing parameter

        transform adaptor with specific parameters for the specified level 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetNumberOfLevels(self, arg0)


    def GetNumberOfLevels(self) -> "unsigned long":
        """GetNumberOfLevels(itkImageRegistrationMethodv4REGv4F2F2 self) -> unsigned long"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetNumberOfLevels(self)


    def SetShrinkFactorsPerLevel(self, factors: 'itkArrayUL') -> "void":
        """
        SetShrinkFactorsPerLevel(itkImageRegistrationMethodv4REGv4F2F2 self, itkArrayUL factors)

        Set the
        shrink factors for each level where each level has a constant of
        factors = [4,2,1] will shrink the image in every dimension by 4 the
        first level, then by 2 at the second level, then the original
        resolution for the final level (uses the itkShrinkImageFilter). 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetShrinkFactorsPerLevel(self, factors)


    def GetShrinkFactorsPerDimension(self, level: 'unsigned int const') -> "itkFixedArrayUI2":
        """
        GetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned int const level) -> itkFixedArrayUI2

        Get
        the shrink factors for a specific level. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetShrinkFactorsPerDimension(self, level)


    def SetShrinkFactorsPerDimension(self, level: 'unsigned int', factors: 'itkFixedArrayUI2') -> "void":
        """
        SetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4F2F2 self, unsigned int level, itkFixedArrayUI2 factors)

        Set
        the shrink factors for a specific level for each dimension. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetShrinkFactorsPerDimension(self, level, factors)


    def SetSmoothingSigmasPerLevel(self, _arg: 'itkArrayD') -> "void":
        """
        SetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4F2F2 self, itkArrayD _arg)

        Set/Get
        the smoothing sigmas for each level. At each resolution level, a
        gaussian smoothing filter (specifically, the
        itkDiscreteGaussianImageFilter) is applied. Sigma values are specified
        according to the option m_SmoothingSigmasAreSpecifiedInPhysicalUnits.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetSmoothingSigmasPerLevel(self, _arg)


    def GetSmoothingSigmasPerLevel(self) -> "itkArrayD":
        """GetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetSmoothingSigmasPerLevel(self)


    def SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg: 'bool const') -> "void":
        """
        SetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4F2F2 self, bool const _arg)

        Set/Get
        whether to specify the smoothing sigmas for each level in physical
        units (default) or in terms of voxels. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg)


    def GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self) -> "bool":
        """GetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4F2F2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(itkImageRegistrationMethodv4REGv4F2F2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(itkImageRegistrationMethodv4REGv4F2F2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self)


    def GetOutput(self, *args) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetOutput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22
        GetOutput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOutput(self, *args)


    def GetTransformOutput(self, *args) -> "itkDataObjectDecoratorTD22 const *":
        """
        GetTransformOutput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22
        GetTransformOutput(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkDataObjectDecoratorTD22
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransformOutput(self, *args)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableTransform(self)


    def GetTransform(self) -> "itkTransformD22 const *":
        """GetTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> itkTransformD22"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransform(self)


    def GetCurrentLevel(self) -> "unsigned long":
        """
        GetCurrentLevel(itkImageRegistrationMethodv4REGv4F2F2 self) -> unsigned long

        Get the current
        level. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentLevel(self)


    def GetCurrentIteration(self) -> "unsigned long const &":
        """
        GetCurrentIteration(itkImageRegistrationMethodv4REGv4F2F2 self) -> unsigned long const &

        Get the current
        iteration. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentIteration(self)


    def GetCurrentMetricValue(self) -> "double const &":
        """GetCurrentMetricValue(itkImageRegistrationMethodv4REGv4F2F2 self) -> double const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentMetricValue(self)


    def GetCurrentConvergenceValue(self) -> "double const &":
        """
        GetCurrentConvergenceValue(itkImageRegistrationMethodv4REGv4F2F2 self) -> double const &

        Get the
        current convergence value. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentConvergenceValue(self)


    def GetIsConverged(self) -> "bool const &":
        """
        GetIsConverged(itkImageRegistrationMethodv4REGv4F2F2 self) -> bool const &

        Get the current
        convergence state per level. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetIsConverged(self)


    def SetInPlace(self, _arg: 'bool const') -> "void":
        """
        SetInPlace(itkImageRegistrationMethodv4REGv4F2F2 self, bool const _arg)

        Request that the
        InitialTransform be grafted onto the output, there by not creating a
        copy. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInPlace(self, _arg)


    def GetInPlace(self) -> "bool":
        """GetInPlace(itkImageRegistrationMethodv4REGv4F2F2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInPlace(self)


    def InPlaceOn(self) -> "void":
        """InPlaceOn(itkImageRegistrationMethodv4REGv4F2F2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InPlaceOn(self)


    def InPlaceOff(self) -> "void":
        """InPlaceOff(itkImageRegistrationMethodv4REGv4F2F2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InPlaceOff(self)


    def InitializeCenterOfLinearOutputTransformOn(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransformOn(itkImageRegistrationMethodv4REGv4F2F2 self)

        Initialize the
        current linear transform to be optimized with the center of the
        previous transform in the queue. This provides a much better
        initialization than the default origin. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransformOn(self)


    def InitializeCenterOfLinearOutputTransformOff(self) -> "void":
        """InitializeCenterOfLinearOutputTransformOff(itkImageRegistrationMethodv4REGv4F2F2 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransformOff(self)


    def SetInitializeCenterOfLinearOutputTransform(self, _arg: 'bool const') -> "void":
        """SetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F2F2 self, bool const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitializeCenterOfLinearOutputTransform(self, _arg)


    def GetInitializeCenterOfLinearOutputTransform(self) -> "bool":
        """GetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F2F2 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitializeCenterOfLinearOutputTransform(self)


    def InitializeCenterOfLinearOutputTransform(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F2F2 self)

        We try to
        initialize the center of a linear transform (specifically those
        derived from itk::MatrixOffsetTransformBase). There are a number of
        checks that we need to make to account for all possible scenarios: 1)
        we check to make sure the m_OutputTransform is of the appropriate type
        such that it makes sense to try to center the transform. Local
        transforms such as SyN and B-spline do not need to be "centered", 2)
        we check to make sure the composite transform (to which we'll add the
        m_OutputTransform) is not empty, 3) we look for the first previous
        transform which has a center parameter, (which, presumably, been
        optimized beforehand), and 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransform(self)

    __swig_destroy__ = _itkImageRegistrationMethodv4Python.delete_itkImageRegistrationMethodv4REGv4F2F2

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4F2F2 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4F2F2"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodv4REGv4F2F2

        Create a new object of the class itkImageRegistrationMethodv4REGv4F2F2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodv4REGv4F2F2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodv4REGv4F2F2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodv4REGv4F2F2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodv4REGv4F2F2.Clone = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_Clone, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedImage, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedImage, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingImage, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingImage, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedPointSet, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedPointSet, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingPointSet, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingPointSet, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetOptimizer, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableOptimizer, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOptimizer, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetric, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableMetric, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetric, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.MetricSamplingReinitializeSeed = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_MetricSamplingReinitializeSeed, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMetricSamplingPercentage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingPercentage, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitialTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetShrinkFactorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetShrinkFactorsPerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetOutput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetTransformOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransformOutput, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetModifiableTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetCurrentLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentLevel, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetCurrentIteration = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentIteration, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetCurrentMetricValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentMetricValue, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetCurrentConvergenceValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetCurrentConvergenceValue, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetIsConverged = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetIsConverged, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInPlace, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInPlace, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.InPlaceOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InPlaceOn, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.InPlaceOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InPlaceOff, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.InitializeCenterOfLinearOutputTransformOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransformOn, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.InitializeCenterOfLinearOutputTransformOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransformOff, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.SetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_SetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.GetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_GetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2.InitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_InitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F2F2)
itkImageRegistrationMethodv4REGv4F2F2_swigregister = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_swigregister
itkImageRegistrationMethodv4REGv4F2F2_swigregister(itkImageRegistrationMethodv4REGv4F2F2)

def itkImageRegistrationMethodv4REGv4F2F2___New_orig__() -> "itkImageRegistrationMethodv4REGv4F2F2_Pointer":
    """itkImageRegistrationMethodv4REGv4F2F2___New_orig__() -> itkImageRegistrationMethodv4REGv4F2F2_Pointer"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2___New_orig__()

def itkImageRegistrationMethodv4REGv4F2F2_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4F2F2 *":
    """itkImageRegistrationMethodv4REGv4F2F2_cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4F2F2"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2_cast(obj)

class itkImageRegistrationMethodv4REGv4F3F3(ITKCommonBasePython.itkProcessObject):
    """


    Interface method for the current registration framework.

    This interface method class encapsulates typical registration usage by
    incorporating all the necessary elements for performing a simple image
    registration between two images. This method also allows for
    multistage registration whereby each stage is characterize by possibly
    different transforms of and different a linear registration followed
    by deformable registration where both stages are performed in multiple
    levels. Each level can be characterized by:

    the resolution of the virtual domain image (see below)

    smoothing of the fixed and moving images

    the coarseness of the current transform via transform adaptors (see
    below)  Multiple stages are handled by linking multiple instantiations
    of this class where the output transform is added to the optional
    composite transform input.

    Transform adaptors: To accommodate new changes to the current ITK
    registration framework, we introduced the concept of transform
    adaptors. Whereas each stage is associated with a moving and,
    possibly, fixed transform, each level of each stage is defined by a
    transform adaptor which describes how to adapt the transform to the
    current level. For registration stage, common practice is to increase
    the resolution of the B-spline mesh (or, analogously, the control
    point grid size) at each level. At each level, one would define the
    parameters of the B-spline transform adaptor at that level which
    increases the resolution from the previous level. For many transforms,
    such as affine, this concept of an adaptor may be nonsensical. For
    this reason, the base transform adaptor class does not do anything to
    the transform but merely passes it through. Each level of each stage
    must define a transform adaptor but, by default, the base adaptor
    class is assigned which, again, does not do anything to the transform.
    A special mention should be made of the transform adaptor at level 0
    of any stage. Most likely, the user will not want to do anything to
    the transform as it enters into the given stage so typical use will be
    to assign the base adaptor class to level 0 of all stages but we leave
    that open to the user.

    Output: The output is the updated transform.

    Nick Tustison

    Brian Avants

    C++ includes: itkImageRegistrationMethodv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegistrationMethodv4REGv4F3F3_Pointer":
        """__New_orig__() -> itkImageRegistrationMethodv4REGv4F3F3_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegistrationMethodv4REGv4F3F3_Pointer":
        """Clone(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkImageRegistrationMethodv4REGv4F3F3_Pointer"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_Clone(self)


    def SetFixedImage(self, *args) -> "void":
        """
        SetFixedImage(itkImageRegistrationMethodv4REGv4F3F3 self, itkImageF3 image)
        SetFixedImage(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0, itkImageF3 arg1)

        Set/get the fixed
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedImage(self, *args)


    def GetFixedImage(self, *args) -> "itkImageF3 const *":
        """
        GetFixedImage(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkImageF3
        GetFixedImage(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0) -> itkImageF3
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedImage(self, *args)


    def SetMovingImage(self, *args) -> "void":
        """
        SetMovingImage(itkImageRegistrationMethodv4REGv4F3F3 self, itkImageF3 image)
        SetMovingImage(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0, itkImageF3 arg1)

        Set the moving
        images. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingImage(self, *args)


    def GetMovingImage(self, *args) -> "itkImageF3 const *":
        """
        GetMovingImage(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkImageF3
        GetMovingImage(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0) -> itkImageF3
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingImage(self, *args)


    def SetFixedPointSet(self, *args) -> "void":
        """
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, itkPointSetUI3DSMUI33FFUI pointSet)
        SetFixedPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0, itkPointSetUI3DSMUI33FFUI arg1)

        Set/get the fixed
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedPointSet(self, *args)


    def GetFixedPointSet(self, *args) -> "itkPointSetUI3DSMUI33FFUI const *":
        """
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkPointSetUI3DSMUI33FFUI
        GetFixedPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0) -> itkPointSetUI3DSMUI33FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedPointSet(self, *args)


    def SetMovingPointSet(self, *args) -> "void":
        """
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, itkPointSetUI3DSMUI33FFUI pointSet)
        SetMovingPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0, itkPointSetUI3DSMUI33FFUI arg1)

        Set the moving
        point sets. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingPointSet(self, *args)


    def GetMovingPointSet(self, *args) -> "itkPointSetUI3DSMUI33FFUI const *":
        """
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkPointSetUI3DSMUI33FFUI
        GetMovingPointSet(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long arg0) -> itkPointSetUI3DSMUI33FFUI
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingPointSet(self, *args)


    def SetOptimizer(self, _arg: 'itkObjectToObjectOptimizerBaseTemplateD') -> "void":
        """
        SetOptimizer(itkImageRegistrationMethodv4REGv4F3F3 self, itkObjectToObjectOptimizerBaseTemplateD _arg)

        Set/Get the optimizer.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetOptimizer(self, _arg)


    def GetModifiableOptimizer(self) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """GetModifiableOptimizer(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectOptimizerBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableOptimizer(self)


    def GetOptimizer(self, *args) -> "itkObjectToObjectOptimizerBaseTemplateD *":
        """
        GetOptimizer(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectOptimizerBaseTemplateD
        GetOptimizer(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectOptimizerBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOptimizer(self, *args)


    def SetOptimizerWeights(self, arg0: 'itkOptimizerParametersD') -> "void":
        """
        SetOptimizerWeights(itkImageRegistrationMethodv4REGv4F3F3 self, itkOptimizerParametersD arg0)

        Set/Get the
        optimizer weights. Allows setting of a per-local-parameter weighting
        array. If unset, the weights are treated as identity. Weights are used
        to mask out a particular parameter during optimization to hold it
        constant. Or they may be used to apply another kind of prior
        knowledge. The size of the weights must be equal to the number of the
        local transformation parameters. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetOptimizerWeights(self, arg0)


    def GetOptimizerWeights(self) -> "itkOptimizerParametersD":
        """GetOptimizerWeights(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOptimizerWeights(self)


    def SetMetric(self, _arg: 'itkObjectToObjectMetricBaseTemplateD') -> "void":
        """
        SetMetric(itkImageRegistrationMethodv4REGv4F3F3 self, itkObjectToObjectMetricBaseTemplateD _arg)

        Set/Get the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetric(self, _arg)


    def GetModifiableMetric(self) -> "itkObjectToObjectMetricBaseTemplateD *":
        """GetModifiableMetric(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectMetricBaseTemplateD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableMetric(self)


    def GetMetric(self, *args) -> "itkObjectToObjectMetricBaseTemplateD *":
        """
        GetMetric(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectMetricBaseTemplateD
        GetMetric(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkObjectToObjectMetricBaseTemplateD
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetric(self, *args)


    def SetMetricSamplingStrategy(self, _arg: 'itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const') -> "void":
        """SetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4F3F3 self, itkImageRegistrationMethodv4Enums::MetricSamplingStrategy const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingStrategy(self, _arg)


    def GetMetricSamplingStrategy(self) -> "itkImageRegistrationMethodv4Enums::MetricSamplingStrategy":
        """GetMetricSamplingStrategy(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkImageRegistrationMethodv4Enums::MetricSamplingStrategy"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetricSamplingStrategy(self)


    def MetricSamplingReinitializeSeed(self, *args) -> "void":
        """
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4F3F3 self)
        MetricSamplingReinitializeSeed(itkImageRegistrationMethodv4REGv4F3F3 self, int seed)

        Reinitialize the seed for the random number generators that select the
        samples for some metric sampling strategies.

        By initializing the random number generator seed to a value the same
        deterministic sampling will be used each Update execution. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the wall clock in order to have psuedo-random initialization
        of the seeds. This will indeed increase the non-deterministic behavior
        of the metric. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_MetricSamplingReinitializeSeed(self, *args)


    def SetMetricSamplingPercentage(self, arg0: 'double const') -> "void":
        """
        SetMetricSamplingPercentage(itkImageRegistrationMethodv4REGv4F3F3 self, double const arg0)

        Set the
        metric sampling percentage. Valid values are in (0.0, 1.0] 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingPercentage(self, arg0)


    def SetMetricSamplingPercentagePerLevel(self, samplingPercentages: 'itkArrayD') -> "void":
        """
        SetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4F3F3 self, itkArrayD samplingPercentages)

        Set the metric sampling percentage. Valid values are in (0.0,1.0]. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingPercentagePerLevel(self, samplingPercentages)


    def GetMetricSamplingPercentagePerLevel(self) -> "itkArrayD":
        """GetMetricSamplingPercentagePerLevel(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetricSamplingPercentagePerLevel(self)


    def SetFixedInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedInitialTransformInput(self, _arg)


    def SetFixedInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetFixedInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedInitialTransform(self, _arg)


    def GetFixedInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetFixedInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedInitialTransformInput(self)


    def GetFixedInitialTransform(self) -> "itkTransformD33 const *":
        """GetFixedInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedInitialTransform(self)


    def SetMovingInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingInitialTransformInput(self, _arg)


    def SetMovingInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetMovingInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingInitialTransform(self, _arg)


    def GetMovingInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetMovingInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingInitialTransformInput(self)


    def GetMovingInitialTransform(self) -> "itkTransformD33 const *":
        """GetMovingInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingInitialTransform(self)


    def SetInitialTransformInput(self, _arg: 'itkDataObjectDecoratorTD33') -> "void":
        """SetInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self, itkDataObjectDecoratorTD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitialTransformInput(self, _arg)


    def SetInitialTransform(self, _arg: 'itkTransformD33') -> "void":
        """SetInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self, itkTransformD33 _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitialTransform(self, _arg)


    def GetInitialTransformInput(self) -> "itkDataObjectDecoratorTD33 const *":
        """GetInitialTransformInput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitialTransformInput(self)


    def GetInitialTransform(self) -> "itkTransformD33 const *":
        """GetInitialTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitialTransform(self)


    def SetTransformParametersAdaptorsPerLevel(self, arg0: 'std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > &') -> "void":
        """
        SetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4F3F3 self, std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > & arg0)

        Set/Get the
        transform adaptors. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetTransformParametersAdaptorsPerLevel(self, arg0)


    def GetTransformParametersAdaptorsPerLevel(self) -> "std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > const &":
        """GetTransformParametersAdaptorsPerLevel(itkImageRegistrationMethodv4REGv4F3F3 self) -> std::vector< itkTransformParametersAdaptorBaseD3_Pointer,std::allocator< itkTransformParametersAdaptorBaseD3_Pointer > > const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransformParametersAdaptorsPerLevel(self)


    def SetNumberOfLevels(self, arg0: 'unsigned long const') -> "void":
        """
        SetNumberOfLevels(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned long const arg0)

        Set/Get the
        number of multi-resolution levels. In setting the number of levels we
        need to set the following for each level: shrink factors for the
        virtual domain

        sigma smoothing parameter

        transform adaptor with specific parameters for the specified level 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetNumberOfLevels(self, arg0)


    def GetNumberOfLevels(self) -> "unsigned long":
        """GetNumberOfLevels(itkImageRegistrationMethodv4REGv4F3F3 self) -> unsigned long"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetNumberOfLevels(self)


    def SetShrinkFactorsPerLevel(self, factors: 'itkArrayUL') -> "void":
        """
        SetShrinkFactorsPerLevel(itkImageRegistrationMethodv4REGv4F3F3 self, itkArrayUL factors)

        Set the
        shrink factors for each level where each level has a constant of
        factors = [4,2,1] will shrink the image in every dimension by 4 the
        first level, then by 2 at the second level, then the original
        resolution for the final level (uses the itkShrinkImageFilter). 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetShrinkFactorsPerLevel(self, factors)


    def GetShrinkFactorsPerDimension(self, level: 'unsigned int const') -> "itkFixedArrayUI3":
        """
        GetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned int const level) -> itkFixedArrayUI3

        Get
        the shrink factors for a specific level. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetShrinkFactorsPerDimension(self, level)


    def SetShrinkFactorsPerDimension(self, level: 'unsigned int', factors: 'itkFixedArrayUI3') -> "void":
        """
        SetShrinkFactorsPerDimension(itkImageRegistrationMethodv4REGv4F3F3 self, unsigned int level, itkFixedArrayUI3 factors)

        Set
        the shrink factors for a specific level for each dimension. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetShrinkFactorsPerDimension(self, level, factors)


    def SetSmoothingSigmasPerLevel(self, _arg: 'itkArrayD') -> "void":
        """
        SetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4F3F3 self, itkArrayD _arg)

        Set/Get
        the smoothing sigmas for each level. At each resolution level, a
        gaussian smoothing filter (specifically, the
        itkDiscreteGaussianImageFilter) is applied. Sigma values are specified
        according to the option m_SmoothingSigmasAreSpecifiedInPhysicalUnits.

        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetSmoothingSigmasPerLevel(self, _arg)


    def GetSmoothingSigmasPerLevel(self) -> "itkArrayD":
        """GetSmoothingSigmasPerLevel(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkArrayD"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetSmoothingSigmasPerLevel(self)


    def SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg: 'bool const') -> "void":
        """
        SetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4F3F3 self, bool const _arg)

        Set/Get
        whether to specify the smoothing sigmas for each level in physical
        units (default) or in terms of voxels. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetSmoothingSigmasAreSpecifiedInPhysicalUnits(self, _arg)


    def GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self) -> "bool":
        """GetSmoothingSigmasAreSpecifiedInPhysicalUnits(itkImageRegistrationMethodv4REGv4F3F3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetSmoothingSigmasAreSpecifiedInPhysicalUnits(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(itkImageRegistrationMethodv4REGv4F3F3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn(self)


    def SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self) -> "void":
        """SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(itkImageRegistrationMethodv4REGv4F3F3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff(self)


    def GetOutput(self, *args) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetOutput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33
        GetOutput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33

        Returns the transform
        resulting from the registration process 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOutput(self, *args)


    def GetTransformOutput(self, *args) -> "itkDataObjectDecoratorTD33 const *":
        """
        GetTransformOutput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33
        GetTransformOutput(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkDataObjectDecoratorTD33
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransformOutput(self, *args)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableTransform(self)


    def GetTransform(self) -> "itkTransformD33 const *":
        """GetTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> itkTransformD33"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransform(self)


    def GetCurrentLevel(self) -> "unsigned long":
        """
        GetCurrentLevel(itkImageRegistrationMethodv4REGv4F3F3 self) -> unsigned long

        Get the current
        level. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentLevel(self)


    def GetCurrentIteration(self) -> "unsigned long const &":
        """
        GetCurrentIteration(itkImageRegistrationMethodv4REGv4F3F3 self) -> unsigned long const &

        Get the current
        iteration. This is a helper function for reporting observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentIteration(self)


    def GetCurrentMetricValue(self) -> "double const &":
        """GetCurrentMetricValue(itkImageRegistrationMethodv4REGv4F3F3 self) -> double const &"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentMetricValue(self)


    def GetCurrentConvergenceValue(self) -> "double const &":
        """
        GetCurrentConvergenceValue(itkImageRegistrationMethodv4REGv4F3F3 self) -> double const &

        Get the
        current convergence value. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentConvergenceValue(self)


    def GetIsConverged(self) -> "bool const &":
        """
        GetIsConverged(itkImageRegistrationMethodv4REGv4F3F3 self) -> bool const &

        Get the current
        convergence state per level. This is a helper function for reporting
        observations. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetIsConverged(self)


    def SetInPlace(self, _arg: 'bool const') -> "void":
        """
        SetInPlace(itkImageRegistrationMethodv4REGv4F3F3 self, bool const _arg)

        Request that the
        InitialTransform be grafted onto the output, there by not creating a
        copy. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInPlace(self, _arg)


    def GetInPlace(self) -> "bool":
        """GetInPlace(itkImageRegistrationMethodv4REGv4F3F3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInPlace(self)


    def InPlaceOn(self) -> "void":
        """InPlaceOn(itkImageRegistrationMethodv4REGv4F3F3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InPlaceOn(self)


    def InPlaceOff(self) -> "void":
        """InPlaceOff(itkImageRegistrationMethodv4REGv4F3F3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InPlaceOff(self)


    def InitializeCenterOfLinearOutputTransformOn(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransformOn(itkImageRegistrationMethodv4REGv4F3F3 self)

        Initialize the
        current linear transform to be optimized with the center of the
        previous transform in the queue. This provides a much better
        initialization than the default origin. 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransformOn(self)


    def InitializeCenterOfLinearOutputTransformOff(self) -> "void":
        """InitializeCenterOfLinearOutputTransformOff(itkImageRegistrationMethodv4REGv4F3F3 self)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransformOff(self)


    def SetInitializeCenterOfLinearOutputTransform(self, _arg: 'bool const') -> "void":
        """SetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F3F3 self, bool const _arg)"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitializeCenterOfLinearOutputTransform(self, _arg)


    def GetInitializeCenterOfLinearOutputTransform(self) -> "bool":
        """GetInitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F3F3 self) -> bool"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitializeCenterOfLinearOutputTransform(self)


    def InitializeCenterOfLinearOutputTransform(self) -> "void":
        """
        InitializeCenterOfLinearOutputTransform(itkImageRegistrationMethodv4REGv4F3F3 self)

        We try to
        initialize the center of a linear transform (specifically those
        derived from itk::MatrixOffsetTransformBase). There are a number of
        checks that we need to make to account for all possible scenarios: 1)
        we check to make sure the m_OutputTransform is of the appropriate type
        such that it makes sense to try to center the transform. Local
        transforms such as SyN and B-spline do not need to be "centered", 2)
        we check to make sure the composite transform (to which we'll add the
        m_OutputTransform) is not empty, 3) we look for the first previous
        transform which has a center parameter, (which, presumably, been
        optimized beforehand), and 
        """
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransform(self)

    __swig_destroy__ = _itkImageRegistrationMethodv4Python.delete_itkImageRegistrationMethodv4REGv4F3F3

    def cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4F3F3 *":
        """cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4F3F3"""
        return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodv4REGv4F3F3

        Create a new object of the class itkImageRegistrationMethodv4REGv4F3F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodv4REGv4F3F3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodv4REGv4F3F3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegistrationMethodv4REGv4F3F3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegistrationMethodv4REGv4F3F3.Clone = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_Clone, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedImage, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetFixedImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedImage, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingImage, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMovingImage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingImage, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedPointSet, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetFixedPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedPointSet, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingPointSet, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMovingPointSet = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingPointSet, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetOptimizer, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetModifiableOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableOptimizer, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetOptimizer = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOptimizer, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetOptimizerWeights = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOptimizerWeights, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetric, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetModifiableMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableMetric, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMetric = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetric, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMetricSamplingStrategy = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetricSamplingStrategy, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.MetricSamplingReinitializeSeed = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_MetricSamplingReinitializeSeed, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMetricSamplingPercentage = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingPercentage, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMetricSamplingPercentagePerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMetricSamplingPercentagePerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetFixedInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetFixedInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetFixedInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMovingInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetMovingInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetMovingInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetInitialTransformInput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitialTransformInput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetInitialTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitialTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetTransformParametersAdaptorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransformParametersAdaptorsPerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetNumberOfLevels = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetNumberOfLevels, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetShrinkFactorsPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetShrinkFactorsPerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetShrinkFactorsPerDimension = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetShrinkFactorsPerDimension, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetSmoothingSigmasPerLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetSmoothingSigmasPerLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetSmoothingSigmasAreSpecifiedInPhysicalUnits = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetSmoothingSigmasAreSpecifiedInPhysicalUnits, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetOutput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetTransformOutput = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransformOutput, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetModifiableTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetModifiableTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetCurrentLevel = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentLevel, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetCurrentIteration = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentIteration, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetCurrentMetricValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentMetricValue, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetCurrentConvergenceValue = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetCurrentConvergenceValue, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetIsConverged = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetIsConverged, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInPlace, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetInPlace = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInPlace, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.InPlaceOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InPlaceOn, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.InPlaceOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InPlaceOff, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.InitializeCenterOfLinearOutputTransformOn = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransformOn, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.InitializeCenterOfLinearOutputTransformOff = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransformOff, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.SetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_SetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.GetInitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_GetInitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3.InitializeCenterOfLinearOutputTransform = new_instancemethod(_itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_InitializeCenterOfLinearOutputTransform, None, itkImageRegistrationMethodv4REGv4F3F3)
itkImageRegistrationMethodv4REGv4F3F3_swigregister = _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_swigregister
itkImageRegistrationMethodv4REGv4F3F3_swigregister(itkImageRegistrationMethodv4REGv4F3F3)

def itkImageRegistrationMethodv4REGv4F3F3___New_orig__() -> "itkImageRegistrationMethodv4REGv4F3F3_Pointer":
    """itkImageRegistrationMethodv4REGv4F3F3___New_orig__() -> itkImageRegistrationMethodv4REGv4F3F3_Pointer"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3___New_orig__()

def itkImageRegistrationMethodv4REGv4F3F3_cast(obj: 'itkLightObject') -> "itkImageRegistrationMethodv4REGv4F3F3 *":
    """itkImageRegistrationMethodv4REGv4F3F3_cast(itkLightObject obj) -> itkImageRegistrationMethodv4REGv4F3F3"""
    return _itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_registration_methodv4(*args, **kwargs):
    """Procedural interface for ImageRegistrationMethodv4"""
    import itk
    instance = itk.ImageRegistrationMethodv4.New(*args, **kwargs)
    return instance.__internal_call__()

def image_registration_methodv4_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageRegistrationMethodv4, itkTemplate.itkTemplate):
        filter_object = itk.ImageRegistrationMethodv4.values()[0]
    else:
        filter_object = itk.ImageRegistrationMethodv4

    image_registration_methodv4.__doc__ = filter_object.__doc__
    image_registration_methodv4.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_registration_methodv4.__doc__ += "Available Keyword Arguments:\n"
    image_registration_methodv4.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



