# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMattesMutualInformationImageToImageMetricPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMattesMutualInformationImageToImageMetricPython', [dirname(__file__)])
        except ImportError:
            import _itkMattesMutualInformationImageToImageMetricPython
            return _itkMattesMutualInformationImageToImageMetricPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMattesMutualInformationImageToImageMetricPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMattesMutualInformationImageToImageMetricPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMattesMutualInformationImageToImageMetricPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkFixedArrayPython
import vnl_vector_refPython
import itkVectorPython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkPointPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageToImageMetricPython
import itkInterpolateImageFunctionPython
import itkContinuousIndexPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkSpatialObjectBasePython
import itkAffineTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkMatrixOffsetTransformBasePython
import itkSpatialObjectPropertyPython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkMapContainerPython
import ITKCostFunctionsPython
import vnl_least_squares_functionPython
import itkCostFunctionPython
import vnl_cost_functionPython
import vnl_unary_functionPython

def itkMattesMutualInformationImageToImageMetricID3ID3_New():
  return itkMattesMutualInformationImageToImageMetricID3ID3.New()


def itkMattesMutualInformationImageToImageMetricID2ID2_New():
  return itkMattesMutualInformationImageToImageMetricID2ID2.New()


def itkMattesMutualInformationImageToImageMetricIF3IF3_New():
  return itkMattesMutualInformationImageToImageMetricIF3IF3.New()


def itkMattesMutualInformationImageToImageMetricIF2IF2_New():
  return itkMattesMutualInformationImageToImageMetricIF2IF2.New()


def itkMattesMutualInformationImageToImageMetricIUS3IUS3_New():
  return itkMattesMutualInformationImageToImageMetricIUS3IUS3.New()


def itkMattesMutualInformationImageToImageMetricIUS2IUS2_New():
  return itkMattesMutualInformationImageToImageMetricIUS2IUS2.New()


def itkMattesMutualInformationImageToImageMetricIUC3IUC3_New():
  return itkMattesMutualInformationImageToImageMetricIUC3IUC3.New()


def itkMattesMutualInformationImageToImageMetricIUC2IUC2_New():
  return itkMattesMutualInformationImageToImageMetricIUC2IUC2.New()


def itkMattesMutualInformationImageToImageMetricISS3ISS3_New():
  return itkMattesMutualInformationImageToImageMetricISS3ISS3.New()


def itkMattesMutualInformationImageToImageMetricISS2ISS2_New():
  return itkMattesMutualInformationImageToImageMetricISS2ISS2.New()

class itkMattesMutualInformationImageToImageMetricID2ID2(itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricID2ID2_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricID2ID2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricID2ID2_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricID2ID2 self) -> itkMattesMutualInformationImageToImageMetricID2ID2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricID2ID2 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricID2ID2 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricID2ID2 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricID2ID2 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricID2ID2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricID2ID2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricID2ID2 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricID2ID2 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricID2ID2

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricID2ID2 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricID2ID2"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricID2ID2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricID2ID2.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_Clone, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_swigregister
itkMattesMutualInformationImageToImageMetricID2ID2_swigregister(itkMattesMutualInformationImageToImageMetricID2ID2)

def itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__() -> "itkMattesMutualInformationImageToImageMetricID2ID2_Pointer":
    """itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__() -> itkMattesMutualInformationImageToImageMetricID2ID2_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__()

def itkMattesMutualInformationImageToImageMetricID2ID2_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricID2ID2 *":
    """itkMattesMutualInformationImageToImageMetricID2ID2_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricID2ID2"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_cast(obj)

class itkMattesMutualInformationImageToImageMetricID3ID3(itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricID3ID3_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricID3ID3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricID3ID3_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricID3ID3 self) -> itkMattesMutualInformationImageToImageMetricID3ID3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricID3ID3 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricID3ID3 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricID3ID3 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricID3ID3 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricID3ID3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricID3ID3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricID3ID3 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricID3ID3 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricID3ID3

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricID3ID3 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricID3ID3"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricID3ID3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricID3ID3.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_Clone, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_swigregister
itkMattesMutualInformationImageToImageMetricID3ID3_swigregister(itkMattesMutualInformationImageToImageMetricID3ID3)

def itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__() -> "itkMattesMutualInformationImageToImageMetricID3ID3_Pointer":
    """itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__() -> itkMattesMutualInformationImageToImageMetricID3ID3_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__()

def itkMattesMutualInformationImageToImageMetricID3ID3_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricID3ID3 *":
    """itkMattesMutualInformationImageToImageMetricID3ID3_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricID3ID3"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_cast(obj)

class itkMattesMutualInformationImageToImageMetricIF2IF2(itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIF2IF2 self) -> itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIF2IF2 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIF2IF2 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF2IF2 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIF2IF2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIF2IF2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIF2IF2 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF2IF2 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIF2IF2

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIF2IF2 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIF2IF2"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIF2IF2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIF2IF2.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_Clone, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_swigregister
itkMattesMutualInformationImageToImageMetricIF2IF2_swigregister(itkMattesMutualInformationImageToImageMetricIF2IF2)

def itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer":
    """itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__() -> itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__()

def itkMattesMutualInformationImageToImageMetricIF2IF2_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIF2IF2 *":
    """itkMattesMutualInformationImageToImageMetricIF2IF2_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIF2IF2"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_cast(obj)

class itkMattesMutualInformationImageToImageMetricIF3IF3(itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIF3IF3 self) -> itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIF3IF3 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIF3IF3 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF3IF3 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIF3IF3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIF3IF3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIF3IF3 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIF3IF3 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIF3IF3

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIF3IF3 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIF3IF3"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIF3IF3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIF3IF3.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_Clone, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_swigregister
itkMattesMutualInformationImageToImageMetricIF3IF3_swigregister(itkMattesMutualInformationImageToImageMetricIF3IF3)

def itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer":
    """itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__() -> itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__()

def itkMattesMutualInformationImageToImageMetricIF3IF3_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIF3IF3 *":
    """itkMattesMutualInformationImageToImageMetricIF3IF3_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIF3IF3"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_cast(obj)

class itkMattesMutualInformationImageToImageMetricISS2ISS2(itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricISS2ISS2 self) -> itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricISS2ISS2 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricISS2ISS2 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS2ISS2 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricISS2ISS2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricISS2ISS2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricISS2ISS2 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS2ISS2 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricISS2ISS2 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricISS2ISS2"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricISS2ISS2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricISS2ISS2.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_Clone, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_swigregister
itkMattesMutualInformationImageToImageMetricISS2ISS2_swigregister(itkMattesMutualInformationImageToImageMetricISS2ISS2)

def itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__() -> "itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer":
    """itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__() -> itkMattesMutualInformationImageToImageMetricISS2ISS2_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__()

def itkMattesMutualInformationImageToImageMetricISS2ISS2_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricISS2ISS2 *":
    """itkMattesMutualInformationImageToImageMetricISS2ISS2_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricISS2ISS2"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_cast(obj)

class itkMattesMutualInformationImageToImageMetricISS3ISS3(itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricISS3ISS3 self) -> itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricISS3ISS3 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricISS3ISS3 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS3ISS3 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricISS3ISS3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricISS3ISS3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricISS3ISS3 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricISS3ISS3 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricISS3ISS3 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricISS3ISS3"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricISS3ISS3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricISS3ISS3.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_Clone, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_swigregister
itkMattesMutualInformationImageToImageMetricISS3ISS3_swigregister(itkMattesMutualInformationImageToImageMetricISS3ISS3)

def itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__() -> "itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer":
    """itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__() -> itkMattesMutualInformationImageToImageMetricISS3ISS3_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__()

def itkMattesMutualInformationImageToImageMetricISS3ISS3_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricISS3ISS3 *":
    """itkMattesMutualInformationImageToImageMetricISS3ISS3_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricISS3ISS3"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_cast(obj)

class itkMattesMutualInformationImageToImageMetricIUC2IUC2(itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self) -> itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC2IUC2 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUC2IUC2"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUC2IUC2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIUC2IUC2.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_Clone, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_swigregister
itkMattesMutualInformationImageToImageMetricIUC2IUC2_swigregister(itkMattesMutualInformationImageToImageMetricIUC2IUC2)

def itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer":
    """itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__() -> itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__()

def itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUC2IUC2 *":
    """itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUC2IUC2"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast(obj)

class itkMattesMutualInformationImageToImageMetricIUC3IUC3(itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self) -> itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUC3IUC3 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUC3IUC3"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUC3IUC3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIUC3IUC3.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_Clone, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_swigregister
itkMattesMutualInformationImageToImageMetricIUC3IUC3_swigregister(itkMattesMutualInformationImageToImageMetricIUC3IUC3)

def itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer":
    """itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__() -> itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__()

def itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUC3IUC3 *":
    """itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUC3IUC3"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast(obj)

class itkMattesMutualInformationImageToImageMetricIUS2IUS2(itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self) -> itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS2IUS2 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUS2IUS2"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUS2IUS2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIUS2IUS2.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_Clone, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_swigregister
itkMattesMutualInformationImageToImageMetricIUS2IUS2_swigregister(itkMattesMutualInformationImageToImageMetricIUS2IUS2)

def itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer":
    """itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__() -> itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__()

def itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUS2IUS2 *":
    """itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUS2IUS2"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast(obj)

class itkMattesMutualInformationImageToImageMetricIUS3IUS3(itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    """


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    C++ includes: itkMattesMutualInformationImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer":
        """__New_orig__() -> itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer":
        """Clone(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self) -> itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_Clone(self)


    def SetNumberOfHistogramBins(self, _arg: 'unsigned long') -> "void":
        """
        SetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self, unsigned long _arg)

        Number of
        bins to used in the histogram. According to Mattes et al the optimum
        value is 50. The minimum value is 5 due to the padding required by the
        Parzen windowing with a cubic-BSpline kernel. Note that even if the
        metric is used on binary images, the number of bins should at least be
        equal to five. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetNumberOfHistogramBins(self, _arg)


    def GetNumberOfHistogramBins(self) -> "unsigned long const &":
        """GetNumberOfHistogramBins(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self) -> unsigned long const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetNumberOfHistogramBins(self)


    def SetUseExplicitPDFDerivatives(self, _arg: 'bool const') -> "void":
        """
        SetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self, bool const _arg)

        This
        variable selects the method to be used for computing the Metric
        derivatives with respect to the Transform parameters. Two modes of
        computation are available. The choice between one and the other is a
        trade-off between computation speed and memory allocations. The two
        modes are described in detail below:

        UseExplicitPDFDerivatives = True will compute the Metric derivative by
        first calculating the derivatives of each one of the Joint PDF bins
        with respect to each one of the Transform parameters and then
        accumulating these contributions in the final metric derivative array
        by using a bin-specific weight. The memory required for storing the
        intermediate derivatives is a 3D array of floating point values with
        size equals to the product of (number of histogram bins)^2 times
        number of transform parameters. This method is well suited for
        Transform with a small number of parameters.

        UseExplicitPDFDerivatives = False will compute the Metric derivative
        by first computing the weights for each one of the Joint PDF bins and
        caching them into an array. Then it will revisit each one of the PDF
        bins for computing its weighted contribution to the full derivative
        array. In this method an extra 2D array is used for storing the
        weights of each one of the PDF bins. This is an array of floating
        point values with size equals to (number of histogram bins)^2. This
        method is well suited for Transforms with a large number of
        parameters, such as, BSplineTransforms. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetUseExplicitPDFDerivatives(self, _arg)


    def GetUseExplicitPDFDerivatives(self) -> "bool const &":
        """GetUseExplicitPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self) -> bool const &"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetUseExplicitPDFDerivatives(self)


    def UseExplicitPDFDerivativesOn(self) -> "void":
        """UseExplicitPDFDerivativesOn(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOn(self)


    def UseExplicitPDFDerivativesOff(self) -> "void":
        """UseExplicitPDFDerivativesOff(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self)"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOff(self)


    def GetJointPDF(self) -> "itkImageD2_Pointer const":
        """
        GetJointPDF(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self) -> itkImageD2_Pointer const

        Get the internal
        JointPDF image that was used in creating the metric value. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDF(self)


    def GetJointPDFDerivatives(self) -> "itkImageD3_Pointer const":
        """
        GetJointPDFDerivatives(itkMattesMutualInformationImageToImageMetricIUS3IUS3 self) -> itkImageD3_Pointer const

        Get the
        internal JointPDFDeriviative image that was used in creating the
        metric derivative value. This is only created when
        UseExplicitPDFDerivatives is ON, and derivatives are requested. 
        """
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDFDerivatives(self)

    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUS3IUS3"""
        return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUS3IUS3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMattesMutualInformationImageToImageMetricIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMattesMutualInformationImageToImageMetricIUS3IUS3.Clone = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_Clone, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.SetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.GetNumberOfHistogramBins = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetNumberOfHistogramBins, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.SetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.GetUseExplicitPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetUseExplicitPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.UseExplicitPDFDerivativesOn = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOn, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.UseExplicitPDFDerivativesOff = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOff, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.GetJointPDF = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDF, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3.GetJointPDFDerivatives = new_instancemethod(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDFDerivatives, None, itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3_swigregister = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_swigregister
itkMattesMutualInformationImageToImageMetricIUS3IUS3_swigregister(itkMattesMutualInformationImageToImageMetricIUS3IUS3)

def itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__() -> "itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer":
    """itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__() -> itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__()

def itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast(obj: 'itkLightObject') -> "itkMattesMutualInformationImageToImageMetricIUS3IUS3 *":
    """itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast(itkLightObject obj) -> itkMattesMutualInformationImageToImageMetricIUS3IUS3"""
    return _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast(obj)



