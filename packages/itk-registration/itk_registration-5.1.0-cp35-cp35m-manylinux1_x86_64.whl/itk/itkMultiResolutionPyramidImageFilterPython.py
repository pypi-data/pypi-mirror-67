# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMultiResolutionPyramidImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMultiResolutionPyramidImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkMultiResolutionPyramidImageFilterPython
            return _itkMultiResolutionPyramidImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMultiResolutionPyramidImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMultiResolutionPyramidImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMultiResolutionPyramidImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImageSourcePython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkArray2DPython

def itkMultiResolutionPyramidImageFilterID3ID3_New():
  return itkMultiResolutionPyramidImageFilterID3ID3.New()


def itkMultiResolutionPyramidImageFilterID2ID2_New():
  return itkMultiResolutionPyramidImageFilterID2ID2.New()


def itkMultiResolutionPyramidImageFilterIF3IF3_New():
  return itkMultiResolutionPyramidImageFilterIF3IF3.New()


def itkMultiResolutionPyramidImageFilterIF2IF2_New():
  return itkMultiResolutionPyramidImageFilterIF2IF2.New()


def itkMultiResolutionPyramidImageFilterIUS3IUS3_New():
  return itkMultiResolutionPyramidImageFilterIUS3IUS3.New()


def itkMultiResolutionPyramidImageFilterIUS2IUS2_New():
  return itkMultiResolutionPyramidImageFilterIUS2IUS2.New()


def itkMultiResolutionPyramidImageFilterIUC3IUC3_New():
  return itkMultiResolutionPyramidImageFilterIUC3IUC3.New()


def itkMultiResolutionPyramidImageFilterIUC2IUC2_New():
  return itkMultiResolutionPyramidImageFilterIUC2IUC2.New()


def itkMultiResolutionPyramidImageFilterISS3ISS3_New():
  return itkMultiResolutionPyramidImageFilterISS3ISS3.New()


def itkMultiResolutionPyramidImageFilterISS2ISS2_New():
  return itkMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkMultiResolutionPyramidImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterID2ID2_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterID2ID2 self) -> itkMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterID2ID2 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterID2ID2 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterID2ID2 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterID2ID2 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID2ID2 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID2ID2 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID2ID2 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterID2ID2 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterID2ID2 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterID2ID2 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterID2ID2 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterID2ID2 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterID2ID2 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterID2ID2 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterID2ID2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterID2ID2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterID2ID2"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterID2ID2.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_Clone, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetSchedule, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetSchedule, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetMaximumError, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetMaximumError, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_swigregister
itkMultiResolutionPyramidImageFilterID2ID2_swigregister(itkMultiResolutionPyramidImageFilterID2ID2)

def itkMultiResolutionPyramidImageFilterID2ID2___New_orig__() -> "itkMultiResolutionPyramidImageFilterID2ID2_Pointer":
    """itkMultiResolutionPyramidImageFilterID2ID2___New_orig__() -> itkMultiResolutionPyramidImageFilterID2ID2_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2___New_orig__()

def itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterID2ID2 *":
    """itkMultiResolutionPyramidImageFilterID2ID2_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterID2ID2"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_cast(obj)

class itkMultiResolutionPyramidImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterID3ID3_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterID3ID3 self) -> itkMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterID3ID3 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterID3ID3 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterID3ID3 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterID3ID3 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID3ID3 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID3ID3 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterID3ID3 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterID3ID3 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterID3ID3 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterID3ID3 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterID3ID3 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterID3ID3 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterID3ID3 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterID3ID3 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterID3ID3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterID3ID3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterID3ID3"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterID3ID3.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_Clone, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetSchedule, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetSchedule, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetMaximumError, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetMaximumError, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_swigregister
itkMultiResolutionPyramidImageFilterID3ID3_swigregister(itkMultiResolutionPyramidImageFilterID3ID3)

def itkMultiResolutionPyramidImageFilterID3ID3___New_orig__() -> "itkMultiResolutionPyramidImageFilterID3ID3_Pointer":
    """itkMultiResolutionPyramidImageFilterID3ID3___New_orig__() -> itkMultiResolutionPyramidImageFilterID3ID3_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3___New_orig__()

def itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterID3ID3 *":
    """itkMultiResolutionPyramidImageFilterID3ID3_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterID3ID3"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_cast(obj)

class itkMultiResolutionPyramidImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIF2IF2_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> itkMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIF2IF2 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIF2IF2 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF2IF2 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF2IF2 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIF2IF2 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIF2IF2 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIF2IF2 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIF2IF2 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIF2IF2 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIF2IF2 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIF2IF2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIF2IF2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIF2IF2"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIF2IF2.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_Clone, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetSchedule, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetSchedule, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_swigregister
itkMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkMultiResolutionPyramidImageFilterIF2IF2)

def itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__() -> "itkMultiResolutionPyramidImageFilterIF2IF2_Pointer":
    """itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__() -> itkMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__()

def itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIF2IF2 *":
    """itkMultiResolutionPyramidImageFilterIF2IF2_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIF2IF2"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_cast(obj)

class itkMultiResolutionPyramidImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIF3IF3_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> itkMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIF3IF3 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIF3IF3 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF3IF3 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF3IF3 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIF3IF3 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIF3IF3 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIF3IF3 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIF3IF3 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIF3IF3 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIF3IF3 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIF3IF3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIF3IF3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIF3IF3"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIF3IF3.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_Clone, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetSchedule, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetSchedule, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_swigregister
itkMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkMultiResolutionPyramidImageFilterIF3IF3)

def itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__() -> "itkMultiResolutionPyramidImageFilterIF3IF3_Pointer":
    """itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__() -> itkMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__()

def itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIF3IF3 *":
    """itkMultiResolutionPyramidImageFilterIF3IF3_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIF3IF3"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_cast(obj)

class itkMultiResolutionPyramidImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterISS2ISS2 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterISS2ISS2 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS2ISS2 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS2ISS2 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterISS2ISS2 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterISS2ISS2 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterISS2ISS2 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterISS2ISS2 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterISS2ISS2 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterISS2ISS2 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterISS2ISS2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterISS2ISS2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterISS2ISS2"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterISS2ISS2.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_Clone, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetSchedule, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetSchedule, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetMaximumError, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetMaximumError, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_swigregister
itkMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkMultiResolutionPyramidImageFilterISS2ISS2)

def itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__() -> "itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer":
    """itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__() -> itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__()

def itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterISS2ISS2 *":
    """itkMultiResolutionPyramidImageFilterISS2ISS2_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterISS2ISS2"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_cast(obj)

class itkMultiResolutionPyramidImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterISS3ISS3 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterISS3ISS3 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS3ISS3 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS3ISS3 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterISS3ISS3 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterISS3ISS3 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterISS3ISS3 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterISS3ISS3 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterISS3ISS3 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterISS3ISS3 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterISS3ISS3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterISS3ISS3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterISS3ISS3"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterISS3ISS3.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_Clone, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetSchedule, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetSchedule, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetMaximumError, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetMaximumError, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_swigregister
itkMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkMultiResolutionPyramidImageFilterISS3ISS3)

def itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__() -> "itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer":
    """itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__() -> itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__()

def itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterISS3ISS3 *":
    """itkMultiResolutionPyramidImageFilterISS3ISS3_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterISS3ISS3"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_cast(obj)

class itkMultiResolutionPyramidImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIUC2IUC2 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIUC2IUC2 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUC2IUC2 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUC2IUC2 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIUC2IUC2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIUC2IUC2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUC2IUC2"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIUC2IUC2.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_Clone, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetSchedule, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetSchedule, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister
itkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkMultiResolutionPyramidImageFilterIUC2IUC2)

def itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__() -> "itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer":
    """itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__() -> itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__()

def itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUC2IUC2 *":
    """itkMultiResolutionPyramidImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUC2IUC2"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_cast(obj)

class itkMultiResolutionPyramidImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIUC3IUC3 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIUC3IUC3 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUC3IUC3 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUC3IUC3 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIUC3IUC3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIUC3IUC3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUC3IUC3"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIUC3IUC3.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_Clone, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetSchedule, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetSchedule, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister
itkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkMultiResolutionPyramidImageFilterIUC3IUC3)

def itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__() -> "itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer":
    """itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__() -> itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__()

def itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUC3IUC3 *":
    """itkMultiResolutionPyramidImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUC3IUC3"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_cast(obj)

class itkMultiResolutionPyramidImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIUS2IUS2 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIUS2IUS2 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUS2IUS2 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUS2IUS2 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIUS2IUS2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIUS2IUS2 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUS2IUS2"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIUS2IUS2.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_Clone, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetSchedule, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetSchedule, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister
itkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkMultiResolutionPyramidImageFilterIUS2IUS2)

def itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__() -> "itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer":
    """itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__() -> itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__()

def itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUS2IUS2 *":
    """itkMultiResolutionPyramidImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUS2IUS2"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_cast(obj)

class itkMultiResolutionPyramidImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter

    C++ includes: itkMultiResolutionPyramidImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer":
        """Clone(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_Clone(self)


    def SetNumberOfLevels(self, num: 'unsigned int') -> "void":
        """
        SetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, unsigned int num)

        Set the number of
        multi-resolution levels. The matrix containing the schedule will be
        resized accordingly. The schedule is populated with default values. At
        the coarsest (0) level, the shrink factors are set 2^(nlevel - 1) for
        all dimension. These shrink factors are halved for subsequent levels.
        The number of levels is clamped to a minimum value of 1. All shrink
        factors are also clamped to a minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetNumberOfLevels(self, num)


    def GetNumberOfLevels(self) -> "unsigned int":
        """
        GetNumberOfLevels(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> unsigned int

        Get the number of
        multi-resolution levels. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetNumberOfLevels(self)


    def SetSchedule(self, schedule: 'itkArray2DUI') -> "void":
        """
        SetSchedule(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, itkArray2DUI schedule)

        Set a multi-resolution
        schedule. The input schedule must have only ImageDimension number of
        columns and NumberOfLevels number of rows. For each dimension, the
        shrink factor must be non-increasing with respect to subsequent
        levels. This function will clamp shrink factors to satisfy this
        condition. All shrink factors less than one will also be clamped to
        the value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetSchedule(self, schedule)


    def GetSchedule(self) -> "itkArray2DUI const &":
        """
        GetSchedule(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> itkArray2DUI

        Get the multi-
        resolution schedule. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetSchedule(self)


    def SetStartingShrinkFactors(self, *args) -> "void":
        """
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, unsigned int factor)
        SetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, unsigned int const * factors)

        Set the
        starting shrink factor for the coarsest (0) resolution level. The
        schedule is then populated with defaults values obtained by halving
        the factors at the previous level. All shrink factors are clamped to a
        minimum value of 1. 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetStartingShrinkFactors(self, *args)


    def GetStartingShrinkFactors(self) -> "unsigned int const *":
        """
        GetStartingShrinkFactors(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> unsigned int const *

        Get the
        starting shrink factors 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetStartingShrinkFactors(self)


    def IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
        """IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible(schedule)

    IsScheduleDownwardDivisible = staticmethod(IsScheduleDownwardDivisible)

    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkMultiResolutionPyramidImageFilterIUS3IUS3 self)

        MultiResolutionPyramidImageFilter produces images which are of
        different resolution and different pixel spacing than its input image.
        As such, MultiResolutionPyramidImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The original documentation of this method is
        below. See:  ProcessObject::GenerateOutputInformaton() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputInformation(self)


    def GenerateOutputRequestedRegion(self, output: 'itkDataObject') -> "void":
        """
        GenerateOutputRequestedRegion(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, itkDataObject output)

        Given
        one output whose requested region has been set, this method sets the
        requested region for the remaining output images. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputRequestedRegion(); 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputRequestedRegion(self, output)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkMultiResolutionPyramidImageFilterIUS3IUS3 self)

        MultiResolutionPyramidImageFilter requires a larger input requested
        region than the output requested regions to accommodate the shrinkage
        and smoothing operations. As such, MultiResolutionPyramidImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion().
        The original documentation of this method is below. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)


    def SetMaximumError(self, _arg: 'double const') -> "void":
        """SetMaximumError(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetMaximumError(self, _arg)


    def GetMaximumError(self) -> "double const &":
        """GetMaximumError(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetMaximumError(self)


    def SetUseShrinkImageFilter(self, _arg: 'bool const') -> "void":
        """SetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUS3IUS3 self, bool const _arg)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetUseShrinkImageFilter(self, _arg)


    def GetUseShrinkImageFilter(self) -> "bool":
        """GetUseShrinkImageFilter(itkMultiResolutionPyramidImageFilterIUS3IUS3 self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetUseShrinkImageFilter(self)


    def UseShrinkImageFilterOn(self) -> "void":
        """UseShrinkImageFilterOn(itkMultiResolutionPyramidImageFilterIUS3IUS3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOn(self)


    def UseShrinkImageFilterOff(self) -> "void":
        """UseShrinkImageFilterOff(itkMultiResolutionPyramidImageFilterIUS3IUS3 self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOff(self)

    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SameDimensionCheck
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUS3IUS3"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiResolutionPyramidImageFilterIUS3IUS3.Clone = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_Clone, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.SetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GetNumberOfLevels = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetNumberOfLevels, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.SetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetSchedule, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GetSchedule = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetSchedule, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.SetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GetStartingShrinkFactors = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetStartingShrinkFactors, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GenerateOutputInformation = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputInformation, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GenerateOutputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GenerateInputRequestedRegion = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateInputRequestedRegion, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.SetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetMaximumError, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GetMaximumError = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetMaximumError, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.SetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.GetUseShrinkImageFilter = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetUseShrinkImageFilter, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.UseShrinkImageFilterOn = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOn, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3.UseShrinkImageFilterOff = new_instancemethod(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOff, None, itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister
itkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkMultiResolutionPyramidImageFilterIUS3IUS3)

def itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__() -> "itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer":
    """itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__() -> itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__()

def itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible(schedule: 'itkArray2DUI') -> "bool":
    """itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible(itkArray2DUI schedule) -> bool"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible(schedule)

def itkMultiResolutionPyramidImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkMultiResolutionPyramidImageFilterIUS3IUS3 *":
    """itkMultiResolutionPyramidImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkMultiResolutionPyramidImageFilterIUS3IUS3"""
    return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multi_resolution_pyramid_image_filter(*args, **kwargs):
    """Procedural interface for MultiResolutionPyramidImageFilter"""
    import itk
    instance = itk.MultiResolutionPyramidImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MultiResolutionPyramidImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MultiResolutionPyramidImageFilter.values()[0]
    else:
        filter_object = itk.MultiResolutionPyramidImageFilter

    multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__
    multi_resolution_pyramid_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    multi_resolution_pyramid_image_filter.__doc__ += "Available Keyword Arguments:\n"
    multi_resolution_pyramid_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



