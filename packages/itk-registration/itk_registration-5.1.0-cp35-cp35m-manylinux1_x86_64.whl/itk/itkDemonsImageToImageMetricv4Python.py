# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDemonsImageToImageMetricv4Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDemonsImageToImageMetricv4Python', [dirname(__file__)])
        except ImportError:
            import _itkDemonsImageToImageMetricv4Python
            return _itkDemonsImageToImageMetricv4Python
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDemonsImageToImageMetricv4Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDemonsImageToImageMetricv4Python = swig_import_helper()
    del swig_import_helper
else:
    import _itkDemonsImageToImageMetricv4Python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageMetricv4Python
import itkTransformBasePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkDiffusionTensor3DPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkArrayPython
import itkArray2DPython
import itkOptimizerParametersPython
import itkInterpolateImageFunctionPython
import itkRGBAPixelPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkRGBPixelPython
import itkImagePython
import itkImageRegionPython
import itkDisplacementFieldTransformPython
import itkSpatialObjectBasePython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkSpatialObjectPropertyPython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkMapContainerPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkVectorImagePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkPointSetPython
import itkObjectToObjectMetricBasePython
import itkSingleValuedCostFunctionv4Python
import itkCostFunctionPython

def itkDemonsImageToImageMetricv4ID3ID3_New():
  return itkDemonsImageToImageMetricv4ID3ID3.New()


def itkDemonsImageToImageMetricv4ID2ID2_New():
  return itkDemonsImageToImageMetricv4ID2ID2.New()


def itkDemonsImageToImageMetricv4IF3IF3_New():
  return itkDemonsImageToImageMetricv4IF3IF3.New()


def itkDemonsImageToImageMetricv4IF2IF2_New():
  return itkDemonsImageToImageMetricv4IF2IF2.New()

class itkDemonsImageToImageMetricv4ID2ID2(itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2):
    """


    Class implementing demons metric.

    The implementation is taken from itkDemonsRegistrationFunction.

    The metric derivative can be calculated using image derivatives either
    from the fixed or moving images. The default is to use fixed-image
    gradients. See ObjectToObjectMetric::SetGradientSource to change this
    behavior.

    An intensity threshold is used, below which image pixels are
    considered equal for the purpose of derivative calculation. The
    threshold can be changed by calling SetIntensityDifferenceThreshold.

    This metric supports only moving transforms with local support and
    with a number of local parameters that matches the moving image
    dimension. In particular, it's meant to be used with
    itkDisplacementFieldTransform and derived classes.  See
    DemonsImageToImageMetricv4GetValueAndDerivativeThreader::ProcessPoint
    for algorithm implementation.

    See:  itkImageToImageMetricv4

    C++ includes: itkDemonsImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4ID2ID2_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4ID2ID2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4ID2ID2_Pointer":
        """Clone(itkDemonsImageToImageMetricv4ID2ID2 self) -> itkDemonsImageToImageMetricv4ID2ID2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """
        GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4ID2ID2 self) -> double

        Accessors for the image intensity difference threshold use in
        derivative calculation 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4ID2ID2 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """
        GetDenominatorThreshold(itkDemonsImageToImageMetricv4ID2ID2 self) -> double

        Get the
        denominator threshold used in derivative calculation. 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4ID2ID2

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4ID2ID2 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4ID2ID2"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4ID2ID2

        Create a new object of the class itkDemonsImageToImageMetricv4ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4ID2ID2.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_Clone, None, itkDemonsImageToImageMetricv4ID2ID2)
itkDemonsImageToImageMetricv4ID2ID2.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4ID2ID2)
itkDemonsImageToImageMetricv4ID2ID2.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4ID2ID2)
itkDemonsImageToImageMetricv4ID2ID2.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4ID2ID2)
itkDemonsImageToImageMetricv4ID2ID2_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_swigregister
itkDemonsImageToImageMetricv4ID2ID2_swigregister(itkDemonsImageToImageMetricv4ID2ID2)

def itkDemonsImageToImageMetricv4ID2ID2___New_orig__() -> "itkDemonsImageToImageMetricv4ID2ID2_Pointer":
    """itkDemonsImageToImageMetricv4ID2ID2___New_orig__() -> itkDemonsImageToImageMetricv4ID2ID2_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2___New_orig__()

def itkDemonsImageToImageMetricv4ID2ID2_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4ID2ID2 *":
    """itkDemonsImageToImageMetricv4ID2ID2_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4ID2ID2"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID2ID2_cast(obj)

class itkDemonsImageToImageMetricv4ID3ID3(itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3):
    """


    Class implementing demons metric.

    The implementation is taken from itkDemonsRegistrationFunction.

    The metric derivative can be calculated using image derivatives either
    from the fixed or moving images. The default is to use fixed-image
    gradients. See ObjectToObjectMetric::SetGradientSource to change this
    behavior.

    An intensity threshold is used, below which image pixels are
    considered equal for the purpose of derivative calculation. The
    threshold can be changed by calling SetIntensityDifferenceThreshold.

    This metric supports only moving transforms with local support and
    with a number of local parameters that matches the moving image
    dimension. In particular, it's meant to be used with
    itkDisplacementFieldTransform and derived classes.  See
    DemonsImageToImageMetricv4GetValueAndDerivativeThreader::ProcessPoint
    for algorithm implementation.

    See:  itkImageToImageMetricv4

    C++ includes: itkDemonsImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4ID3ID3_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4ID3ID3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4ID3ID3_Pointer":
        """Clone(itkDemonsImageToImageMetricv4ID3ID3 self) -> itkDemonsImageToImageMetricv4ID3ID3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """
        GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4ID3ID3 self) -> double

        Accessors for the image intensity difference threshold use in
        derivative calculation 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4ID3ID3 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """
        GetDenominatorThreshold(itkDemonsImageToImageMetricv4ID3ID3 self) -> double

        Get the
        denominator threshold used in derivative calculation. 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4ID3ID3

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4ID3ID3 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4ID3ID3"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4ID3ID3

        Create a new object of the class itkDemonsImageToImageMetricv4ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4ID3ID3.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_Clone, None, itkDemonsImageToImageMetricv4ID3ID3)
itkDemonsImageToImageMetricv4ID3ID3.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4ID3ID3)
itkDemonsImageToImageMetricv4ID3ID3.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4ID3ID3)
itkDemonsImageToImageMetricv4ID3ID3.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4ID3ID3)
itkDemonsImageToImageMetricv4ID3ID3_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_swigregister
itkDemonsImageToImageMetricv4ID3ID3_swigregister(itkDemonsImageToImageMetricv4ID3ID3)

def itkDemonsImageToImageMetricv4ID3ID3___New_orig__() -> "itkDemonsImageToImageMetricv4ID3ID3_Pointer":
    """itkDemonsImageToImageMetricv4ID3ID3___New_orig__() -> itkDemonsImageToImageMetricv4ID3ID3_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3___New_orig__()

def itkDemonsImageToImageMetricv4ID3ID3_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4ID3ID3 *":
    """itkDemonsImageToImageMetricv4ID3ID3_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4ID3ID3"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4ID3ID3_cast(obj)

class itkDemonsImageToImageMetricv4IF2IF2(itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2):
    """


    Class implementing demons metric.

    The implementation is taken from itkDemonsRegistrationFunction.

    The metric derivative can be calculated using image derivatives either
    from the fixed or moving images. The default is to use fixed-image
    gradients. See ObjectToObjectMetric::SetGradientSource to change this
    behavior.

    An intensity threshold is used, below which image pixels are
    considered equal for the purpose of derivative calculation. The
    threshold can be changed by calling SetIntensityDifferenceThreshold.

    This metric supports only moving transforms with local support and
    with a number of local parameters that matches the moving image
    dimension. In particular, it's meant to be used with
    itkDisplacementFieldTransform and derived classes.  See
    DemonsImageToImageMetricv4GetValueAndDerivativeThreader::ProcessPoint
    for algorithm implementation.

    See:  itkImageToImageMetricv4

    C++ includes: itkDemonsImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
        """Clone(itkDemonsImageToImageMetricv4IF2IF2 self) -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """
        GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF2IF2 self) -> double

        Accessors for the image intensity difference threshold use in
        derivative calculation 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF2IF2 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """
        GetDenominatorThreshold(itkDemonsImageToImageMetricv4IF2IF2 self) -> double

        Get the
        denominator threshold used in derivative calculation. 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4IF2IF2

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF2IF2 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF2IF2"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4IF2IF2

        Create a new object of the class itkDemonsImageToImageMetricv4IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4IF2IF2.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_Clone, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_swigregister
itkDemonsImageToImageMetricv4IF2IF2_swigregister(itkDemonsImageToImageMetricv4IF2IF2)

def itkDemonsImageToImageMetricv4IF2IF2___New_orig__() -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
    """itkDemonsImageToImageMetricv4IF2IF2___New_orig__() -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2___New_orig__()

def itkDemonsImageToImageMetricv4IF2IF2_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF2IF2 *":
    """itkDemonsImageToImageMetricv4IF2IF2_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF2IF2"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_cast(obj)

class itkDemonsImageToImageMetricv4IF3IF3(itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3):
    """


    Class implementing demons metric.

    The implementation is taken from itkDemonsRegistrationFunction.

    The metric derivative can be calculated using image derivatives either
    from the fixed or moving images. The default is to use fixed-image
    gradients. See ObjectToObjectMetric::SetGradientSource to change this
    behavior.

    An intensity threshold is used, below which image pixels are
    considered equal for the purpose of derivative calculation. The
    threshold can be changed by calling SetIntensityDifferenceThreshold.

    This metric supports only moving transforms with local support and
    with a number of local parameters that matches the moving image
    dimension. In particular, it's meant to be used with
    itkDisplacementFieldTransform and derived classes.  See
    DemonsImageToImageMetricv4GetValueAndDerivativeThreader::ProcessPoint
    for algorithm implementation.

    See:  itkImageToImageMetricv4

    C++ includes: itkDemonsImageToImageMetricv4.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
        """Clone(itkDemonsImageToImageMetricv4IF3IF3 self) -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """
        GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF3IF3 self) -> double

        Accessors for the image intensity difference threshold use in
        derivative calculation 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF3IF3 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """
        GetDenominatorThreshold(itkDemonsImageToImageMetricv4IF3IF3 self) -> double

        Get the
        denominator threshold used in derivative calculation. 
        """
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4IF3IF3

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF3IF3 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF3IF3"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4IF3IF3

        Create a new object of the class itkDemonsImageToImageMetricv4IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4IF3IF3.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_Clone, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_swigregister
itkDemonsImageToImageMetricv4IF3IF3_swigregister(itkDemonsImageToImageMetricv4IF3IF3)

def itkDemonsImageToImageMetricv4IF3IF3___New_orig__() -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
    """itkDemonsImageToImageMetricv4IF3IF3___New_orig__() -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3___New_orig__()

def itkDemonsImageToImageMetricv4IF3IF3_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF3IF3 *":
    """itkDemonsImageToImageMetricv4IF3IF3_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF3IF3"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_cast(obj)



