# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkObjectToObjectMetricPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkObjectToObjectMetricPython', [dirname(__file__)])
        except ImportError:
            import _itkObjectToObjectMetricPython
            return _itkObjectToObjectMetricPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkObjectToObjectMetricPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkObjectToObjectMetricPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkObjectToObjectMetricPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkPointPython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkImagePython
import itkSizePython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkDisplacementFieldTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkObjectToObjectMetricBasePython
import itkSingleValuedCostFunctionv4Python
import itkCostFunctionPython

def itkObjectToObjectMetric33_New():
  return itkObjectToObjectMetric33.New()


def itkObjectToObjectMetric22_New():
  return itkObjectToObjectMetric22.New()

class itkObjectToObjectMetric22(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """


    Computes similarity between regions of two objects.

    This class is templated over the dimensionality of the two input
    objects. This is the abstract templated base class for a hierarchy of
    similarity metrics that may, in derived classes, operate on meshes,
    images, etc. This class computes a value that measures the similarity
    between the two objects.

    Derived classes must provide implementations for: GetValue
    GetDerivative GetValueAndDerivative
    SupportsArbitraryVirtualDomainSamples

    Similarity is evaluated using fixed and moving transforms. Both
    transforms are initialized to an IdentityTransform, and can be set by
    the user using SetFixedTranform() and SetMovingTransform().

    Virtual Domain

    This class uses a virtual reference space. This space defines the
    resolution at which the evaluation is performed, as well as the
    physical coordinate system. This is useful for unbiased registration.
    The virtual domain is stored in the m_VirtualDomain member, but this
    is subject to change so the convenience methods GetVirtualSpacing(),
    GetVirtualDirection() and GetVirtualOrigin() should be used whenever
    possible to retrieve virtual domain information. The region over which
    metric evaluation is performed is taken from the virtual image
    buffered region.

    The user can define a virtual domain by calling either
    SetVirtualDomain or SetVirtualDomainFromImage. See these methods for
    details. Derived classes may automatically assign a virtual domain if
    the user has not assigned one by initialization time.

    If the virtual domain is left undefined by the user and by derived
    classes, then unit or zero values are returned for
    GetVirtualSpacing(), GetVirtualDirection() and GetVirtualOrigin(), as
    appropriate. The virtual region is left undefined and an attempt to
    retrieve it via GetVirtualRegion() will generate an exception. The
    m_VirtualImage member will be nullptr.

    During evaluation, derived classes should verify that points are
    within the virtual domain and thus valid, as appropriate for the needs
    of the metric. When points are deemed invalid the number of valid
    points returned by GetNumberOfValidPoints() should reflect this.

    Transform Optimization This hierarchy currently assumes only the
    moving transform is 'active', i.e. only the moving transform is being
    optimized when used in an optimizer. Methods relevant to transform
    optimization such as GetNumberOfParameters(),
    UpdateTransformParameters() are passed on to the active transform. The
    eventual goal however is to allow for either moving, fixed or both
    transforms to be active within a single metric.

    C++ includes: itkObjectToObjectMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetFixedTransform(itkObjectToObjectMetric22 self, itkTransformD22 _arg)

        Connect the fixed
        transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD22 *":
        """GetModifiableFixedTransform(itkObjectToObjectMetric22 self) -> itkTransformD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD22 *":
        """
        GetFixedTransform(itkObjectToObjectMetric22 self) -> itkTransformD22
        GetFixedTransform(itkObjectToObjectMetric22 self) -> itkTransformD22
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetMovingTransform(itkObjectToObjectMetric22 self, itkTransformD22 _arg)

        Connect the
        moving transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD22 *":
        """GetModifiableMovingTransform(itkObjectToObjectMetric22 self) -> itkTransformD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD22 *":
        """
        GetMovingTransform(itkObjectToObjectMetric22 self) -> itkTransformD22
        GetMovingTransform(itkObjectToObjectMetric22 self) -> itkTransformD22
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD22') -> "void":
        """
        SetTransform(itkObjectToObjectMetric22 self, itkTransformD22 transform)

        Connect the moving
        transform using a backwards-compatible name. This assigns the input
        transform to the moving transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD22 const *":
        """
        GetTransform(itkObjectToObjectMetric22 self) -> itkTransformD22

        Get the moving
        transform using a backwards-compatible name 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """
        GetNumberOfValidPoints(itkObjectToObjectMetric22 self) -> unsigned long

        Get the
        number of valid points after a call to evaluate the metric. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD2', origin: 'itkPointD2', direction: 'itkMatrixD22', region: 'itkImageRegion2') -> "void":
        """
        SetVirtualDomain(itkObjectToObjectMetric22 self, itkVectorD2 spacing, itkPointD2 origin, itkMatrixD22 direction, itkImageRegion2 region)

        Define the virtual
        reference space. This space defines the resolution at which the
        registration is performed as well as the physical coordinate system.
        Useful for unbiased registration. This method will allocate
        m_VirtualImage with the passed information, with the pixel buffer left
        unallocated. Metric evaluation will be performed within the
        constraints of the virtual domain depending on implementation in
        derived classes. A default domain is created during initialization in
        derived classes according to their need.

        Parameters:
        -----------

        spacing:  spacing

        origin:  origin

        direction:  direction

        region:  region is used to set all image regions.

        See:   SetVirtualDomainFromImage 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageD2') -> "void":
        """
        SetVirtualDomainFromImage(itkObjectToObjectMetric22 self, itkImageD2 virtualImage)

        Use a
        virtual domain image to define the virtual reference space. See:
        SetVirtualDomain 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """
        SupportsArbitraryVirtualDomainSamples(itkObjectToObjectMetric22 self) -> bool

        Returns a flag. True if arbitrary virtual domain points will point-
        set metrics return false because only some virtual domain points will
        correspond to points within the point sets. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetVirtualDomainTimeStamp(itkObjectToObjectMetric22 self) -> itkTimeStamp

        Return a
        timestamp relating to the virtual domain. This returns the greater of
        the metric timestamp and the virtual domain image timestamp. This
        allows us to capture if the virtual domain image is changed by the
        user after being assigned to the metric. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD2":
        """
        GetVirtualSpacing(itkObjectToObjectMetric22 self) -> itkVectorD2

        Accessors for the
        virtual domain spacing. Returns unit spacing if a virtual domain is
        undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD2":
        """
        GetVirtualOrigin(itkObjectToObjectMetric22 self) -> itkPointD2

        Accessor for
        virtual domain origin. Returns zero origin if a virtual domain is
        undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD22":
        """
        GetVirtualDirection(itkObjectToObjectMetric22 self) -> itkMatrixD22

        Accessor for
        virtual domain direction. Returns unit direction if a virtual domain
        is undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion2 const &":
        """
        GetVirtualRegion(itkObjectToObjectMetric22 self) -> itkImageRegion2

        Return the virtual
        domain region, which is retrieved from the m_VirtualImage buffered
        region. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageD2 *":
        """GetModifiableVirtualImage(itkObjectToObjectMetric22 self) -> itkImageD2"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageD2 *":
        """
        GetVirtualImage(itkObjectToObjectMetric22 self) -> itkImageD2
        GetVirtualImage(itkObjectToObjectMetric22 self) -> itkImageD2
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """
        ComputeParameterOffsetFromVirtualIndex(itkObjectToObjectMetric22 self, itkIndex2 index, unsigned int const & numberOfLocalParameters) -> long

        Computes an offset
        for accessing parameter data from a virtual domain index. Relevant for
        metrics with local-support transforms, to access parameter or
        derivative memory that is stored linearly in a 1D array. The result is
        the offset (1D array index) to the first of N parameters corresponding
        to the given virtual index, where N is the number of local parameters.

        Parameters:
        -----------

        index:  the virtual index to convert

        numberOfLocalParameters:  corresponding to the transform 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD2', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """
        ComputeParameterOffsetFromVirtualPoint(itkObjectToObjectMetric22 self, itkPointD2 point, unsigned int const & numberOfLocalParameters) -> long

        Computes an offset
        for accessing parameter data from a virtual domain point. Relevant for
        metrics with local-support transforms, to access parameter or
        derivative memory that is stored linearly in a 1D array. The result is
        the offset (1D array index) to the first of N parameters corresponding
        to the given virtual index, where N is the number of local parameters.

        Parameters:
        -----------

        point:  the virtual point to convert

        numberOfLocalParameters:  corresponding to the transform 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkObjectToObjectMetric22 self, itkPointD2 point) -> bool
        IsInsideVirtualDomain(itkObjectToObjectMetric22 self, itkIndex2 index) -> bool

        Determine if
        a point is within the virtual domain. Returns true if the virtual
        domain has not been defined. This is implicitly defined by the point
        sets and transforms. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric22

    def cast(obj: 'itkLightObject') -> "itkObjectToObjectMetric22 *":
        """cast(itkLightObject obj) -> itkObjectToObjectMetric22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkObjectToObjectMetric22

        Create a new object of the class itkObjectToObjectMetric22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectToObjectMetric22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkObjectToObjectMetric22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObjectToObjectMetric22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObjectToObjectMetric22.SetFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetFixedTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetModifiableFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableFixedTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetFixedTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.SetMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetMovingTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetModifiableMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableMovingTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetMovingTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.SetTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetTransform, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetNumberOfValidPoints = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetNumberOfValidPoints, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.SetVirtualDomain = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomain, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.SetVirtualDomainFromImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomainFromImage, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SupportsArbitraryVirtualDomainSamples, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualDomainTimeStamp = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDomainTimeStamp, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualSpacing = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualSpacing, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualOrigin = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualOrigin, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualDirection = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDirection, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualRegion = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualRegion, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetModifiableVirtualImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableVirtualImage, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.GetVirtualImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualImage, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualIndex, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualPoint, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22.IsInsideVirtualDomain = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_IsInsideVirtualDomain, None, itkObjectToObjectMetric22)
itkObjectToObjectMetric22_swigregister = _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_swigregister
itkObjectToObjectMetric22_swigregister(itkObjectToObjectMetric22)

def itkObjectToObjectMetric22_cast(obj: 'itkLightObject') -> "itkObjectToObjectMetric22 *":
    """itkObjectToObjectMetric22_cast(itkLightObject obj) -> itkObjectToObjectMetric22"""
    return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_cast(obj)

class itkObjectToObjectMetric33(itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    """


    Computes similarity between regions of two objects.

    This class is templated over the dimensionality of the two input
    objects. This is the abstract templated base class for a hierarchy of
    similarity metrics that may, in derived classes, operate on meshes,
    images, etc. This class computes a value that measures the similarity
    between the two objects.

    Derived classes must provide implementations for: GetValue
    GetDerivative GetValueAndDerivative
    SupportsArbitraryVirtualDomainSamples

    Similarity is evaluated using fixed and moving transforms. Both
    transforms are initialized to an IdentityTransform, and can be set by
    the user using SetFixedTranform() and SetMovingTransform().

    Virtual Domain

    This class uses a virtual reference space. This space defines the
    resolution at which the evaluation is performed, as well as the
    physical coordinate system. This is useful for unbiased registration.
    The virtual domain is stored in the m_VirtualDomain member, but this
    is subject to change so the convenience methods GetVirtualSpacing(),
    GetVirtualDirection() and GetVirtualOrigin() should be used whenever
    possible to retrieve virtual domain information. The region over which
    metric evaluation is performed is taken from the virtual image
    buffered region.

    The user can define a virtual domain by calling either
    SetVirtualDomain or SetVirtualDomainFromImage. See these methods for
    details. Derived classes may automatically assign a virtual domain if
    the user has not assigned one by initialization time.

    If the virtual domain is left undefined by the user and by derived
    classes, then unit or zero values are returned for
    GetVirtualSpacing(), GetVirtualDirection() and GetVirtualOrigin(), as
    appropriate. The virtual region is left undefined and an attempt to
    retrieve it via GetVirtualRegion() will generate an exception. The
    m_VirtualImage member will be nullptr.

    During evaluation, derived classes should verify that points are
    within the virtual domain and thus valid, as appropriate for the needs
    of the metric. When points are deemed invalid the number of valid
    points returned by GetNumberOfValidPoints() should reflect this.

    Transform Optimization This hierarchy currently assumes only the
    moving transform is 'active', i.e. only the moving transform is being
    optimized when used in an optimizer. Methods relevant to transform
    optimization such as GetNumberOfParameters(),
    UpdateTransformParameters() are passed on to the active transform. The
    eventual goal however is to allow for either moving, fixed or both
    transforms to be active within a single metric.

    C++ includes: itkObjectToObjectMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetFixedTransform(itkObjectToObjectMetric33 self, itkTransformD33 _arg)

        Connect the fixed
        transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetFixedTransform(self, _arg)


    def GetModifiableFixedTransform(self) -> "itkTransformD33 *":
        """GetModifiableFixedTransform(itkObjectToObjectMetric33 self) -> itkTransformD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableFixedTransform(self)


    def GetFixedTransform(self, *args) -> "itkTransformD33 *":
        """
        GetFixedTransform(itkObjectToObjectMetric33 self) -> itkTransformD33
        GetFixedTransform(itkObjectToObjectMetric33 self) -> itkTransformD33
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetFixedTransform(self, *args)


    def SetMovingTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetMovingTransform(itkObjectToObjectMetric33 self, itkTransformD33 _arg)

        Connect the
        moving transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetMovingTransform(self, _arg)


    def GetModifiableMovingTransform(self) -> "itkTransformD33 *":
        """GetModifiableMovingTransform(itkObjectToObjectMetric33 self) -> itkTransformD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableMovingTransform(self)


    def GetMovingTransform(self, *args) -> "itkTransformD33 *":
        """
        GetMovingTransform(itkObjectToObjectMetric33 self) -> itkTransformD33
        GetMovingTransform(itkObjectToObjectMetric33 self) -> itkTransformD33
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetMovingTransform(self, *args)


    def SetTransform(self, transform: 'itkTransformD33') -> "void":
        """
        SetTransform(itkObjectToObjectMetric33 self, itkTransformD33 transform)

        Connect the moving
        transform using a backwards-compatible name. This assigns the input
        transform to the moving transform. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetTransform(self, transform)


    def GetTransform(self) -> "itkTransformD33 const *":
        """
        GetTransform(itkObjectToObjectMetric33 self) -> itkTransformD33

        Get the moving
        transform using a backwards-compatible name 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetTransform(self)


    def GetNumberOfValidPoints(self) -> "unsigned long":
        """
        GetNumberOfValidPoints(itkObjectToObjectMetric33 self) -> unsigned long

        Get the
        number of valid points after a call to evaluate the metric. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetNumberOfValidPoints(self)


    def SetVirtualDomain(self, spacing: 'itkVectorD3', origin: 'itkPointD3', direction: 'itkMatrixD33', region: 'itkImageRegion3') -> "void":
        """
        SetVirtualDomain(itkObjectToObjectMetric33 self, itkVectorD3 spacing, itkPointD3 origin, itkMatrixD33 direction, itkImageRegion3 region)

        Define the virtual
        reference space. This space defines the resolution at which the
        registration is performed as well as the physical coordinate system.
        Useful for unbiased registration. This method will allocate
        m_VirtualImage with the passed information, with the pixel buffer left
        unallocated. Metric evaluation will be performed within the
        constraints of the virtual domain depending on implementation in
        derived classes. A default domain is created during initialization in
        derived classes according to their need.

        Parameters:
        -----------

        spacing:  spacing

        origin:  origin

        direction:  direction

        region:  region is used to set all image regions.

        See:   SetVirtualDomainFromImage 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomain(self, spacing, origin, direction, region)


    def SetVirtualDomainFromImage(self, virtualImage: 'itkImageD3') -> "void":
        """
        SetVirtualDomainFromImage(itkObjectToObjectMetric33 self, itkImageD3 virtualImage)

        Use a
        virtual domain image to define the virtual reference space. See:
        SetVirtualDomain 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomainFromImage(self, virtualImage)


    def SupportsArbitraryVirtualDomainSamples(self) -> "bool":
        """
        SupportsArbitraryVirtualDomainSamples(itkObjectToObjectMetric33 self) -> bool

        Returns a flag. True if arbitrary virtual domain points will point-
        set metrics return false because only some virtual domain points will
        correspond to points within the point sets. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SupportsArbitraryVirtualDomainSamples(self)


    def GetVirtualDomainTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetVirtualDomainTimeStamp(itkObjectToObjectMetric33 self) -> itkTimeStamp

        Return a
        timestamp relating to the virtual domain. This returns the greater of
        the metric timestamp and the virtual domain image timestamp. This
        allows us to capture if the virtual domain image is changed by the
        user after being assigned to the metric. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDomainTimeStamp(self)


    def GetVirtualSpacing(self) -> "itkVectorD3":
        """
        GetVirtualSpacing(itkObjectToObjectMetric33 self) -> itkVectorD3

        Accessors for the
        virtual domain spacing. Returns unit spacing if a virtual domain is
        undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualSpacing(self)


    def GetVirtualOrigin(self) -> "itkPointD3":
        """
        GetVirtualOrigin(itkObjectToObjectMetric33 self) -> itkPointD3

        Accessor for
        virtual domain origin. Returns zero origin if a virtual domain is
        undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualOrigin(self)


    def GetVirtualDirection(self) -> "itkMatrixD33":
        """
        GetVirtualDirection(itkObjectToObjectMetric33 self) -> itkMatrixD33

        Accessor for
        virtual domain direction. Returns unit direction if a virtual domain
        is undefined. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDirection(self)


    def GetVirtualRegion(self) -> "itkImageRegion3 const &":
        """
        GetVirtualRegion(itkObjectToObjectMetric33 self) -> itkImageRegion3

        Return the virtual
        domain region, which is retrieved from the m_VirtualImage buffered
        region. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualRegion(self)


    def GetModifiableVirtualImage(self) -> "itkImageD3 *":
        """GetModifiableVirtualImage(itkObjectToObjectMetric33 self) -> itkImageD3"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableVirtualImage(self)


    def GetVirtualImage(self, *args) -> "itkImageD3 *":
        """
        GetVirtualImage(itkObjectToObjectMetric33 self) -> itkImageD3
        GetVirtualImage(itkObjectToObjectMetric33 self) -> itkImageD3
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualImage(self, *args)


    def ComputeParameterOffsetFromVirtualIndex(self, index: 'itkIndex3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """
        ComputeParameterOffsetFromVirtualIndex(itkObjectToObjectMetric33 self, itkIndex3 index, unsigned int const & numberOfLocalParameters) -> long

        Computes an offset
        for accessing parameter data from a virtual domain index. Relevant for
        metrics with local-support transforms, to access parameter or
        derivative memory that is stored linearly in a 1D array. The result is
        the offset (1D array index) to the first of N parameters corresponding
        to the given virtual index, where N is the number of local parameters.

        Parameters:
        -----------

        index:  the virtual index to convert

        numberOfLocalParameters:  corresponding to the transform 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)


    def ComputeParameterOffsetFromVirtualPoint(self, point: 'itkPointD3', numberOfLocalParameters: 'unsigned int const &') -> "long":
        """
        ComputeParameterOffsetFromVirtualPoint(itkObjectToObjectMetric33 self, itkPointD3 point, unsigned int const & numberOfLocalParameters) -> long

        Computes an offset
        for accessing parameter data from a virtual domain point. Relevant for
        metrics with local-support transforms, to access parameter or
        derivative memory that is stored linearly in a 1D array. The result is
        the offset (1D array index) to the first of N parameters corresponding
        to the given virtual index, where N is the number of local parameters.

        Parameters:
        -----------

        point:  the virtual point to convert

        numberOfLocalParameters:  corresponding to the transform 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)


    def IsInsideVirtualDomain(self, *args) -> "bool":
        """
        IsInsideVirtualDomain(itkObjectToObjectMetric33 self, itkPointD3 point) -> bool
        IsInsideVirtualDomain(itkObjectToObjectMetric33 self, itkIndex3 index) -> bool

        Determine if
        a point is within the virtual domain. Returns true if the virtual
        domain has not been defined. This is implicitly defined by the point
        sets and transforms. 
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_IsInsideVirtualDomain(self, *args)

    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric33

    def cast(obj: 'itkLightObject') -> "itkObjectToObjectMetric33 *":
        """cast(itkLightObject obj) -> itkObjectToObjectMetric33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkObjectToObjectMetric33

        Create a new object of the class itkObjectToObjectMetric33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectToObjectMetric33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkObjectToObjectMetric33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObjectToObjectMetric33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObjectToObjectMetric33.SetFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetFixedTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetModifiableFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableFixedTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetFixedTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetFixedTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.SetMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetMovingTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetModifiableMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableMovingTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetMovingTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetMovingTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.SetTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetTransform = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetTransform, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetNumberOfValidPoints = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetNumberOfValidPoints, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.SetVirtualDomain = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomain, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.SetVirtualDomainFromImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomainFromImage, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.SupportsArbitraryVirtualDomainSamples = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SupportsArbitraryVirtualDomainSamples, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualDomainTimeStamp = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDomainTimeStamp, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualSpacing = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualSpacing, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualOrigin = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualOrigin, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualDirection = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDirection, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualRegion = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualRegion, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetModifiableVirtualImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableVirtualImage, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.GetVirtualImage = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualImage, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.ComputeParameterOffsetFromVirtualIndex = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualIndex, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.ComputeParameterOffsetFromVirtualPoint = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualPoint, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33.IsInsideVirtualDomain = new_instancemethod(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_IsInsideVirtualDomain, None, itkObjectToObjectMetric33)
itkObjectToObjectMetric33_swigregister = _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_swigregister
itkObjectToObjectMetric33_swigregister(itkObjectToObjectMetric33)

def itkObjectToObjectMetric33_cast(obj: 'itkLightObject') -> "itkObjectToObjectMetric33 *":
    """itkObjectToObjectMetric33_cast(itkLightObject obj) -> itkObjectToObjectMetric33"""
    return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_cast(obj)



