# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBruker2dseqImageIOPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBruker2dseqImageIOPython', [dirname(__file__)])
        except ImportError:
            import _itkBruker2dseqImageIOPython
            return _itkBruker2dseqImageIOPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBruker2dseqImageIOPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBruker2dseqImageIOPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBruker2dseqImageIOPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKIOImageBaseBasePython
import ITKCommonBasePython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython

def itkBruker2dseqImageIOFactory_New():
  return itkBruker2dseqImageIOFactory.New()


def itkBruker2dseqImageIO_New():
  return itkBruker2dseqImageIO.New()

class itkBruker2dseqImageIO(ITKIOImageBaseBasePython.itkImageIOBase):
    """


    Class that defines how to read Bruker file format.

    The following is a brief description of the Bruker file format.

    Within the directory representing a 'session' on the scanner, data is
    laid out thus:

    session/ 1/ <- Series/Acquisition number method <- An important header
    file acqp <- Another important header fid <- Raw data other
    unimportant files pdata/ 1/ <- Reconstruction number (may be multiple)
    2dseq <- Reconstructed data visu_pars <- Most important header reco <-
    Mostly duplicated in visu_pars procs <- Unimportant header id <-
    Unimportant header 2/ ...

    The minimum required data to read the image is the '2dseq' and
    'visu_pars' file. To use this reader, specify the 2dseq file as the
    filename. It will check for the existence of the visu_pars file. If
    both these exist, the file is opened. If the other header files exist
    (method, acqp, etc.) in the correct locations then they will be read
    and added to the meta-data dictionary, but they are not used to read
    the image data itself.

    This class supports reading only.

    This file reader has been updated for ParaVision 6 2dseq files. The
    original code was written by Don C. Bigler at Penn State in 2004. It
    has been significantly changed, as Bruker also changed the format for
    ParaVision 6. In particular a new header file, 'visu_pars' was
    introduced that means that multiple headers no longer need to be read
    in order to read the '2dseq' file. However, if the other Bruker
    headers are still present they are read and added to the meta-data in
    case users wish to extract data from them.

    The original implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/1381

    Tobias C Wood, King's College London 2017

    C++ includes: itkBruker2dseqImageIO.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBruker2dseqImageIO_Pointer":
        """__New_orig__() -> itkBruker2dseqImageIO_Pointer"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBruker2dseqImageIO_Pointer":
        """Clone(itkBruker2dseqImageIO self) -> itkBruker2dseqImageIO_Pointer"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO_Clone(self)

    __swig_destroy__ = _itkBruker2dseqImageIOPython.delete_itkBruker2dseqImageIO

    def cast(obj: 'itkLightObject') -> "itkBruker2dseqImageIO *":
        """cast(itkLightObject obj) -> itkBruker2dseqImageIO"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBruker2dseqImageIO

        Create a new object of the class itkBruker2dseqImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBruker2dseqImageIO.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBruker2dseqImageIO.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBruker2dseqImageIO.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBruker2dseqImageIO.Clone = new_instancemethod(_itkBruker2dseqImageIOPython.itkBruker2dseqImageIO_Clone, None, itkBruker2dseqImageIO)
itkBruker2dseqImageIO_swigregister = _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO_swigregister
itkBruker2dseqImageIO_swigregister(itkBruker2dseqImageIO)

def itkBruker2dseqImageIO___New_orig__() -> "itkBruker2dseqImageIO_Pointer":
    """itkBruker2dseqImageIO___New_orig__() -> itkBruker2dseqImageIO_Pointer"""
    return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO___New_orig__()

def itkBruker2dseqImageIO_cast(obj: 'itkLightObject') -> "itkBruker2dseqImageIO *":
    """itkBruker2dseqImageIO_cast(itkLightObject obj) -> itkBruker2dseqImageIO"""
    return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIO_cast(obj)

class itkBruker2dseqImageIOFactory(ITKCommonBasePython.itkObjectFactoryBase):
    """


    Create instances of Bruker2dseqImageIO objects using an object
    factory.

    Don C. Bigler The Pennsylvania State University 2005  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/1381

    C++ includes: itkBruker2dseqImageIOFactory.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBruker2dseqImageIOFactory_Pointer":
        """__New_orig__() -> itkBruker2dseqImageIOFactory_Pointer"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def RegisterOneFactory() -> "void":
        """RegisterOneFactory()"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory_RegisterOneFactory()

    RegisterOneFactory = staticmethod(RegisterOneFactory)
    __swig_destroy__ = _itkBruker2dseqImageIOPython.delete_itkBruker2dseqImageIOFactory

    def cast(obj: 'itkLightObject') -> "itkBruker2dseqImageIOFactory *":
        """cast(itkLightObject obj) -> itkBruker2dseqImageIOFactory"""
        return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBruker2dseqImageIOFactory

        Create a new object of the class itkBruker2dseqImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBruker2dseqImageIOFactory.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBruker2dseqImageIOFactory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBruker2dseqImageIOFactory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBruker2dseqImageIOFactory_swigregister = _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory_swigregister
itkBruker2dseqImageIOFactory_swigregister(itkBruker2dseqImageIOFactory)

def itkBruker2dseqImageIOFactory___New_orig__() -> "itkBruker2dseqImageIOFactory_Pointer":
    """itkBruker2dseqImageIOFactory___New_orig__() -> itkBruker2dseqImageIOFactory_Pointer"""
    return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory___New_orig__()

def itkBruker2dseqImageIOFactory_RegisterOneFactory() -> "void":
    """itkBruker2dseqImageIOFactory_RegisterOneFactory()"""
    return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory_RegisterOneFactory()

def itkBruker2dseqImageIOFactory_cast(obj: 'itkLightObject') -> "itkBruker2dseqImageIOFactory *":
    """itkBruker2dseqImageIOFactory_cast(itkLightObject obj) -> itkBruker2dseqImageIOFactory"""
    return _itkBruker2dseqImageIOPython.itkBruker2dseqImageIOFactory_cast(obj)



