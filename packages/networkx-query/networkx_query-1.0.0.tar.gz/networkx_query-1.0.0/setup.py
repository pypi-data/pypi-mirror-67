# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['networkx_query']

package_data = \
{'': ['*']}

install_requires = \
['networkx>=2.4,<3.0']

setup_kwargs = {
    'name': 'networkx-query',
    'version': '1.0.0',
    'description': 'NetworkX Query Tool',
    'long_description': '# networkx-query\n\n\n[![Unix Build Status](https://img.shields.io/travis/geronimo-iia/networkx-query/master.svg?label=unix)](https://travis-ci.com/geronimo-iia/networkx-query)[![Coverage Status](https://img.shields.io/coveralls/geronimo-iia/networkx-query/master.svg)](https://coveralls.io/r/geronimo-iia/networkx-query)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe669a02b4aa46b5b1faf619ba2bf382)](https://www.codacy.com/app/geronimo-iia/networkx-query?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=geronimo-iia/networkx-query&amp;utm_campaign=Badge_Grade)[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/geronimo-iia/networkx-query.svg)](https://scrutinizer-ci.com/g/geronimo-iia/networkx-query/?branch=master)\n[![PyPI Version](https://img.shields.io/pypi/v/networkx-query.svg)](https://pypi.org/project/networkx-query)\n[![PyPI License](https://img.shields.io/pypi/l/networkx-query.svg)](https://pypi.org/project/networkx-query)\n\nVersions following [Semantic Versioning](https://semver.org/)\n\n## Overview\n\nNetworkX Query Tool (preview)\n\nSee [documentation](https://geronimo-iia.github.io/networkx-query).\n\n\n## Installation\n\nInstall this library directly into an activated virtual environment:\n\n```text\n$ pip install networkx-query\n```\n\nor add it to your [Poetry](https://poetry.eustace.io/) project:\n\n```text\n$ poetry add networkx-query\n```\n\n## Usage\n\nSearching node:\n\n```python\nimport networkx as nx\nfrom networkx_query import search_nodes, search_edges\n\ng = nx.DiGraph()\ng.add_node(1, product="chocolate")\ng.add_node(2, product="milk")\ng.add_node(3, product="coat")\ng.add_edge(1, 2, action="shake")\ng.add_edge(3, 2, action="produce")\n\n\nfor node_id in search_nodes(g, {"==": [("product",), "chocolate"]}):\n    print(node_id)\n\n>> 1\n\nfor edge_id in search_edges(g, {"eq": [("action",), "produce"]}):\n    print(edge_id)\n\n>> (3, 2)\n```\n\nYou could do the same with edges using ```search_edges```.\n\n## API\n\n[search_edges](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_edges) and [search_nodes](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_nodes) are based on [prepare_query](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.prepare_query) which return an Evaluator.\n\nEvaluator are function with this signature: (context) -> bool\n\nContext is a dictionnary like structure (with in and [] methods, and support __contains__ or  (__iter__ and __getitem__))\n\n\n## Query language\n\nDefine a json query language like [json-query-language](https://github.com/clue/json-query-language/blob/master/SYNTAX.md) \nagainst nodes or edges attributes.\n\nA Path is a single string or a tuple of string which represente a path in a tree (here a dictionnary).\n\n\n### Expressions\n\nAll those expression are evaluate against a context wich is a dictionnary like (as can be a NodeDataView or an EdgeDataView).\n\nMain expression syntax turn around this:\n\n```\n{\n    operator_name : parameters\n}\n```\n\n### Basic matching expression\n\nTest if a node/edge has an attribute named "my_property":\n```\n{\n    "has" : "my_property"\n}\n```\n\n\nTest if a node/edge has an attribute product : { "definition": { "name": xxx }} with xxx equals to "chocolate".\n```\n{\n    "eq" : [ ("product", "definition", "name"), "chocolate"]\n}\n```\n\nWe support this operators:\n\n| Name     | Alias | Parameters      | Description                                                                                   |\n| -------- | :---: | --------------- | --------------------------------------------------------------------------------------------- |\n| has      |       | Path            | Check if path exists in context.                                                              |\n| contains |       | Path, str       | Check if an attribut (specifed with path) exists and contains specified value.                |\n| eq       | `==`  | Path, Any       | Check if an attribut (specifed with path) exists and equals specified value.                  |\n| neq      | `!=`  | Path, Any       | Check if an attribut (specifed with path) did not exists or not equals specified value.       |\n| gt       |  `<`  | Path, Any       | Check if an attribut (specifed with path) exists and greather that specified value.           |\n| lt       |  `<`  | Path, Any       | Check if an attribut (specifed with path) exists and lower that specified value.              |\n| gte      | `>=`  | Path, Any       | Check if an attribut (specifed with path) exists and greather or equals that specified value. |\n| lte      | `<=`  | Path, Any       | Check if an attribut (specifed with path) exists and lower or equals that specified value.    |\n| in       | `:=`  | Path, List[Any] | Check if an attribut (specifed with path) exists and attribut value in specified values.      |\n\n\n### Boolean composition of matching expression\n\nWe support this operators:\n\n| Name | Alias | Parameters    | Description           |\n| ---- | :---: | ------------- | --------------------- |\n| and  | `&&`  | list of query | Define And operator.  |\n| or   | \\|\\|  | list of query | Define Or operator.   |\n| xor  |       | list of query | Define xor operator.  |\n| nxor |       | list of query | Define nxor operator. |\n| not  |  `!`  | query         | Define Not operator.  |\n\n\nBy default, a list of expressions is equivalent of an "AND" of this expressions.\n\nExample:\n```\n{\n    \'not\': {\n        \'has\': [\'group\']\n    },\n    \'has\': \'application\',\n    \'eq\': [(\'_link\', \'other\', \'weight\'), 2]\n}\n```\nis equivalent to:\n\n```\n{\n    \'and\': [\n        {\n            \'not\': [\n                {\n                    \'has\': [\'group\']\n                }\n            ]\n        },\n        {\n            \'has\': [\'application\']\n        },\n        {\n            \'eq\': [(\'_link\', \'other\', \'weight\'), 2]\n        }\n    ]\n}\n```\n\n\n## Wished Features\n\n- add match node, edges, path specification\n- add set expression on node/edges with constraints\n- add path condition between node\n\n',
    'author': 'Jerome Guibert',
    'author_email': 'jguibert@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://pypi.org/project/networkx_query',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
