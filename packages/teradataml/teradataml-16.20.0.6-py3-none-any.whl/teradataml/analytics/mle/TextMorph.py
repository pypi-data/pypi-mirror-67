#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Mounika Kotha (mounika.kotha@teradata.com)
# 
# Version: 1.2
# Function Version: 1.5
# 
# ################################################################## 

import inspect
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display

class TextMorph:
    
    def __init__(self,
        data = None,
        word_column = None,
        postag_column = None,
        single_output = True,
        pos = None,
        accumulate = None,
        data_sequence_column = None,
        data_order_column = None):
        """
        DESCRIPTION:
            Lemmatization is a basic text analysis tool that determines the
            lemmas (standard forms) of words, so that all forms of a word can be
            grouped together, improving the accuracy of text analysis.

            The TextMorph function implements a lemmatization algorithm based
            on the WordNet 3.0 dictionary, which is packaged with the function.
            If an input word is in the dictionary, the function outputs its morphs
            with their parts of speech; otherwise, the function outputs the
            input word itself and sets its part of speech to None.

            When an input word has multiple morphs, the function outputs them
            by the order of precedence of their parts of speech: noun, verb,
            adj, and adv. That is, if an input word has a noun form, then it is
            listed first. If the same word has a verb form, then it is listed
            next, and so on.


        PARAMETERS:
            data:
                Required Argument.
                Specifies the input teradataml DataFrame that contains the
                input words/phrases.

            data_order_column:
                Optional Argument.
                Specifies Order By columns for data.
                Values to this argument can be provided as list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)

            word_column:
                Required Argument.
                Specifies the name of the input teradataml DataFrame column that
                contains the words.
                Types: str

            postag_column:
                Optional Argument.
                Specifies the name of the input teradataml DataFrame column that
                contains the part-of-speech (POS) tags of the words, generated by the
                function POSTagger.
                If you specify this argument, the function outputs each morph
                according to its POS tag.
                Types: str

            single_output:
                Optional Argument.
                Specifies whether to output only one morph for each word. If you
                specify False, the function outputs all morphs for each word.
                Default Value: True
                Types: bool

            pos:
                Optional Argument.
                Specifies the parts of speech to output. A pos can be "noun", "verb",
                "adj", or "adv". Specification order is irrelevant; the order of
                precedence is: "noun", "verb", "adj", "adv". By default, the function
                outputs all parts of speech. If you specify this argument and
                single_output is True, then the function outputs only the first pos.
                Note: The function does not determine the part of speech of the word
                      from its context, it uses all possible parts of speech for the word
                      in the dictionary.
                Permitted Values: noun, verb, adj, adv
                Types: str OR list of strs

            accumulate:
                Optional Argument.
                Specifies the names of the input columns to copy to the output
                teradataml DataFrame.
                Types: str OR list of Strings (str)

            data_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each
                row of the input argument "data". The argument is used to ensure
                deterministic results for functions which produce results that
                vary from run to run.
                Types: str OR list of Strings (str)

        RETURNS:
            Instance of TextMorph.
            Output teradataml DataFrames can be accessed using attribute
            references, such as TextMorphObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result


        RAISES:
            TeradataMlException


        EXAMPLES:
            # Load example data.
            load_example_data("textmorph", "words_input")
            load_example_data("postagger","paragraphs_input")

            # Create teradataml DataFrame objects.
            # The input table "words_input" contains different words to be
            # morphed by the function based on the parts-of-speech(pos).
            words_input = DataFrame.from_table("words_input")

            # Example 1 - This example outputs only one morph for each word as
            # "single_output" is set to True.
            TextMorph_out1 = TextMorph(data = words_input,
                                      word_column = "word",
                                      single_output = True,
                                      accumulate = ["id","word"]
                                      )

            # Print the result DataFrame
            print(TextMorph_out1)

            # Example 2 - This example outputs all morphs for each word as
            # "single_output" is set to False.
            TextMorph_out2 = TextMorph(data = words_input,
                                      word_column = "word",
                                      single_output = False,
                                      accumulate = ["id","word"]
                                      )

            # Print the result DataFrame
            print(TextMorph_out2)

            # Example 3 - With "single_output" set to False and "pos" set to
            # [noun,verb], the words better and father in the "data" appear in
            # the output teradataml DataFrame as both nouns and verbs.
            TextMorph_out3 = TextMorph(data = words_input,
                                      word_column = "word",
                                      single_output = False,
                                      pos = ["noun","verb"],
                                      accumulate = ["id","word"]
                                      )

            # Print the result DataFrame
            print(TextMorph_out3.result)

            # Example 4 - With "single_output" set to True, the words in "data" better
            # and father appear in the output table only as nouns.
            TextMorph_out4 = TextMorph(data = words_input,
                                      word_column = "word",
                                      single_output = True,
                                      pos = ["noun","verb"],
                                      accumulate = ["id","word"]
                                      )

            # Print the result DataFrame
            print(TextMorph_out4)

            # Create input teradataml dataframe.
            paragraphs_input = DataFrame.from_table("paragraphs_input")

            # Example 5 - This example uses the output of POSTagger as Input.
            pos_tagger_out = POSTagger(data=paragraphs_input,
                               text_column='paratext',
                               accumulate='paraid')

            TextMorph_out5 = TextMorph(data = pos_tagger_out.result,
                                      word_column = "word",
                                      postag_column = 'pos_tag',
                                      accumulate = ['word_sn', 'word', 'pos_tag']
                                      )

            # Print the result DataFrame
            print(TextMorph_out5)

        
        """
        self.data  = data 
        self.word_column  = word_column 
        self.postag_column  = postag_column
        self.single_output  = single_output 
        self.pos  = pos 
        self.accumulate  = accumulate 
        self.data_sequence_column  = data_sequence_column 
        self.data_order_column  = data_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["data", self.data, False, (DataFrame)])
        self.__arg_info_matrix.append(["data_order_column", self.data_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["word_column", self.word_column, False, (str)])
        self.__arg_info_matrix.append(["postag_column", self.postag_column, True, (str)])
        self.__arg_info_matrix.append(["single_output", self.single_output, True, (bool)])
        self.__arg_info_matrix.append(["pos", self.pos, True, (str,list)])
        self.__arg_info_matrix.append(["accumulate", self.accumulate, True, (str,list)])
        self.__arg_info_matrix.append(["data_sequence_column", self.data_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_manager':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.data, "data", None)
        
        # Check for permitted values
        pos_permitted_values = ["NOUN", "VERB", "ADJ", "ADV"]
        self.__awu._validate_permitted_values(self.pos, pos_permitted_values, "pos")
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.word_column, "word_column")
        self.__awu._validate_dataframe_has_argument_columns(self.word_column, "word_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.postag_column, "postag_column")
        self.__awu._validate_dataframe_has_argument_columns(self.postag_column, "postag_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.accumulate, "accumulate")
        self.__awu._validate_dataframe_has_argument_columns(self.accumulate, "accumulate", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.data_sequence_column, "data_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_sequence_column, "data_sequence_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.data_order_column, "data_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_order_column, "data_order_column", self.data, "data", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("WordColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.word_column,"\""),"'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.postag_column is not None:
            self.__func_other_arg_sql_names.append("POSTagColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.postag_column,"\""),"'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.accumulate is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.accumulate,"\""),"'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.single_output is not None and self.single_output != True:
            self.__func_other_arg_sql_names.append("SingleOutput")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.single_output,"'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.pos is not None:
            self.__func_other_arg_sql_names.append("POS")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.pos,"'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.data_sequence_column is not None:
            sequence_input_by_list.append("input:" + UtilFuncs._teradata_collapse_arglist(self.data_sequence_column,""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(sequence_input_by_list,"'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process data
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.data, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("input")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("ANY")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.data_order_column,"\""))
        
        function_name = "TextMorph"
        # Create instance to generate SQLMR.
        aqg_obj = AnalyticQueryGenerator(function_name 
                ,self.__func_input_arg_sql_names 
                ,self.__func_input_table_view_query 
                ,self.__func_input_dataframe_type 
                ,self.__func_input_distribution 
                ,self.__func_input_partition_by_cols 
                ,self.__func_input_order_by_cols 
                ,self.__func_other_arg_sql_names 
                ,self.__func_other_args 
                ,self.__func_other_arg_json_datatypes 
                ,self.__func_output_args_sql_names 
                ,self.__func_output_args 
                ,engine = "ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix = "td_sqlmr_out_", use_default_database = True, gc_on_quit = True, quote=False)
        try:
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    @classmethod
    def _from_model_manager(cls,
        result = None,
        **kwargs):
        """
        Classmethod which will be used by Model Manager, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a TextMorph class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
