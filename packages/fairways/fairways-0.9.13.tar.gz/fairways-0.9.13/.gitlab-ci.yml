# variables:
#     FWS_RUN_TEST_EXT: ''
#     TWINE_PASSWORD: SECURE
#     TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
#     ANACONDA_USERNAME: SECURE
#     ANACONDA_TOKEN: SECURE
#     DOCKER_PASSWORD: SECURE
#     DOCKER_USERNAME: SECURE

stages:
  - test
  - deploy
  - docs

# test:py35:
#   image: python:3.5-slim
#   stage: test
#   script:
#     - pip install -r requirements.txt
#     - python -m unittest

test:py36:
  image: python:3.6-slim
  stage: test
  script:
    - pip install -r requirements.txt
    - python -m unittest

test:py37:
  image: python:3.7-slim
  stage: test
  script:
    - pip install -r requirements.txt
    - python -m unittest


# test:py38:
#   image: python:3.8-slim
#   stage: test
#   script:
#     - pip install -r requirements.txt
#     - python -m unittest

# --repository-url https://test.pypi.org/legacy/

deploy_pypi_staging:
    image: python:3.6
    stage: deploy
    variables:
      TWINE_USERNAME: $STAGING_USERNAME
      TWINE_PASSWORD: $STAGING_PASSWORD
    script:
      - pip install -U twine setuptools wheel
      - python setup.py sdist bdist_wheel
      - twine upload --repository-url $STAGING_PYPI_REPOSITORY_URL dist/*
    except:
      - tags
  
# Details about package publishing: https://medium.com/@pypripackages/using-gitlab-pipelines-to-deploy-python-packages-in-production-and-staging-environments-8ab7dc979274
deploy_pypi_production:
  image: python:3.6
  stage: deploy
  variables:
    TWINE_USERNAME: $PRODUCTION_USERNAME
    TWINE_PASSWORD: $PRODUCTION_PASSWORD
  script:
    - pip install -U twine setuptools wheel
    - python setup.py sdist bdist_wheel
    - twine upload -r pypi dist/*
  only:
    - tags
    # - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)


# deploy_docker:
#   image: docker:git
#   stage: deploy
#   services:
#     - docker:dind
#   script:
#     - docker build -t python-package-template:$CI_COMMIT_TAG --build-arg VERSION=$CI_COMMIT_TAG .
#     # push to dockerhub
#     - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#     - docker tag python-package-template:$CI_COMMIT_TAG costrouc/python-package-template:$CI_COMMIT_TAG
#     - docker tag python-package-template:$CI_COMMIT_TAG costrouc/python-package-template:latest
#     - docker push costrouc/python-package-template:$CI_COMMIT_TAG
#     - docker push costrouc/python-package-template:latest
#     # push to gitlab registry
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#     - docker tag python-package-template:$CI_COMMIT_TAG registry.gitlab.com/costrouc/python-package-template:$CI_COMMIT_TAG
#     - docker tag python-package-template:$CI_COMMIT_TAG registry.gitlab.com/costrouc/python-package-template:latest
#     - docker push registry.gitlab.com/costrouc/python-package-template:$CI_COMMIT_TAG
#     - docker push registry.gitlab.com/costrouc/python-package-template:latest
#   only:
#     - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)

# pages:
#   image: python:3.6
#   stage: docs
#   script:
#     - pip install sphinx sphinx_rtd_theme
#     - pip install -e .
#     - mkdir public
#     - cd docs
#     - make apidocs
#     - make html
#     - cp -r _build/html/* ../public
#   artifacts:
#     paths:
#       - public
#   only:
#     - master
