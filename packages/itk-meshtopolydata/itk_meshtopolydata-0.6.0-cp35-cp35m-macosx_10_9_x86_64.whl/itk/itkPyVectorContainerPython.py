# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPyVectorContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPyVectorContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkPyVectorContainerPython
            return _itkPyVectorContainerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPyVectorContainerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPyVectorContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPyVectorContainerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkCovariantVectorPython
import itkPointPython
import itkContinuousIndexPython
import itkIndexPython


HAVE_NUMPY = True
try:
  import numpy
except ImportError:
  HAVE_NUMPY = False

def _get_numpy_pixelid(itk_Image_type):
    """Returns a ITK PixelID given a numpy array."""

    if not HAVE_NUMPY:
        raise ImportError('Numpy not available.')
# This is a Mapping from numpy array types to itk pixel types.
    _np_itk = {"UC":numpy.uint8,
               "US":numpy.uint16,
               "UI":numpy.uint32,
               "UL":numpy.uint64,
               "SC":numpy.int8,
               "SS":numpy.int16,
               "SI":numpy.int32,
               "SL":numpy.int64,
               "F":numpy.float32,
               "D":numpy.float64,
               "PF2":numpy.float32,
               "PF3":numpy.float32,
                }
    import os
    if os.name == 'nt':
        _np_itk['UL'] = numpy.uint32
        _np_itk['SL'] = numpy.int32
    try:
        return _np_itk[itk_Image_type]
    except KeyError as e:
        raise e

class itkPyVectorContainerD(object):
    """Proxy of C++ itkPyVectorContainerD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULD') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULD vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerD__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULD_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULD_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerD__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerD self) -> itkPyVectorContainerD
        __init__(itkPyVectorContainerD self, itkPyVectorContainerD arg0) -> itkPyVectorContainerD
        """
        _itkPyVectorContainerPython.itkPyVectorContainerD_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerD(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerD


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "D"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerD._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerD.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerD._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerD_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerD_swigregister
itkPyVectorContainerD_swigregister(itkPyVectorContainerD)

def itkPyVectorContainerD__array_view_from_vector_container(vector: 'itkVectorContainerULD') -> "PyObject *":
    """itkPyVectorContainerD__array_view_from_vector_container(itkVectorContainerULD vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerD__array_view_from_vector_container(vector)

def itkPyVectorContainerD__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULD_Pointer const":
    """itkPyVectorContainerD__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULD_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerD__vector_container_from_array(arr, shape)

class itkPyVectorContainerF(object):
    """Proxy of C++ itkPyVectorContainerF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULF') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULF vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerF__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULF_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULF_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerF__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerF self) -> itkPyVectorContainerF
        __init__(itkPyVectorContainerF self, itkPyVectorContainerF arg0) -> itkPyVectorContainerF
        """
        _itkPyVectorContainerPython.itkPyVectorContainerF_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerF(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerF


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "F"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerF._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerF.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerF._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerF_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerF_swigregister
itkPyVectorContainerF_swigregister(itkPyVectorContainerF)

def itkPyVectorContainerF__array_view_from_vector_container(vector: 'itkVectorContainerULF') -> "PyObject *":
    """itkPyVectorContainerF__array_view_from_vector_container(itkVectorContainerULF vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerF__array_view_from_vector_container(vector)

def itkPyVectorContainerF__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULF_Pointer const":
    """itkPyVectorContainerF__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULF_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerF__vector_container_from_array(arr, shape)

class itkPyVectorContainerPF2(object):
    """Proxy of C++ itkPyVectorContainerPF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULPF2') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULPF2 vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerPF2__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULPF2_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULPF2_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerPF2__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerPF2 self) -> itkPyVectorContainerPF2
        __init__(itkPyVectorContainerPF2 self, itkPyVectorContainerPF2 arg0) -> itkPyVectorContainerPF2
        """
        _itkPyVectorContainerPython.itkPyVectorContainerPF2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerPF2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerPF2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "PF2"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerPF2._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerPF2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerPF2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerPF2_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerPF2_swigregister
itkPyVectorContainerPF2_swigregister(itkPyVectorContainerPF2)

def itkPyVectorContainerPF2__array_view_from_vector_container(vector: 'itkVectorContainerULPF2') -> "PyObject *":
    """itkPyVectorContainerPF2__array_view_from_vector_container(itkVectorContainerULPF2 vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerPF2__array_view_from_vector_container(vector)

def itkPyVectorContainerPF2__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULPF2_Pointer const":
    """itkPyVectorContainerPF2__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULPF2_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerPF2__vector_container_from_array(arr, shape)

class itkPyVectorContainerPF3(object):
    """Proxy of C++ itkPyVectorContainerPF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULPF3') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULPF3 vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerPF3__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULPF3_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULPF3_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerPF3__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerPF3 self) -> itkPyVectorContainerPF3
        __init__(itkPyVectorContainerPF3 self, itkPyVectorContainerPF3 arg0) -> itkPyVectorContainerPF3
        """
        _itkPyVectorContainerPython.itkPyVectorContainerPF3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerPF3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerPF3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "PF3"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerPF3._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerPF3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerPF3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerPF3_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerPF3_swigregister
itkPyVectorContainerPF3_swigregister(itkPyVectorContainerPF3)

def itkPyVectorContainerPF3__array_view_from_vector_container(vector: 'itkVectorContainerULPF3') -> "PyObject *":
    """itkPyVectorContainerPF3__array_view_from_vector_container(itkVectorContainerULPF3 vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerPF3__array_view_from_vector_container(vector)

def itkPyVectorContainerPF3__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULPF3_Pointer const":
    """itkPyVectorContainerPF3__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULPF3_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerPF3__vector_container_from_array(arr, shape)

class itkPyVectorContainerSS(object):
    """Proxy of C++ itkPyVectorContainerSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULSS') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULSS vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerSS__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULSS_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULSS_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerSS__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerSS self) -> itkPyVectorContainerSS
        __init__(itkPyVectorContainerSS self, itkPyVectorContainerSS arg0) -> itkPyVectorContainerSS
        """
        _itkPyVectorContainerPython.itkPyVectorContainerSS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerSS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerSS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "SS"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerSS._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerSS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerSS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerSS_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerSS_swigregister
itkPyVectorContainerSS_swigregister(itkPyVectorContainerSS)

def itkPyVectorContainerSS__array_view_from_vector_container(vector: 'itkVectorContainerULSS') -> "PyObject *":
    """itkPyVectorContainerSS__array_view_from_vector_container(itkVectorContainerULSS vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerSS__array_view_from_vector_container(vector)

def itkPyVectorContainerSS__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULSS_Pointer const":
    """itkPyVectorContainerSS__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULSS_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerSS__vector_container_from_array(arr, shape)

class itkPyVectorContainerUC(object):
    """Proxy of C++ itkPyVectorContainerUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULUC') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULUC vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUC__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUC_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUC_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUC__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerUC self) -> itkPyVectorContainerUC
        __init__(itkPyVectorContainerUC self, itkPyVectorContainerUC arg0) -> itkPyVectorContainerUC
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "UC"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUC._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerUC_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerUC_swigregister
itkPyVectorContainerUC_swigregister(itkPyVectorContainerUC)

def itkPyVectorContainerUC__array_view_from_vector_container(vector: 'itkVectorContainerULUC') -> "PyObject *":
    """itkPyVectorContainerUC__array_view_from_vector_container(itkVectorContainerULUC vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUC__array_view_from_vector_container(vector)

def itkPyVectorContainerUC__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUC_Pointer const":
    """itkPyVectorContainerUC__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUC_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUC__vector_container_from_array(arr, shape)

class itkPyVectorContainerUI(object):
    """Proxy of C++ itkPyVectorContainerUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULUI') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULUI vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUI__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUI_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUI_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUI__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerUI self) -> itkPyVectorContainerUI
        __init__(itkPyVectorContainerUI self, itkPyVectorContainerUI arg0) -> itkPyVectorContainerUI
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "UI"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUI._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerUI_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerUI_swigregister
itkPyVectorContainerUI_swigregister(itkPyVectorContainerUI)

def itkPyVectorContainerUI__array_view_from_vector_container(vector: 'itkVectorContainerULUI') -> "PyObject *":
    """itkPyVectorContainerUI__array_view_from_vector_container(itkVectorContainerULUI vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUI__array_view_from_vector_container(vector)

def itkPyVectorContainerUI__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUI_Pointer const":
    """itkPyVectorContainerUI__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUI_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUI__vector_container_from_array(arr, shape)

class itkPyVectorContainerUS(object):
    """Proxy of C++ itkPyVectorContainerUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def _array_view_from_vector_container(vector: 'itkVectorContainerULUS') -> "PyObject *":
        """_array_view_from_vector_container(itkVectorContainerULUS vector) -> PyObject *"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUS__array_view_from_vector_container(vector)

    _array_view_from_vector_container = staticmethod(_array_view_from_vector_container)

    def _vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUS_Pointer const":
        """_vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUS_Pointer const"""
        return _itkPyVectorContainerPython.itkPyVectorContainerUS__vector_container_from_array(arr, shape)

    _vector_container_from_array = staticmethod(_vector_container_from_array)

    def __init__(self, *args):
        """
        __init__(itkPyVectorContainerUS self) -> itkPyVectorContainerUS
        __init__(itkPyVectorContainerUS self, itkPyVectorContainerUS arg0) -> itkPyVectorContainerUS
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "US"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUS._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)


itkPyVectorContainerUS_swigregister = _itkPyVectorContainerPython.itkPyVectorContainerUS_swigregister
itkPyVectorContainerUS_swigregister(itkPyVectorContainerUS)

def itkPyVectorContainerUS__array_view_from_vector_container(vector: 'itkVectorContainerULUS') -> "PyObject *":
    """itkPyVectorContainerUS__array_view_from_vector_container(itkVectorContainerULUS vector) -> PyObject *"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUS__array_view_from_vector_container(vector)

def itkPyVectorContainerUS__vector_container_from_array(arr: 'PyObject *', shape: 'PyObject *') -> "itkVectorContainerULUS_Pointer const":
    """itkPyVectorContainerUS__vector_container_from_array(PyObject * arr, PyObject * shape) -> itkVectorContainerULUS_Pointer const"""
    return _itkPyVectorContainerPython.itkPyVectorContainerUS__vector_container_from_array(arr, shape)



